type UserBadge {
    id: ID!
    name: String!
    verified: Boolean!
}

extend type User {
    badges: [UserBadge!]!
    primaryBadge: UserBadge
}

extend type Profile {
    primaryBadge: UserBadge
}

extend type Mutation {
    badgeCreate(name: String!): UserBadge!
    badgeCreateToRoom(roomId: ID!, name: String!): UserBadge!
    badgeSetToRoom(roomId: ID!, badgeId: ID!): UserBadge!
    badgeUnsetToRoom(roomId: ID!): UserBadge!
    badgeDelete(badgeId: ID!): Boolean!
    badgeSetPrimary(badgeId: ID!): UserBadge!
    badgeUnsetPrimary(badgeId: ID!): UserBadge!

    # super-admin methods
    superBadgeCreate(userId: ID!, name: String!): UserBadge!
    superBadgeCreateToRoom(roomId: ID!, userId: ID!, name: String!): UserBadge!
    superBadgeSetToRoom(roomId: ID!, badgeId: ID!, userId: ID!): UserBadge!
    superBadgeUnsetToRoom(roomId: ID!, badgeId: ID!, userId: ID!): Boolean!
    superBadgeDelete(badgeId: ID!, userId: ID!): Boolean!
    superBadgeVerify(badgeId: ID!, userId: ID!): UserBadge!
    superBadgeUnverify(badgeId: ID!, userId: ID!): UserBadge!
}