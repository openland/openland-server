type UserBadge {
    id: ID!
    name: String!
    verified: Boolean!
}

extend type User {
    # deprecated
    badges: [UserBadge!]!
    primaryBadge: UserBadge
}

extend type Profile {
    # deprecated
    primaryBadge: UserBadge
}

extend type Query {
    superBadgeInRoom(roomId: ID!, userId: ID!): UserBadge

    # deprecated
    badgeInRoom(roomId: ID!): UserBadge @disabled
}

extend type Mutation {
    superBadgeCreateToRoom(roomId: ID!, userId: ID!, name: String!): UserBadge!
    superBadgeUnsetToRoom(roomId: ID!, badgeId: ID!, userId: ID!): Boolean!

    # deprecated
    badgeCreate(name: String!): User! @disabled
    badgeCreateToRoom(roomId: ID!, name: String!): UserBadge! @disabled
    badgeSetToRoom(roomId: ID!, badgeId: ID!): UserBadge! @disabled
    badgeUnsetToRoom(roomId: ID!): Boolean! @disabled
    badgeDelete(badgeId: ID!): User! @disabled
    badgeSetPrimary(badgeId: ID!): User! @disabled
    badgeUnsetPrimary: User! @disabled
    superBadgeCreate(userId: ID!, name: String!): User! @disabled
    superBadgeSetToRoom(roomId: ID!, badgeId: ID!, userId: ID!): UserBadge! @disabled
    superBadgeDelete(badgeId: ID!, userId: ID!): User! @disabled
    superBadgeVerify(badgeId: ID!, userId: ID!): User! @disabled
    superBadgeUnverify(badgeId: ID!, userId: ID!): User! @disabled
}