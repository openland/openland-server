enum EmailFrequency {
    NEVER
    MIN_15
    HOUR_1
    HOUR_24
    WEEK_1
}

enum NotificationMessages {
    ALL
    DIRECT
    NONE
}

enum NotificationComments {
    ALL
    DIRECT
    NONE
}

enum CommentsNotificationDelivery {
    ALL
    NONE
}

enum NotificationsDelay {
    NONE
    MIN_1
    MIN_15
}

enum NotificationPreview {
    NAME_TEXT
    NAME
}

type ChatTypeNotificationSettings {
    showNotification: Boolean!
    sound: Boolean!
}

input ChatTypeNotificationSettingsInput {
    showNotification: Boolean!
    sound: Boolean!
}

type BadgeSettings {
    excludeMuted: Boolean!
    countUnreadChats: Boolean!
}

input BadgeSettingsInput {
    excludeMuted: Boolean!
    countUnreadChats: Boolean!
}

type PlatformNotificationSettings {
    direct: ChatTypeNotificationSettings!
    secretChat: ChatTypeNotificationSettings!
    organizationChat: ChatTypeNotificationSettings!
    communityChat: ChatTypeNotificationSettings!
    comments: ChatTypeNotificationSettings!
    notificationPreview: NotificationPreview!
    badge: BadgeSettings!
}


input PlatformNotificationSettingsInput {
    direct: ChatTypeNotificationSettingsInput
    secretChat: ChatTypeNotificationSettingsInput
    organizationChat: ChatTypeNotificationSettingsInput
    communityChat: ChatTypeNotificationSettingsInput
    comments: ChatTypeNotificationSettingsInput
    notificationPreview: NotificationPreview
    badge: BadgeSettingsInput
}

input UpdateSettingsInput {
    emailFrequency: EmailFrequency
    notificationsDelay: NotificationsDelay
    desktop: PlatformNotificationSettingsInput
    mobile: PlatformNotificationSettingsInput


    #obsolete
    desktopNotifications: NotificationMessages
    mobileNotifications: NotificationMessages
    commentNotifications: NotificationComments
    commentNotificationsDelivery: CommentsNotificationDelivery,
    mobileAlert: Boolean
    mobileIncludeText: Boolean
    mute: Boolean
    countUnreadChats: Boolean
    excludeMutedChats: Boolean
}

type Settings {
    id: ID!
    primaryEmail: String!
    emailFrequency: EmailFrequency!
    notificationsDelay: NotificationsDelay!
    desktop: PlatformNotificationSettings!
    mobile: PlatformNotificationSettings!

    # obsolete
    desktopNotifications: NotificationMessages!
    mobileNotifications: NotificationMessages!
    commentNotifications: NotificationComments!
    commentNotificationsDelivery: CommentsNotificationDelivery!
    mobileAlert: Boolean!
    mobileIncludeText: Boolean!
    mute: Boolean
    countUnreadChats: Boolean!
    excludeMutedChats: Boolean!
}

extend type Query {
    settings: Settings!
}

extend type Mutation {
    settingsUpdate(settings: UpdateSettingsInput): Settings!

    # Deprecated
    updateSettings(settings: UpdateSettingsInput): Settings!
}

extend type Subscription {
    settingsWatch: Settings!

    # Deprecated
    watchSettings: Settings!
}