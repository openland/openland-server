type OrganizationContact {
    name: String!
    photo: String
    photoRef: ImageRef
    position: String
    email: String
    phone: String
    link: String
    twitter: String
}

type Organization {
    id: ID!
    isMine: Boolean!
    isDeleted: Boolean!
    name: String!
    photo: String
    website: String
    websiteTitle: String
    about: String
    twitter: String
    facebook: String
    linkedin: String
    instagram: String
    location: String

    betaIsOwner: Boolean!
    betaIsAdmin: Boolean!
    betaIsPrimary: Boolean!

    ## Refactor?
    superAccountId: ID!
    alphaIsOwner: Boolean!
    alphaOrganizationMembers(first: Int, after: ID): [OrganizationJoinedMember!]!
    alphaOrganizationAdminMembers(first: Int, after: ID): [OrganizationJoinedMember!]!
    alphaOrganizationMemberRequests: [OrganizationRequestedMember!]!
    alphaFeatured: Boolean!
    alphaIsCommunity: Boolean!
    alphaIsPrivate: Boolean!

    betaPublicRooms: [SharedRoom!]!
    betaPublicRoomsCount: Int!
    status: String!
    membersCount: Int!
    personal: Boolean!
}

extend type Query {
    myOrganization: Organization
    myOrganizations: [Organization!]!
    organization(id: ID!): Organization!
    organizationPublicRooms(id: ID!, first: Int!, after: ID): SharedRoomConnection!
}

extend type Mutation {
    createOrganization(input: CreateOrganizationInput!): Organization!
}
