type OrganizationProfile {
    id: ID!
    name: String!
    photoRef: ImageRef

    website: String
    websiteTitle: String
    about: String
    twitter: String
    facebook: String
    linkedin: String
    contacts: [OrganizationContact!]!
    location: String

    alphaPublished: Boolean!
    alphaEditorial: Boolean!
    alphaFeatured: Boolean!
    alphaIsCommunity: Boolean!
}

input CreateOrganizationInput {
    id: ID
    name: String!
    website: String
    personal: Boolean!
    photoRef: ImageRefInput
    about: String
    isCommunity: Boolean
}

input UpdateOrganizationProfileInput {
    name: String
    photoRef: ImageRefInput

    website: String
    websiteTitle: String
    about: String
    twitter: String
    facebook: String
    linkedin: String
    location: String
    contacts: [ContactPersonInput!]

    alphaPublished: Boolean
    alphaEditorial: Boolean
    alphaFeatured: Boolean
}

input ContactPersonInput {
    name: String!
    photoRef: ImageRefInput
    position: String
    email: String
    phone: String
    link: String
    twitter: String
}

extend type Query {
    myOrganizationProfile: OrganizationProfile!
    organizationProfile(id: ID!): OrganizationProfile!
}
extend type Mutation {
    createOrganization(input: CreateOrganizationInput!): OrganizationProfile!
    updateOrganizationProfile(input: UpdateOrganizationProfileInput!, id: ID): OrganizationProfile!
    deleteOrganization(id: ID!): Boolean!
}