#
# Credit Cards
#

type CreditCard {
    id: ID!
    pmid: ID!
    brand: String!
    last4: String!
    expMonth: Int!
    expYear: Int!
    deleted: Boolean!
    isDefault: Boolean!
}

type CardSetupIntent {
    id: ID!
    clientSecret: String!
}

#
# Payment Intent (Stripe)
#

type PaymentIntent {
    id: ID!
    clientSecret: String!
}

#
# Payment Object
#

enum PaymentStatus {
    PENDING, CANCELED, FAILING, ACTION_REQUIRED, SUCCESS
}

type Payment {
    id: ID!
    status: PaymentStatus!
    intent: PaymentIntent
}

#
# Wallet
#

type WalletAccount {
    id: ID!
    balance: Int!
    state: String!
}

#
# Wallet Transactions
#

type WalletTransaction {
    id: ID!
    date: String!
    status: WalletTransactionStatus!
    operation: WalletTransactionOperation!
}

enum WalletTransactionStatus {
    PENDING, CANCELING, CANCELED, SUCCESS
}

type WalletTransactionDeposit {
    amount: Int!
    payment: Payment
}

type WalletTransactionSubscription {
    amount: Int!
    payment: Payment
}

type WalletTransactionTransferOut {
    walletAmount: Int!
    chargeAmount: Int!
    payment: Payment
    toUser: User!
}

type WalletTransactionTransferIn {
    amount: Int!
    fromUser: User!
}

union WalletTransactionOperation = WalletTransactionDeposit | WalletTransactionSubscription | WalletTransactionTransferOut | WalletTransactionTransferIn

type WalletTransactionConnection {
    items: [WalletTransaction!]!
    cursor: String
}

#
# Wallet Subscriptions
#

type WalletSubscription {
    id: ID!
    state: WalletSubscriptionState!
    amount: Int!
    interval: WalletSubscriptionInterval!
    product: WalletSubscriptionProduct!
    expires: Date!
}

enum WalletSubscriptionState {
    STARTED, GRACE_PERIOD, RETRYING, CANCELED, EXPIRED
}

enum WalletSubscriptionInterval {
    MONTH, WEEK
}

type WalletSubscriptionProductGroup {
    group: SharedRoom!
}

type WalletSubscriptionProductDonation {
    user: User!
}

union WalletSubscriptionProduct = WalletSubscriptionProductGroup | WalletSubscriptionProductDonation

#
# Wallet Purchases
#

enum PurchaseState {
    PENDING, COMPLETED, CANCELED
}

type Purchase {
    id: ID!
    state: PurchaseState!
    intent: PaymentIntent
}

#
# Wallet Updates
#

type WalletUpdateSingle {
    state: String!
    update: WalletUpdate!
}

type WalletUpdateBatch {
    state: String!
    updates: [WalletUpdate!]!
}

union WalletUpdateContainer = WalletUpdateSingle | WalletUpdateBatch

type WalletUpdateBalance {
    amount: Int!
}

type WalletUpdateTransactionSuccess {
    transaction: WalletTransaction!
}

type WalletUpdateTransactionCanceled {
    transaction: WalletTransaction!
}

type WalletUpdateTransactionPending {
    transaction: WalletTransaction!
}

type WalletUpdatePaymentStatus {
    payment: Payment!
}

union WalletUpdate = WalletUpdateBalance | WalletUpdateTransactionSuccess | WalletUpdateTransactionCanceled | WalletUpdateTransactionPending | WalletUpdatePaymentStatus

#
# Operations
#

extend type Query {
    myCards: [CreditCard!]!
    myWallet: WalletAccount!
    
    transactionsPending: [WalletTransaction!]!
    transactionsHistory(first: Int!, after: String): WalletTransactionConnection!

    subscriptions: [WalletSubscription!]!
}

extend type Mutation {
    
    #
    # Payment Method management
    #
    cardCreateSetupIntent(retryKey: String!): CardSetupIntent!
    cardCommitSetupIntent(id: ID!, pmid: ID!): CreditCard!
    cardRemove(id: ID!): CreditCard!
    cardMakeDefault(id: ID!): CreditCard!

    #
    # Deposits
    #

    cardDepositEnqueue(amount: Int!, retryKey: String!): Boolean!
    cardDepositIntent(id: ID!, amount: Int!, retryKey: String!): PaymentIntent!

    #
    # Payment Intent Commit
    #

    paymentIntentCommit(id: ID!): Boolean!
    paymentCancel(id: ID!): Boolean!

    #
    # Donate
    #
    
    donateToUser(amount: Int!, id: ID!): Boolean!
    donateToUser2(amount: Int!, id: ID!): Purchase!

    #
    # Subscriptions
    #

    subscriptionCancel(id: ID!): WalletSubscription!
}

extend type Subscription {
    walletUpdates(fromState: String!): WalletUpdateContainer!
}