union GlobalSearchEntry = Organization | User | SharedRoom

enum GlobalSearchEntryKind {
    ORGANIZATION
    USER
    SHAREDROOM
}

type MessageWithChat {
    message: ModernMessage!
    chat: Room!
}

type MessageEdge {
    node: MessageWithChat!
    cursor: String!
}

type MessageConnection {
    edges: [MessageEdge!]!
    pageInfo: PageInfo!
}

type GlobalSearchConnection {
    globalItems: [GlobalSearchEntry!]!
    localItems: [User!]!
    cursor: String
}

type MentionSearchUser {
    user: User!
    fromSameChat: Boolean!
}

type MentionSearchOrganization {
    organization: Organization!
}

type MentionSearchSharedRoom {
    room: SharedRoom!
}

union MentionSearchEntry = MentionSearchUser | MentionSearchSharedRoom | MentionSearchOrganization

type MentionSearchConnection {
    items: [MentionSearchEntry!]!
    cursor: String
}

extend type Query {
    alphaGlobalSearch(query: String!, kinds: [GlobalSearchEntryKind!]): [GlobalSearchEntry!]!
    featuredGroups: [SharedRoom!]
    featuredCommunities: [Organization!]

    messagesSearch(query: String!, sort: String, first: Int!, after: String): MessageConnection!
    chatMembersSearch(cid: ID!, query: String, first: Int!, after: String, page: Int): RoomMemberConnection!
    chatMentionSearch(cid: ID!, query: String, first: Int!, after: String): GlobalSearchConnection!
    orgMembersSearch(orgId: ID!, query: String, first: Int!, after: String, page: Int): JoinedOrganizationMembersConnection!
    betaChatMentionSearch(cid: ID!, query: String, first: Int!, after: String): MentionSearchConnection!
}