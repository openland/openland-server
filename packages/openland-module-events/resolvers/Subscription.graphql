#
# Subscription
#

type UpdateSubscriptionStarted {
    seq: Int!
    state: String!
}

type UpdateSubscriptionCheckpoint {
    seq: Int!
    state: String!
}

type UpdateSubscriptionEvent {
    seq: Int!
    pts: Int!
    event: UpdateEvent!
    sequence: Sequence!
}

union UpdateSubscription = UpdateSubscriptionStarted | UpdateSubscriptionCheckpoint | UpdateSubscriptionEvent

extend type Subscription {
    watchUpdates: UpdateSubscription!
}

#
# State
#

type UpdatesSequenceState {
    sequence: Sequence!
    pts: Int!
}

type UpdatesState {
    seq: Int!
    state: String!
    sequences: [UpdatesSequenceState!]!
}

extend type Query {
    updatesState: UpdatesState!
}

#
# Difference 
#

type UpdatesSequenceDifference {
    sequence: Sequence!
    pts: Int!
    events: [UpdateEvent!]!
}

type UpdatesDifference {
    seq: Int!
    state: String!
    sequences: [UpdatesSequenceDifference!]!
}

extend type Query {
    updatesDifference(state: String!): UpdatesDifference!
}