// THIS FILE IS AUTOGENERATED! DO NOT TRY TO EDIT!
import { Codec, codecs } from './codecs';

export const KnownCodecs = new Map<string, Codec<any>>();
export type KnownTypes = MessageShape | MessagesContainerShape | AckMessagesShape | MessagesInfoRequestShape | ResendMessageAnswerRequestShape | MessageNotFoundResponseShape | MessageIsProcessingResponseShape | InitializeShape | InitializeAckShape | InvalidMessageShape | PingShape | PongShape | GQLRequestShape | GQLResponseShape | GQLSubscriptionShape | GQLSubscriptionStopShape | GQLSubscriptionResponseShape | GQLSubscriptionCompleteShape;

export type MessageInputShape = {
    id: string
    body: KnownTypes
    ackMessages: string[] | null
};
export type MessageShape = MessageInputShape & { _type: 'Message' };
export const MessageCodec = codecs.struct('Message', {
    id: codecs.string,
    body: codecs.anyStruct(KnownCodecs),
    ackMessages: codecs.optional(codecs.array(codecs.string)),
});
KnownCodecs.set('Message', MessageCodec);
export const makeMessage = (src: MessageInputShape) => ({ _type: 'Message', ...src }) as MessageShape;
export const encodeMessage = (src: MessageShape) => MessageCodec.encode(src);
export const decodeMessage = (src: any) => MessageCodec.decode(src) as MessageShape;
export function isMessage(src: any): src is MessageShape { return src._type === 'Message'; }
export type MessagesContainerInputShape = {
    messages: KnownTypes[]
};
export type MessagesContainerShape = MessagesContainerInputShape & { _type: 'MessagesContainer' };
export const MessagesContainerCodec = codecs.struct('MessagesContainer', {
    messages: codecs.array(codecs.anyStruct(KnownCodecs)),
});
KnownCodecs.set('MessagesContainer', MessagesContainerCodec);
export const makeMessagesContainer = (src: MessagesContainerInputShape) => ({ _type: 'MessagesContainer', ...src }) as MessagesContainerShape;
export const encodeMessagesContainer = (src: MessagesContainerShape) => MessagesContainerCodec.encode(src);
export const decodeMessagesContainer = (src: any) => MessagesContainerCodec.decode(src) as MessagesContainerShape;
export function isMessagesContainer(src: any): src is MessagesContainerShape { return src._type === 'MessagesContainer'; }
export type AckMessagesInputShape = {
    ids: string[]
};
export type AckMessagesShape = AckMessagesInputShape & { _type: 'AckMessages' };
export const AckMessagesCodec = codecs.struct('AckMessages', {
    ids: codecs.array(codecs.string),
});
KnownCodecs.set('AckMessages', AckMessagesCodec);
export const makeAckMessages = (src: AckMessagesInputShape) => ({ _type: 'AckMessages', ...src }) as AckMessagesShape;
export const encodeAckMessages = (src: AckMessagesShape) => AckMessagesCodec.encode(src);
export const decodeAckMessages = (src: any) => AckMessagesCodec.decode(src) as AckMessagesShape;
export function isAckMessages(src: any): src is AckMessagesShape { return src._type === 'AckMessages'; }
export type MessagesInfoRequestInputShape = {
    messageIds: string[]
};
export type MessagesInfoRequestShape = MessagesInfoRequestInputShape & { _type: 'MessagesInfoRequest' };
export const MessagesInfoRequestCodec = codecs.struct('MessagesInfoRequest', {
    messageIds: codecs.array(codecs.string),
});
KnownCodecs.set('MessagesInfoRequest', MessagesInfoRequestCodec);
export const makeMessagesInfoRequest = (src: MessagesInfoRequestInputShape) => ({ _type: 'MessagesInfoRequest', ...src }) as MessagesInfoRequestShape;
export const encodeMessagesInfoRequest = (src: MessagesInfoRequestShape) => MessagesInfoRequestCodec.encode(src);
export const decodeMessagesInfoRequest = (src: any) => MessagesInfoRequestCodec.decode(src) as MessagesInfoRequestShape;
export function isMessagesInfoRequest(src: any): src is MessagesInfoRequestShape { return src._type === 'MessagesInfoRequest'; }
export type ResendMessageAnswerRequestInputShape = {
    messageId: string
};
export type ResendMessageAnswerRequestShape = ResendMessageAnswerRequestInputShape & { _type: 'ResendMessageAnswerRequest' };
export const ResendMessageAnswerRequestCodec = codecs.struct('ResendMessageAnswerRequest', {
    messageId: codecs.string,
});
KnownCodecs.set('ResendMessageAnswerRequest', ResendMessageAnswerRequestCodec);
export const makeResendMessageAnswerRequest = (src: ResendMessageAnswerRequestInputShape) => ({ _type: 'ResendMessageAnswerRequest', ...src }) as ResendMessageAnswerRequestShape;
export const encodeResendMessageAnswerRequest = (src: ResendMessageAnswerRequestShape) => ResendMessageAnswerRequestCodec.encode(src);
export const decodeResendMessageAnswerRequest = (src: any) => ResendMessageAnswerRequestCodec.decode(src) as ResendMessageAnswerRequestShape;
export function isResendMessageAnswerRequest(src: any): src is ResendMessageAnswerRequestShape { return src._type === 'ResendMessageAnswerRequest'; }
export type MessageNotFoundResponseInputShape = {
    messageId: string
};
export type MessageNotFoundResponseShape = MessageNotFoundResponseInputShape & { _type: 'MessageNotFoundResponse' };
export const MessageNotFoundResponseCodec = codecs.struct('MessageNotFoundResponse', {
    messageId: codecs.string,
});
KnownCodecs.set('MessageNotFoundResponse', MessageNotFoundResponseCodec);
export const makeMessageNotFoundResponse = (src: MessageNotFoundResponseInputShape) => ({ _type: 'MessageNotFoundResponse', ...src }) as MessageNotFoundResponseShape;
export const encodeMessageNotFoundResponse = (src: MessageNotFoundResponseShape) => MessageNotFoundResponseCodec.encode(src);
export const decodeMessageNotFoundResponse = (src: any) => MessageNotFoundResponseCodec.decode(src) as MessageNotFoundResponseShape;
export function isMessageNotFoundResponse(src: any): src is MessageNotFoundResponseShape { return src._type === 'MessageNotFoundResponse'; }
export type MessageIsProcessingResponseInputShape = {
    messageId: string
};
export type MessageIsProcessingResponseShape = MessageIsProcessingResponseInputShape & { _type: 'MessageIsProcessingResponse' };
export const MessageIsProcessingResponseCodec = codecs.struct('MessageIsProcessingResponse', {
    messageId: codecs.string,
});
KnownCodecs.set('MessageIsProcessingResponse', MessageIsProcessingResponseCodec);
export const makeMessageIsProcessingResponse = (src: MessageIsProcessingResponseInputShape) => ({ _type: 'MessageIsProcessingResponse', ...src }) as MessageIsProcessingResponseShape;
export const encodeMessageIsProcessingResponse = (src: MessageIsProcessingResponseShape) => MessageIsProcessingResponseCodec.encode(src);
export const decodeMessageIsProcessingResponse = (src: any) => MessageIsProcessingResponseCodec.decode(src) as MessageIsProcessingResponseShape;
export function isMessageIsProcessingResponse(src: any): src is MessageIsProcessingResponseShape { return src._type === 'MessageIsProcessingResponse'; }
export type InitializeInputShape = {
    authToken: string
    sessionId: string | null
};
export type InitializeShape = InitializeInputShape & { _type: 'Initialize' };
export const InitializeCodec = codecs.struct('Initialize', {
    authToken: codecs.string,
    sessionId: codecs.optional(codecs.string),
});
KnownCodecs.set('Initialize', InitializeCodec);
export const makeInitialize = (src: InitializeInputShape) => ({ _type: 'Initialize', ...src }) as InitializeShape;
export const encodeInitialize = (src: InitializeShape) => InitializeCodec.encode(src);
export const decodeInitialize = (src: any) => InitializeCodec.decode(src) as InitializeShape;
export function isInitialize(src: any): src is InitializeShape { return src._type === 'Initialize'; }
export type InitializeAckInputShape = {
    sessionId: string
};
export type InitializeAckShape = InitializeAckInputShape & { _type: 'InitializeAck' };
export const InitializeAckCodec = codecs.struct('InitializeAck', {
    sessionId: codecs.string,
});
KnownCodecs.set('InitializeAck', InitializeAckCodec);
export const makeInitializeAck = (src: InitializeAckInputShape) => ({ _type: 'InitializeAck', ...src }) as InitializeAckShape;
export const encodeInitializeAck = (src: InitializeAckShape) => InitializeAckCodec.encode(src);
export const decodeInitializeAck = (src: any) => InitializeAckCodec.decode(src) as InitializeAckShape;
export function isInitializeAck(src: any): src is InitializeAckShape { return src._type === 'InitializeAck'; }
export type InvalidMessageInputShape = {
};
export type InvalidMessageShape = InvalidMessageInputShape & { _type: 'InvalidMessage' };
export const InvalidMessageCodec = codecs.struct('InvalidMessage', {
});
KnownCodecs.set('InvalidMessage', InvalidMessageCodec);
export const makeInvalidMessage = (src: InvalidMessageInputShape) => ({ _type: 'InvalidMessage', ...src }) as InvalidMessageShape;
export const encodeInvalidMessage = (src: InvalidMessageShape) => InvalidMessageCodec.encode(src);
export const decodeInvalidMessage = (src: any) => InvalidMessageCodec.decode(src) as InvalidMessageShape;
export function isInvalidMessage(src: any): src is InvalidMessageShape { return src._type === 'InvalidMessage'; }
export type PingInputShape = {
    id: number
};
export type PingShape = PingInputShape & { _type: 'Ping' };
export const PingCodec = codecs.struct('Ping', {
    id: codecs.integer,
});
KnownCodecs.set('Ping', PingCodec);
export const makePing = (src: PingInputShape) => ({ _type: 'Ping', ...src }) as PingShape;
export const encodePing = (src: PingShape) => PingCodec.encode(src);
export const decodePing = (src: any) => PingCodec.decode(src) as PingShape;
export function isPing(src: any): src is PingShape { return src._type === 'Ping'; }
export type PongInputShape = {
    id: number
};
export type PongShape = PongInputShape & { _type: 'Pong' };
export const PongCodec = codecs.struct('Pong', {
    id: codecs.integer,
});
KnownCodecs.set('Pong', PongCodec);
export const makePong = (src: PongInputShape) => ({ _type: 'Pong', ...src }) as PongShape;
export const encodePong = (src: PongShape) => PongCodec.encode(src);
export const decodePong = (src: any) => PongCodec.decode(src) as PongShape;
export function isPong(src: any): src is PongShape { return src._type === 'Pong'; }
export type GQLRequestInputShape = {
    id: string
    operationName: string | null
    query: string
    variables: string | null
};
export type GQLRequestShape = GQLRequestInputShape & { _type: 'GQLRequest' };
export const GQLRequestCodec = codecs.struct('GQLRequest', {
    id: codecs.string,
    operationName: codecs.optional(codecs.string),
    query: codecs.string,
    variables: codecs.optional(codecs.string),
});
KnownCodecs.set('GQLRequest', GQLRequestCodec);
export const makeGQLRequest = (src: GQLRequestInputShape) => ({ _type: 'GQLRequest', ...src }) as GQLRequestShape;
export const encodeGQLRequest = (src: GQLRequestShape) => GQLRequestCodec.encode(src);
export const decodeGQLRequest = (src: any) => GQLRequestCodec.decode(src) as GQLRequestShape;
export function isGQLRequest(src: any): src is GQLRequestShape { return src._type === 'GQLRequest'; }
export type GQLResponseInputShape = {
    id: string
    result: any
};
export type GQLResponseShape = GQLResponseInputShape & { _type: 'GQLResponse' };
export const GQLResponseCodec = codecs.struct('GQLResponse', {
    id: codecs.string,
    result: codecs.any,
});
KnownCodecs.set('GQLResponse', GQLResponseCodec);
export const makeGQLResponse = (src: GQLResponseInputShape) => ({ _type: 'GQLResponse', ...src }) as GQLResponseShape;
export const encodeGQLResponse = (src: GQLResponseShape) => GQLResponseCodec.encode(src);
export const decodeGQLResponse = (src: any) => GQLResponseCodec.decode(src) as GQLResponseShape;
export function isGQLResponse(src: any): src is GQLResponseShape { return src._type === 'GQLResponse'; }
export type GQLSubscriptionInputShape = {
    id: string
    operationName: string | null
    query: string
    variables: string | null
};
export type GQLSubscriptionShape = GQLSubscriptionInputShape & { _type: 'GQLSubscription' };
export const GQLSubscriptionCodec = codecs.struct('GQLSubscription', {
    id: codecs.string,
    operationName: codecs.optional(codecs.string),
    query: codecs.string,
    variables: codecs.optional(codecs.string),
});
KnownCodecs.set('GQLSubscription', GQLSubscriptionCodec);
export const makeGQLSubscription = (src: GQLSubscriptionInputShape) => ({ _type: 'GQLSubscription', ...src }) as GQLSubscriptionShape;
export const encodeGQLSubscription = (src: GQLSubscriptionShape) => GQLSubscriptionCodec.encode(src);
export const decodeGQLSubscription = (src: any) => GQLSubscriptionCodec.decode(src) as GQLSubscriptionShape;
export function isGQLSubscription(src: any): src is GQLSubscriptionShape { return src._type === 'GQLSubscription'; }
export type GQLSubscriptionStopInputShape = {
    id: string
};
export type GQLSubscriptionStopShape = GQLSubscriptionStopInputShape & { _type: 'GQLSubscriptionStop' };
export const GQLSubscriptionStopCodec = codecs.struct('GQLSubscriptionStop', {
    id: codecs.string,
});
KnownCodecs.set('GQLSubscriptionStop', GQLSubscriptionStopCodec);
export const makeGQLSubscriptionStop = (src: GQLSubscriptionStopInputShape) => ({ _type: 'GQLSubscriptionStop', ...src }) as GQLSubscriptionStopShape;
export const encodeGQLSubscriptionStop = (src: GQLSubscriptionStopShape) => GQLSubscriptionStopCodec.encode(src);
export const decodeGQLSubscriptionStop = (src: any) => GQLSubscriptionStopCodec.decode(src) as GQLSubscriptionStopShape;
export function isGQLSubscriptionStop(src: any): src is GQLSubscriptionStopShape { return src._type === 'GQLSubscriptionStop'; }
export type GQLSubscriptionResponseInputShape = {
    id: string
    result: any
};
export type GQLSubscriptionResponseShape = GQLSubscriptionResponseInputShape & { _type: 'GQLSubscriptionResponse' };
export const GQLSubscriptionResponseCodec = codecs.struct('GQLSubscriptionResponse', {
    id: codecs.string,
    result: codecs.any,
});
KnownCodecs.set('GQLSubscriptionResponse', GQLSubscriptionResponseCodec);
export const makeGQLSubscriptionResponse = (src: GQLSubscriptionResponseInputShape) => ({ _type: 'GQLSubscriptionResponse', ...src }) as GQLSubscriptionResponseShape;
export const encodeGQLSubscriptionResponse = (src: GQLSubscriptionResponseShape) => GQLSubscriptionResponseCodec.encode(src);
export const decodeGQLSubscriptionResponse = (src: any) => GQLSubscriptionResponseCodec.decode(src) as GQLSubscriptionResponseShape;
export function isGQLSubscriptionResponse(src: any): src is GQLSubscriptionResponseShape { return src._type === 'GQLSubscriptionResponse'; }
export type GQLSubscriptionCompleteInputShape = {
    id: string
};
export type GQLSubscriptionCompleteShape = GQLSubscriptionCompleteInputShape & { _type: 'GQLSubscriptionComplete' };
export const GQLSubscriptionCompleteCodec = codecs.struct('GQLSubscriptionComplete', {
    id: codecs.string,
});
KnownCodecs.set('GQLSubscriptionComplete', GQLSubscriptionCompleteCodec);
export const makeGQLSubscriptionComplete = (src: GQLSubscriptionCompleteInputShape) => ({ _type: 'GQLSubscriptionComplete', ...src }) as GQLSubscriptionCompleteShape;
export const encodeGQLSubscriptionComplete = (src: GQLSubscriptionCompleteShape) => GQLSubscriptionCompleteCodec.encode(src);
export const decodeGQLSubscriptionComplete = (src: any) => GQLSubscriptionCompleteCodec.decode(src) as GQLSubscriptionCompleteShape;
export function isGQLSubscriptionComplete(src: any): src is GQLSubscriptionCompleteShape { return src._type === 'GQLSubscriptionComplete'; }
