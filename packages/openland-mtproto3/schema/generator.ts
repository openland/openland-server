import {
    AnyStructType,
    BooleanType,
    FloatType,
    IntegerType,
    StructType,
    Type,
    TypeSchema,
    StringType,
    OptionalType, ArrayType
} from './vschema';

class StringBuilder {

    private res = '';
    private _indent = 0;

    addIndent() {
        this._indent++;
    }

    removeIndent() {
        this._indent--;
    }

    append(text?: string) {
        if (text) {
            this.res += ' '.repeat(this._indent * 4) + text + '\n';
        } else {
            this.res += '\n';
        }
    }

    build() {
        return this.res;
    }
}

export function generateSchema(schema: TypeSchema) {
    let code = new StringBuilder();
    code.append('// THIS FILE IS AUTOGENERATED! DO NOT TRY TO EDIT!');
    code.append('import { Codec, codecs } from \'./codecs\';\n');

    code.append('export const KnownCodecs = new Map<string, Codec<any>>();');

    code.append(`export type KnownTypes = ${schema.models.map(m => m.name + 'Shape').join(' | ')};\n`);

    for (let model of schema.models) {
        code.append(`export type ${model.name}InputShape = {`);
        // code.addIndent();
        // code.append(`_type: '${model.name}'`);
        // code.removeIndent();
        for (let field of model.fields) {
            code.addIndent();
            code.append(`${field.name}: ${genType(field.type)}`);
            code.removeIndent();
        }
        code.append('};');
        code.append(`export type ${model.name}Shape = ${model.name}InputShape & { _type: '${model.name}' };`);
        code.append(`export const ${model.name}Codec = codecs.struct('${model.name}', {`);
        for (let field of model.fields) {
            code.addIndent();
            code.append(`${field.name}: ${genCodecType(field.type)},`);
            code.removeIndent();
        }
        code.append('});');
        code.append(`KnownCodecs.set('${model.name}', ${model.name}Codec);`);

        code.append(`export const make${model.name} = (src: ${model.name}InputShape) => ({ _type: '${model.name}', ...src }) as ${model.name}Shape;`);
        code.append(`export const encode${model.name} = (src: ${model.name}Shape) => ${model.name}Codec.encode(src);`);
        code.append(`export const decode${model.name} = (src: any) => ${model.name}Codec.decode(src) as ${model.name}Shape;`);
        code.append(`export function is${model.name}(src: any): src is ${model.name}Shape { return src._type === '${model.name}'; }`);
    }

    return code.build();
}

function genType(type: Type): string {
    if (type instanceof IntegerType) {
        return 'number';
    } else if (type instanceof FloatType) {
        return 'number';
    } else if (type instanceof StringType) {
        return 'string';
    } else if (type instanceof BooleanType) {
        return 'boolean';
    } else if (type instanceof AnyStructType) {
        return 'KnownTypes';
    } else if (type instanceof StructType) {
        let res = '{\n';
        for (let key in type.fields) {
            res += `${key}: ${genType(type.fields[key])}\n`;
        }
        res += '}';
        return res;
    } else if (type instanceof OptionalType) {
        return genType(type.inner) + ' | null';
    } else if (type instanceof ArrayType) {
        return genType(type.inner) + '[]';
    }
    throw new Error('Unknown type: ' + type);
}

function genCodecType(type: Type): string {
    if (type instanceof IntegerType) {
        return 'codecs.integer';
    } else if (type instanceof FloatType) {
        return 'codecs.float';
    } else if (type instanceof StringType) {
        return 'codecs.string';
    } else if (type instanceof BooleanType) {
        return 'codecs.boolean';
    } else if (type instanceof AnyStructType) {
        return 'codecs.anyStruct(KnownCodecs)';
    } else if (type instanceof StructType) {
        let res = '{\n';
        for (let key in type.fields) {
            res += `${key}: ${genType(type.fields[key])}\n`;
        }
        res += '}';
        return res;
    } else if (type instanceof OptionalType) {
        return `codecs.optional(${genCodecType(type.inner)})`;
    } else if (type instanceof ArrayType) {
        return `codecs.array(${genCodecType(type.inner)})`;
    }
    throw new Error('Unknown type: ' + type);
}