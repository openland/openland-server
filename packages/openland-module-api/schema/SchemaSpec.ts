// THIS FILE IS AUTOGENERATED! DO NOT TRY TO EDIT!
import { ComplexTypedResolver, ComplexTypedSubscriptionResolver, UnionTypeResolver, InterfaceTypeResolver, Nullable, OptionalNullable, EnumTypeResolver } from './SchemaUtils';
import { GQLRoots } from './SchemaRoots';

export const GQL_SPEC_VERSION = 'e9e38b38302c107f207cd3e6bd1aad70';

export namespace GQL {
    export interface UpdateConversationSettingsInput {
        mobileNotifications: Nullable<NotificationMessages>;
        mute: Nullable<boolean>;
    }
    export interface ConversationSettings {
        id: string;
        mobileNotifications: NotificationMessages;
        mute: boolean;
    }
    export interface ConversationSettingsIdArgs { }
    export interface ConversationSettingsMobileNotificationsArgs { }
    export interface ConversationSettingsMuteArgs { }
    export interface Conversation {
        id: string;
        flexibleId: string;
        title: string;
        photos: string[];
        unreadCount: number;
        topMessage: Nullable<ConversationMessage>;
        settings: ConversationSettings;
    }
    export interface ConversationIdArgs { }
    export interface ConversationFlexibleIdArgs { }
    export interface ConversationTitleArgs { }
    export interface ConversationPhotosArgs { }
    export interface ConversationUnreadCountArgs { }
    export interface ConversationTopMessageArgs { }
    export interface ConversationSettingsArgs { }
    export interface ChannelConversation extends Conversation {
        id: string;
        flexibleId: string;
        title: string;
        photos: string[];
        members: User[];
        unreadCount: number;
        topMessage: Nullable<ConversationMessage>;
        settings: ConversationSettings;
    }
    export interface ChannelConversationIdArgs { }
    export interface ChannelConversationFlexibleIdArgs { }
    export interface ChannelConversationTitleArgs { }
    export interface ChannelConversationPhotosArgs { }
    export interface ChannelConversationMembersArgs { }
    export interface ChannelConversationUnreadCountArgs { }
    export interface ChannelConversationTopMessageArgs { }
    export interface ChannelConversationSettingsArgs { }
    export interface AnonymousConversation extends Conversation {
        id: string;
        flexibleId: string;
        title: string;
        photos: string[];
        unreadCount: number;
        topMessage: Nullable<ConversationMessage>;
        settings: ConversationSettings;
    }
    export interface AnonymousConversationIdArgs { }
    export interface AnonymousConversationFlexibleIdArgs { }
    export interface AnonymousConversationTitleArgs { }
    export interface AnonymousConversationPhotosArgs { }
    export interface AnonymousConversationUnreadCountArgs { }
    export interface AnonymousConversationTopMessageArgs { }
    export interface AnonymousConversationSettingsArgs { }
    export interface SharedConversation extends Conversation {
        id: string;
        flexibleId: string;
        title: string;
        photos: string[];
        organizations: Organization[];
        unreadCount: number;
        topMessage: Nullable<ConversationMessage>;
        organization: Nullable<Organization>;
        settings: ConversationSettings;
    }
    export interface SharedConversationIdArgs { }
    export interface SharedConversationFlexibleIdArgs { }
    export interface SharedConversationTitleArgs { }
    export interface SharedConversationPhotosArgs { }
    export interface SharedConversationOrganizationsArgs { }
    export interface SharedConversationUnreadCountArgs { }
    export interface SharedConversationTopMessageArgs { }
    export interface SharedConversationOrganizationArgs { }
    export interface SharedConversationSettingsArgs { }
    export interface PrivateConversation extends Conversation {
        id: string;
        flexibleId: string;
        title: string;
        photos: string[];
        user: User;
        unreadCount: number;
        topMessage: Nullable<ConversationMessage>;
        blocked: boolean;
        settings: ConversationSettings;
    }
    export interface PrivateConversationIdArgs { }
    export interface PrivateConversationFlexibleIdArgs { }
    export interface PrivateConversationTitleArgs { }
    export interface PrivateConversationPhotosArgs { }
    export interface PrivateConversationUserArgs { }
    export interface PrivateConversationUnreadCountArgs { }
    export interface PrivateConversationTopMessageArgs { }
    export interface PrivateConversationBlockedArgs { }
    export interface PrivateConversationSettingsArgs { }
    export interface GroupConversation extends Conversation {
        id: string;
        flexibleId: string;
        title: string;
        photos: string[];
        members: User[];
        unreadCount: number;
        topMessage: Nullable<ConversationMessage>;
        membersCount: number;
        settings: ConversationSettings;
        photo: Nullable<string>;
        photoRef: Nullable<ImageRef>;
        description: Nullable<string>;
        longDescription: Nullable<string>;
        pinnedMessage: Nullable<ConversationMessage>;
        membersOnline: number;
        myRole: Nullable<string>;
    }
    export interface GroupConversationIdArgs { }
    export interface GroupConversationFlexibleIdArgs { }
    export interface GroupConversationTitleArgs { }
    export interface GroupConversationPhotosArgs { }
    export interface GroupConversationMembersArgs { }
    export interface GroupConversationUnreadCountArgs { }
    export interface GroupConversationTopMessageArgs { }
    export interface GroupConversationMembersCountArgs { }
    export interface GroupConversationSettingsArgs { }
    export interface GroupConversationPhotoArgs { }
    export interface GroupConversationPhotoRefArgs { }
    export interface GroupConversationDescriptionArgs { }
    export interface GroupConversationLongDescriptionArgs { }
    export interface GroupConversationPinnedMessageArgs { }
    export interface GroupConversationMembersOnlineArgs { }
    export interface GroupConversationMyRoleArgs { }
    export interface InviteServiceMetadata {
        users: Nullable<User[]>;
        invitedBy: User;
    }
    export interface InviteServiceMetadataUsersArgs { }
    export interface InviteServiceMetadataInvitedByArgs { }
    export interface KickServiceMetadata {
        user: User;
        kickedBy: User;
    }
    export interface KickServiceMetadataUserArgs { }
    export interface KickServiceMetadataKickedByArgs { }
    export interface TitleChangeServiceMetadata {
        title: string;
    }
    export interface TitleChangeServiceMetadataTitleArgs { }
    export interface PhotoChangeServiceMetadata {
        photo: Nullable<string>;
        photoRef: Nullable<ImageRef>;
    }
    export interface PhotoChangeServiceMetadataPhotoArgs { }
    export interface PhotoChangeServiceMetadataPhotoRefArgs { }
    export interface PostRespondServiceMetadata {
        post: RoomMessage;
        postRoom: Room;
        responder: User;
        respondType: string;
    }
    export interface PostRespondServiceMetadataPostArgs { }
    export interface PostRespondServiceMetadataPostRoomArgs { }
    export interface PostRespondServiceMetadataResponderArgs { }
    export interface PostRespondServiceMetadataRespondTypeArgs { }
    export type UrlAugmentationExtra = User | Organization | ChannelConversation;
    export interface UrlAugmentation {
        url: string;
        title: Nullable<string>;
        date: Nullable<string>;
        subtitle: Nullable<string>;
        description: Nullable<string>;
        photo: Nullable<ImageRef>;
        imageInfo: Nullable<FileMetadata>;
        imageURL: Nullable<string>;
        iconRef: Nullable<ImageRef>;
        iconInfo: Nullable<FileMetadata>;
        hostname: Nullable<string>;
        type: Nullable<string>;
        extra: Nullable<UrlAugmentationExtra>;
    }
    export interface UrlAugmentationUrlArgs { }
    export interface UrlAugmentationTitleArgs { }
    export interface UrlAugmentationDateArgs { }
    export interface UrlAugmentationSubtitleArgs { }
    export interface UrlAugmentationDescriptionArgs { }
    export interface UrlAugmentationPhotoArgs { }
    export interface UrlAugmentationImageInfoArgs { }
    export interface UrlAugmentationImageURLArgs { }
    export interface UrlAugmentationIconRefArgs { }
    export interface UrlAugmentationIconInfoArgs { }
    export interface UrlAugmentationHostnameArgs { }
    export interface UrlAugmentationTypeArgs { }
    export interface UrlAugmentationExtraArgs { }
    export type ServiceMetadata = InviteServiceMetadata | KickServiceMetadata | TitleChangeServiceMetadata | PhotoChangeServiceMetadata | PostRespondServiceMetadata;
    export interface ConversationMessage {
        id: string;
        message: Nullable<string>;
        file: Nullable<string>;
        fileMetadata: Nullable<FileMetadata>;
        filePreview: Nullable<string>;
        sender: User;
        date: Date;
        repeatKey: Nullable<string>;
        isService: boolean;
        serviceMetadata: Nullable<ServiceMetadata>;
        urlAugmentation: Nullable<UrlAugmentation>;
        edited: boolean;
        reactions: MessageReaction[];
        replyMessages: Nullable<ConversationMessage[]>;
        plainText: Nullable<string>;
        mentions: Nullable<User[]>;
        alphaAttachments: MessageAttachment[];
        alphaButtons: Nullable<MessageButton[]>[];
        alphaType: MessageType;
        alphaTitle: Nullable<string>;
        postType: Nullable<string>;
        alphaMentions: Nullable<Mention[]>;
    }
    export interface ConversationMessageIdArgs { }
    export interface ConversationMessageMessageArgs { }
    export interface ConversationMessageFileArgs { }
    export interface ConversationMessageFileMetadataArgs { }
    export interface ConversationMessageFilePreviewArgs { }
    export interface ConversationMessageSenderArgs { }
    export interface ConversationMessageDateArgs { }
    export interface ConversationMessageRepeatKeyArgs { }
    export interface ConversationMessageIsServiceArgs { }
    export interface ConversationMessageServiceMetadataArgs { }
    export interface ConversationMessageUrlAugmentationArgs { }
    export interface ConversationMessageEditedArgs { }
    export interface ConversationMessageReactionsArgs { }
    export interface ConversationMessageReplyMessagesArgs { }
    export interface ConversationMessagePlainTextArgs { }
    export interface ConversationMessageMentionsArgs { }
    export interface ConversationMessageAlphaAttachmentsArgs { }
    export interface ConversationMessageAlphaButtonsArgs { }
    export interface ConversationMessageAlphaTypeArgs { }
    export interface ConversationMessageAlphaTitleArgs { }
    export interface ConversationMessagePostTypeArgs { }
    export interface ConversationMessageAlphaMentionsArgs { }
    export interface FileMetadata {
        name: string;
        mimeType: Nullable<string>;
        size: number;
        isImage: boolean;
        imageWidth: Nullable<number>;
        imageHeight: Nullable<number>;
        imageFormat: Nullable<string>;
    }
    export interface FileMetadataNameArgs { }
    export interface FileMetadataMimeTypeArgs { }
    export interface FileMetadataSizeArgs { }
    export interface FileMetadataIsImageArgs { }
    export interface FileMetadataImageWidthArgs { }
    export interface FileMetadataImageHeightArgs { }
    export interface FileMetadataImageFormatArgs { }
    export interface ConversationEventSimpleBatch {
        events: ConversationEvent[];
    }
    export interface ConversationEventSimpleBatchEventsArgs { }
    export interface ConversationEvent {
        seq: number;
    }
    export interface ConversationEventSeqArgs { }
    export interface ConversationEventMessage extends ConversationEvent {
        seq: number;
        message: ConversationMessage;
    }
    export interface ConversationEventMessageSeqArgs { }
    export interface ConversationEventMessageMessageArgs { }
    export interface ConversationEventEditMessage extends ConversationEvent {
        seq: number;
        message: ConversationMessage;
    }
    export interface ConversationEventEditMessageSeqArgs { }
    export interface ConversationEventEditMessageMessageArgs { }
    export interface ConversationEventDelete extends ConversationEvent {
        seq: number;
        messageId: string;
    }
    export interface ConversationEventDeleteSeqArgs { }
    export interface ConversationEventDeleteMessageIdArgs { }
    export interface ConversationEventNewMembers extends ConversationEvent {
        seq: number;
        users: Nullable<User[]>;
        invitedBy: User;
    }
    export interface ConversationEventNewMembersSeqArgs { }
    export interface ConversationEventNewMembersUsersArgs { }
    export interface ConversationEventNewMembersInvitedByArgs { }
    export interface ConversationEventKick extends ConversationEvent {
        seq: number;
        user: User;
        kickedBy: User;
    }
    export interface ConversationEventKickSeqArgs { }
    export interface ConversationEventKickUserArgs { }
    export interface ConversationEventKickKickedByArgs { }
    export interface ConversationEventTitle extends ConversationEvent {
        seq: number;
        title: string;
    }
    export interface ConversationEventTitleSeqArgs { }
    export interface ConversationEventTitleTitleArgs { }
    export interface ConversationEventUpdate extends ConversationEvent {
        seq: number;
        chat: Conversation;
    }
    export interface ConversationEventUpdateSeqArgs { }
    export interface ConversationEventUpdateChatArgs { }
    export interface ConversationEventUpdateRole extends ConversationEvent {
        seq: number;
        user: User;
        newRole: string;
    }
    export interface ConversationEventUpdateRoleSeqArgs { }
    export interface ConversationEventUpdateRoleUserArgs { }
    export interface ConversationEventUpdateRoleNewRoleArgs { }
    export interface ConversationState {
        seq: number;
        messages: ConversationMessage[];
    }
    export interface ConversationStateSeqArgs { }
    export interface ConversationStateMessagesArgs { }
    export interface ConversationConnection {
        conversations: Conversation[];
        counter: NotificationCounter;
        seq: number;
        next: Nullable<string>;
    }
    export interface ConversationConnectionConversationsArgs { }
    export interface ConversationConnectionCounterArgs { }
    export interface ConversationConnectionSeqArgs { }
    export interface ConversationConnectionNextArgs { }
    export interface NotificationCounter {
        id: string;
        unreadCount: number;
    }
    export interface NotificationCounterIdArgs { }
    export interface NotificationCounterUnreadCountArgs { }
    export interface ChatReadResult {
        conversation: Conversation;
        counter: NotificationCounter;
    }
    export interface ChatReadResultConversationArgs { }
    export interface ChatReadResultCounterArgs { }
    export type ComposeSearchResult = User | Organization;
    export interface GroupConversationMember {
        user: User;
        role: string;
    }
    export interface GroupConversationMemberUserArgs { }
    export interface GroupConversationMemberRoleArgs { }
    export interface GroupConversationInvite {
        userId: string;
        role: string;
    }
    export interface GroupChatUpdateResponse {
        chat: Conversation;
        chatEventMessage: Nullable<ConversationEventMessage>;
        chatEvent: Nullable<ConversationEvent>;
    }
    export interface GroupChatUpdateResponseChatArgs { }
    export interface GroupChatUpdateResponseChatEventMessageArgs { }
    export interface GroupChatUpdateResponseChatEventArgs { }
    export interface ConversationUpdateResponse {
        chat: Conversation;
        curSeq: number;
    }
    export interface ConversationUpdateResponseChatArgs { }
    export interface ConversationUpdateResponseCurSeqArgs { }
    export interface ConversationBlockedUser {
        user: User;
        blockedBy: User;
    }
    export interface ConversationBlockedUserUserArgs { }
    export interface ConversationBlockedUserBlockedByArgs { }
    export interface UpdateGroupInput {
        title: Nullable<string>;
        photoRef: Nullable<ImageRefInput>;
        description: Nullable<string>;
        longDescription: Nullable<string>;
        socialImageRef: Nullable<ImageRefInput>;
    }
    export interface CreditCard {
        id: string;
        pmid: string;
        brand: string;
        last4: string;
        expMonth: number;
        expYear: number;
        deleted: boolean;
        isDefault: boolean;
    }
    export interface CreditCardIdArgs { }
    export interface CreditCardPmidArgs { }
    export interface CreditCardBrandArgs { }
    export interface CreditCardLast4Args { }
    export interface CreditCardExpMonthArgs { }
    export interface CreditCardExpYearArgs { }
    export interface CreditCardDeletedArgs { }
    export interface CreditCardIsDefaultArgs { }
    export interface CardSetupIntent {
        id: string;
        clientSecret: string;
    }
    export interface CardSetupIntentIdArgs { }
    export interface CardSetupIntentClientSecretArgs { }
    export interface PaymentIntent {
        id: string;
        clientSecret: string;
        card: Nullable<CreditCard>;
    }
    export interface PaymentIntentIdArgs { }
    export interface PaymentIntentClientSecretArgs { }
    export interface PaymentIntentCardArgs { }
    export type PaymentStatusValues = 'PENDING' | 'CANCELED' | 'FAILING' | 'ACTION_REQUIRED' | 'SUCCESS';
    export type PaymentStatus = GQLRoots.PaymentStatusRoot;
    export interface Payment {
        id: string;
        status: PaymentStatus;
        intent: Nullable<PaymentIntent>;
        card: Nullable<CreditCard>;
    }
    export interface PaymentIdArgs { }
    export interface PaymentStatusArgs { }
    export interface PaymentIntentArgs { }
    export interface PaymentCardArgs { }
    export interface WalletAccount {
        id: string;
        balance: number;
        state: string;
        isLocked: boolean;
        failingPaymentsCount: number;
    }
    export interface WalletAccountIdArgs { }
    export interface WalletAccountBalanceArgs { }
    export interface WalletAccountStateArgs { }
    export interface WalletAccountIsLockedArgs { }
    export interface WalletAccountFailingPaymentsCountArgs { }
    export interface WalletTransaction {
        id: string;
        date: string;
        status: WalletTransactionStatus;
        operation: WalletTransactionOperation;
    }
    export interface WalletTransactionIdArgs { }
    export interface WalletTransactionDateArgs { }
    export interface WalletTransactionStatusArgs { }
    export interface WalletTransactionOperationArgs { }
    export type WalletTransactionStatusValues = 'PENDING' | 'CANCELING' | 'CANCELED' | 'SUCCESS';
    export type WalletTransactionStatus = GQLRoots.WalletTransactionStatusRoot;
    export interface WalletTransactionDeposit {
        amount: number;
        payment: Nullable<Payment>;
    }
    export interface WalletTransactionDepositAmountArgs { }
    export interface WalletTransactionDepositPaymentArgs { }
    export type WalletIncomeSource = WalletSubscription | Purchase;
    export interface WalletTransactionIncome {
        amount: number;
        payment: Nullable<Payment>;
        source: Nullable<WalletIncomeSource>;
    }
    export interface WalletTransactionIncomeAmountArgs { }
    export interface WalletTransactionIncomePaymentArgs { }
    export interface WalletTransactionIncomeSourceArgs { }
    export interface WalletTransactionSubscription {
        amount: number;
        walletAmount: number;
        chargeAmount: number;
        payment: Nullable<Payment>;
        subscription: WalletSubscription;
    }
    export interface WalletTransactionSubscriptionAmountArgs { }
    export interface WalletTransactionSubscriptionWalletAmountArgs { }
    export interface WalletTransactionSubscriptionChargeAmountArgs { }
    export interface WalletTransactionSubscriptionPaymentArgs { }
    export interface WalletTransactionSubscriptionSubscriptionArgs { }
    export interface WalletTransactionPurchase {
        amount: number;
        walletAmount: number;
        chargeAmount: number;
        payment: Nullable<Payment>;
        purchase: Purchase;
    }
    export interface WalletTransactionPurchaseAmountArgs { }
    export interface WalletTransactionPurchaseWalletAmountArgs { }
    export interface WalletTransactionPurchaseChargeAmountArgs { }
    export interface WalletTransactionPurchasePaymentArgs { }
    export interface WalletTransactionPurchasePurchaseArgs { }
    export interface WalletTransactionTransferOut {
        amount: number;
        walletAmount: number;
        chargeAmount: number;
        payment: Nullable<Payment>;
        toUser: User;
    }
    export interface WalletTransactionTransferOutAmountArgs { }
    export interface WalletTransactionTransferOutWalletAmountArgs { }
    export interface WalletTransactionTransferOutChargeAmountArgs { }
    export interface WalletTransactionTransferOutPaymentArgs { }
    export interface WalletTransactionTransferOutToUserArgs { }
    export interface WalletTransactionTransferIn {
        amount: number;
        fromUser: User;
        payment: Nullable<Payment>;
    }
    export interface WalletTransactionTransferInAmountArgs { }
    export interface WalletTransactionTransferInFromUserArgs { }
    export interface WalletTransactionTransferInPaymentArgs { }
    export type WalletTransactionOperation = WalletTransactionDeposit | WalletTransactionIncome | WalletTransactionSubscription | WalletTransactionPurchase | WalletTransactionTransferOut | WalletTransactionTransferIn;
    export interface WalletTransactionConnection {
        items: WalletTransaction[];
        cursor: Nullable<string>;
    }
    export interface WalletTransactionConnectionItemsArgs { }
    export interface WalletTransactionConnectionCursorArgs { }
    export interface WalletSubscription {
        id: string;
        state: WalletSubscriptionState;
        amount: number;
        interval: WalletSubscriptionInterval;
        product: WalletProduct;
        expires: Date;
    }
    export interface WalletSubscriptionIdArgs { }
    export interface WalletSubscriptionStateArgs { }
    export interface WalletSubscriptionAmountArgs { }
    export interface WalletSubscriptionIntervalArgs { }
    export interface WalletSubscriptionProductArgs { }
    export interface WalletSubscriptionExpiresArgs { }
    export type WalletSubscriptionStateValues = 'STARTED' | 'GRACE_PERIOD' | 'RETRYING' | 'CANCELED' | 'EXPIRED';
    export type WalletSubscriptionState = GQLRoots.WalletSubscriptionStateRoot;
    export type WalletSubscriptionIntervalValues = 'MONTH' | 'WEEK';
    export type WalletSubscriptionInterval = GQLRoots.WalletSubscriptionIntervalRoot;
    export interface WalletProductGroup {
        group: SharedRoom;
    }
    export interface WalletProductGroupGroupArgs { }
    export interface WalletProductDonation {
        user: User;
    }
    export interface WalletProductDonationUserArgs { }
    export interface WalletProductDonationMessage {
        user: User;
        chat: Room;
        message: Nullable<ModernMessage>;
    }
    export interface WalletProductDonationMessageUserArgs { }
    export interface WalletProductDonationMessageChatArgs { }
    export interface WalletProductDonationMessageMessageArgs { }
    export interface WalletProductDonationReaction {
        user: User;
        chat: Room;
        message: ModernMessage;
    }
    export interface WalletProductDonationReactionUserArgs { }
    export interface WalletProductDonationReactionChatArgs { }
    export interface WalletProductDonationReactionMessageArgs { }
    export type WalletProduct = WalletProductGroup | WalletProductDonation | WalletProductDonationMessage | WalletProductDonationReaction;
    export type PurchaseStateValues = 'PENDING' | 'COMPLETED' | 'CANCELED';
    export type PurchaseState = GQLRoots.PurchaseStateRoot;
    export interface Purchase {
        id: string;
        state: PurchaseState;
        intent: Nullable<PaymentIntent>;
        product: WalletProduct;
        amount: number;
        user: User;
    }
    export interface PurchaseIdArgs { }
    export interface PurchaseStateArgs { }
    export interface PurchaseIntentArgs { }
    export interface PurchaseProductArgs { }
    export interface PurchaseAmountArgs { }
    export interface PurchaseUserArgs { }
    export interface WalletUpdateSingle {
        state: string;
        update: WalletUpdate;
    }
    export interface WalletUpdateSingleStateArgs { }
    export interface WalletUpdateSingleUpdateArgs { }
    export interface WalletUpdateBatch {
        state: string;
        updates: WalletUpdate[];
    }
    export interface WalletUpdateBatchStateArgs { }
    export interface WalletUpdateBatchUpdatesArgs { }
    export type WalletUpdateContainer = WalletUpdateSingle | WalletUpdateBatch;
    export interface WalletUpdateBalance {
        amount: number;
    }
    export interface WalletUpdateBalanceAmountArgs { }
    export interface WalletUpdateTransactionSuccess {
        transaction: WalletTransaction;
    }
    export interface WalletUpdateTransactionSuccessTransactionArgs { }
    export interface WalletUpdateTransactionCanceled {
        transaction: WalletTransaction;
    }
    export interface WalletUpdateTransactionCanceledTransactionArgs { }
    export interface WalletUpdateTransactionPending {
        transaction: WalletTransaction;
    }
    export interface WalletUpdateTransactionPendingTransactionArgs { }
    export interface WalletUpdatePaymentStatus {
        payment: Payment;
    }
    export interface WalletUpdatePaymentStatusPaymentArgs { }
    export interface WalletUpdateLocked {
        isLocked: boolean;
        failingPaymentsCount: number;
    }
    export interface WalletUpdateLockedIsLockedArgs { }
    export interface WalletUpdateLockedFailingPaymentsCountArgs { }
    export type WalletUpdate = WalletUpdateBalance | WalletUpdateTransactionSuccess | WalletUpdateTransactionCanceled | WalletUpdateTransactionPending | WalletUpdatePaymentStatus | WalletUpdateLocked;
    export interface Invite {
        id: string;
        key: string;
        ttl: Nullable<string>;
    }
    export interface InviteIdArgs { }
    export interface InviteKeyArgs { }
    export interface InviteTtlArgs { }
    export interface InviteInfo {
        id: string;
        key: string;
        orgId: string;
        title: string;
        photo: Nullable<string>;
        photoRef: Nullable<ImageRef>;
        joined: boolean;
        creator: Nullable<User>;
        forEmail: Nullable<string>;
        forName: Nullable<string>;
        description: Nullable<string>;
        membersCount: Nullable<number>;
        organization: Nullable<Organization>;
    }
    export interface InviteInfoIdArgs { }
    export interface InviteInfoKeyArgs { }
    export interface InviteInfoOrgIdArgs { }
    export interface InviteInfoTitleArgs { }
    export interface InviteInfoPhotoArgs { }
    export interface InviteInfoPhotoRefArgs { }
    export interface InviteInfoJoinedArgs { }
    export interface InviteInfoCreatorArgs { }
    export interface InviteInfoForEmailArgs { }
    export interface InviteInfoForNameArgs { }
    export interface InviteInfoDescriptionArgs { }
    export interface InviteInfoMembersCountArgs { }
    export interface InviteInfoOrganizationArgs { }
    export interface AppInvite {
        inviter: User;
    }
    export interface AppInviteInviterArgs { }
    export interface AppInviteInfo {
        inviter: User;
    }
    export interface AppInviteInfoInviterArgs { }
    export interface InviteHistotyInfo {
        acceptedBy: Nullable<User>;
        forEmail: string;
        isGlobal: boolean;
    }
    export interface InviteHistotyInfoAcceptedByArgs { }
    export interface InviteHistotyInfoForEmailArgs { }
    export interface InviteHistotyInfoIsGlobalArgs { }
    export type ResolveInviteEntry = InviteInfo | AppInvite | RoomInvite;
    export interface UpdateSubscriptionStarted {
        seq: number;
        state: string;
    }
    export interface UpdateSubscriptionStartedSeqArgs { }
    export interface UpdateSubscriptionStartedStateArgs { }
    export interface UpdateSubscriptionCheckpoint {
        seq: number;
        state: string;
    }
    export interface UpdateSubscriptionCheckpointSeqArgs { }
    export interface UpdateSubscriptionCheckpointStateArgs { }
    export interface UpdateSubscriptionEvent {
        seq: number;
        pts: number;
        event: UpdateEvent;
        sequence: Sequence;
    }
    export interface UpdateSubscriptionEventSeqArgs { }
    export interface UpdateSubscriptionEventPtsArgs { }
    export interface UpdateSubscriptionEventEventArgs { }
    export interface UpdateSubscriptionEventSequenceArgs { }
    export interface UpdateSubscriptionEphemeralEvent {
        seq: number;
        event: UpdateEvent;
        sequence: Sequence;
    }
    export interface UpdateSubscriptionEphemeralEventSeqArgs { }
    export interface UpdateSubscriptionEphemeralEventEventArgs { }
    export interface UpdateSubscriptionEphemeralEventSequenceArgs { }
    export type UpdateSubscription = UpdateSubscriptionStarted | UpdateSubscriptionCheckpoint | UpdateSubscriptionEvent | UpdateSubscriptionEphemeralEvent;
    export interface UpdatesSequenceState {
        sequence: Sequence;
        pts: number;
        seq: number;
    }
    export interface UpdatesSequenceStateSequenceArgs { }
    export interface UpdatesSequenceStatePtsArgs { }
    export interface UpdatesSequenceStateSeqArgs { }
    export interface UpdatesState {
        seq: number;
        state: string;
        sequences: UpdatesSequenceState[];
    }
    export interface UpdatesStateSeqArgs { }
    export interface UpdatesStateStateArgs { }
    export interface UpdatesStateSequencesArgs { }
    export interface UpdatesDifferenceEvent {
        pts: number;
        event: UpdateEvent;
    }
    export interface UpdatesDifferenceEventPtsArgs { }
    export interface UpdatesDifferenceEventEventArgs { }
    export interface UpdatesSequenceDifference {
        after: number;
        sequence: Sequence;
        events: UpdatesDifferenceEvent[];
    }
    export interface UpdatesSequenceDifferenceAfterArgs { }
    export interface UpdatesSequenceDifferenceSequenceArgs { }
    export interface UpdatesSequenceDifferenceEventsArgs { }
    export interface UpdatesDifference {
        seq: number;
        state: string;
        hasMore: boolean;
        sequences: UpdatesSequenceDifference[];
    }
    export interface UpdatesDifferenceSeqArgs { }
    export interface UpdatesDifferenceStateArgs { }
    export interface UpdatesDifferenceHasMoreArgs { }
    export interface UpdatesDifferenceSequencesArgs { }
    export interface SequenceDifference {
        sequence: Sequence;
        events: UpdatesDifferenceEvent[];
        after: number;
        hasMore: boolean;
        seq: number;
    }
    export interface SequenceDifferenceSequenceArgs { }
    export interface SequenceDifferenceEventsArgs { }
    export interface SequenceDifferenceAfterArgs { }
    export interface SequenceDifferenceHasMoreArgs { }
    export interface SequenceDifferenceSeqArgs { }
    export interface Reaction {
        user: User;
        reaction: string;
    }
    export interface ReactionUserArgs { }
    export interface ReactionReactionArgs { }
    export interface Message {
        id: string;
        date: Date;
        sender: User;
        edited: boolean;
        text: Nullable<string>;
        quoted: Message[];
        alphaReactions: Reaction[];
    }
    export interface MessageIdArgs { }
    export interface MessageDateArgs { }
    export interface MessageSenderArgs { }
    export interface MessageEditedArgs { }
    export interface MessageTextArgs { }
    export interface MessageQuotedArgs { }
    export interface MessageAlphaReactionsArgs { }
    export interface PhonebookRecordInput {
        firstName: Nullable<string>;
        lastName: Nullable<string>;
        info: Nullable<string>;
        phones: string[];
    }
    export type ChannelTypeValues = 'SYSTEM' | 'PERSONAL' | 'PUBLIC' | 'SECRET';
    export type ChannelType = GQLRoots.ChannelTypeRoot;
    export interface Channel {
        id: string;
        title: string;
        type: ChannelType;
        owner: Nullable<User>;
        shortname: string;
    }
    export interface ChannelIdArgs { }
    export interface ChannelTitleArgs { }
    export interface ChannelTypeArgs { }
    export interface ChannelOwnerArgs { }
    export interface ChannelShortnameArgs { }
    export interface ChannelInput {
        title: Nullable<string>;
        shortname: Nullable<string>;
    }
    export type DebugEmailTypeValues = 'WELCOME' | 'ACCOUNT_ACTIVATED' | 'ACCOUNT_DEACTIVATED' | 'MEMBER_REMOVED' | 'MEMBERSHIP_LEVEL_CHANGED' | 'INVITE' | 'MEMBER_JOINED' | 'SIGNUP_CODE' | 'SIGIN_CODE' | 'UNREAD_MESSAGE' | 'UNREAD_MESSAGES' | 'PUBLIC_ROOM_INVITE' | 'PRIVATE_ROOM_INVITE' | 'ROOM_INVITE_ACCEPTED' | 'WEEKLY_DIGEST' | 'GENERIC';
    export type DebugEmailType = GQLRoots.DebugEmailTypeRoot;
    export interface DebugID {
        numberID: Nullable<number>;
        stringID: Nullable<string>;
        type: string;
    }
    export interface DebugIDNumberIDArgs { }
    export interface DebugIDStringIDArgs { }
    export interface DebugIDTypeArgs { }
    export interface DebugUserPresence {
        user: User;
        lastSeen: Date;
        lastSeenStr: string;
        lastSeenTimeout: number;
        platform: Nullable<string>;
        active: Nullable<boolean>;
    }
    export interface DebugUserPresenceUserArgs { }
    export interface DebugUserPresenceLastSeenArgs { }
    export interface DebugUserPresenceLastSeenStrArgs { }
    export interface DebugUserPresenceLastSeenTimeoutArgs { }
    export interface DebugUserPresencePlatformArgs { }
    export interface DebugUserPresenceActiveArgs { }
    export interface OrganizationChatStats {
        org: Organization;
        chat: SharedRoom;
        messagesCount: number;
        lastMessageDate: string;
    }
    export interface OrganizationChatStatsOrgArgs { }
    export interface OrganizationChatStatsChatArgs { }
    export interface OrganizationChatStatsMessagesCountArgs { }
    export interface OrganizationChatStatsLastMessageDateArgs { }
    export interface DebugEventsState {
        state: Nullable<string>;
    }
    export interface DebugEventsStateStateArgs { }
    export interface DebugEvent {
        seq: number;
        key: string;
    }
    export interface DebugEventSeqArgs { }
    export interface DebugEventKeyArgs { }
    export interface DebugUserMetrics {
        messagesSent: number;
        messagesReceived: number;
        totalChatsCount: number;
        directChatsCount: number;
        direct2WayChatsCount: number;
        directMessagesSent: number;
        successfulInvitesCount: number;
        audienceCount: number;
    }
    export interface DebugUserMetricsMessagesSentArgs { }
    export interface DebugUserMetricsMessagesReceivedArgs { }
    export interface DebugUserMetricsTotalChatsCountArgs { }
    export interface DebugUserMetricsDirectChatsCountArgs { }
    export interface DebugUserMetricsDirect2WayChatsCountArgs { }
    export interface DebugUserMetricsDirectMessagesSentArgs { }
    export interface DebugUserMetricsSuccessfulInvitesCountArgs { }
    export interface DebugUserMetricsAudienceCountArgs { }
    export interface DebugGlobalCounters {
        allUnreadMessages: number;
        unreadMessagesWithoutMuted: number;
        allUnreadChats: number;
        unreadChatsWithoutMuted: number;
    }
    export interface DebugGlobalCountersAllUnreadMessagesArgs { }
    export interface DebugGlobalCountersUnreadMessagesWithoutMutedArgs { }
    export interface DebugGlobalCountersAllUnreadChatsArgs { }
    export interface DebugGlobalCountersUnreadChatsWithoutMutedArgs { }
    export interface GqlTrace {
        id: string;
        name: string;
        duration: number;
        traceData: string;
        date: Date;
    }
    export interface GqlTraceIdArgs { }
    export interface GqlTraceNameArgs { }
    export interface GqlTraceDurationArgs { }
    export interface GqlTraceTraceDataArgs { }
    export interface GqlTraceDateArgs { }
    export interface GqlTraceConnection {
        items: GqlTrace[];
        cursor: Nullable<string>;
    }
    export interface GqlTraceConnectionItemsArgs { }
    export interface GqlTraceConnectionCursorArgs { }
    export type SuperNotificationTypeValues = 'ON_SIGN_UP' | 'ON_USER_PROFILE_CREATED' | 'ON_ORG_ACTIVATED_BY_ADMIN' | 'ON_ORG_ACTIVATED_VIA_INVITE' | 'ON_ORG_SUSPEND';
    export type SuperNotificationType = GQLRoots.SuperNotificationTypeRoot;
    export type DialogKindValues = 'PRIVATE' | 'INTERNAL' | 'PUBLIC' | 'GROUP';
    export type DialogKind = GQLRoots.DialogKindRoot;
    export interface Dialog {
        id: string;
        cid: string;
        fid: string;
        kind: DialogKind;
        isChannel: boolean;
        isPremium: boolean;
        title: string;
        photo: string;
        featured: boolean;
        unreadCount: number;
        topMessage: Nullable<Message>;
        betaTopMessage: Nullable<RoomMessage>;
        alphaTopMessage: Nullable<ModernMessage>;
        isMuted: boolean;
        haveMention: boolean;
        hasActiveCall: boolean;
        membership: SharedRoomMembershipStatus;
    }
    export interface DialogIdArgs { }
    export interface DialogCidArgs { }
    export interface DialogFidArgs { }
    export interface DialogKindArgs { }
    export interface DialogIsChannelArgs { }
    export interface DialogIsPremiumArgs { }
    export interface DialogTitleArgs { }
    export interface DialogPhotoArgs { }
    export interface DialogFeaturedArgs { }
    export interface DialogUnreadCountArgs { }
    export interface DialogTopMessageArgs { }
    export interface DialogBetaTopMessageArgs { }
    export interface DialogAlphaTopMessageArgs { }
    export interface DialogIsMutedArgs { }
    export interface DialogHaveMentionArgs { }
    export interface DialogHasActiveCallArgs { }
    export interface DialogMembershipArgs { }
    export interface DialogsConnection {
        items: Dialog[];
        cursor: Nullable<string>;
    }
    export interface DialogsConnectionItemsArgs { }
    export interface DialogsConnectionCursorArgs { }
    export type EmailFrequencyValues = 'NEVER' | 'MIN_15' | 'HOUR_1' | 'HOUR_24' | 'WEEK_1';
    export type EmailFrequency = GQLRoots.EmailFrequencyRoot;
    export type NotificationMessagesValues = 'ALL' | 'DIRECT' | 'NONE';
    export type NotificationMessages = GQLRoots.NotificationMessagesRoot;
    export type NotificationCommentsValues = 'ALL' | 'DIRECT' | 'NONE';
    export type NotificationComments = GQLRoots.NotificationCommentsRoot;
    export type CommentsNotificationDeliveryValues = 'ALL' | 'NONE';
    export type CommentsNotificationDelivery = GQLRoots.CommentsNotificationDeliveryRoot;
    export type NotificationsDelayValues = 'NONE' | 'MIN_1' | 'MIN_15';
    export type NotificationsDelay = GQLRoots.NotificationsDelayRoot;
    export type NotificationPreviewValues = 'NAME_TEXT' | 'NAME';
    export type NotificationPreview = GQLRoots.NotificationPreviewRoot;
    export type PrivacyWhoCanSeeValues = 'EVERYONE' | 'NOBODY';
    export type PrivacyWhoCanSee = GQLRoots.PrivacyWhoCanSeeRoot;
    export type PrivacyWhoCanAddToGroupsValues = 'EVERYONE' | 'CORRESPONDENTS' | 'NOBODY';
    export type PrivacyWhoCanAddToGroups = GQLRoots.PrivacyWhoCanAddToGroupsRoot;
    export interface ChatTypeNotificationSettings {
        showNotification: boolean;
        sound: boolean;
    }
    export interface ChatTypeNotificationSettingsShowNotificationArgs { }
    export interface ChatTypeNotificationSettingsSoundArgs { }
    export interface ChatTypeNotificationSettingsInput {
        showNotification: boolean;
        sound: boolean;
    }
    export interface PlatformNotificationSettings {
        direct: ChatTypeNotificationSettings;
        secretChat: ChatTypeNotificationSettings;
        organizationChat: ChatTypeNotificationSettings;
        communityChat: ChatTypeNotificationSettings;
        comments: ChatTypeNotificationSettings;
        notificationPreview: NotificationPreview;
    }
    export interface PlatformNotificationSettingsDirectArgs { }
    export interface PlatformNotificationSettingsSecretChatArgs { }
    export interface PlatformNotificationSettingsOrganizationChatArgs { }
    export interface PlatformNotificationSettingsCommunityChatArgs { }
    export interface PlatformNotificationSettingsCommentsArgs { }
    export interface PlatformNotificationSettingsNotificationPreviewArgs { }
    export interface PlatformNotificationSettingsInput {
        direct: Nullable<ChatTypeNotificationSettingsInput>;
        secretChat: Nullable<ChatTypeNotificationSettingsInput>;
        organizationChat: Nullable<ChatTypeNotificationSettingsInput>;
        communityChat: Nullable<ChatTypeNotificationSettingsInput>;
        comments: Nullable<ChatTypeNotificationSettingsInput>;
        notificationPreview: Nullable<NotificationPreview>;
    }
    export interface UpdateSettingsInput {
        emailFrequency: Nullable<EmailFrequency>;
        desktop: Nullable<PlatformNotificationSettingsInput>;
        mobile: Nullable<PlatformNotificationSettingsInput>;
        countUnreadChats: Nullable<boolean>;
        excludeMutedChats: Nullable<boolean>;
        whoCanSeeEmail: Nullable<PrivacyWhoCanSee>;
        whoCanSeePhone: Nullable<PrivacyWhoCanSee>;
        communityAdminsCanSeeContactInfo: Nullable<boolean>;
        whoCanAddToGroups: Nullable<PrivacyWhoCanAddToGroups>;
        notificationsDelay: Nullable<NotificationsDelay>;
        desktopNotifications: Nullable<NotificationMessages>;
        mobileNotifications: Nullable<NotificationMessages>;
        commentNotifications: Nullable<NotificationComments>;
        commentNotificationsDelivery: Nullable<CommentsNotificationDelivery>;
        mobileAlert: Nullable<boolean>;
        mobileIncludeText: Nullable<boolean>;
        mute: Nullable<boolean>;
    }
    export interface Settings {
        id: string;
        primaryEmail: string;
        emailFrequency: EmailFrequency;
        desktop: PlatformNotificationSettings;
        mobile: PlatformNotificationSettings;
        countUnreadChats: boolean;
        excludeMutedChats: boolean;
        whoCanSeeEmail: PrivacyWhoCanSee;
        whoCanSeePhone: PrivacyWhoCanSee;
        communityAdminsCanSeeContactInfo: boolean;
        whoCanAddToGroups: PrivacyWhoCanAddToGroups;
        notificationsDelay: NotificationsDelay;
        desktopNotifications: NotificationMessages;
        mobileNotifications: NotificationMessages;
        commentNotifications: NotificationComments;
        commentNotificationsDelivery: CommentsNotificationDelivery;
        mobileAlert: boolean;
        mobileIncludeText: boolean;
        mute: Nullable<boolean>;
    }
    export interface SettingsIdArgs { }
    export interface SettingsPrimaryEmailArgs { }
    export interface SettingsEmailFrequencyArgs { }
    export interface SettingsDesktopArgs { }
    export interface SettingsMobileArgs { }
    export interface SettingsCountUnreadChatsArgs { }
    export interface SettingsExcludeMutedChatsArgs { }
    export interface SettingsWhoCanSeeEmailArgs { }
    export interface SettingsWhoCanSeePhoneArgs { }
    export interface SettingsCommunityAdminsCanSeeContactInfoArgs { }
    export interface SettingsWhoCanAddToGroupsArgs { }
    export interface SettingsNotificationsDelayArgs { }
    export interface SettingsDesktopNotificationsArgs { }
    export interface SettingsMobileNotificationsArgs { }
    export interface SettingsCommentNotificationsArgs { }
    export interface SettingsCommentNotificationsDeliveryArgs { }
    export interface SettingsMobileAlertArgs { }
    export interface SettingsMobileIncludeTextArgs { }
    export interface SettingsMuteArgs { }
    export interface AuthPoint {
        email: Nullable<string>;
        phone: Nullable<string>;
    }
    export interface AuthPointEmailArgs { }
    export interface AuthPointPhoneArgs { }
    export type MediaStreamIceTransportPolicyValues = 'all' | 'relay';
    export type MediaStreamIceTransportPolicy = GQLRoots.MediaStreamIceTransportPolicyRoot;
    export interface MediaStreamSettings {
        videoIn: boolean;
        videoOut: boolean;
        videoOutSource: Nullable<MediaStreamVideoSource>;
        audioIn: boolean;
        audioOut: boolean;
        iceTransportPolicy: Nullable<MediaStreamIceTransportPolicy>;
    }
    export interface MediaStreamSettingsVideoInArgs { }
    export interface MediaStreamSettingsVideoOutArgs { }
    export interface MediaStreamSettingsVideoOutSourceArgs { }
    export interface MediaStreamSettingsAudioInArgs { }
    export interface MediaStreamSettingsAudioOutArgs { }
    export interface MediaStreamSettingsIceTransportPolicyArgs { }
    export type MediaStreamVideoSourceValues = 'camera' | 'screen_share';
    export type MediaStreamVideoSource = GQLRoots.MediaStreamVideoSourceRoot;
    export interface MediaStreamMediaState {
        videoPaused: Nullable<boolean>;
        audioPaused: Nullable<boolean>;
        videoSource: Nullable<MediaStreamVideoSource>;
        videoOut: boolean;
        audioOut: boolean;
    }
    export interface MediaStreamMediaStateVideoPausedArgs { }
    export interface MediaStreamMediaStateAudioPausedArgs { }
    export interface MediaStreamMediaStateVideoSourceArgs { }
    export interface MediaStreamMediaStateVideoOutArgs { }
    export interface MediaStreamMediaStateAudioOutArgs { }
    export interface MediaStreamMediaStateInput {
        videoPaused: Nullable<boolean>;
        audioPaused: Nullable<boolean>;
        videoOut: Nullable<boolean>;
        audioOut: Nullable<boolean>;
    }
    export interface LocalStreamAudioConfig {
        codec: string;
    }
    export interface LocalStreamAudioConfigCodecArgs { }
    export interface LocalStreamVideoConfig {
        codec: string;
    }
    export interface LocalStreamVideoConfigCodecArgs { }
    export interface LocalStreamDataChannelConfig {
        id: number;
        label: string;
        ordered: boolean;
    }
    export interface LocalStreamDataChannelConfigIdArgs { }
    export interface LocalStreamDataChannelConfigLabelArgs { }
    export interface LocalStreamDataChannelConfigOrderedArgs { }
    export type LocalStreamConfig = LocalStreamAudioConfig | LocalStreamVideoConfig | LocalStreamDataChannelConfig;
    export type ConferenceKindValues = 'CONFERENCE' | 'STREAM';
    export type ConferenceKind = GQLRoots.ConferenceKindRoot;
    export type ConferenceStrategyValues = 'MASH' | 'SFU';
    export type ConferenceStrategy = GQLRoots.ConferenceStrategyRoot;
    export interface ConferenceSettingsInput {
        strategy: Nullable<ConferenceStrategy>;
        iceTransportPolicy: Nullable<MediaStreamIceTransportPolicy>;
    }
    export type OauthScopeValues = 'All' | 'Zapier';
    export type OauthScope = GQLRoots.OauthScopeRoot;
    export interface OauthApp {
        id: string;
        title: string;
        clientId: Nullable<string>;
        clientSecret: Nullable<string>;
        scopes: Nullable<OauthScope[]>;
        owner: User;
        image: Nullable<ImageRef>;
        redirectUrls: Nullable<string[]>;
    }
    export interface OauthAppIdArgs { }
    export interface OauthAppTitleArgs { }
    export interface OauthAppClientIdArgs { }
    export interface OauthAppClientSecretArgs { }
    export interface OauthAppScopesArgs { }
    export interface OauthAppOwnerArgs { }
    export interface OauthAppImageArgs { }
    export interface OauthAppRedirectUrlsArgs { }
    export interface OauthContext {
        app: OauthApp;
        state: string;
        redirectUrl: string;
        code: string;
    }
    export interface OauthContextAppArgs { }
    export interface OauthContextStateArgs { }
    export interface OauthContextRedirectUrlArgs { }
    export interface OauthContextCodeArgs { }
    export interface OauthAppInput {
        title: Nullable<string>;
        scopes: Nullable<OauthScope[]>;
        redirectUrls: Nullable<string[]>;
        image: Nullable<ImageRefInput>;
    }
    export type OrganizationMemberRoleValues = 'OWNER' | 'ADMIN' | 'MEMBER';
    export type OrganizationMemberRole = GQLRoots.OrganizationMemberRoleRoot;
    export interface OrganizationMember {
        email: string;
        role: OrganizationMemberRole;
    }
    export interface OrganizationMemberEmailArgs { }
    export interface OrganizationMemberRoleArgs { }
    export interface OrganizationIvitedMember extends OrganizationMember {
        email: string;
        role: OrganizationMemberRole;
        firstName: Nullable<string>;
        lastName: Nullable<string>;
        inviteId: string;
    }
    export interface OrganizationIvitedMemberEmailArgs { }
    export interface OrganizationIvitedMemberRoleArgs { }
    export interface OrganizationIvitedMemberFirstNameArgs { }
    export interface OrganizationIvitedMemberLastNameArgs { }
    export interface OrganizationIvitedMemberInviteIdArgs { }
    export interface OrganizationJoinedMember extends OrganizationMember {
        email: string;
        role: OrganizationMemberRole;
        user: User;
        joinedAt: Nullable<string>;
        showInContacts: boolean;
    }
    export interface OrganizationJoinedMemberEmailArgs { }
    export interface OrganizationJoinedMemberRoleArgs { }
    export interface OrganizationJoinedMemberUserArgs { }
    export interface OrganizationJoinedMemberJoinedAtArgs { }
    export interface OrganizationJoinedMemberShowInContactsArgs { }
    export interface OrganizationRequestedMember extends OrganizationMember {
        email: string;
        role: OrganizationMemberRole;
        user: User;
        joinedAt: Nullable<string>;
    }
    export interface OrganizationRequestedMemberEmailArgs { }
    export interface OrganizationRequestedMemberRoleArgs { }
    export interface OrganizationRequestedMemberUserArgs { }
    export interface OrganizationRequestedMemberJoinedAtArgs { }
    export interface InviteRequest {
        email: string;
        emailText: Nullable<string>;
        role: OrganizationMemberRole;
        firstName: Nullable<string>;
        lastName: Nullable<string>;
    }
    export interface JoinedOrganizationMember {
        user: User;
        role: OrganizationMemberRole;
        joinedAt: string;
    }
    export interface JoinedOrganizationMemberUserArgs { }
    export interface JoinedOrganizationMemberRoleArgs { }
    export interface JoinedOrganizationMemberJoinedAtArgs { }
    export interface JoinedOrganizationMemberEdge {
        node: JoinedOrganizationMember;
        cursor: string;
    }
    export interface JoinedOrganizationMemberEdgeNodeArgs { }
    export interface JoinedOrganizationMemberEdgeCursorArgs { }
    export interface JoinedOrganizationMembersConnection {
        edges: JoinedOrganizationMemberEdge[];
        pageInfo: PageInfo;
    }
    export interface JoinedOrganizationMembersConnectionEdgesArgs { }
    export interface JoinedOrganizationMembersConnectionPageInfoArgs { }
    export type ProfileBadgeTypeValues = 'ORGANIZATION';
    export type ProfileBadgeType = GQLRoots.ProfileBadgeTypeRoot;
    export interface ProfileBadge {
        type: ProfileBadgeType;
        text: string;
    }
    export interface ProfileBadgeTypeArgs { }
    export interface ProfileBadgeTextArgs { }
    export interface Profile {
        id: string;
        firstName: Nullable<string>;
        lastName: Nullable<string>;
        photoRef: Nullable<ImageRef>;
        phone: Nullable<string>;
        email: Nullable<string>;
        website: Nullable<string>;
        about: Nullable<string>;
        location: Nullable<string>;
        linkedin: Nullable<string>;
        instagram: Nullable<string>;
        twitter: Nullable<string>;
        facebook: Nullable<string>;
        authEmail: Nullable<string>;
        badge: Nullable<ProfileBadge>;
        birthDay: Nullable<Date>;
        status: Nullable<string>;
        alphaLinkedin: Nullable<string>;
        alphaTwitter: Nullable<string>;
        alphaJoinedAt: Nullable<string>;
        alphaInvitedBy: Nullable<User>;
        alphaRole: Nullable<string>;
        alphaLocations: Nullable<string[]>;
        primaryOrganization: Nullable<Organization>;
        alphaPrimaryOrganizationId: Nullable<string>;
        alphaPrimaryOrganization: Nullable<Organization>;
        primaryBadge: Nullable<UserBadge>;
        shortname: Nullable<string>;
    }
    export interface ProfileIdArgs { }
    export interface ProfileFirstNameArgs { }
    export interface ProfileLastNameArgs { }
    export interface ProfilePhotoRefArgs { }
    export interface ProfilePhoneArgs { }
    export interface ProfileEmailArgs { }
    export interface ProfileWebsiteArgs { }
    export interface ProfileAboutArgs { }
    export interface ProfileLocationArgs { }
    export interface ProfileLinkedinArgs { }
    export interface ProfileInstagramArgs { }
    export interface ProfileTwitterArgs { }
    export interface ProfileFacebookArgs { }
    export interface ProfileAuthEmailArgs { }
    export interface ProfileBadgeArgs { }
    export interface ProfileBirthDayArgs { }
    export interface ProfileStatusArgs { }
    export interface ProfileAlphaLinkedinArgs { }
    export interface ProfileAlphaTwitterArgs { }
    export interface ProfileAlphaJoinedAtArgs { }
    export interface ProfileAlphaInvitedByArgs { }
    export interface ProfileAlphaRoleArgs { }
    export interface ProfileAlphaLocationsArgs { }
    export interface ProfilePrimaryOrganizationArgs { }
    export interface ProfileAlphaPrimaryOrganizationIdArgs { }
    export interface ProfileAlphaPrimaryOrganizationArgs { }
    export interface ProfilePrimaryBadgeArgs { }
    export interface ProfileShortnameArgs { }
    export interface ProfileInput {
        firstName: Nullable<string>;
        lastName: Nullable<string>;
        photoRef: Nullable<ImageRefInput>;
        phone: Nullable<string>;
        email: Nullable<string>;
        website: Nullable<string>;
        about: Nullable<string>;
        location: Nullable<string>;
        linkedin: Nullable<string>;
        instagram: Nullable<string>;
        twitter: Nullable<string>;
        facebook: Nullable<string>;
        primaryOrganization: Nullable<string>;
        birthDay: Nullable<Date>;
        status: Nullable<string>;
    }
    export interface UpdateProfileInput {
        firstName: Nullable<string>;
        lastName: Nullable<string>;
        photoRef: Nullable<ImageRefInput>;
        phone: Nullable<string>;
        email: Nullable<string>;
        website: Nullable<string>;
        about: Nullable<string>;
        location: Nullable<string>;
        linkedin: Nullable<string>;
        instagram: Nullable<string>;
        twitter: Nullable<string>;
        facebook: Nullable<string>;
        primaryOrganization: Nullable<string>;
        alphaRole: Nullable<string>;
        alphaLocations: Nullable<string[]>;
        alphaLinkedin: Nullable<string>;
        alphaTwitter: Nullable<string>;
        alphaPrimaryOrganizationId: Nullable<string>;
    }
    export interface CreateProfileInput {
        firstName: string;
        lastName: Nullable<string>;
        photoRef: Nullable<ImageRefInput>;
        phone: Nullable<string>;
        email: Nullable<string>;
        about: Nullable<string>;
        location: Nullable<string>;
        website: Nullable<string>;
        linkedin: Nullable<string>;
        twitter: Nullable<string>;
        facebook: Nullable<string>;
        primaryOrganization: Nullable<string>;
    }
    export interface AlphaSignupData {
        user: Nullable<User>;
        organization: Nullable<Organization>;
    }
    export interface AlphaSignupDataUserArgs { }
    export interface AlphaSignupDataOrganizationArgs { }
    export type SuperAccountStateValues = 'PENDING' | 'ACTIVATED' | 'SUSPENDED' | 'DELETED';
    export type SuperAccountState = GQLRoots.SuperAccountStateRoot;
    export interface SuperAccount {
        id: string;
        orgId: string;
        title: string;
        name: string;
        state: SuperAccountState;
        members: User[];
        alphaPublished: boolean;
        createdAt: Nullable<string>;
        createdBy: Nullable<User>;
    }
    export interface SuperAccountIdArgs { }
    export interface SuperAccountOrgIdArgs { }
    export interface SuperAccountTitleArgs { }
    export interface SuperAccountNameArgs { }
    export interface SuperAccountStateArgs { }
    export interface SuperAccountMembersArgs { }
    export interface SuperAccountAlphaPublishedArgs { }
    export interface SuperAccountCreatedAtArgs { }
    export interface SuperAccountCreatedByArgs { }
    export type SuperAdminRoleValues = 'SUPER_ADMIN' | 'SOFTWARE_DEVELOPER' | 'EDITOR';
    export type SuperAdminRole = GQLRoots.SuperAdminRoleRoot;
    export interface SuperAdmin {
        user: User;
        role: SuperAdminRole;
        email: Nullable<string>;
    }
    export interface SuperAdminUserArgs { }
    export interface SuperAdminRoleArgs { }
    export interface SuperAdminEmailArgs { }
    export interface DiscoverChatsCollectionInput {
        title: string;
        description: Nullable<string>;
        image: ImageRefInput;
        chatIds: string[];
    }
    export interface DiscoverChatsCollectionUpdateInput {
        title: Nullable<string>;
        description: Nullable<string>;
        image: Nullable<ImageRefInput>;
        chatIds: Nullable<string[]>;
    }
    export interface DiscoverChatsCollection {
        id: string;
        title: string;
        description: Nullable<string>;
        image: ImageRef;
        chatsCount: number;
        chats: SharedRoom[];
        shortname: Nullable<string>;
    }
    export interface DiscoverChatsCollectionIdArgs { }
    export interface DiscoverChatsCollectionTitleArgs { }
    export interface DiscoverChatsCollectionDescriptionArgs { }
    export interface DiscoverChatsCollectionImageArgs { }
    export interface DiscoverChatsCollectionChatsCountArgs { }
    export interface DiscoverChatsCollectionChatsArgs { }
    export interface DiscoverChatsCollectionShortnameArgs { }
    export interface DiscoverChatsCollectionConnection {
        items: DiscoverChatsCollection[];
        cursor: Nullable<string>;
    }
    export interface DiscoverChatsCollectionConnectionItemsArgs { }
    export interface DiscoverChatsCollectionConnectionCursorArgs { }
    export interface EditorsChoiceChatInput {
        image: ImageRefInput;
        cid: string;
    }
    export interface EditorsChoiceChatUpdateInput {
        image: Nullable<ImageRefInput>;
        cid: Nullable<string>;
    }
    export interface EditorsChoiceChat {
        id: string;
        image: ImageRef;
        chat: SharedRoom;
    }
    export interface EditorsChoiceChatIdArgs { }
    export interface EditorsChoiceChatImageArgs { }
    export interface EditorsChoiceChatChatArgs { }
    export interface Event {
        id: string;
        event: string;
        params: Nullable<string>;
        time: Nullable<Date>;
        os: Nullable<string>;
        deviceModel: Nullable<string>;
        platform: Nullable<EventPlatform>;
    }
    export type EventPlatformValues = 'Android' | 'iOS' | 'WEB' | 'MobileWeb';
    export type EventPlatform = GQLRoots.EventPlatformRoot;
    export interface Sequence {
        id: string;
    }
    export interface SequenceIdArgs { }
    export interface SequenceCommon extends Sequence {
        id: string;
    }
    export interface SequenceCommonIdArgs { }
    export interface SequenceChat extends Sequence {
        id: string;
        cid: string;
        draft: Nullable<Draft>;
    }
    export interface SequenceChatIdArgs { }
    export interface SequenceChatCidArgs { }
    export interface SequenceChatDraftArgs { }
    export interface PageInfo {
        hasNextPage: boolean;
        hasPreviousPage: boolean;
        itemsCount: number;
        pagesCount: number;
        currentPage: number;
        openEnded: boolean;
    }
    export interface PageInfoHasNextPageArgs { }
    export interface PageInfoHasPreviousPageArgs { }
    export interface PageInfoItemsCountArgs { }
    export interface PageInfoPagesCountArgs { }
    export interface PageInfoCurrentPageArgs { }
    export interface PageInfoOpenEndedArgs { }
    export type TaskStatusValues = 'IN_PROGRESS' | 'FAILED' | 'COMPLETED';
    export type TaskStatus = GQLRoots.TaskStatusRoot;
    export interface Task {
        id: string;
        status: TaskStatus;
        result: Nullable<string>;
    }
    export interface TaskIdArgs { }
    export interface TaskStatusArgs { }
    export interface TaskResultArgs { }
    export interface ImageCropInput {
        x: number;
        y: number;
        w: number;
        h: number;
    }
    export interface ImageCrop {
        x: number;
        y: number;
        w: number;
        h: number;
    }
    export interface ImageCropXArgs { }
    export interface ImageCropYArgs { }
    export interface ImageCropWArgs { }
    export interface ImageCropHArgs { }
    export interface ImageRef {
        uuid: string;
        crop: Nullable<ImageCrop>;
    }
    export interface ImageRefUuidArgs { }
    export interface ImageRefCropArgs { }
    export interface ImageRefInput {
        uuid: string;
        crop: Nullable<ImageCropInput>;
    }
    export interface Range {
        from: Nullable<number>;
        to: Nullable<number>;
    }
    export interface RangeFromArgs { }
    export interface RangeToArgs { }
    export interface RangeInput {
        from: Nullable<number>;
        to: Nullable<number>;
    }
    export interface AppStorageValue {
        id: string;
        key: string;
        value: Nullable<string>;
    }
    export interface AppStorageValueIdArgs { }
    export interface AppStorageValueKeyArgs { }
    export interface AppStorageValueValueArgs { }
    export interface AppStorageValueInput {
        key: string;
        value: Nullable<string>;
    }
    export interface AppProfile {
        id: string;
        name: string;
        photoRef: Nullable<ImageRef>;
        about: Nullable<string>;
        shortname: Nullable<string>;
        token: AppToken;
    }
    export interface AppProfileIdArgs { }
    export interface AppProfileNameArgs { }
    export interface AppProfilePhotoRefArgs { }
    export interface AppProfileAboutArgs { }
    export interface AppProfileShortnameArgs { }
    export interface AppProfileTokenArgs { }
    export interface AppProfileInput {
        name: Nullable<string>;
        shortname: Nullable<string>;
        photoRef: Nullable<ImageRefInput>;
        about: Nullable<string>;
    }
    export interface AppToken {
        salt: string;
    }
    export interface AppTokenSaltArgs { }
    export interface AppChat {
        chat: Room;
        webhook: string;
    }
    export interface AppChatChatArgs { }
    export interface AppChatWebhookArgs { }
    export interface UserEventBusMessage {
        message: string;
    }
    export interface UserEventBusMessageMessageArgs { }
    export interface BlackListUpdateContainer {
        updates: BlackListUpdate[];
        state: string;
    }
    export interface BlackListUpdateContainerUpdatesArgs { }
    export interface BlackListUpdateContainerStateArgs { }
    export type BlackListUpdate = BlackListAdded | BlackListRemoved;
    export interface BlackListAdded {
        bannedBy: User;
        bannedUser: User;
    }
    export interface BlackListAddedBannedByArgs { }
    export interface BlackListAddedBannedUserArgs { }
    export interface BlackListRemoved {
        bannedBy: User;
        bannedUser: User;
    }
    export interface BlackListRemovedBannedByArgs { }
    export interface BlackListRemovedBannedUserArgs { }
    export interface BlackListUpdatesState {
        state: string;
    }
    export interface BlackListUpdatesStateStateArgs { }
    export interface ChatUpdateSingle {
        seq: number;
        state: string;
        update: ChatUpdate;
    }
    export interface ChatUpdateSingleSeqArgs { }
    export interface ChatUpdateSingleStateArgs { }
    export interface ChatUpdateSingleUpdateArgs { }
    export interface ChatUpdateBatch {
        seq: number;
        state: string;
        fromSeq: number;
        updates: ChatUpdate[];
    }
    export interface ChatUpdateBatchSeqArgs { }
    export interface ChatUpdateBatchStateArgs { }
    export interface ChatUpdateBatchFromSeqArgs { }
    export interface ChatUpdateBatchUpdatesArgs { }
    export type ChatUpdateContainer = ChatUpdateSingle | ChatUpdateBatch;
    export type ChatUpdate = ChatUpdated | ChatMessageReceived | ChatMessageUpdated | ChatMessageDeleted | ChatLostAccess;
    export interface ChatUpdated {
        chat: Room;
        by: User;
    }
    export interface ChatUpdatedChatArgs { }
    export interface ChatUpdatedByArgs { }
    export interface ChatMessageReceived {
        message: ModernMessage;
        repeatKey: Nullable<string>;
    }
    export interface ChatMessageReceivedMessageArgs { }
    export interface ChatMessageReceivedRepeatKeyArgs { }
    export interface ChatMessageUpdated {
        message: ModernMessage;
    }
    export interface ChatMessageUpdatedMessageArgs { }
    export interface ChatMessageDeleted {
        message: ModernMessage;
    }
    export interface ChatMessageDeletedMessageArgs { }
    export interface ChatUpdateState {
        state: Nullable<string>;
    }
    export interface ChatUpdateStateStateArgs { }
    export interface ChatLostAccess {
        lostAccess: boolean;
    }
    export interface ChatLostAccessLostAccessArgs { }
    export interface ConversationUpdateState {
        state: Nullable<string>;
    }
    export interface ConversationUpdateStateStateArgs { }
    export interface CommentUpdatesState {
        state: Nullable<string>;
    }
    export interface CommentUpdatesStateStateArgs { }
    export interface CommentUpdateSingle {
        seq: number;
        state: string;
        update: CommentUpdate;
    }
    export interface CommentUpdateSingleSeqArgs { }
    export interface CommentUpdateSingleStateArgs { }
    export interface CommentUpdateSingleUpdateArgs { }
    export interface CommentUpdateBatch {
        seq: number;
        state: string;
        fromSeq: number;
        updates: CommentUpdate[];
    }
    export interface CommentUpdateBatchSeqArgs { }
    export interface CommentUpdateBatchStateArgs { }
    export interface CommentUpdateBatchFromSeqArgs { }
    export interface CommentUpdateBatchUpdatesArgs { }
    export type CommentUpdate = CommentReceived | CommentUpdated;
    export interface CommentReceived {
        comment: CommentEntry;
        repeatKey: Nullable<string>;
    }
    export interface CommentReceivedCommentArgs { }
    export interface CommentReceivedRepeatKeyArgs { }
    export interface CommentUpdated {
        comment: CommentEntry;
    }
    export interface CommentUpdatedCommentArgs { }
    export type CommentUpdateContainer = CommentUpdateSingle | CommentUpdateBatch;
    export interface CommentsPeer {
        id: string;
        state: CommentUpdatesState;
        count: number;
        comments: CommentEntry[];
        peerRoot: CommentPeerRoot;
        subscription: Nullable<CommentSubscription>;
    }
    export interface CommentsPeerIdArgs { }
    export interface CommentsPeerStateArgs { }
    export interface CommentsPeerCountArgs { }
    export interface CommentsPeerCommentsArgs { }
    export interface CommentsPeerPeerRootArgs { }
    export interface CommentsPeerSubscriptionArgs { }
    export interface CommentEntry {
        id: string;
        deleted: boolean;
        comment: GeneralMessage;
        betaComment: ModernMessage;
        parentComment: Nullable<CommentEntry>;
        childComments: CommentEntry[];
    }
    export interface CommentEntryIdArgs { }
    export interface CommentEntryDeletedArgs { }
    export interface CommentEntryCommentArgs { }
    export interface CommentEntryBetaCommentArgs { }
    export interface CommentEntryParentCommentArgs { }
    export interface CommentEntryChildCommentsArgs { }
    export type CommentPeerRoot = CommentPeerRootMessage | CommentPeerRootFeedItem | CommentPeerRootPost;
    export interface CommentPeerRootMessage {
        message: GeneralMessage;
        chat: Room;
    }
    export interface CommentPeerRootMessageMessageArgs { }
    export interface CommentPeerRootMessageChatArgs { }
    export interface CommentPeerRootFeedItem {
        item: FeedItem;
    }
    export interface CommentPeerRootFeedItemItemArgs { }
    export interface CommentPeerRootPost {
        post: Post;
    }
    export interface CommentPeerRootPostPostArgs { }
    export type CommentSubscriptionTypeValues = 'ALL' | 'DIRECT';
    export type CommentSubscriptionType = GQLRoots.CommentSubscriptionTypeRoot;
    export interface CommentSubscription {
        type: Nullable<CommentSubscriptionType>;
    }
    export interface CommentSubscriptionTypeArgs { }
    export interface Conference {
        id: string;
        startTime: Nullable<Date>;
        peers: ConferencePeer[];
        room: Nullable<Room>;
        kind: ConferenceKind;
        iceServers: ICEServer[];
        strategy: ConferenceStrategy;
    }
    export interface ConferenceIdArgs { }
    export interface ConferenceStartTimeArgs { }
    export interface ConferencePeersArgs { }
    export interface ConferenceRoomArgs { }
    export interface ConferenceKindArgs { }
    export interface ConferenceIceServersArgs { }
    export interface ConferenceStrategyArgs { }
    export interface ConferencePeer {
        id: string;
        user: User;
        mediaState: ConferencePeerMediaState;
    }
    export interface ConferencePeerIdArgs { }
    export interface ConferencePeerUserArgs { }
    export interface ConferencePeerMediaStateArgs { }
    export interface ConferencePeerMediaState {
        audioPaused: boolean;
        videoPaused: boolean;
        screencastEnabled: boolean;
    }
    export interface ConferencePeerMediaStateAudioPausedArgs { }
    export interface ConferencePeerMediaStateVideoPausedArgs { }
    export interface ConferencePeerMediaStateScreencastEnabledArgs { }
    export interface MediaHeaderExtension {
        kind: string;
        uri: string;
        preferredId: number;
    }
    export interface MediaRtcpFeedback {
        type: string;
        value: Nullable<string>;
    }
    export interface CodecParameter {
        key: string;
        value: string;
    }
    export interface CodecCapabilities {
        kind: string;
        mimeType: string;
        preferredPayloadType: number;
        clockRate: number;
        channels: Nullable<number>;
        parameters: CodecParameter[];
        rtcpFeedback: MediaRtcpFeedback[];
    }
    export interface MediaCapabilities {
        codecs: CodecCapabilities[];
        headerExtensions: MediaHeaderExtension[];
    }
    export interface ICEServer {
        urls: string[];
        username: Nullable<string>;
        credential: Nullable<string>;
    }
    export interface ICEServerUrlsArgs { }
    export interface ICEServerUsernameArgs { }
    export interface ICEServerCredentialArgs { }
    export interface ConferenceMedia {
        id: string;
        streams: MediaStream[];
        iceServers: ICEServer[];
        localMedia: LocalMediaState;
    }
    export interface ConferenceMediaIdArgs { }
    export interface ConferenceMediaStreamsArgs { }
    export interface ConferenceMediaIceServersArgs { }
    export interface ConferenceMediaLocalMediaArgs { }
    export type MediaStreamStateValues = 'WAIT_OFFER' | 'NEED_OFFER' | 'WAIT_ANSWER' | 'NEED_ANSWER' | 'READY';
    export type MediaStreamState = GQLRoots.MediaStreamStateRoot;
    export type IceTransportPolicyValues = 'ALL' | 'RELAY' | 'NONE';
    export type IceTransportPolicy = GQLRoots.IceTransportPolicyRoot;
    export type VideoSourceValues = 'CAMERA' | 'SCREEN';
    export type VideoSource = GQLRoots.VideoSourceRoot;
    export type MediaKindValues = 'AUDIO' | 'VIDEO';
    export type MediaKind = GQLRoots.MediaKindRoot;
    export interface MediaSender {
        kind: MediaKind;
        videoSource: Nullable<VideoSource>;
        codecParams: Nullable<string>;
        mid: Nullable<string>;
    }
    export interface MediaSenderKindArgs { }
    export interface MediaSenderVideoSourceArgs { }
    export interface MediaSenderCodecParamsArgs { }
    export interface MediaSenderMidArgs { }
    export interface MediaReceiver {
        peerId: Nullable<string>;
        kind: MediaKind;
        videoSource: Nullable<VideoSource>;
        mid: Nullable<string>;
    }
    export interface MediaReceiverPeerIdArgs { }
    export interface MediaReceiverKindArgs { }
    export interface MediaReceiverVideoSourceArgs { }
    export interface MediaReceiverMidArgs { }
    export interface MediaStream {
        id: string;
        seq: number;
        state: MediaStreamState;
        sdp: Nullable<string>;
        ice: string[];
        iceTransportPolicy: IceTransportPolicy;
        receivers: MediaReceiver[];
        senders: MediaSender[];
        settings: MediaStreamSettings;
        mediaState: MediaStreamMediaState;
        localStreams: LocalStreamConfig[];
        peerId: Nullable<string>;
    }
    export interface MediaStreamIdArgs { }
    export interface MediaStreamSeqArgs { }
    export interface MediaStreamStateArgs { }
    export interface MediaStreamSdpArgs { }
    export interface MediaStreamIceArgs { }
    export interface MediaStreamIceTransportPolicyArgs { }
    export interface MediaStreamReceiversArgs { }
    export interface MediaStreamSendersArgs { }
    export interface MediaStreamSettingsArgs { }
    export interface MediaStreamMediaStateArgs { }
    export interface MediaStreamLocalStreamsArgs { }
    export interface MediaStreamPeerIdArgs { }
    export type MediaDirectionValues = 'SEND' | 'RECEIVE';
    export type MediaDirection = GQLRoots.MediaDirectionRoot;
    export interface MediaStreamHint {
        peerId: Nullable<string>;
        kind: MediaKind;
        videoSource: Nullable<VideoSource>;
        direction: MediaDirection;
        mid: string;
    }
    export interface ConferenceJoinResult {
        peerId: string;
        conference: Conference;
    }
    export interface ConferenceJoinResultPeerIdArgs { }
    export interface ConferenceJoinResultConferenceArgs { }
    export interface ConferenceJoinInput {
        media: LocalMediaInput;
        capabilities: Nullable<MediaCapabilities>;
    }
    export interface LocalMediaInput {
        supportsVideo: boolean;
        supportsAudio: boolean;
        wantSendVideo: boolean;
        wantSendAudio: boolean;
        wantSendScreencast: boolean;
    }
    export interface LocalMediaState {
        sendVideo: boolean;
        sendAudio: boolean;
        sendScreencast: boolean;
    }
    export interface LocalMediaStateSendVideoArgs { }
    export interface LocalMediaStateSendAudioArgs { }
    export interface LocalMediaStateSendScreencastArgs { }
    export interface Contact {
        id: string;
        user: User;
    }
    export interface ContactIdArgs { }
    export interface ContactUserArgs { }
    export interface ContactConnection {
        items: Contact[];
        cursor: Nullable<string>;
    }
    export interface ContactConnectionItemsArgs { }
    export interface ContactConnectionCursorArgs { }
    export interface ContactsUpdateContainer {
        updates: ContactsUpdate[];
        state: string;
    }
    export interface ContactsUpdateContainerUpdatesArgs { }
    export interface ContactsUpdateContainerStateArgs { }
    export type ContactsUpdate = ContactAdded | ContactRemoved;
    export interface ContactAdded {
        contact: Contact;
    }
    export interface ContactAddedContactArgs { }
    export interface ContactRemoved {
        contact: Contact;
    }
    export interface ContactRemovedContactArgs { }
    export interface ContactsState {
        state: string;
    }
    export interface ContactsStateStateArgs { }
    export interface DialogUpdateSingle {
        seq: number;
        state: string;
        update: DialogUpdate;
    }
    export interface DialogUpdateSingleSeqArgs { }
    export interface DialogUpdateSingleStateArgs { }
    export interface DialogUpdateSingleUpdateArgs { }
    export interface DialogUpdateBatch {
        updates: DialogUpdate[];
        fromSeq: number;
        seq: number;
        state: string;
    }
    export interface DialogUpdateBatchUpdatesArgs { }
    export interface DialogUpdateBatchFromSeqArgs { }
    export interface DialogUpdateBatchSeqArgs { }
    export interface DialogUpdateBatchStateArgs { }
    export type DialogUpdateContainer = DialogUpdateSingle | DialogUpdateBatch;
    export type DialogUpdate = DialogMessageReceived | DialogMessageUpdated | DialogMessageDeleted | DialogMessageRead | DialogTitleUpdated | DialogDeleted | DialogPhotoUpdated | DialogMuteChanged | DialogMentionedChanged | DialogBump | DialogPeerUpdated | DialogCallStateChanged | DialogGotAccess | DialogLostAccess;
    export interface SilentMessageInfo {
        mobile: boolean;
        desktop: boolean;
    }
    export interface SilentMessageInfoMobileArgs { }
    export interface SilentMessageInfoDesktopArgs { }
    export interface ShowNotificationMessageInfo {
        mobile: boolean;
        desktop: boolean;
    }
    export interface ShowNotificationMessageInfoMobileArgs { }
    export interface ShowNotificationMessageInfoDesktopArgs { }
    export interface DialogMessageReceived {
        cid: string;
        message: ConversationMessage;
        betaMessage: RoomMessage;
        alphaMessage: ModernMessage;
        unread: number;
        globalUnread: number;
        haveMention: boolean;
        silent: SilentMessageInfo;
        showNotification: SilentMessageInfo;
        membership: SharedRoomMembershipStatus;
    }
    export interface DialogMessageReceivedCidArgs { }
    export interface DialogMessageReceivedMessageArgs { }
    export interface DialogMessageReceivedBetaMessageArgs { }
    export interface DialogMessageReceivedAlphaMessageArgs { }
    export interface DialogMessageReceivedUnreadArgs { }
    export interface DialogMessageReceivedGlobalUnreadArgs { }
    export interface DialogMessageReceivedHaveMentionArgs { }
    export interface DialogMessageReceivedSilentArgs { }
    export interface DialogMessageReceivedShowNotificationArgs { }
    export interface DialogMessageReceivedMembershipArgs { }
    export interface DialogMessageUpdated {
        cid: string;
        message: ConversationMessage;
        betaMessage: RoomMessage;
        alphaMessage: ModernMessage;
        haveMention: boolean;
    }
    export interface DialogMessageUpdatedCidArgs { }
    export interface DialogMessageUpdatedMessageArgs { }
    export interface DialogMessageUpdatedBetaMessageArgs { }
    export interface DialogMessageUpdatedAlphaMessageArgs { }
    export interface DialogMessageUpdatedHaveMentionArgs { }
    export interface DialogMessageDeleted {
        cid: string;
        message: ConversationMessage;
        betaMessage: RoomMessage;
        prevMessage: Nullable<RoomMessage>;
        alphaPrevMessage: Nullable<ModernMessage>;
        alphaMessage: ModernMessage;
        unread: number;
        globalUnread: number;
        haveMention: boolean;
    }
    export interface DialogMessageDeletedCidArgs { }
    export interface DialogMessageDeletedMessageArgs { }
    export interface DialogMessageDeletedBetaMessageArgs { }
    export interface DialogMessageDeletedPrevMessageArgs { }
    export interface DialogMessageDeletedAlphaPrevMessageArgs { }
    export interface DialogMessageDeletedAlphaMessageArgs { }
    export interface DialogMessageDeletedUnreadArgs { }
    export interface DialogMessageDeletedGlobalUnreadArgs { }
    export interface DialogMessageDeletedHaveMentionArgs { }
    export interface DialogMessageRead {
        cid: string;
        mid: Nullable<string>;
        unread: number;
        globalUnread: number;
        haveMention: boolean;
    }
    export interface DialogMessageReadCidArgs { }
    export interface DialogMessageReadMidArgs { }
    export interface DialogMessageReadUnreadArgs { }
    export interface DialogMessageReadGlobalUnreadArgs { }
    export interface DialogMessageReadHaveMentionArgs { }
    export interface DialogTitleUpdated {
        cid: string;
        title: string;
    }
    export interface DialogTitleUpdatedCidArgs { }
    export interface DialogTitleUpdatedTitleArgs { }
    export interface DialogPhotoUpdated {
        cid: string;
        photo: Nullable<string>;
    }
    export interface DialogPhotoUpdatedCidArgs { }
    export interface DialogPhotoUpdatedPhotoArgs { }
    export interface DialogDeleted {
        cid: string;
        globalUnread: number;
    }
    export interface DialogDeletedCidArgs { }
    export interface DialogDeletedGlobalUnreadArgs { }
    export interface DialogBump {
        cid: string;
        globalUnread: number;
        unread: number;
        topMessage: Nullable<ModernMessage>;
        haveMention: boolean;
        membership: SharedRoomMembershipStatus;
    }
    export interface DialogBumpCidArgs { }
    export interface DialogBumpGlobalUnreadArgs { }
    export interface DialogBumpUnreadArgs { }
    export interface DialogBumpTopMessageArgs { }
    export interface DialogBumpHaveMentionArgs { }
    export interface DialogBumpMembershipArgs { }
    export interface DialogGotAccess {
        cid: string;
    }
    export interface DialogGotAccessCidArgs { }
    export interface DialogLostAccess {
        cid: string;
    }
    export interface DialogLostAccessCidArgs { }
    export interface DialogMuteChanged {
        cid: string;
        mute: boolean;
        globalUnread: number;
    }
    export interface DialogMuteChangedCidArgs { }
    export interface DialogMuteChangedMuteArgs { }
    export interface DialogMuteChangedGlobalUnreadArgs { }
    export interface DialogPeerUpdated {
        cid: string;
        peer: Room;
    }
    export interface DialogPeerUpdatedCidArgs { }
    export interface DialogPeerUpdatedPeerArgs { }
    export interface DialogCallStateChanged {
        cid: string;
        hasActiveCall: boolean;
    }
    export interface DialogCallStateChangedCidArgs { }
    export interface DialogCallStateChangedHasActiveCallArgs { }
    export interface DialogMentionedChanged {
        cid: string;
        haveMention: boolean;
    }
    export interface DialogMentionedChangedCidArgs { }
    export interface DialogMentionedChangedHaveMentionArgs { }
    export interface DialogUpdateState {
        state: Nullable<string>;
    }
    export interface DialogUpdateStateStateArgs { }
    export interface Draft {
        message: Nullable<string>;
        date: Date;
        version: number;
    }
    export interface DraftMessageArgs { }
    export interface DraftDateArgs { }
    export interface DraftVersionArgs { }
    export interface EnvVar {
        name: string;
        value: string;
    }
    export interface EnvVarNameArgs { }
    export interface EnvVarValueArgs { }
    export interface FeedUpdateContainer {
        updates: FeedUpdate[];
        state: string;
    }
    export interface FeedUpdateContainerUpdatesArgs { }
    export interface FeedUpdateContainerStateArgs { }
    export type FeedUpdate = FeedItemReceived | FeedItemUpdated | FeedItemDeleted | FeedRebuildNeeded;
    export interface FeedItemReceived {
        item: FeedItem;
    }
    export interface FeedItemReceivedItemArgs { }
    export interface FeedItemUpdated {
        item: FeedItem;
    }
    export interface FeedItemUpdatedItemArgs { }
    export interface FeedItemDeleted {
        item: FeedItem;
    }
    export interface FeedItemDeletedItemArgs { }
    export interface FeedRebuildNeeded {
        homeFeed: FeedItemConnection;
    }
    export interface FeedRebuildNeededHomeFeedArgs { }
    export interface GeoLocation {
        long: number;
        lat: number;
    }
    export interface GeoLocationLongArgs { }
    export interface GeoLocationLatArgs { }
    export interface IpLocation {
        ip: string;
        countryCode: Nullable<string>;
        locationName: Nullable<string>;
        location: Nullable<GeoLocation>;
    }
    export interface IpLocationIpArgs { }
    export interface IpLocationCountryCodeArgs { }
    export interface IpLocationLocationNameArgs { }
    export interface IpLocationLocationArgs { }
    export interface ImageSticker {
        id: string;
        image: ImageRef;
        pack: StickerPack;
        emoji: string;
    }
    export interface ImageStickerIdArgs { }
    export interface ImageStickerImageArgs { }
    export interface ImageStickerPackArgs { }
    export interface ImageStickerEmojiArgs { }
    export type Sticker = ImageSticker;
    export interface StickerPack {
        id: string;
        title: string;
        stickers: Sticker[];
        author: User;
        usesCount: number;
        added: boolean;
        published: boolean;
    }
    export interface StickerPackIdArgs { }
    export interface StickerPackTitleArgs { }
    export interface StickerPackStickersArgs { }
    export interface StickerPackAuthorArgs { }
    export interface StickerPackUsesCountArgs { }
    export interface StickerPackAddedArgs { }
    export interface StickerPackPublishedArgs { }
    export interface UserStickers {
        packs: StickerPack[];
        favorites: Sticker[];
    }
    export interface UserStickersPacksArgs { }
    export interface UserStickersFavoritesArgs { }
    export interface StickerInput {
        image: ImageRefInput;
        emoji: string;
    }
    export interface StickerPackInput {
        title: Nullable<string>;
        published: Nullable<boolean>;
    }
    export interface MessageReaction {
        user: User;
        reaction: string;
    }
    export interface MessageReactionUserArgs { }
    export interface MessageReactionReactionArgs { }
    export interface MessageAttachment {
        fileId: string;
        fileMetadata: Nullable<FileMetadata>;
        filePreview: Nullable<string>;
    }
    export interface MessageAttachmentFileIdArgs { }
    export interface MessageAttachmentFileMetadataArgs { }
    export interface MessageAttachmentFilePreviewArgs { }
    export type MessageButtonStyleValues = 'DEFAULT' | 'LIGHT';
    export type MessageButtonStyle = GQLRoots.MessageButtonStyleRoot;
    export interface MessageButton {
        title: string;
        style: MessageButtonStyle;
        id: string;
    }
    export interface MessageButtonTitleArgs { }
    export interface MessageButtonStyleArgs { }
    export interface MessageButtonIdArgs { }
    export interface MessageButtonInput {
        title: string;
        style: MessageButtonStyle;
        id: string;
    }
    export type MessageTypeValues = 'MESSAGE' | 'POST';
    export type MessageType = GQLRoots.MessageTypeRoot;
    export type PostMessageTypeValues = 'BLANK' | 'JOB_OPPORTUNITY' | 'OFFICE_HOURS' | 'REQUEST_FOR_STARTUPS';
    export type PostMessageType = GQLRoots.PostMessageTypeRoot;
    export interface Mutation {
        lifecheck: Nullable<string>;
        alphaSendMessage: ConversationEventMessage;
        alphaReadChat: ChatReadResult;
        alphaEditMessage: ConversationEventEditMessage;
        alphaSendIntro: ConversationEventMessage;
        alphaEditIntro: ConversationEventMessage;
        alphaDeleteMessageUrlAugmentation: ConversationEventMessage;
        alphaDeleteMessage: ConversationEventDelete;
        alphaChatSetReaction: string;
        alphaChatUnsetReaction: string;
        alphaGlobalRead: string;
        alphaBlockUser: string;
        alphaUnblockUser: string;
        alphaChatCreateGroup: Conversation;
        alphaChatUpdateGroup: ConversationUpdateResponse;
        alphaChatChangeGroupTitle: GroupChatUpdateResponse;
        alphaChatInviteToGroup: GroupChatUpdateResponse;
        alphaChatKickFromGroup: GroupChatUpdateResponse;
        alphaChatChangeRoleInGroup: GroupChatUpdateResponse;
        alphaChatCopyGroup: GroupChatUpdateResponse;
        alphaChatLeave: ConversationUpdateResponse;
        alphaUpdateConversationSettings: ConversationSettings;
        cardCreateSetupIntent: CardSetupIntent;
        cardCommitSetupIntent: CreditCard;
        cardRemove: CreditCard;
        cardMakeDefault: CreditCard;
        cardDepositEnqueue: boolean;
        cardDepositIntent: PaymentIntent;
        paymentIntentCommit: boolean;
        paymentCancel: boolean;
        subscriptionCancel: WalletSubscription;
        alphaJoinInvite: string;
        joinAppInvite: string;
        phonebookAdd: boolean;
        channelCreate: Channel;
        channelCreatePublic: Channel;
        debugSendSMS: boolean;
        debugSerializeId: string;
        debugSendEmail: Nullable<boolean>;
        debugCreateTestUser: User;
        debugDeleteUrlInfoCache: Nullable<boolean>;
        debugDeleteUrlInfoCacheAll: Nullable<boolean>;
        debugSuperNotifications: boolean;
        debugCalcUsersMessagingStats: boolean;
        debugCalcUsersChatsStats: boolean;
        debugConvertOrgChatToNormal: boolean;
        debugDeleteEmptyOrgChats: boolean;
        debugFixCommentsVisibility: boolean;
        debugSetCommentVisibility: boolean;
        debugRemoveDeletedDialogs: boolean;
        debugReindexOrgs: boolean;
        debugCalcRoomsActiveMembers: boolean;
        debugCalcOrgsActiveMembers: boolean;
        debugCreateCommentSubscriptions: boolean;
        debugDeveloperInit: boolean;
        debugResetAudienceCounter: boolean;
        debugCalcUsersAudienceCounter: boolean;
        debugCalcUsers2WayDirectChatsCounter: boolean;
        debugFixMessage: boolean;
        debugEnableNotificationCenterForAll: boolean;
        debugResetGlobalCounters: boolean;
        debugCalcGlobalCountersForAll: boolean;
        debugValidateGlobalCountersForAll: boolean;
        debugCreateBigChat: boolean;
        debugFlood: boolean;
        debugQueueDailyEngagementReport: boolean;
        debugQueueDailyOnboardingReport: boolean;
        debugQueueWeeklyEngagementReport: boolean;
        debugQueueWeeklyOnboardingReport: boolean;
        debugQueueWeeklyUserLeaderboard: boolean;
        debugQueueWeeklyRoomLeaderboard: boolean;
        debugQueueWeeklyRoomByMessagesLeaderboard: boolean;
        debugReindexUserProfiles: boolean;
        debugReindexRoomProfiles: boolean;
        debugSendPush: boolean;
        debugReindexPrivateDialogs: boolean;
        debugReindexUsersDialogs: boolean;
        debugReindexFeedEvents: boolean;
        debugChangeUserEmail: boolean;
        debugSwapUserEmails: boolean;
        debugFindUsefulCommunities: boolean;
        debugFixStickerPack: Nullable<StickerPack>;
        debugReverseStickers: boolean;
        debugReindexShortnames: boolean;
        debugFixHyperlogEvent: boolean;
        debugReindexFeedChannelAdmins: boolean;
        debugReindexFeedChannels: boolean;
        debugReindexFeedTopics: boolean;
        debugCalcChannelPostsCount: boolean;
        debugCalcChannelsSubscribersCount: boolean;
        debugResetUrlInfoFreshness: boolean;
        debugFixUsersPrimaryOrganization: boolean;
        debugResetPushDelivery: boolean;
        debugAddStickerPackToAll: boolean;
        debugReplaceCommunityForChat: boolean;
        debugRecountSeqForMessages: boolean;
        debugReindexRoomMessagesCounter: boolean;
        debugQueueDailyPaidLeaderboard: boolean;
        debugQueueWeeklyPaidLeaderboard: boolean;
        debugSendHiddenMessage: boolean;
        debugFixBrokenDonations: boolean;
        debugCreateTransfer: string;
        debugSetCommission: boolean;
        debugFixEditedMessagesAugmentation: boolean;
        debugReindexUsers: boolean;
        debugSetChatPayments: boolean;
        debugCalcEntitiesCount: boolean;
        debugCalcEntitiesCountAll: boolean;
        debugSetRoomOwner: boolean;
        debugClearSchedulerFromConferences: boolean;
        debugInvalidateAllMessages: boolean;
        debugFixUserSettings: boolean;
        debugFixDeletedRooms: boolean;
        debugUnsubscribeEveryoneFromChat: number;
        debugInviteMembersFromChat: boolean;
        debugDeleteAllContacts: boolean;
        debugChangeGlobalCounterTypeForAll: boolean;
        debugReindexOrganizationMembers: boolean;
        debugReindexRoomParticipants: boolean;
        debugDeleteTask: boolean;
        debugDeliverCallStateEventsForAll: boolean;
        debugMigrateMuteSettings: boolean;
        debugMigrateUserChatsList: boolean;
        debugFreeUnusedShortnames: boolean;
        debugFreeShortname: boolean;
        debugRemoveKickedUsersFromOrgChats: boolean;
        debugMigrateToNewCounters: boolean;
        debugMigrateToNewLastRead: boolean;
        debugFixReadSeqs: boolean;
        debugExportUsers: boolean;
        debugMigrateUserStatus: boolean;
        debugMigrateToExperimentalCounters: boolean;
        debugFixCompactMessages: boolean;
        debugMigrateToNewerCounters: boolean;
        debugUserAuth: boolean;
        debugCreateOrganizationMailing: boolean;
        debugPaymentCancel: boolean;
        debugInvalidateAllSocialImages: boolean;
        debugChangeChatPrice: boolean;
        settingsUpdate: Settings;
        sendEmailPairCode: string;
        pairEmail: boolean;
        sendPhonePairCode: string;
        pairPhone: boolean;
        updateSettings: Settings;
        conferenceAlterMediaState: Conference;
        conferenceAddScreenShare: Conference;
        conferenceRemoveScreenShare: Conference;
        conferenceAlterSettings: Conference;
        mediaStreamNegotiationNeeded: ConferenceMedia;
        createOauthApp: OauthApp;
        updateOauthApp: OauthApp;
        betaOrganizationMemberRequestApprove: Organization;
        betaOrganizationMemberRemove: Organization;
        betaOrganizationMemberAdd: Organization;
        alphaOrganizationMemberAdd: OrganizationJoinedMember[];
        alphaOrganizationChangeMemberRole: string;
        alphaOrganizationInviteMembers: string;
        alphaOrganizationRefreshInviteLink: Invite;
        alphaOrganizationCreatePublicInvite: Invite;
        alphaOrganizationRemoveMember: string;
        alphaOrganizationDeletePublicInvite: string;
        profileCreate: Profile;
        profileUpdate: Profile;
        createProfile: Profile;
        updateProfile: Profile;
        alphaCreateUserProfileAndOrganization: AlphaSignupData;
        superAccountAdd: SuperAccount;
        superAccountRename: SuperAccount;
        superAccountActivate: SuperAccount;
        superAccountSuspend: SuperAccount;
        superAccountPend: SuperAccount;
        superAccountMemberAdd: SuperAccount;
        superAccountMemberRemove: SuperAccount;
        superAccountChannelMemberAdd: string;
        superDeleteUser: boolean;
        superAdminAdd: string;
        superAdminRemove: string;
        alphaAlterPublished: Organization;
        betaFixCounter: boolean;
        betaFixCountersForAll: boolean;
        deliverCountersForAll: boolean;
        banUser: boolean;
        unBanUser: boolean;
        discoverCollectionsCreate: DiscoverChatsCollection;
        discoverCollectionsUpdate: DiscoverChatsCollection;
        discoverCollectionsDelete: boolean;
        discoverEditorsChoiceCreate: EditorsChoiceChat;
        discoverEditorsChoiceUpdate: EditorsChoiceChat;
        discoverEditorsChoiceDelete: boolean;
        track: string;
        createApp: AppProfile;
        createSuperApp: AppProfile;
        refreshAppToken: AppProfile;
        updateAppProfile: AppProfile;
        deleteApp: boolean;
        addAppToChat: AppChat;
        userStorageSet: AppStorageValue[];
        userEventBusPublish: boolean;
        globalEventBusPublish: boolean;
        betaAddComment: CommentEntry;
        betaAddStickerComment: CommentEntry;
        editComment: boolean;
        deleteComment: boolean;
        deleteCommentAugmentation: boolean;
        commentReactionAdd: boolean;
        commentReactionRemove: boolean;
        subscribeToComments: boolean;
        unsubscribeFromComments: boolean;
        conferenceJoin: ConferenceJoinResult;
        conferenceKeepAlive: Conference;
        conferenceLeave: Conference;
        conferenceRequestLocalMediaChange: Conference;
        mediaStreamOffer: ConferenceMedia;
        mediaStreamAnswer: ConferenceMedia;
        mediaStreamCandidate: ConferenceMedia;
        mediaStreamFailed: ConferenceMedia;
        addToContacts: boolean;
        removeFromContacts: boolean;
        conversationDraftUpdate: Draft;
        setEnvVar: boolean;
        setEnvVarString: boolean;
        setEnvVarNumber: boolean;
        setEnvVarBoolean: boolean;
        stickerPackCreate: StickerPack;
        stickerPackUpdate: StickerPack;
        stickerPackAddSticker: Sticker;
        stickerPackRemoveSticker: boolean;
        stickerPackAddToCollection: boolean;
        stickerPackRemoveFromCollection: boolean;
        stickerAddToFavorites: boolean;
        stickerRemoveFromFavorites: boolean;
        roomRead: boolean;
        betaMessageSend: boolean;
        betaMessageEdit: boolean;
        betaMessageDeleteAugmentation: boolean;
        betaMessageDelete: boolean;
        betaReactionSet: boolean;
        betaReactionRemove: boolean;
        betaIntroSend: boolean;
        betaIntroEdit: boolean;
        readNotification: NotificationCenter;
        deleteNotification: boolean;
        notificationCenterMarkSeqRead: boolean;
        debugCreateNotification: boolean;
        presenceReportOnline: string;
        presenceReportOffline: string;
        updateOrganizationProfile: OrganizationProfile;
        deleteOrganization: boolean;
        createOrganization: Organization;
        requestOrganizationMembersExport: boolean;
        postDraftCreate: PostDraft;
        postDraftUpdate: PostDraft;
        postDraftPublish: Post;
        postsDropAll: boolean;
        registerWebPush: string;
        registerPush: string;
        debugSendAndroidDataPush: boolean;
        debugSendAppleDataPush: boolean;
        terminateSession: boolean;
        terminateAllSessionsExcept: boolean;
        betaDiscoverSkip: Nullable<DiscoverPage>;
        betaNextDiscoverReset: boolean;
        betaNextDiscoverPageOrChats: Nullable<DiscoverPage>;
        betaSaveSelectedTags: Nullable<DiscoverPage>;
        betaSubmitNextDiscover: Nullable<DiscoverPage>;
        matchmakingRoomSave: MatchmakingRoom;
        matchmakingProfileFill: MatchmakingProfile;
        matchmakingConnect: boolean;
        createHistoricUserMetricsReport: boolean;
        queueWeeklyRoomScreenViewsLeaderboard: boolean;
        typingSend: string;
        typingCancel: string;
        reportContent: Nullable<boolean>;
        deleteMyAccount: boolean;
        superBadgeCreateToRoom: UserBadge;
        superBadgeUnsetToRoom: boolean;
        badgeCreate: User;
        badgeCreateToRoom: UserBadge;
        badgeSetToRoom: UserBadge;
        badgeUnsetToRoom: boolean;
        badgeDelete: User;
        badgeSetPrimary: User;
        badgeUnsetPrimary: User;
        superBadgeCreate: User;
        superBadgeSetToRoom: UserBadge;
        superBadgeDelete: User;
        superBadgeVerify: User;
        superBadgeUnverify: User;
        alphaCreateFeedPost: FeedItem;
        alphaEditFeedPost: FeedItem;
        alphaDeleteFeedPost: boolean;
        feedReactionAdd: boolean;
        feedReactionRemove: boolean;
        alphaFeedCreateChannel: FeedChannel;
        alphaFeedUpdateChannel: FeedChannel;
        alphaFeedChannelSubscribe: boolean;
        alphaFeedChannelUnsubscribe: boolean;
        alphaFeedChannelAddEditor: boolean;
        alphaFeedChannelRemoveEditor: boolean;
        alphaFeedChannelEnableRoomAutoSubscription: boolean;
        alphaFeedChannelDisableRoomAutoSubscription: boolean;
        alphaFeedChannelEnableCommunityAutoSubscription: boolean;
        alphaFeedChannelDisableCommunityAutoSubscription: boolean;
        sendMessage: boolean;
        sendSticker: boolean;
        sendDonation: boolean;
        editMessage: boolean;
        pinMessage: boolean;
        unpinMessage: boolean;
        betaPinMessage: SharedRoom;
        betaUnpinMessage: SharedRoom;
        gammaPinMessage: Room;
        gammaUnpinMessage: Room;
        messageReactionAdd: boolean;
        messageDonationReactionAdd: boolean;
        messageReactionRemove: boolean;
        deleteChat: boolean;
        archiveChat: boolean;
        betaRoomCreate: SharedRoom;
        betaRoomUpdate: Room;
        betaRoomMove: Room;
        betaRoomInvite: Room;
        alphaRoomInvite: RoomMember[];
        betaRoomKick: Room;
        betaRoomLeave: Room;
        betaRoomChangeRole: Room;
        betaRoomJoin: Room;
        betaRoomsJoin: Room[];
        betaRoomDeclineJoinRequest: Room;
        betaBuyPremiumChatSubscription: SharedRoom;
        betaBuyPremiumChatPass: SharedRoom;
        betaRoomInviteLinkSendEmail: string;
        betaRoomInviteLinkJoin: Room;
        betaRoomInviteLinkRenew: string;
        betaRoomUpdateUserNotificationSettings: RoomUserNotificaionSettings;
        betaRoomsInviteUser: Room[];
        betaRoomAlterFeatured: RoomSuper;
        betaRoomAlterListed: RoomSuper;
        betaRoomSetupAutosubscribe: RoomSuper;
        updateWelcomeMessage: boolean;
        alphaSetUserShortName: Nullable<string>;
        alphaSetOrgShortName: Nullable<string>;
        alphaSetFeedChannelShortName: Nullable<string>;
        alphaSetRoomShortName: Nullable<string>;
        alphaSetCollectionShortName: Nullable<string>;
    }
    export interface MutationLifecheckArgs { }
    export interface MutationAlphaSendMessageArgs {
        conversationId: string;
        message: OptionalNullable<string>;
        file: OptionalNullable<string>;
        repeatKey: OptionalNullable<string>;
        replyMessages: OptionalNullable<string[]>;
        mentions: OptionalNullable<string[]>;
    }
    export interface MutationAlphaReadChatArgs {
        conversationId: string;
        messageId: string;
    }
    export interface MutationAlphaEditMessageArgs {
        messageId: string;
        message: OptionalNullable<string>;
        file: OptionalNullable<string>;
        replyMessages: OptionalNullable<string[]>;
        mentions: OptionalNullable<string[]>;
    }
    export interface MutationAlphaSendIntroArgs {
        conversationId: string;
        userId: string;
        about: OptionalNullable<string>;
        message: OptionalNullable<string>;
        file: OptionalNullable<string>;
        repeatKey: OptionalNullable<string>;
    }
    export interface MutationAlphaEditIntroArgs {
        messageId: string;
        userId: string;
        about: OptionalNullable<string>;
        message: OptionalNullable<string>;
        file: OptionalNullable<string>;
    }
    export interface MutationAlphaDeleteMessageUrlAugmentationArgs {
        messageId: string;
    }
    export interface MutationAlphaDeleteMessageArgs {
        messageId: string;
    }
    export interface MutationAlphaChatSetReactionArgs {
        messageId: string;
        reaction: string;
    }
    export interface MutationAlphaChatUnsetReactionArgs {
        messageId: string;
        reaction: string;
    }
    export interface MutationAlphaGlobalReadArgs {
        toSeq: number;
    }
    export interface MutationAlphaBlockUserArgs {
        userId: string;
    }
    export interface MutationAlphaUnblockUserArgs {
        userId: string;
        conversationId: OptionalNullable<string>;
    }
    export interface MutationAlphaChatCreateGroupArgs {
        title: OptionalNullable<string>;
        photoRef: OptionalNullable<ImageRefInput>;
        members: string[];
        message: OptionalNullable<string>;
    }
    export interface MutationAlphaChatUpdateGroupArgs {
        conversationId: string;
        input: UpdateGroupInput;
    }
    export interface MutationAlphaChatChangeGroupTitleArgs {
        conversationId: string;
        title: string;
    }
    export interface MutationAlphaChatInviteToGroupArgs {
        conversationId: string;
        invites: GroupConversationInvite[];
    }
    export interface MutationAlphaChatKickFromGroupArgs {
        conversationId: string;
        userId: string;
    }
    export interface MutationAlphaChatChangeRoleInGroupArgs {
        conversationId: string;
        userId: string;
        newRole: string;
    }
    export interface MutationAlphaChatCopyGroupArgs {
        conversationId: string;
        title: OptionalNullable<string>;
        extraMembers: OptionalNullable<string[]>;
        message: string;
    }
    export interface MutationAlphaChatLeaveArgs {
        conversationId: string;
    }
    export interface MutationAlphaUpdateConversationSettingsArgs {
        settings: UpdateConversationSettingsInput;
        conversationId: string;
    }
    export interface MutationCardCreateSetupIntentArgs {
        retryKey: string;
    }
    export interface MutationCardCommitSetupIntentArgs {
        id: string;
        pmid: string;
    }
    export interface MutationCardRemoveArgs {
        id: string;
    }
    export interface MutationCardMakeDefaultArgs {
        id: string;
    }
    export interface MutationCardDepositEnqueueArgs {
        amount: number;
        retryKey: string;
    }
    export interface MutationCardDepositIntentArgs {
        id: string;
        amount: number;
        retryKey: string;
    }
    export interface MutationPaymentIntentCommitArgs {
        id: string;
    }
    export interface MutationPaymentCancelArgs {
        id: string;
    }
    export interface MutationSubscriptionCancelArgs {
        id: string;
    }
    export interface MutationAlphaJoinInviteArgs {
        key: string;
        isNewUser: OptionalNullable<boolean>;
    }
    export interface MutationJoinAppInviteArgs {
        key: string;
        isNewUser: OptionalNullable<boolean>;
    }
    export interface MutationPhonebookAddArgs {
        records: PhonebookRecordInput[];
    }
    export interface MutationChannelCreateArgs {
        input: ChannelInput;
    }
    export interface MutationChannelCreatePublicArgs {
        input: ChannelInput;
    }
    export interface MutationDebugSendSMSArgs {
        to: string;
        message: string;
    }
    export interface MutationDebugSerializeIdArgs {
        id: number;
        type: string;
    }
    export interface MutationDebugSendEmailArgs {
        type: DebugEmailType;
    }
    export interface MutationDebugCreateTestUserArgs {
        key: string;
        name: string;
    }
    export interface MutationDebugDeleteUrlInfoCacheArgs {
        url: string;
    }
    export interface MutationDebugDeleteUrlInfoCacheAllArgs { }
    export interface MutationDebugSuperNotificationsArgs {
        type: SuperNotificationType;
    }
    export interface MutationDebugCalcUsersMessagingStatsArgs { }
    export interface MutationDebugCalcUsersChatsStatsArgs { }
    export interface MutationDebugConvertOrgChatToNormalArgs {
        orgId: string;
    }
    export interface MutationDebugDeleteEmptyOrgChatsArgs { }
    export interface MutationDebugFixCommentsVisibilityArgs { }
    export interface MutationDebugSetCommentVisibilityArgs {
        commentId: string;
        visible: boolean;
    }
    export interface MutationDebugRemoveDeletedDialogsArgs { }
    export interface MutationDebugReindexOrgsArgs {
        marActivatedOrgsListed: boolean;
    }
    export interface MutationDebugCalcRoomsActiveMembersArgs { }
    export interface MutationDebugCalcOrgsActiveMembersArgs { }
    export interface MutationDebugCreateCommentSubscriptionsArgs { }
    export interface MutationDebugDeveloperInitArgs { }
    export interface MutationDebugResetAudienceCounterArgs {
        uid: OptionalNullable<string>;
    }
    export interface MutationDebugCalcUsersAudienceCounterArgs { }
    export interface MutationDebugCalcUsers2WayDirectChatsCounterArgs { }
    export interface MutationDebugFixMessageArgs {
        id: number;
    }
    export interface MutationDebugEnableNotificationCenterForAllArgs { }
    export interface MutationDebugResetGlobalCountersArgs { }
    export interface MutationDebugCalcGlobalCountersForAllArgs { }
    export interface MutationDebugValidateGlobalCountersForAllArgs { }
    export interface MutationDebugCreateBigChatArgs {
        membersCount: number;
    }
    export interface MutationDebugFloodArgs {
        chat: string;
        messagesCount: number;
    }
    export interface MutationDebugQueueDailyEngagementReportArgs { }
    export interface MutationDebugQueueDailyOnboardingReportArgs { }
    export interface MutationDebugQueueWeeklyEngagementReportArgs { }
    export interface MutationDebugQueueWeeklyOnboardingReportArgs { }
    export interface MutationDebugQueueWeeklyUserLeaderboardArgs { }
    export interface MutationDebugQueueWeeklyRoomLeaderboardArgs { }
    export interface MutationDebugQueueWeeklyRoomByMessagesLeaderboardArgs { }
    export interface MutationDebugReindexUserProfilesArgs { }
    export interface MutationDebugReindexRoomProfilesArgs { }
    export interface MutationDebugSendPushArgs {
        id: string;
        message: string;
    }
    export interface MutationDebugReindexPrivateDialogsArgs { }
    export interface MutationDebugReindexUsersDialogsArgs { }
    export interface MutationDebugReindexFeedEventsArgs { }
    export interface MutationDebugChangeUserEmailArgs {
        uid: string;
        email: string;
    }
    export interface MutationDebugSwapUserEmailsArgs {
        uid1: string;
        uid2: string;
    }
    export interface MutationDebugFindUsefulCommunitiesArgs { }
    export interface MutationDebugFixStickerPackArgs {
        id: string;
        stickers: StickerInput[];
    }
    export interface MutationDebugReverseStickersArgs { }
    export interface MutationDebugReindexShortnamesArgs { }
    export interface MutationDebugFixHyperlogEventArgs {
        eventId: string;
    }
    export interface MutationDebugReindexFeedChannelAdminsArgs { }
    export interface MutationDebugReindexFeedChannelsArgs { }
    export interface MutationDebugReindexFeedTopicsArgs { }
    export interface MutationDebugCalcChannelPostsCountArgs { }
    export interface MutationDebugCalcChannelsSubscribersCountArgs { }
    export interface MutationDebugResetUrlInfoFreshnessArgs { }
    export interface MutationDebugFixUsersPrimaryOrganizationArgs { }
    export interface MutationDebugResetPushDeliveryArgs { }
    export interface MutationDebugAddStickerPackToAllArgs {
        packId: string;
    }
    export interface MutationDebugReplaceCommunityForChatArgs {
        chatId: string;
        newCommunityId: string;
    }
    export interface MutationDebugRecountSeqForMessagesArgs { }
    export interface MutationDebugReindexRoomMessagesCounterArgs { }
    export interface MutationDebugQueueDailyPaidLeaderboardArgs { }
    export interface MutationDebugQueueWeeklyPaidLeaderboardArgs { }
    export interface MutationDebugSendHiddenMessageArgs {
        uid: string;
        message: string;
    }
    export interface MutationDebugFixBrokenDonationsArgs { }
    export interface MutationDebugCreateTransferArgs {
        fromUid: string;
        toUid: string;
        amount: number;
    }
    export interface MutationDebugSetCommissionArgs {
        cid: string;
        percents: number;
    }
    export interface MutationDebugFixEditedMessagesAugmentationArgs { }
    export interface MutationDebugReindexUsersArgs { }
    export interface MutationDebugSetChatPaymentsArgs {
        cid: string;
        price: number;
        interval: OptionalNullable<WalletSubscriptionInterval>;
    }
    export interface MutationDebugCalcEntitiesCountArgs {
        entity: string;
    }
    export interface MutationDebugCalcEntitiesCountAllArgs { }
    export interface MutationDebugSetRoomOwnerArgs {
        roomId: string;
        owner: string;
    }
    export interface MutationDebugClearSchedulerFromConferencesArgs { }
    export interface MutationDebugInvalidateAllMessagesArgs { }
    export interface MutationDebugFixUserSettingsArgs { }
    export interface MutationDebugFixDeletedRoomsArgs { }
    export interface MutationDebugUnsubscribeEveryoneFromChatArgs {
        cid: string;
    }
    export interface MutationDebugInviteMembersFromChatArgs {
        cid: string;
        dest: string;
    }
    export interface MutationDebugDeleteAllContactsArgs { }
    export interface MutationDebugChangeGlobalCounterTypeForAllArgs { }
    export interface MutationDebugReindexOrganizationMembersArgs { }
    export interface MutationDebugReindexRoomParticipantsArgs { }
    export interface MutationDebugDeleteTaskArgs {
        taskType: string;
        id: string;
    }
    export interface MutationDebugDeliverCallStateEventsForAllArgs { }
    export interface MutationDebugMigrateMuteSettingsArgs { }
    export interface MutationDebugMigrateUserChatsListArgs { }
    export interface MutationDebugFreeUnusedShortnamesArgs { }
    export interface MutationDebugFreeShortnameArgs {
        shortname: string;
    }
    export interface MutationDebugRemoveKickedUsersFromOrgChatsArgs { }
    export interface MutationDebugMigrateToNewCountersArgs { }
    export interface MutationDebugMigrateToNewLastReadArgs { }
    export interface MutationDebugFixReadSeqsArgs { }
    export interface MutationDebugExportUsersArgs { }
    export interface MutationDebugMigrateUserStatusArgs { }
    export interface MutationDebugMigrateToExperimentalCountersArgs { }
    export interface MutationDebugFixCompactMessagesArgs { }
    export interface MutationDebugMigrateToNewerCountersArgs { }
    export interface MutationDebugUserAuthArgs {
        id: string;
    }
    export interface MutationDebugCreateOrganizationMailingArgs {
        oid: string;
        uid: string;
        message: string;
        spans: OptionalNullable<MessageSpanInput[]>;
    }
    export interface MutationDebugPaymentCancelArgs {
        id: string;
    }
    export interface MutationDebugInvalidateAllSocialImagesArgs { }
    export interface MutationDebugChangeChatPriceArgs {
        cid: string;
        price: number;
    }
    export interface MutationSettingsUpdateArgs {
        settings: OptionalNullable<UpdateSettingsInput>;
        uid: OptionalNullable<string>;
    }
    export interface MutationSendEmailPairCodeArgs {
        email: string;
    }
    export interface MutationPairEmailArgs {
        sessionId: string;
        confirmationCode: string;
    }
    export interface MutationSendPhonePairCodeArgs {
        phone: string;
    }
    export interface MutationPairPhoneArgs {
        sessionId: string;
        confirmationCode: string;
    }
    export interface MutationUpdateSettingsArgs {
        settings: OptionalNullable<UpdateSettingsInput>;
    }
    export interface MutationConferenceAlterMediaStateArgs {
        id: string;
        state: MediaStreamMediaStateInput;
    }
    export interface MutationConferenceAddScreenShareArgs {
        id: string;
    }
    export interface MutationConferenceRemoveScreenShareArgs {
        id: string;
    }
    export interface MutationConferenceAlterSettingsArgs {
        id: string;
        settings: ConferenceSettingsInput;
    }
    export interface MutationMediaStreamNegotiationNeededArgs {
        id: string;
        peerId: string;
        seq: OptionalNullable<number>;
    }
    export interface MutationCreateOauthAppArgs {
        input: OauthAppInput;
    }
    export interface MutationUpdateOauthAppArgs {
        id: string;
        input: OauthAppInput;
    }
    export interface MutationBetaOrganizationMemberRequestApproveArgs {
        userId: string;
        organizationId: string;
    }
    export interface MutationBetaOrganizationMemberRemoveArgs {
        userId: string;
        organizationId: string;
    }
    export interface MutationBetaOrganizationMemberAddArgs {
        userId: OptionalNullable<string>;
        userIds: OptionalNullable<string[]>;
        organizationId: string;
    }
    export interface MutationAlphaOrganizationMemberAddArgs {
        userId: OptionalNullable<string>;
        userIds: OptionalNullable<string[]>;
        organizationId: string;
    }
    export interface MutationAlphaOrganizationChangeMemberRoleArgs {
        memberId: string;
        newRole: OrganizationMemberRole;
        organizationId: string;
    }
    export interface MutationAlphaOrganizationInviteMembersArgs {
        inviteRequests: InviteRequest[];
        organizationId: OptionalNullable<string>;
    }
    export interface MutationAlphaOrganizationRefreshInviteLinkArgs {
        expirationDays: OptionalNullable<number>;
        organizationId: OptionalNullable<string>;
    }
    export interface MutationAlphaOrganizationCreatePublicInviteArgs {
        expirationDays: OptionalNullable<number>;
        organizationId: OptionalNullable<string>;
    }
    export interface MutationAlphaOrganizationRemoveMemberArgs {
        memberId: string;
        organizationId: string;
    }
    export interface MutationAlphaOrganizationDeletePublicInviteArgs {
        organizationId: OptionalNullable<string>;
    }
    export interface MutationProfileCreateArgs {
        input: ProfileInput;
        inviteKey: OptionalNullable<string>;
    }
    export interface MutationProfileUpdateArgs {
        input: ProfileInput;
        uid: OptionalNullable<string>;
        inviteKey: OptionalNullable<string>;
    }
    export interface MutationCreateProfileArgs {
        input: CreateProfileInput;
    }
    export interface MutationUpdateProfileArgs {
        input: UpdateProfileInput;
        uid: OptionalNullable<string>;
    }
    export interface MutationAlphaCreateUserProfileAndOrganizationArgs {
        user: ProfileInput;
        organization: CreateOrganizationInput;
    }
    export interface MutationSuperAccountAddArgs {
        title: string;
    }
    export interface MutationSuperAccountRenameArgs {
        id: string;
        title: string;
    }
    export interface MutationSuperAccountActivateArgs {
        id: string;
    }
    export interface MutationSuperAccountSuspendArgs {
        id: string;
    }
    export interface MutationSuperAccountPendArgs {
        id: string;
    }
    export interface MutationSuperAccountMemberAddArgs {
        id: string;
        userId: string;
    }
    export interface MutationSuperAccountMemberRemoveArgs {
        id: string;
        userId: string;
    }
    export interface MutationSuperAccountChannelMemberAddArgs {
        id: string;
        userId: string;
    }
    export interface MutationSuperDeleteUserArgs {
        id: string;
    }
    export interface MutationSuperAdminAddArgs {
        userId: string;
        role: SuperAdminRole;
    }
    export interface MutationSuperAdminRemoveArgs {
        userId: string;
    }
    export interface MutationAlphaAlterPublishedArgs {
        id: string;
        published: boolean;
    }
    export interface MutationBetaFixCounterArgs {
        uid: string;
    }
    export interface MutationBetaFixCountersForAllArgs { }
    export interface MutationDeliverCountersForAllArgs { }
    export interface MutationBanUserArgs {
        id: string;
    }
    export interface MutationUnBanUserArgs {
        id: string;
    }
    export interface MutationDiscoverCollectionsCreateArgs {
        collection: DiscoverChatsCollectionInput;
    }
    export interface MutationDiscoverCollectionsUpdateArgs {
        id: string;
        input: DiscoverChatsCollectionUpdateInput;
    }
    export interface MutationDiscoverCollectionsDeleteArgs {
        id: string;
    }
    export interface MutationDiscoverEditorsChoiceCreateArgs {
        input: EditorsChoiceChatInput;
    }
    export interface MutationDiscoverEditorsChoiceUpdateArgs {
        id: string;
        input: EditorsChoiceChatUpdateInput;
    }
    export interface MutationDiscoverEditorsChoiceDeleteArgs {
        id: string;
    }
    export interface MutationTrackArgs {
        did: string;
        events: Event[];
        platform: OptionalNullable<EventPlatform>;
        isProd: OptionalNullable<boolean>;
    }
    export interface MutationCreateAppArgs {
        name: string;
        photoRef: OptionalNullable<ImageRefInput>;
        about: OptionalNullable<string>;
        shortname: OptionalNullable<string>;
    }
    export interface MutationCreateSuperAppArgs {
        name: string;
        photoRef: OptionalNullable<ImageRefInput>;
        about: OptionalNullable<string>;
        shortname: OptionalNullable<string>;
    }
    export interface MutationRefreshAppTokenArgs {
        appId: string;
    }
    export interface MutationUpdateAppProfileArgs {
        appId: string;
        input: AppProfileInput;
    }
    export interface MutationDeleteAppArgs {
        appId: string;
    }
    export interface MutationAddAppToChatArgs {
        appId: string;
        chatId: string;
    }
    export interface MutationUserStorageSetArgs {
        namespace: string;
        data: AppStorageValueInput[];
    }
    export interface MutationUserEventBusPublishArgs {
        topic: string;
        message: string;
    }
    export interface MutationGlobalEventBusPublishArgs {
        topic: string;
        message: string;
    }
    export interface MutationBetaAddCommentArgs {
        peerId: string;
        message: OptionalNullable<string>;
        replyComment: OptionalNullable<string>;
        mentions: OptionalNullable<MentionInput[]>;
        fileAttachments: OptionalNullable<FileAttachmentInput[]>;
        spans: OptionalNullable<MessageSpanInput[]>;
        repeatKey: OptionalNullable<string>;
    }
    export interface MutationBetaAddStickerCommentArgs {
        peerId: string;
        stickerId: string;
        replyComment: OptionalNullable<string>;
        repeatKey: OptionalNullable<string>;
    }
    export interface MutationEditCommentArgs {
        id: string;
        message: OptionalNullable<string>;
        mentions: OptionalNullable<MentionInput[]>;
        fileAttachments: OptionalNullable<FileAttachmentInput[]>;
        spans: OptionalNullable<MessageSpanInput[]>;
    }
    export interface MutationDeleteCommentArgs {
        id: string;
    }
    export interface MutationDeleteCommentAugmentationArgs {
        id: string;
    }
    export interface MutationCommentReactionAddArgs {
        commentId: string;
        reaction: MessageReactionType;
    }
    export interface MutationCommentReactionRemoveArgs {
        commentId: string;
        reaction: MessageReactionType;
    }
    export interface MutationSubscribeToCommentsArgs {
        peerId: string;
        type: CommentSubscriptionType;
    }
    export interface MutationUnsubscribeFromCommentsArgs {
        peerId: string;
    }
    export interface MutationConferenceJoinArgs {
        id: string;
        input: OptionalNullable<ConferenceJoinInput>;
        kind: OptionalNullable<ConferenceKind>;
    }
    export interface MutationConferenceKeepAliveArgs {
        id: string;
        peerId: string;
    }
    export interface MutationConferenceLeaveArgs {
        id: string;
        peerId: string;
    }
    export interface MutationConferenceRequestLocalMediaChangeArgs {
        id: string;
        media: LocalMediaInput;
    }
    export interface MutationMediaStreamOfferArgs {
        id: string;
        peerId: string;
        offer: string;
        seq: OptionalNullable<number>;
        hints: OptionalNullable<MediaStreamHint[]>;
    }
    export interface MutationMediaStreamAnswerArgs {
        id: string;
        peerId: string;
        answer: string;
        seq: OptionalNullable<number>;
    }
    export interface MutationMediaStreamCandidateArgs {
        id: string;
        peerId: string;
        candidate: string;
    }
    export interface MutationMediaStreamFailedArgs {
        id: string;
        peerId: string;
    }
    export interface MutationAddToContactsArgs {
        userId: string;
    }
    export interface MutationRemoveFromContactsArgs {
        userId: string;
    }
    export interface MutationConversationDraftUpdateArgs {
        id: string;
        message: OptionalNullable<string>;
    }
    export interface MutationSetEnvVarArgs {
        name: string;
        value: string;
    }
    export interface MutationSetEnvVarStringArgs {
        name: string;
        value: string;
    }
    export interface MutationSetEnvVarNumberArgs {
        name: string;
        value: number;
    }
    export interface MutationSetEnvVarBooleanArgs {
        name: string;
        value: boolean;
    }
    export interface MutationStickerPackCreateArgs {
        title: string;
        stickers: OptionalNullable<StickerInput[]>;
    }
    export interface MutationStickerPackUpdateArgs {
        id: string;
        input: StickerPackInput;
    }
    export interface MutationStickerPackAddStickerArgs {
        id: string;
        input: StickerInput;
    }
    export interface MutationStickerPackRemoveStickerArgs {
        id: string;
    }
    export interface MutationStickerPackAddToCollectionArgs {
        id: string;
    }
    export interface MutationStickerPackRemoveFromCollectionArgs {
        id: string;
    }
    export interface MutationStickerAddToFavoritesArgs {
        id: string;
    }
    export interface MutationStickerRemoveFromFavoritesArgs {
        id: string;
    }
    export interface MutationRoomReadArgs {
        id: string;
        mid: string;
    }
    export interface MutationBetaMessageSendArgs {
        message: OptionalNullable<string>;
        file: OptionalNullable<string>;
        repeatKey: OptionalNullable<string>;
        replyMessages: OptionalNullable<string[]>;
        mentions: OptionalNullable<string[]>;
        room: string;
    }
    export interface MutationBetaMessageEditArgs {
        mid: string;
        message: OptionalNullable<string>;
        file: OptionalNullable<string>;
        replyMessages: OptionalNullable<string[]>;
        mentions: OptionalNullable<string[]>;
    }
    export interface MutationBetaMessageDeleteAugmentationArgs {
        mid: string;
    }
    export interface MutationBetaMessageDeleteArgs {
        mid: OptionalNullable<string>;
        mids: OptionalNullable<string[]>;
    }
    export interface MutationBetaReactionSetArgs {
        mid: string;
        reaction: string;
    }
    export interface MutationBetaReactionRemoveArgs {
        mid: string;
        reaction: string;
    }
    export interface MutationBetaIntroSendArgs {
        room: string;
        uid: string;
        about: OptionalNullable<string>;
        message: OptionalNullable<string>;
        file: OptionalNullable<string>;
        repeatKey: OptionalNullable<string>;
    }
    export interface MutationBetaIntroEditArgs {
        mid: string;
        uid: string;
        about: OptionalNullable<string>;
        message: OptionalNullable<string>;
        file: OptionalNullable<string>;
    }
    export interface MutationReadNotificationArgs {
        notificationId: string;
    }
    export interface MutationDeleteNotificationArgs {
        notificationId: string;
    }
    export interface MutationNotificationCenterMarkSeqReadArgs {
        toSeq: number;
    }
    export interface MutationDebugCreateNotificationArgs {
        uid: string;
        text: string;
    }
    export interface MutationPresenceReportOnlineArgs {
        timeout: number;
        platform: OptionalNullable<string>;
        active: OptionalNullable<boolean>;
    }
    export interface MutationPresenceReportOfflineArgs { }
    export interface MutationUpdateOrganizationProfileArgs {
        input: UpdateOrganizationProfileInput;
        id: OptionalNullable<string>;
    }
    export interface MutationDeleteOrganizationArgs {
        id: string;
    }
    export interface MutationCreateOrganizationArgs {
        input: CreateOrganizationInput;
    }
    export interface MutationRequestOrganizationMembersExportArgs {
        id: string;
    }
    export interface MutationPostDraftCreateArgs {
        input: PostInput;
    }
    export interface MutationPostDraftUpdateArgs {
        id: string;
        input: PostInput;
    }
    export interface MutationPostDraftPublishArgs {
        id: string;
    }
    export interface MutationPostsDropAllArgs { }
    export interface MutationRegisterWebPushArgs {
        endpoint: string;
    }
    export interface MutationRegisterPushArgs {
        endpoint: string;
        type: PushType;
    }
    export interface MutationDebugSendAndroidDataPushArgs {
        uid: string;
        message: string;
    }
    export interface MutationDebugSendAppleDataPushArgs {
        uid: string;
        message: string;
    }
    export interface MutationTerminateSessionArgs {
        id: string;
    }
    export interface MutationTerminateAllSessionsExceptArgs {
        id: string;
    }
    export interface MutationBetaDiscoverSkipArgs {
        selectedTagsIds: string[];
    }
    export interface MutationBetaNextDiscoverResetArgs { }
    export interface MutationBetaNextDiscoverPageOrChatsArgs {
        selectedTagsIds: string[];
        excudedGroupsIds: string[];
    }
    export interface MutationBetaSaveSelectedTagsArgs {
        selectedTagsIds: string[];
    }
    export interface MutationBetaSubmitNextDiscoverArgs {
        selectedTagsIds: string[];
        excudedGroupsIds: string[];
    }
    export interface MutationMatchmakingRoomSaveArgs {
        peerId: string;
        input: MatchmakingRoomInput;
    }
    export interface MutationMatchmakingProfileFillArgs {
        peerId: string;
        input: MatchmakingProfileFillInput;
    }
    export interface MutationMatchmakingConnectArgs {
        peerId: string;
        uid: string;
    }
    export interface MutationCreateHistoricUserMetricsReportArgs { }
    export interface MutationQueueWeeklyRoomScreenViewsLeaderboardArgs { }
    export interface MutationTypingSendArgs {
        conversationId: string;
        type: TypingType;
    }
    export interface MutationTypingCancelArgs {
        conversationId: string;
    }
    export interface MutationReportContentArgs {
        contentId: string;
        type: string;
        message: OptionalNullable<string>;
    }
    export interface MutationDeleteMyAccountArgs { }
    export interface MutationSuperBadgeCreateToRoomArgs {
        roomId: string;
        userId: string;
        name: string;
    }
    export interface MutationSuperBadgeUnsetToRoomArgs {
        roomId: string;
        badgeId: string;
        userId: string;
    }
    export interface MutationBadgeCreateArgs {
        name: string;
    }
    export interface MutationBadgeCreateToRoomArgs {
        roomId: string;
        name: string;
    }
    export interface MutationBadgeSetToRoomArgs {
        roomId: string;
        badgeId: string;
    }
    export interface MutationBadgeUnsetToRoomArgs {
        roomId: string;
    }
    export interface MutationBadgeDeleteArgs {
        badgeId: string;
    }
    export interface MutationBadgeSetPrimaryArgs {
        badgeId: string;
    }
    export interface MutationBadgeUnsetPrimaryArgs { }
    export interface MutationSuperBadgeCreateArgs {
        userId: string;
        name: string;
    }
    export interface MutationSuperBadgeSetToRoomArgs {
        roomId: string;
        badgeId: string;
        userId: string;
    }
    export interface MutationSuperBadgeDeleteArgs {
        badgeId: string;
        userId: string;
    }
    export interface MutationSuperBadgeVerifyArgs {
        badgeId: string;
        userId: string;
    }
    export interface MutationSuperBadgeUnverifyArgs {
        badgeId: string;
        userId: string;
    }
    export interface MutationAlphaCreateFeedPostArgs {
        channel: string;
        message: OptionalNullable<string>;
        mentions: OptionalNullable<MentionInput[]>;
        fileAttachments: OptionalNullable<FileAttachmentInput[]>;
        spans: OptionalNullable<MessageSpanInput[]>;
        slides: OptionalNullable<SlideInput[]>;
        repeatKey: OptionalNullable<string>;
    }
    export interface MutationAlphaEditFeedPostArgs {
        feedItemId: string;
        message: OptionalNullable<string>;
        mentions: OptionalNullable<MentionInput[]>;
        fileAttachments: OptionalNullable<FileAttachmentInput[]>;
        spans: OptionalNullable<MessageSpanInput[]>;
        slides: OptionalNullable<SlideInput[]>;
    }
    export interface MutationAlphaDeleteFeedPostArgs {
        feedItemId: string;
    }
    export interface MutationFeedReactionAddArgs {
        feedItemId: string;
        reaction: FeedReactionType;
    }
    export interface MutationFeedReactionRemoveArgs {
        feedItemId: string;
        reaction: FeedReactionType;
    }
    export interface MutationAlphaFeedCreateChannelArgs {
        title: string;
        about: OptionalNullable<string>;
        photoRef: OptionalNullable<ImageRefInput>;
        socialImageRef: OptionalNullable<ImageRefInput>;
        global: OptionalNullable<boolean>;
    }
    export interface MutationAlphaFeedUpdateChannelArgs {
        id: string;
        title: OptionalNullable<string>;
        about: OptionalNullable<string>;
        photoRef: OptionalNullable<ImageRefInput>;
        socialImageRef: OptionalNullable<ImageRefInput>;
        global: OptionalNullable<boolean>;
    }
    export interface MutationAlphaFeedChannelSubscribeArgs {
        id: string;
    }
    export interface MutationAlphaFeedChannelUnsubscribeArgs {
        id: string;
    }
    export interface MutationAlphaFeedChannelAddEditorArgs {
        id: string;
        userId: string;
    }
    export interface MutationAlphaFeedChannelRemoveEditorArgs {
        id: string;
        userId: string;
    }
    export interface MutationAlphaFeedChannelEnableRoomAutoSubscriptionArgs {
        channelId: string;
        roomId: string;
    }
    export interface MutationAlphaFeedChannelDisableRoomAutoSubscriptionArgs {
        channelId: string;
        roomId: string;
    }
    export interface MutationAlphaFeedChannelEnableCommunityAutoSubscriptionArgs {
        channelId: string;
        roomId: string;
    }
    export interface MutationAlphaFeedChannelDisableCommunityAutoSubscriptionArgs {
        channelId: string;
        roomId: string;
    }
    export interface MutationSendMessageArgs {
        chatId: string;
        message: OptionalNullable<string>;
        replyMessages: OptionalNullable<string[]>;
        mentions: OptionalNullable<MentionInput[]>;
        fileAttachments: OptionalNullable<FileAttachmentInput[]>;
        spans: OptionalNullable<MessageSpanInput[]>;
        repeatKey: OptionalNullable<string>;
    }
    export interface MutationSendStickerArgs {
        chatId: string;
        stickerId: string;
        replyMessages: OptionalNullable<string[]>;
        repeatKey: OptionalNullable<string>;
    }
    export interface MutationSendDonationArgs {
        chatId: OptionalNullable<string>;
        userId: OptionalNullable<string>;
        amount: number;
        message: OptionalNullable<string>;
        repeatKey: OptionalNullable<string>;
    }
    export interface MutationEditMessageArgs {
        messageId: string;
        message: OptionalNullable<string>;
        replyMessages: OptionalNullable<string[]>;
        mentions: OptionalNullable<MentionInput[]>;
        fileAttachments: OptionalNullable<FileAttachmentInput[]>;
        spans: OptionalNullable<MessageSpanInput[]>;
    }
    export interface MutationPinMessageArgs {
        chatId: string;
        messageId: string;
    }
    export interface MutationUnpinMessageArgs {
        chatId: string;
    }
    export interface MutationBetaPinMessageArgs {
        chatId: string;
        messageId: string;
    }
    export interface MutationBetaUnpinMessageArgs {
        chatId: string;
    }
    export interface MutationGammaPinMessageArgs {
        chatId: string;
        messageId: string;
    }
    export interface MutationGammaUnpinMessageArgs {
        chatId: string;
    }
    export interface MutationMessageReactionAddArgs {
        messageId: string;
        reaction: MessageReactionType;
    }
    export interface MutationMessageDonationReactionAddArgs {
        messageId: string;
    }
    export interface MutationMessageReactionRemoveArgs {
        messageId: string;
        reaction: MessageReactionType;
    }
    export interface MutationDeleteChatArgs {
        chatId: string;
    }
    export interface MutationArchiveChatArgs {
        chatId: string;
    }
    export interface MutationBetaRoomCreateArgs {
        kind: SharedRoomKind;
        title: OptionalNullable<string>;
        description: OptionalNullable<string>;
        photoRef: OptionalNullable<ImageRefInput>;
        members: string[];
        message: OptionalNullable<string>;
        listed: OptionalNullable<boolean>;
        organizationId: OptionalNullable<string>;
        channel: OptionalNullable<boolean>;
        price: OptionalNullable<number>;
        interval: OptionalNullable<WalletSubscriptionInterval>;
    }
    export interface MutationBetaRoomUpdateArgs {
        roomId: string;
        input: RoomUpdateInput;
    }
    export interface MutationBetaRoomMoveArgs {
        roomId: string;
        toOrg: string;
    }
    export interface MutationBetaRoomInviteArgs {
        roomId: string;
        invites: RoomInviteInput[];
    }
    export interface MutationAlphaRoomInviteArgs {
        roomId: string;
        invites: RoomInviteInput[];
    }
    export interface MutationBetaRoomKickArgs {
        roomId: string;
        userId: string;
    }
    export interface MutationBetaRoomLeaveArgs {
        roomId: string;
    }
    export interface MutationBetaRoomChangeRoleArgs {
        roomId: string;
        userId: string;
        newRole: RoomMemberRole;
    }
    export interface MutationBetaRoomJoinArgs {
        roomId: string;
    }
    export interface MutationBetaRoomsJoinArgs {
        roomsIds: string[];
    }
    export interface MutationBetaRoomDeclineJoinRequestArgs {
        roomId: string;
        userId: string;
    }
    export interface MutationBetaBuyPremiumChatSubscriptionArgs {
        chatId: string;
    }
    export interface MutationBetaBuyPremiumChatPassArgs {
        chatId: string;
    }
    export interface MutationBetaRoomInviteLinkSendEmailArgs {
        roomId: string;
        inviteRequests: RoomInviteEmailRequest[];
    }
    export interface MutationBetaRoomInviteLinkJoinArgs {
        invite: string;
        isNewUser: OptionalNullable<boolean>;
    }
    export interface MutationBetaRoomInviteLinkRenewArgs {
        roomId: string;
    }
    export interface MutationBetaRoomUpdateUserNotificationSettingsArgs {
        settings: RoomUserNotificaionSettingsInput;
        roomId: string;
    }
    export interface MutationBetaRoomsInviteUserArgs {
        userId: string;
        roomIds: string[];
    }
    export interface MutationBetaRoomAlterFeaturedArgs {
        roomId: string;
        featured: boolean;
    }
    export interface MutationBetaRoomAlterListedArgs {
        roomId: string;
        listed: boolean;
    }
    export interface MutationBetaRoomSetupAutosubscribeArgs {
        roomId: string;
        childRoomIds: string[];
    }
    export interface MutationUpdateWelcomeMessageArgs {
        roomId: string;
        welcomeMessageIsOn: boolean;
        welcomeMessageSender: OptionalNullable<string>;
        welcomeMessageText: OptionalNullable<string>;
    }
    export interface MutationAlphaSetUserShortNameArgs {
        id: OptionalNullable<string>;
        shortname: string;
    }
    export interface MutationAlphaSetOrgShortNameArgs {
        id: string;
        shortname: string;
    }
    export interface MutationAlphaSetFeedChannelShortNameArgs {
        id: string;
        shortname: string;
    }
    export interface MutationAlphaSetRoomShortNameArgs {
        id: string;
        shortname: string;
    }
    export interface MutationAlphaSetCollectionShortNameArgs {
        id: string;
        shortname: string;
    }
    export interface NotificationCenter {
        id: string;
        unread: number;
        state: NotificationCenterUpdatesState;
    }
    export interface NotificationCenterIdArgs { }
    export interface NotificationCenterUnreadArgs { }
    export interface NotificationCenterStateArgs { }
    export interface Notification {
        id: string;
        text: Nullable<string>;
        content: NotificationContent[];
    }
    export interface NotificationIdArgs { }
    export interface NotificationTextArgs { }
    export interface NotificationContentArgs { }
    export type NotificationContent = NewCommentNotification | NewMatchmakingProfilesNotification | MentionNotification;
    export interface NewCommentNotification {
        peer: CommentsPeer;
        comment: CommentEntry;
    }
    export interface NewCommentNotificationPeerArgs { }
    export interface NewCommentNotificationCommentArgs { }
    export interface NewMatchmakingProfilesNotification {
        room: MatchmakingRoom;
        profiles: MatchmakingProfile[];
    }
    export interface NewMatchmakingProfilesNotificationRoomArgs { }
    export interface NewMatchmakingProfilesNotificationProfilesArgs { }
    export type MessageWithMention = FeedPost | Message;
    export interface MentionNotification {
        peer: MentionPeer;
        message: MessageWithMention;
    }
    export interface MentionNotificationPeerArgs { }
    export interface MentionNotificationMessageArgs { }
    export interface NotificationConnection {
        items: Notification[];
        cursor: Nullable<string>;
    }
    export interface NotificationConnectionItemsArgs { }
    export interface NotificationConnectionCursorArgs { }
    export interface NotificationCenterUpdatesState {
        state: Nullable<string>;
    }
    export interface NotificationCenterUpdatesStateStateArgs { }
    export interface NotificationCenterUpdateSingle {
        seq: number;
        state: string;
        update: NotificationCenterUpdate;
    }
    export interface NotificationCenterUpdateSingleSeqArgs { }
    export interface NotificationCenterUpdateSingleStateArgs { }
    export interface NotificationCenterUpdateSingleUpdateArgs { }
    export interface NotificationCenterUpdateBatch {
        seq: number;
        state: string;
        fromSeq: number;
        updates: NotificationCenterUpdate[];
    }
    export interface NotificationCenterUpdateBatchSeqArgs { }
    export interface NotificationCenterUpdateBatchStateArgs { }
    export interface NotificationCenterUpdateBatchFromSeqArgs { }
    export interface NotificationCenterUpdateBatchUpdatesArgs { }
    export type NotificationCenterUpdate = NotificationReceived | NotificationRead | NotificationDeleted | NotificationUpdated | NotificationContentUpdated;
    export interface NotificationReceived {
        center: NotificationCenter;
        notification: Notification;
        unread: number;
    }
    export interface NotificationReceivedCenterArgs { }
    export interface NotificationReceivedNotificationArgs { }
    export interface NotificationReceivedUnreadArgs { }
    export interface NotificationRead {
        center: NotificationCenter;
        unread: number;
    }
    export interface NotificationReadCenterArgs { }
    export interface NotificationReadUnreadArgs { }
    export interface NotificationDeleted {
        center: NotificationCenter;
        notification: Notification;
        unread: number;
    }
    export interface NotificationDeletedCenterArgs { }
    export interface NotificationDeletedNotificationArgs { }
    export interface NotificationDeletedUnreadArgs { }
    export interface NotificationUpdated {
        center: NotificationCenter;
        notification: Notification;
        unread: number;
    }
    export interface NotificationUpdatedCenterArgs { }
    export interface NotificationUpdatedNotificationArgs { }
    export interface NotificationUpdatedUnreadArgs { }
    export type UpdatedNotificationContent = UpdatedNotificationContentComment;
    export interface UpdatedNotificationContentComment {
        peer: CommentsPeer;
        comment: Nullable<CommentEntry>;
    }
    export interface UpdatedNotificationContentCommentPeerArgs { }
    export interface UpdatedNotificationContentCommentCommentArgs { }
    export interface NotificationContentUpdated {
        center: NotificationCenter;
        content: UpdatedNotificationContent;
    }
    export interface NotificationContentUpdatedCenterArgs { }
    export interface NotificationContentUpdatedContentArgs { }
    export type NotificationCenterUpdateContainer = NotificationCenterUpdateSingle | NotificationCenterUpdateBatch;
    export interface OnlineEvent {
        user: User;
        timeout: number;
    }
    export interface OnlineEventUserArgs { }
    export interface OnlineEventTimeoutArgs { }
    export interface ChatOnlineEvent {
        onlineMembers: number;
    }
    export interface ChatOnlineEventOnlineMembersArgs { }
    export interface OrganizationContact {
        name: string;
        photo: Nullable<string>;
        photoRef: Nullable<ImageRef>;
        position: Nullable<string>;
        email: Nullable<string>;
        phone: Nullable<string>;
        link: Nullable<string>;
        twitter: Nullable<string>;
    }
    export interface OrganizationContactNameArgs { }
    export interface OrganizationContactPhotoArgs { }
    export interface OrganizationContactPhotoRefArgs { }
    export interface OrganizationContactPositionArgs { }
    export interface OrganizationContactEmailArgs { }
    export interface OrganizationContactPhoneArgs { }
    export interface OrganizationContactLinkArgs { }
    export interface OrganizationContactTwitterArgs { }
    export interface Organization {
        id: string;
        isMine: boolean;
        isDeleted: boolean;
        name: string;
        photo: Nullable<string>;
        website: Nullable<string>;
        websiteTitle: Nullable<string>;
        about: Nullable<string>;
        twitter: Nullable<string>;
        facebook: Nullable<string>;
        linkedin: Nullable<string>;
        instagram: Nullable<string>;
        location: Nullable<string>;
        betaIsOwner: boolean;
        betaIsAdmin: boolean;
        betaIsPrimary: boolean;
        owner: User;
        applyLinkEnabled: boolean;
        applyLink: Nullable<string>;
        socialImage: Nullable<string>;
        superAccountId: string;
        alphaIsOwner: boolean;
        alphaOrganizationMembers: OrganizationJoinedMember[];
        alphaOrganizationAdminMembers: OrganizationJoinedMember[];
        alphaOrganizationMemberRequests: OrganizationRequestedMember[];
        alphaFeatured: boolean;
        alphaIsCommunity: boolean;
        alphaIsPrivate: boolean;
        betaMembersCanInvite: boolean;
        betaPublicRooms: SharedRoom[];
        betaPublicRoomsCount: number;
        status: string;
        membersCount: number;
        personal: boolean;
        externalSocialImage: Nullable<string>;
        linkedFeedChannels: FeedChannel[];
        shortname: Nullable<string>;
    }
    export interface OrganizationIdArgs { }
    export interface OrganizationIsMineArgs { }
    export interface OrganizationIsDeletedArgs { }
    export interface OrganizationNameArgs { }
    export interface OrganizationPhotoArgs { }
    export interface OrganizationWebsiteArgs { }
    export interface OrganizationWebsiteTitleArgs { }
    export interface OrganizationAboutArgs { }
    export interface OrganizationTwitterArgs { }
    export interface OrganizationFacebookArgs { }
    export interface OrganizationLinkedinArgs { }
    export interface OrganizationInstagramArgs { }
    export interface OrganizationLocationArgs { }
    export interface OrganizationBetaIsOwnerArgs { }
    export interface OrganizationBetaIsAdminArgs { }
    export interface OrganizationBetaIsPrimaryArgs { }
    export interface OrganizationOwnerArgs { }
    export interface OrganizationApplyLinkEnabledArgs { }
    export interface OrganizationApplyLinkArgs { }
    export interface OrganizationSocialImageArgs { }
    export interface OrganizationSuperAccountIdArgs { }
    export interface OrganizationAlphaIsOwnerArgs { }
    export interface OrganizationAlphaOrganizationMembersArgs {
        first: OptionalNullable<number>;
        after: OptionalNullable<string>;
    }
    export interface OrganizationAlphaOrganizationAdminMembersArgs {
        first: OptionalNullable<number>;
        after: OptionalNullable<string>;
    }
    export interface OrganizationAlphaOrganizationMemberRequestsArgs { }
    export interface OrganizationAlphaFeaturedArgs { }
    export interface OrganizationAlphaIsCommunityArgs { }
    export interface OrganizationAlphaIsPrivateArgs { }
    export interface OrganizationBetaMembersCanInviteArgs { }
    export interface OrganizationBetaPublicRoomsArgs { }
    export interface OrganizationBetaPublicRoomsCountArgs { }
    export interface OrganizationStatusArgs { }
    export interface OrganizationMembersCountArgs { }
    export interface OrganizationPersonalArgs { }
    export interface OrganizationExternalSocialImageArgs { }
    export interface OrganizationLinkedFeedChannelsArgs { }
    export interface OrganizationShortnameArgs { }
    export interface OrganizationProfile {
        id: string;
        name: string;
        photoRef: Nullable<ImageRef>;
        website: Nullable<string>;
        websiteTitle: Nullable<string>;
        about: Nullable<string>;
        twitter: Nullable<string>;
        facebook: Nullable<string>;
        linkedin: Nullable<string>;
        instagram: Nullable<string>;
        contacts: OrganizationContact[];
        location: Nullable<string>;
        socialImage: Nullable<string>;
        alphaPublished: boolean;
        alphaEditorial: boolean;
        alphaFeatured: boolean;
        alphaIsCommunity: boolean;
        alphaIsPrivate: boolean;
        applyLink: Nullable<string>;
        applyLinkEnabled: boolean;
        betaMembersCanInvite: boolean;
        autosubscribeRooms: string[];
        shortname: Nullable<string>;
    }
    export interface OrganizationProfileIdArgs { }
    export interface OrganizationProfileNameArgs { }
    export interface OrganizationProfilePhotoRefArgs { }
    export interface OrganizationProfileWebsiteArgs { }
    export interface OrganizationProfileWebsiteTitleArgs { }
    export interface OrganizationProfileAboutArgs { }
    export interface OrganizationProfileTwitterArgs { }
    export interface OrganizationProfileFacebookArgs { }
    export interface OrganizationProfileLinkedinArgs { }
    export interface OrganizationProfileInstagramArgs { }
    export interface OrganizationProfileContactsArgs { }
    export interface OrganizationProfileLocationArgs { }
    export interface OrganizationProfileSocialImageArgs { }
    export interface OrganizationProfileAlphaPublishedArgs { }
    export interface OrganizationProfileAlphaEditorialArgs { }
    export interface OrganizationProfileAlphaFeaturedArgs { }
    export interface OrganizationProfileAlphaIsCommunityArgs { }
    export interface OrganizationProfileAlphaIsPrivateArgs { }
    export interface OrganizationProfileApplyLinkArgs { }
    export interface OrganizationProfileApplyLinkEnabledArgs { }
    export interface OrganizationProfileBetaMembersCanInviteArgs { }
    export interface OrganizationProfileAutosubscribeRoomsArgs { }
    export interface OrganizationProfileShortnameArgs { }
    export interface CreateOrganizationInput {
        id: Nullable<string>;
        name: string;
        website: Nullable<string>;
        personal: boolean;
        photoRef: Nullable<ImageRefInput>;
        socialImageRef: Nullable<ImageRefInput>;
        about: Nullable<string>;
        isCommunity: Nullable<boolean>;
        isPrivate: Nullable<boolean>;
        applyLink: Nullable<string>;
        applyLinkEnabled: Nullable<boolean>;
        autosubscribeRooms: Nullable<string[]>;
    }
    export interface UpdateOrganizationProfileInput {
        name: Nullable<string>;
        photoRef: Nullable<ImageRefInput>;
        website: Nullable<string>;
        websiteTitle: Nullable<string>;
        about: Nullable<string>;
        twitter: Nullable<string>;
        facebook: Nullable<string>;
        linkedin: Nullable<string>;
        instagram: Nullable<string>;
        location: Nullable<string>;
        contacts: Nullable<ContactPersonInput[]>;
        socialImageRef: Nullable<ImageRefInput>;
        alphaPublished: Nullable<boolean>;
        alphaEditorial: Nullable<boolean>;
        alphaFeatured: Nullable<boolean>;
        alphaIsPrivate: Nullable<boolean>;
        applyLink: Nullable<string>;
        applyLinkEnabled: Nullable<boolean>;
        autosubscribeRooms: Nullable<string[]>;
        betaMembersCanInvite: Nullable<boolean>;
    }
    export interface ContactPersonInput {
        name: string;
        photoRef: Nullable<ImageRefInput>;
        position: Nullable<string>;
        email: Nullable<string>;
        phone: Nullable<string>;
        link: Nullable<string>;
        twitter: Nullable<string>;
    }
    export interface OrganizationsEdge {
        node: Organization;
        cursor: string;
    }
    export interface OrganizationsEdgeNodeArgs { }
    export interface OrganizationsEdgeCursorArgs { }
    export interface OrganizationsConnection {
        edges: OrganizationsEdge[];
        pageInfo: PageInfo;
    }
    export interface OrganizationsConnectionEdgesArgs { }
    export interface OrganizationsConnectionPageInfoArgs { }
    export interface Permissions {
        roles: string[];
    }
    export interface PermissionsRolesArgs { }
    export interface PopularNowRoom {
        room: SharedRoom;
        newMessages: number;
    }
    export interface PopularNowRoomRoomArgs { }
    export interface PopularNowRoomNewMessagesArgs { }
    export interface PopularNowRoomConnection {
        items: PopularNowRoom[];
        cursor: Nullable<string>;
    }
    export interface PopularNowRoomConnectionItemsArgs { }
    export interface PopularNowRoomConnectionCursorArgs { }
    export interface PopularNowOrganization {
        organization: Organization;
        newMessages: number;
    }
    export interface PopularNowOrganizationOrganizationArgs { }
    export interface PopularNowOrganizationNewMessagesArgs { }
    export interface NewAndGrowingOrganizationConnection {
        items: Organization[];
        cursor: Nullable<string>;
    }
    export interface NewAndGrowingOrganizationConnectionItemsArgs { }
    export interface NewAndGrowingOrganizationConnectionCursorArgs { }
    export interface PopularNowOrganizationConnection {
        items: PopularNowOrganization[];
        cursor: Nullable<string>;
    }
    export interface PopularNowOrganizationConnectionItemsArgs { }
    export interface PopularNowOrganizationConnectionCursorArgs { }
    export interface OrganizationConnection {
        items: Organization[];
        cursor: Nullable<string>;
    }
    export interface OrganizationConnectionItemsArgs { }
    export interface OrganizationConnectionCursorArgs { }
    export interface Post {
        id: string;
        author: Nullable<User>;
        title: string;
        content: Paragraph[];
        draft: Nullable<PostDraft>;
        canEdit: boolean;
        channel: Nullable<Channel>;
        createdAt: Date;
        updatedAt: Nullable<Date>;
        deletedAt: Nullable<Date>;
    }
    export interface PostIdArgs { }
    export interface PostAuthorArgs { }
    export interface PostTitleArgs { }
    export interface PostContentArgs { }
    export interface PostDraftArgs { }
    export interface PostCanEditArgs { }
    export interface PostChannelArgs { }
    export interface PostCreatedAtArgs { }
    export interface PostUpdatedAtArgs { }
    export interface PostDeletedAtArgs { }
    export interface PostDraft {
        id: string;
        author: Nullable<User>;
        title: string;
        content: Paragraph[];
        publishedCopy: Nullable<Post>;
        channel: Nullable<Channel>;
        createdAt: Date;
        updatedAt: Nullable<Date>;
        deletedAt: Nullable<Date>;
    }
    export interface PostDraftIdArgs { }
    export interface PostDraftAuthorArgs { }
    export interface PostDraftTitleArgs { }
    export interface PostDraftContentArgs { }
    export interface PostDraftPublishedCopyArgs { }
    export interface PostDraftChannelArgs { }
    export interface PostDraftCreatedAtArgs { }
    export interface PostDraftUpdatedAtArgs { }
    export interface PostDraftDeletedAtArgs { }
    export interface PostSpan {
        offset: number;
        length: number;
    }
    export interface PostSpanOffsetArgs { }
    export interface PostSpanLengthArgs { }
    export interface PostSpanBold extends PostSpan {
        offset: number;
        length: number;
    }
    export interface PostSpanBoldOffsetArgs { }
    export interface PostSpanBoldLengthArgs { }
    export interface PostSpanItalic extends PostSpan {
        offset: number;
        length: number;
    }
    export interface PostSpanItalicOffsetArgs { }
    export interface PostSpanItalicLengthArgs { }
    export interface PostSpanIrony extends PostSpan {
        offset: number;
        length: number;
    }
    export interface PostSpanIronyOffsetArgs { }
    export interface PostSpanIronyLengthArgs { }
    export interface PostSpanLink extends PostSpan {
        offset: number;
        length: number;
        url: string;
    }
    export interface PostSpanLinkOffsetArgs { }
    export interface PostSpanLinkLengthArgs { }
    export interface PostSpanLinkUrlArgs { }
    export type PostSpanTypeValues = 'Bold' | 'Italic' | 'Irony' | 'Link';
    export type PostSpanType = GQLRoots.PostSpanTypeRoot;
    export interface PostSpanInput {
        offset: number;
        length: number;
        type: PostSpanType;
        url: Nullable<string>;
    }
    export type Paragraph = TextParagraph | ImageParagraph | H1Paragraph | H2Paragraph;
    export interface TextParagraph {
        text: string;
        spans: PostSpan[];
    }
    export interface TextParagraphTextArgs { }
    export interface TextParagraphSpansArgs { }
    export interface ImageParagraph {
        url: string;
        image: ImageRef;
        fileMetadata: FileMetadata;
    }
    export interface ImageParagraphUrlArgs { }
    export interface ImageParagraphImageArgs { }
    export interface ImageParagraphFileMetadataArgs { }
    export interface H1Paragraph {
        text: string;
    }
    export interface H1ParagraphTextArgs { }
    export interface H2Paragraph {
        text: string;
    }
    export interface H2ParagraphTextArgs { }
    export interface PostInput {
        hub: Nullable<string>;
        title: Nullable<string>;
        content: Nullable<PostContentInput[]>;
    }
    export type PostContentTypeValues = 'Text' | 'Image' | 'H1' | 'H2';
    export type PostContentType = GQLRoots.PostContentTypeRoot;
    export interface PostContentInput {
        type: PostContentType;
        text: Nullable<string>;
        spans: Nullable<PostSpanInput[]>;
        image: Nullable<ImageRefInput>;
    }
    export interface PostConnection {
        items: Post[];
        cursor: Nullable<string>;
    }
    export interface PostConnectionItemsArgs { }
    export interface PostConnectionCursorArgs { }
    export interface PostDraftConnection {
        items: PostDraft[];
        cursor: Nullable<string>;
    }
    export interface PostDraftConnectionItemsArgs { }
    export interface PostDraftConnectionCursorArgs { }
    export interface ProfilePrefill {
        firstName: Nullable<string>;
        lastName: Nullable<string>;
        picture: Nullable<string>;
    }
    export interface ProfilePrefillFirstNameArgs { }
    export interface ProfilePrefillLastNameArgs { }
    export interface ProfilePrefillPictureArgs { }
    export interface PushSettings {
        webPushKey: Nullable<string>;
    }
    export interface PushSettingsWebPushKeyArgs { }
    export type PushTypeValues = 'WEB_PUSH' | 'IOS' | 'ANDROID' | 'SAFARI';
    export type PushType = GQLRoots.PushTypeRoot;
    export interface Query {
        lifecheck: Nullable<string>;
        alphaNotificationCounter: NotificationCounter;
        alphaChat: Conversation;
        alphaLoadMessages: ConversationState;
        alphaChatsSearchForCompose: ComposeSearchResult[];
        alphaChatSearch: Nullable<Conversation>;
        alphaGroupConversationMembers: GroupConversationMember[];
        myCards: CreditCard[];
        myWallet: WalletAccount;
        transactionsPending: WalletTransaction[];
        transactionsHistory: WalletTransactionConnection;
        subscriptions: WalletSubscription[];
        stripeToken: string;
        alphaInviteInfo: Nullable<InviteInfo>;
        appInvite: string;
        appInviteFromUser: string;
        appInviteInfo: Nullable<AppInvite>;
        alphaResolveInvite: Nullable<ResolveInviteEntry>;
        updatesState: UpdatesState;
        sequenceState: UpdatesSequenceState;
        updatesDifference: UpdatesDifference;
        sequenceDifference: SequenceDifference;
        phonebookWasExported: boolean;
        channels: Channel[];
        channel: Nullable<Channel>;
        debugParseID: DebugID;
        debugCrashQuery: string;
        debugUrlInfo: Nullable<UrlAugmentation>;
        userPresence: DebugUserPresence[];
        debugValidateMessages: string;
        organizationChatsStats: OrganizationChatStats[];
        debugEventsState: DebugEventsState;
        debugCheckTasksIndex: string;
        debug2WayDirectChatsCounter: number;
        debugUserMetrics: DebugUserMetrics;
        debugGlobalCounters: DebugGlobalCounters;
        debugServerId: string;
        debugGqlTraces: GqlTraceConnection;
        debugGqlTrace: GqlTrace;
        debugUserWallet: WalletAccount;
        debugEntitiesCounter: number;
        debugEntitiesCleanerProgress: number;
        debugUserSearch: string;
        debugMentionSearch: string;
        debugMentionSearchGetUserData: string;
        debugGetCounters: string;
        debugExperimentalCounter: string;
        debugFindUser: Nullable<User>;
        debugSocialSharingImage: string;
        dialogs: DialogsConnection;
        settings: Settings;
        authPoints: AuthPoint;
        myOauthApps: OauthApp[];
        oauthContext: Nullable<OauthContext>;
        alphaOrganizationMembers: OrganizationMember[];
        alphaOrganizationInviteLink: Nullable<Invite>;
        alphaOrganizationPublicInvite: Nullable<Invite>;
        myProfile: Nullable<Profile>;
        superAccounts: SuperAccount[];
        superAccount: SuperAccount;
        superAdmins: SuperAdmin[];
        alphaChatTextSearch: Conversation[];
        betaDialogTextSearch: Dialog[];
        myBlackList: User[];
        discoverCollections: Nullable<DiscoverChatsCollectionConnection>;
        discoverCollection: Nullable<DiscoverChatsCollection>;
        discoverEditorsChoice: EditorsChoiceChat[];
        discoverEditorsChoiceChat: EditorsChoiceChat;
        myApps: AppProfile[];
        userStorage: AppStorageValue[];
        blackListUpdatesState: BlackListUpdatesState;
        chatState: ChatUpdateState;
        conversationState: ConversationUpdateState;
        messageComments: CommentsPeer;
        feedItemComments: CommentsPeer;
        postComments: CommentsPeer;
        comments: CommentsPeer;
        commentEntry: Nullable<CommentEntry>;
        conference: Conference;
        conferenceMedia: ConferenceMedia;
        myContacts: ContactConnection;
        myContactsSearch: UserConnection;
        myContactsState: ContactsState;
        dialogsState: DialogUpdateState;
        envVars: Nullable<EnvVar[]>;
        envVar: Nullable<EnvVar>;
        ipLocation: Nullable<IpLocation>;
        myStickers: UserStickers;
        createdStickerPacks: StickerPack[];
        stickersByEmoji: Sticker[];
        stickerPack: Nullable<StickerPack>;
        stickerPackCatalog: StickerPack[];
        myNotificationCenter: NotificationCenter;
        myNotifications: NotificationConnection;
        myOrganization: Nullable<Organization>;
        myOrganizations: Organization[];
        myCommunities: Organization[];
        organization: Organization;
        organizationPublicRooms: SharedRoomConnection;
        myOrganizationProfile: OrganizationProfile;
        organizationProfile: OrganizationProfile;
        alphaOrganizations: OrganizationsConnection;
        alphaOrganizationByPrefix: Nullable<Organization>;
        alphaComunityPrefixSearch: OrganizationsConnection;
        myPermissions: Permissions;
        users: User[];
        discoverNewAndGrowing: SharedRoomConnection;
        discoverPopularNow: PopularNowRoomConnection;
        discoverNewAndGrowingOrganizations: NewAndGrowingOrganizationConnection;
        discoverPopularNowOrganizations: PopularNowOrganizationConnection;
        discoverTopOrganizations: OrganizationConnection;
        discoverTopPremium: SharedRoomConnection;
        discoverTopFree: SharedRoomConnection;
        post: Nullable<Post>;
        postDraft: Nullable<PostDraft>;
        posts: PostConnection;
        postMyDrafts: PostDraftConnection;
        myProfilePrefill: Nullable<ProfilePrefill>;
        pushSettings: PushSettings;
        activeSessions: Nullable<Session>[];
        sessionState: SessionState;
        syncUserChats: SyncChatsConnection;
        betaNextDiscoverPage: Nullable<DiscoverPage>;
        gammaNextDiscoverPage: Nullable<DiscoverPage>;
        betaSuggestedRooms: Room[];
        betaIsDiscoverDone: boolean;
        isDiscoverSkipped: boolean;
        matchmakingRoom: Nullable<MatchmakingRoom>;
        matchmakingProfile: Nullable<MatchmakingProfile>;
        trendingRoomsByMessages: TrendingRoom[];
        groupScreenViews: number;
        me: Nullable<User>;
        user: User;
        mySuccessfulInvitesCount: number;
        superBadgeInRoom: Nullable<UserBadge>;
        badgeInRoom: Nullable<UserBadge>;
        userSearch: UserConnection;
        userSearchForChat: ChatUserConnection;
        alphaProfiles: UserConnection;
        alphaHomeFeed: FeedItemConnection;
        alphaFeedItem: Nullable<FeedItem>;
        alphaFeedChannel: FeedChannel;
        alphaFeedMyDraftsChannel: FeedChannel;
        alphaFeedChannelContent: FeedItemConnection;
        alphaFeedMySubscriptions: FeedChannelConnection;
        alphaFeedMyChannels: FeedChannelConnection;
        alphaWritableChannels: FeedChannelConnection;
        alphaFeedChannelAdmins: FeedChannelAdminConnection;
        alphaFeedChannelSearch: FeedChannelSearchConnection;
        alphaFeedChannelSubscribers: FeedChannelSubscriberConnection;
        alphaRecommendedChannels: FeedChannelSearchConnection;
        alphaGlobalSearch: GlobalSearchEntry[];
        featuredGroups: Nullable<SharedRoom[]>;
        featuredCommunities: Nullable<Organization[]>;
        messagesSearch: MessageConnection;
        chatMembersSearch: RoomMemberConnection;
        chatMentionSearch: GlobalSearchConnection;
        orgMembersSearch: JoinedOrganizationMembersConnection;
        betaChatMentionSearch: MentionSearchConnection;
        messages: ModernMessage[];
        gammaMessages: Nullable<GammaMessagesBatch>;
        modernMessages: ModernMessagesBatch;
        message: Nullable<ModernMessage>;
        lastReadedMessage: Nullable<ModernMessage>;
        chatSharedMedia: SharedMediaConnection;
        chatSharedMediaCounters: SharedMediaCounters;
        haveAccessToChat: boolean;
        commonChatsWithUser: CommonChatsWithUserResponse;
        room: Nullable<Room>;
        rooms: Room[];
        roomSuper: Nullable<RoomSuper>;
        roomMessages: RoomMessage[];
        roomMembers: RoomMember[];
        roomAdmins: RoomMember[];
        roomFeaturedMembers: RoomMember[];
        roomMember: Nullable<RoomMember>;
        roomSocialImage: Nullable<string>;
        betaRoomSearch: RoomConnection;
        betaRoomInviteInfo: Nullable<RoomInvite>;
        betaRoomInviteLink: string;
        betaAvailableRooms: SharedRoom[];
        betaUserRooms: SharedRoom[];
        betaUserAvailableRooms: SharedRoom[];
        alphaUserAvailableRooms: RoomConnection;
        alphaResolveShortName: Nullable<ShortNameDestination>;
    }
    export interface QueryLifecheckArgs { }
    export interface QueryAlphaNotificationCounterArgs { }
    export interface QueryAlphaChatArgs {
        conversationId: OptionalNullable<string>;
        shortName: OptionalNullable<string>;
    }
    export interface QueryAlphaLoadMessagesArgs {
        conversationId: string;
        first: OptionalNullable<number>;
        before: OptionalNullable<string>;
        after: OptionalNullable<string>;
    }
    export interface QueryAlphaChatsSearchForComposeArgs {
        query: OptionalNullable<string>;
        organizations: OptionalNullable<boolean>;
        limit: OptionalNullable<number>;
    }
    export interface QueryAlphaChatSearchArgs {
        members: string[];
    }
    export interface QueryAlphaGroupConversationMembersArgs {
        conversationId: string;
    }
    export interface QueryMyCardsArgs { }
    export interface QueryMyWalletArgs { }
    export interface QueryTransactionsPendingArgs { }
    export interface QueryTransactionsHistoryArgs {
        first: number;
        after: OptionalNullable<string>;
    }
    export interface QuerySubscriptionsArgs { }
    export interface QueryStripeTokenArgs { }
    export interface QueryAlphaInviteInfoArgs {
        key: string;
    }
    export interface QueryAppInviteArgs { }
    export interface QueryAppInviteFromUserArgs {
        shortname: string;
    }
    export interface QueryAppInviteInfoArgs {
        key: string;
    }
    export interface QueryAlphaResolveInviteArgs {
        key: string;
    }
    export interface QueryUpdatesStateArgs { }
    export interface QuerySequenceStateArgs {
        id: string;
    }
    export interface QueryUpdatesDifferenceArgs {
        state: string;
    }
    export interface QuerySequenceDifferenceArgs {
        id: string;
        pts: number;
    }
    export interface QueryPhonebookWasExportedArgs { }
    export interface QueryChannelsArgs { }
    export interface QueryChannelArgs {
        id: string;
    }
    export interface QueryDebugParseIDArgs {
        id: string;
    }
    export interface QueryDebugCrashQueryArgs { }
    export interface QueryDebugUrlInfoArgs {
        url: string;
    }
    export interface QueryUserPresenceArgs {
        uid: string;
        lastSeenFiveMinute: OptionalNullable<boolean>;
    }
    export interface QueryDebugValidateMessagesArgs { }
    export interface QueryOrganizationChatsStatsArgs { }
    export interface QueryDebugEventsStateArgs { }
    export interface QueryDebugCheckTasksIndexArgs { }
    export interface QueryDebug2WayDirectChatsCounterArgs { }
    export interface QueryDebugUserMetricsArgs {
        id: string;
    }
    export interface QueryDebugGlobalCountersArgs {
        uid: OptionalNullable<string>;
    }
    export interface QueryDebugServerIdArgs { }
    export interface QueryDebugGqlTracesArgs {
        first: number;
        after: OptionalNullable<string>;
    }
    export interface QueryDebugGqlTraceArgs {
        id: string;
    }
    export interface QueryDebugUserWalletArgs {
        id: string;
    }
    export interface QueryDebugEntitiesCounterArgs {
        name: string;
    }
    export interface QueryDebugEntitiesCleanerProgressArgs {
        name: string;
    }
    export interface QueryDebugUserSearchArgs {
        query: string;
    }
    export interface QueryDebugMentionSearchArgs {
        query: string;
        first: number;
        index: string;
    }
    export interface QueryDebugMentionSearchGetUserDataArgs {
        cid: string;
    }
    export interface QueryDebugGetCountersArgs { }
    export interface QueryDebugExperimentalCounterArgs {
        cid: string;
    }
    export interface QueryDebugFindUserArgs {
        email: OptionalNullable<string>;
        phone: OptionalNullable<string>;
    }
    export interface QueryDebugSocialSharingImageArgs {
        template: string;
        title: string;
        image: string;
        subTitle: string;
    }
    export interface QueryDialogsArgs {
        first: number;
        after: OptionalNullable<string>;
    }
    export interface QuerySettingsArgs { }
    export interface QueryAuthPointsArgs { }
    export interface QueryMyOauthAppsArgs { }
    export interface QueryOauthContextArgs {
        code: string;
    }
    export interface QueryAlphaOrganizationMembersArgs {
        orgId: string;
        first: OptionalNullable<number>;
        after: OptionalNullable<string>;
    }
    export interface QueryAlphaOrganizationInviteLinkArgs {
        organizationId: OptionalNullable<string>;
    }
    export interface QueryAlphaOrganizationPublicInviteArgs {
        organizationId: OptionalNullable<string>;
    }
    export interface QueryMyProfileArgs { }
    export interface QuerySuperAccountsArgs { }
    export interface QuerySuperAccountArgs {
        id: string;
        viaOrgId: OptionalNullable<boolean>;
    }
    export interface QuerySuperAdminsArgs { }
    export interface QueryAlphaChatTextSearchArgs {
        query: string;
    }
    export interface QueryBetaDialogTextSearchArgs {
        query: string;
    }
    export interface QueryMyBlackListArgs { }
    export interface QueryDiscoverCollectionsArgs {
        first: number;
        after: OptionalNullable<string>;
    }
    export interface QueryDiscoverCollectionArgs {
        id: string;
    }
    export interface QueryDiscoverEditorsChoiceArgs { }
    export interface QueryDiscoverEditorsChoiceChatArgs {
        id: string;
    }
    export interface QueryMyAppsArgs { }
    export interface QueryUserStorageArgs {
        namespace: string;
        keys: string[];
    }
    export interface QueryBlackListUpdatesStateArgs { }
    export interface QueryChatStateArgs {
        chatId: string;
    }
    export interface QueryConversationStateArgs {
        id: string;
    }
    export interface QueryMessageCommentsArgs {
        messageId: string;
    }
    export interface QueryFeedItemCommentsArgs {
        feedItemId: string;
    }
    export interface QueryPostCommentsArgs {
        postId: string;
    }
    export interface QueryCommentsArgs {
        peerId: string;
    }
    export interface QueryCommentEntryArgs {
        entryId: string;
    }
    export interface QueryConferenceArgs {
        id: string;
    }
    export interface QueryConferenceMediaArgs {
        id: string;
        peerId: string;
    }
    export interface QueryMyContactsArgs {
        first: number;
        after: OptionalNullable<string>;
    }
    export interface QueryMyContactsSearchArgs {
        query: OptionalNullable<string>;
        first: number;
        after: OptionalNullable<string>;
        page: OptionalNullable<number>;
    }
    export interface QueryMyContactsStateArgs { }
    export interface QueryDialogsStateArgs { }
    export interface QueryEnvVarsArgs { }
    export interface QueryEnvVarArgs {
        name: string;
    }
    export interface QueryIpLocationArgs { }
    export interface QueryMyStickersArgs { }
    export interface QueryCreatedStickerPacksArgs { }
    export interface QueryStickersByEmojiArgs {
        emoji: string;
    }
    export interface QueryStickerPackArgs {
        id: string;
    }
    export interface QueryStickerPackCatalogArgs { }
    export interface QueryMyNotificationCenterArgs { }
    export interface QueryMyNotificationsArgs {
        first: number;
        before: OptionalNullable<string>;
    }
    export interface QueryMyOrganizationArgs { }
    export interface QueryMyOrganizationsArgs { }
    export interface QueryMyCommunitiesArgs { }
    export interface QueryOrganizationArgs {
        id: string;
    }
    export interface QueryOrganizationPublicRoomsArgs {
        id: string;
        first: number;
        after: OptionalNullable<string>;
    }
    export interface QueryMyOrganizationProfileArgs { }
    export interface QueryOrganizationProfileArgs {
        id: string;
    }
    export interface QueryAlphaOrganizationsArgs {
        query: OptionalNullable<string>;
        all: OptionalNullable<boolean>;
        prefix: OptionalNullable<string>;
        sort: OptionalNullable<string>;
        first: number;
        after: OptionalNullable<string>;
        page: OptionalNullable<number>;
    }
    export interface QueryAlphaOrganizationByPrefixArgs {
        query: OptionalNullable<string>;
    }
    export interface QueryAlphaComunityPrefixSearchArgs {
        query: OptionalNullable<string>;
        sort: OptionalNullable<string>;
        first: number;
        after: OptionalNullable<string>;
        page: OptionalNullable<number>;
        featuredIfEmptyQuery: OptionalNullable<boolean>;
    }
    export interface QueryMyPermissionsArgs { }
    export interface QueryUsersArgs {
        query: string;
    }
    export interface QueryDiscoverNewAndGrowingArgs {
        first: number;
        seed: number;
        after: OptionalNullable<string>;
    }
    export interface QueryDiscoverPopularNowArgs {
        first: number;
        after: OptionalNullable<string>;
    }
    export interface QueryDiscoverNewAndGrowingOrganizationsArgs {
        first: number;
        seed: number;
        after: OptionalNullable<string>;
    }
    export interface QueryDiscoverPopularNowOrganizationsArgs {
        first: number;
        after: OptionalNullable<string>;
    }
    export interface QueryDiscoverTopOrganizationsArgs {
        first: number;
        after: OptionalNullable<string>;
    }
    export interface QueryDiscoverTopPremiumArgs {
        first: number;
        after: OptionalNullable<string>;
    }
    export interface QueryDiscoverTopFreeArgs {
        first: number;
        after: OptionalNullable<string>;
    }
    export interface QueryPostArgs {
        id: string;
    }
    export interface QueryPostDraftArgs {
        id: string;
    }
    export interface QueryPostsArgs {
        hubs: OptionalNullable<string[]>;
        first: number;
        after: OptionalNullable<string>;
    }
    export interface QueryPostMyDraftsArgs {
        first: number;
        after: OptionalNullable<string>;
    }
    export interface QueryMyProfilePrefillArgs { }
    export interface QueryPushSettingsArgs { }
    export interface QueryActiveSessionsArgs { }
    export interface QuerySessionStateArgs { }
    export interface QuerySyncUserChatsArgs {
        first: number;
        after: OptionalNullable<string>;
    }
    export interface QueryBetaNextDiscoverPageArgs {
        selectedTagsIds: string[];
        excudedGroupsIds: string[];
    }
    export interface QueryGammaNextDiscoverPageArgs {
        selectedTagsIds: string[];
        excudedGroupsIds: string[];
    }
    export interface QueryBetaSuggestedRoomsArgs { }
    export interface QueryBetaIsDiscoverDoneArgs { }
    export interface QueryIsDiscoverSkippedArgs { }
    export interface QueryMatchmakingRoomArgs {
        peerId: string;
    }
    export interface QueryMatchmakingProfileArgs {
        peerId: string;
        uid: string;
    }
    export interface QueryTrendingRoomsByMessagesArgs {
        from: Date;
        to: Date;
        size: OptionalNullable<number>;
    }
    export interface QueryGroupScreenViewsArgs {
        id: string;
        from: OptionalNullable<Date>;
        to: OptionalNullable<Date>;
    }
    export interface QueryMeArgs { }
    export interface QueryUserArgs {
        id: string;
    }
    export interface QueryMySuccessfulInvitesCountArgs { }
    export interface QuerySuperBadgeInRoomArgs {
        roomId: string;
        userId: string;
    }
    export interface QueryBadgeInRoomArgs {
        roomId: string;
    }
    export interface QueryUserSearchArgs {
        query: OptionalNullable<string>;
        first: number;
        after: OptionalNullable<string>;
        page: OptionalNullable<number>;
        sort: OptionalNullable<string>;
    }
    export interface QueryUserSearchForChatArgs {
        chatId: string;
        query: OptionalNullable<string>;
        first: number;
        after: OptionalNullable<string>;
        page: OptionalNullable<number>;
        sort: OptionalNullable<string>;
    }
    export interface QueryAlphaProfilesArgs {
        query: OptionalNullable<string>;
        first: number;
        after: OptionalNullable<string>;
        page: OptionalNullable<number>;
        sort: OptionalNullable<string>;
    }
    export interface QueryAlphaHomeFeedArgs {
        first: number;
        after: OptionalNullable<string>;
    }
    export interface QueryAlphaFeedItemArgs {
        id: string;
    }
    export interface QueryAlphaFeedChannelArgs {
        id: string;
    }
    export interface QueryAlphaFeedMyDraftsChannelArgs { }
    export interface QueryAlphaFeedChannelContentArgs {
        id: string;
        first: number;
        after: OptionalNullable<string>;
    }
    export interface QueryAlphaFeedMySubscriptionsArgs {
        first: number;
        after: OptionalNullable<string>;
    }
    export interface QueryAlphaFeedMyChannelsArgs {
        first: number;
        after: OptionalNullable<string>;
    }
    export interface QueryAlphaWritableChannelsArgs {
        first: number;
        after: OptionalNullable<string>;
    }
    export interface QueryAlphaFeedChannelAdminsArgs {
        id: string;
        first: number;
        after: OptionalNullable<string>;
    }
    export interface QueryAlphaFeedChannelSearchArgs {
        query: OptionalNullable<string>;
        sort: OptionalNullable<string>;
        first: number;
        after: OptionalNullable<string>;
    }
    export interface QueryAlphaFeedChannelSubscribersArgs {
        channelId: string;
        query: OptionalNullable<string>;
        first: number;
        after: OptionalNullable<string>;
    }
    export interface QueryAlphaRecommendedChannelsArgs {
        first: number;
        after: OptionalNullable<string>;
    }
    export interface QueryAlphaGlobalSearchArgs {
        query: string;
        kinds: OptionalNullable<GlobalSearchEntryKind[]>;
    }
    export interface QueryFeaturedGroupsArgs { }
    export interface QueryFeaturedCommunitiesArgs { }
    export interface QueryMessagesSearchArgs {
        query: string;
        sort: OptionalNullable<string>;
        first: number;
        after: OptionalNullable<string>;
        cid: OptionalNullable<string>;
    }
    export interface QueryChatMembersSearchArgs {
        cid: string;
        query: OptionalNullable<string>;
        first: number;
        after: OptionalNullable<string>;
        page: OptionalNullable<number>;
    }
    export interface QueryChatMentionSearchArgs {
        cid: string;
        query: OptionalNullable<string>;
        first: number;
        after: OptionalNullable<string>;
    }
    export interface QueryOrgMembersSearchArgs {
        orgId: string;
        query: OptionalNullable<string>;
        first: number;
        after: OptionalNullable<string>;
        page: OptionalNullable<number>;
    }
    export interface QueryBetaChatMentionSearchArgs {
        cid: string;
        query: OptionalNullable<string>;
        first: number;
        after: OptionalNullable<string>;
    }
    export interface QueryMessagesArgs {
        chatId: string;
        first: number;
        before: OptionalNullable<string>;
    }
    export interface QueryGammaMessagesArgs {
        chatId: string;
        first: number;
        before: OptionalNullable<string>;
        after: OptionalNullable<string>;
        around: OptionalNullable<string>;
    }
    export interface QueryModernMessagesArgs {
        chatId: string;
        first: number;
        before: OptionalNullable<number>;
        after: OptionalNullable<number>;
    }
    export interface QueryMessageArgs {
        messageId: string;
    }
    export interface QueryLastReadedMessageArgs {
        chatId: string;
    }
    export interface QueryChatSharedMediaArgs {
        chatId: string;
        mediaTypes: SharedMediaType[];
        first: number;
        after: OptionalNullable<string>;
        before: OptionalNullable<string>;
        around: OptionalNullable<string>;
    }
    export interface QueryChatSharedMediaCountersArgs {
        chatId: string;
    }
    export interface QueryHaveAccessToChatArgs {
        chatId: string;
    }
    export interface QueryCommonChatsWithUserArgs {
        uid: string;
        first: number;
        after: OptionalNullable<string>;
    }
    export interface QueryRoomArgs {
        id: string;
    }
    export interface QueryRoomsArgs {
        ids: string[];
    }
    export interface QueryRoomSuperArgs {
        id: string;
    }
    export interface QueryRoomMessagesArgs {
        roomId: string;
        first: OptionalNullable<number>;
        before: OptionalNullable<string>;
    }
    export interface QueryRoomMembersArgs {
        roomId: string;
        first: OptionalNullable<number>;
        after: OptionalNullable<string>;
    }
    export interface QueryRoomAdminsArgs {
        roomId: string;
    }
    export interface QueryRoomFeaturedMembersArgs {
        roomId: string;
        first: OptionalNullable<number>;
    }
    export interface QueryRoomMemberArgs {
        roomId: string;
        memberId: string;
    }
    export interface QueryRoomSocialImageArgs {
        roomId: string;
    }
    export interface QueryBetaRoomSearchArgs {
        query: OptionalNullable<string>;
        first: number;
        after: OptionalNullable<string>;
        page: OptionalNullable<number>;
        sort: OptionalNullable<string>;
    }
    export interface QueryBetaRoomInviteInfoArgs {
        invite: string;
    }
    export interface QueryBetaRoomInviteLinkArgs {
        roomId: string;
    }
    export interface QueryBetaAvailableRoomsArgs { }
    export interface QueryBetaUserRoomsArgs {
        limit: OptionalNullable<number>;
        after: OptionalNullable<string>;
    }
    export interface QueryBetaUserAvailableRoomsArgs {
        isChannel: OptionalNullable<boolean>;
        limit: OptionalNullable<number>;
        after: OptionalNullable<string>;
    }
    export interface QueryAlphaUserAvailableRoomsArgs {
        query: OptionalNullable<string>;
        first: number;
        after: OptionalNullable<string>;
    }
    export interface QueryAlphaResolveShortNameArgs {
        shortname: string;
    }
    export interface Session {
        id: string;
        lastIp: string;
        lastLocation: string;
        online: Nullable<boolean>;
        lastSeen: Nullable<Date>;
        platform: Nullable<string>;
        current: boolean;
    }
    export interface SessionIdArgs { }
    export interface SessionLastIpArgs { }
    export interface SessionLastLocationArgs { }
    export interface SessionOnlineArgs { }
    export interface SessionLastSeenArgs { }
    export interface SessionPlatformArgs { }
    export interface SessionCurrentArgs { }
    export interface SessionState {
        isLoggedIn: boolean;
        isProfileCreated: boolean;
        isActivated: boolean;
        isAccountExists: boolean;
        isCompleted: boolean;
        isBlocked: boolean;
        isAccountPicked: boolean;
        isAccountActivated: boolean;
    }
    export interface SessionStateIsLoggedInArgs { }
    export interface SessionStateIsProfileCreatedArgs { }
    export interface SessionStateIsActivatedArgs { }
    export interface SessionStateIsAccountExistsArgs { }
    export interface SessionStateIsCompletedArgs { }
    export interface SessionStateIsBlockedArgs { }
    export interface SessionStateIsAccountPickedArgs { }
    export interface SessionStateIsAccountActivatedArgs { }
    export interface Subscription {
        lifecheck: Nullable<string>;
        walletUpdates: WalletUpdateContainer;
        watchUpdates: UpdateSubscription;
        debugEvents: DebugEvent;
        debugReaderState: Nullable<string>;
        debugServerId: string;
        settingsWatch: Settings;
        watchSettings: Settings;
        alphaConferenceWatch: Conference;
        alphaConferenceMediaWatch: ConferenceMedia;
        userEventBus: UserEventBusMessage;
        globalEventBus: UserEventBusMessage;
        blackListUpdates: BlackListUpdateContainer;
        chatUpdates: ChatUpdateContainer;
        commentUpdates: Nullable<CommentUpdateContainer>;
        conferenceWatch: Conference;
        conferenceMediaWatch: ConferenceMedia;
        myContactsUpdates: ContactsUpdateContainer;
        dialogsUpdates: DialogUpdateContainer;
        homeFeedUpdates: FeedUpdateContainer;
        notificationCenterUpdates: Nullable<NotificationCenterUpdateContainer>;
        alphaSubscribeOnline: OnlineEvent;
        chatOnlinesCount: ChatOnlineEvent;
        typings: TypingEvent;
    }
    export interface SubscriptionLifecheckArgs { }
    export interface SubscriptionWalletUpdatesArgs {
        fromState: string;
    }
    export interface SubscriptionWatchUpdatesArgs { }
    export interface SubscriptionDebugEventsArgs {
        fromState: OptionalNullable<string>;
        eventsCount: number;
        randomDelays: boolean;
        seed: string;
    }
    export interface SubscriptionDebugReaderStateArgs {
        reader: string;
    }
    export interface SubscriptionDebugServerIdArgs { }
    export interface SubscriptionSettingsWatchArgs { }
    export interface SubscriptionWatchSettingsArgs { }
    export interface SubscriptionAlphaConferenceWatchArgs {
        id: string;
    }
    export interface SubscriptionAlphaConferenceMediaWatchArgs {
        id: string;
        peerId: string;
    }
    export interface SubscriptionUserEventBusArgs {
        topic: string;
    }
    export interface SubscriptionGlobalEventBusArgs {
        topic: string;
    }
    export interface SubscriptionBlackListUpdatesArgs {
        fromState: string;
    }
    export interface SubscriptionChatUpdatesArgs {
        chatId: string;
        fromState: OptionalNullable<string>;
    }
    export interface SubscriptionCommentUpdatesArgs {
        peerId: string;
        fromState: OptionalNullable<string>;
    }
    export interface SubscriptionConferenceWatchArgs {
        id: string;
    }
    export interface SubscriptionConferenceMediaWatchArgs {
        id: string;
        peerId: string;
    }
    export interface SubscriptionMyContactsUpdatesArgs {
        fromState: string;
    }
    export interface SubscriptionDialogsUpdatesArgs {
        fromState: OptionalNullable<string>;
    }
    export interface SubscriptionHomeFeedUpdatesArgs {
        fromState: OptionalNullable<string>;
    }
    export interface SubscriptionNotificationCenterUpdatesArgs {
        fromState: OptionalNullable<string>;
    }
    export interface SubscriptionAlphaSubscribeOnlineArgs {
        users: string[];
    }
    export interface SubscriptionChatOnlinesCountArgs {
        chatId: string;
    }
    export interface SubscriptionTypingsArgs { }
    export interface SyncChat {
        conversation: Conversation;
        sequence: Sequence;
        pts: number;
    }
    export interface SyncChatConversationArgs { }
    export interface SyncChatSequenceArgs { }
    export interface SyncChatPtsArgs { }
    export interface SyncChatsConnection {
        items: SyncChat[];
        cursor: Nullable<string>;
    }
    export interface SyncChatsConnectionItemsArgs { }
    export interface SyncChatsConnectionCursorArgs { }
    export interface Tag {
        id: string;
        title: string;
    }
    export interface TagIdArgs { }
    export interface TagTitleArgs { }
    export interface TagGroup {
        id: string;
        title: Nullable<string>;
        subtitle: Nullable<string>;
        tags: Tag[];
    }
    export interface TagGroupIdArgs { }
    export interface TagGroupTitleArgs { }
    export interface TagGroupSubtitleArgs { }
    export interface TagGroupTagsArgs { }
    export interface DiscoverPage {
        chats: Nullable<Room[]>;
        tagGroup: Nullable<TagGroup>;
    }
    export interface DiscoverPageChatsArgs { }
    export interface DiscoverPageTagGroupArgs { }
    export interface TextMatchmakingQuestion {
        id: string;
        title: string;
        subtitle: string;
    }
    export interface TextMatchmakingQuestionIdArgs { }
    export interface TextMatchmakingQuestionTitleArgs { }
    export interface TextMatchmakingQuestionSubtitleArgs { }
    export interface MultiselectMatchmakingQuestion {
        id: string;
        title: string;
        subtitle: string;
        tags: string[];
    }
    export interface MultiselectMatchmakingQuestionIdArgs { }
    export interface MultiselectMatchmakingQuestionTitleArgs { }
    export interface MultiselectMatchmakingQuestionSubtitleArgs { }
    export interface MultiselectMatchmakingQuestionTagsArgs { }
    export type MatchmakingQuestion = TextMatchmakingQuestion | MultiselectMatchmakingQuestion;
    export interface TextMatchmakingAnswer {
        question: TextMatchmakingQuestion;
        answer: string;
    }
    export interface TextMatchmakingAnswerQuestionArgs { }
    export interface TextMatchmakingAnswerAnswerArgs { }
    export interface MultiselectMatchmakingAnswer {
        question: MultiselectMatchmakingQuestion;
        tags: string[];
    }
    export interface MultiselectMatchmakingAnswerQuestionArgs { }
    export interface MultiselectMatchmakingAnswerTagsArgs { }
    export type MatchmakingAnswer = TextMatchmakingAnswer | MultiselectMatchmakingAnswer;
    export interface MatchmakingProfile {
        user: User;
        answers: MatchmakingAnswer[];
        chatCreated: boolean;
    }
    export interface MatchmakingProfileUserArgs { }
    export interface MatchmakingProfileAnswersArgs { }
    export interface MatchmakingProfileChatCreatedArgs { }
    export type MatchmakingPeer = SharedRoom;
    export interface MatchmakingRoom {
        enabled: boolean;
        questions: Nullable<MatchmakingQuestion[]>;
        profiles: Nullable<MatchmakingProfile[]>;
        myProfile: Nullable<MatchmakingProfile>;
        peer: MatchmakingPeer;
    }
    export interface MatchmakingRoomEnabledArgs { }
    export interface MatchmakingRoomQuestionsArgs { }
    export interface MatchmakingRoomProfilesArgs { }
    export interface MatchmakingRoomMyProfileArgs { }
    export interface MatchmakingRoomPeerArgs { }
    export type MatchmakingQuestionTypeValues = 'Text' | 'Multiselect';
    export type MatchmakingQuestionType = GQLRoots.MatchmakingQuestionTypeRoot;
    export interface MatchmakingQuestionInput {
        id: Nullable<string>;
        type: MatchmakingQuestionType;
        title: string;
        subtitle: Nullable<string>;
        tags: Nullable<string[]>;
    }
    export interface MatchmakingRoomInput {
        enabled: Nullable<boolean>;
        questions: Nullable<MatchmakingQuestionInput[]>;
    }
    export interface MatchmakingAnswerInput {
        questionId: string;
        text: Nullable<string>;
        tags: Nullable<string[]>;
    }
    export interface MatchmakingProfileFillInput {
        answers: MatchmakingAnswerInput[];
    }
    export interface TrendingRoom {
        room: Room;
        messagesDelta: number;
    }
    export interface TrendingRoomRoomArgs { }
    export interface TrendingRoomMessagesDeltaArgs { }
    export interface TypingEvent {
        conversation: Conversation;
        chat: Room;
        user: User;
        type: TypingType;
        cancel: boolean;
    }
    export interface TypingEventConversationArgs { }
    export interface TypingEventChatArgs { }
    export interface TypingEventUserArgs { }
    export interface TypingEventTypeArgs { }
    export interface TypingEventCancelArgs { }
    export type TypingTypeValues = 'TEXT' | 'PHOTO' | 'FILE' | 'STICKER' | 'VIDEO';
    export type TypingType = GQLRoots.TypingTypeRoot;
    export interface User {
        id: string;
        isYou: boolean;
        isBot: boolean;
        isDeleted: boolean;
        name: string;
        firstName: string;
        lastName: Nullable<string>;
        photo: Nullable<string>;
        phone: Nullable<string>;
        email: Nullable<string>;
        website: Nullable<string>;
        about: Nullable<string>;
        location: Nullable<string>;
        linkedin: Nullable<string>;
        instagram: Nullable<string>;
        twitter: Nullable<string>;
        facebook: Nullable<string>;
        audienceSize: number;
        badge: Nullable<ProfileBadge>;
        joinDate: Date;
        birthDay: Nullable<Date>;
        status: Nullable<string>;
        channelsJoined: ChannelConversation[];
        photoRef: Nullable<ImageRef>;
        picture: Nullable<string>;
        pictureRef: Nullable<ImageRef>;
        alphaRole: Nullable<string>;
        alphaLinkedin: Nullable<string>;
        alphaTwitter: Nullable<string>;
        alphaLocations: Nullable<string[]>;
        chatsWithBadge: UserChatWithBadge[];
        externalSocialImage: Nullable<string>;
        isBanned: boolean;
        isMeBanned: boolean;
        online: boolean;
        active: boolean;
        lastSeen: Nullable<string>;
        organizations: Organization[];
        primaryOrganization: Nullable<Organization>;
        alphaPrimaryOrganization: Nullable<Organization>;
        inContacts: boolean;
        badges: UserBadge[];
        primaryBadge: Nullable<UserBadge>;
        shortname: Nullable<string>;
    }
    export interface UserIdArgs { }
    export interface UserIsYouArgs { }
    export interface UserIsBotArgs { }
    export interface UserIsDeletedArgs { }
    export interface UserNameArgs { }
    export interface UserFirstNameArgs { }
    export interface UserLastNameArgs { }
    export interface UserPhotoArgs { }
    export interface UserPhoneArgs { }
    export interface UserEmailArgs { }
    export interface UserWebsiteArgs { }
    export interface UserAboutArgs { }
    export interface UserLocationArgs { }
    export interface UserLinkedinArgs { }
    export interface UserInstagramArgs { }
    export interface UserTwitterArgs { }
    export interface UserFacebookArgs { }
    export interface UserAudienceSizeArgs { }
    export interface UserBadgeArgs { }
    export interface UserJoinDateArgs { }
    export interface UserBirthDayArgs { }
    export interface UserStatusArgs { }
    export interface UserChannelsJoinedArgs { }
    export interface UserPhotoRefArgs { }
    export interface UserPictureArgs { }
    export interface UserPictureRefArgs { }
    export interface UserAlphaRoleArgs { }
    export interface UserAlphaLinkedinArgs { }
    export interface UserAlphaTwitterArgs { }
    export interface UserAlphaLocationsArgs { }
    export interface UserChatsWithBadgeArgs { }
    export interface UserExternalSocialImageArgs { }
    export interface UserIsBannedArgs { }
    export interface UserIsMeBannedArgs { }
    export interface UserOnlineArgs { }
    export interface UserActiveArgs { }
    export interface UserLastSeenArgs { }
    export interface UserOrganizationsArgs { }
    export interface UserPrimaryOrganizationArgs { }
    export interface UserAlphaPrimaryOrganizationArgs { }
    export interface UserInContactsArgs { }
    export interface UserBadgesArgs { }
    export interface UserPrimaryBadgeArgs { }
    export interface UserShortnameArgs { }
    export interface UserChatWithBadge {
        badge: UserBadge;
        chat: Room;
    }
    export interface UserChatWithBadgeBadgeArgs { }
    export interface UserChatWithBadgeChatArgs { }
    export interface UserBadge {
        id: string;
        name: string;
        verified: boolean;
    }
    export interface UserBadgeIdArgs { }
    export interface UserBadgeNameArgs { }
    export interface UserBadgeVerifiedArgs { }
    export interface UserEdge {
        node: User;
        cursor: string;
    }
    export interface UserEdgeNodeArgs { }
    export interface UserEdgeCursorArgs { }
    export interface UserConnection {
        edges: UserEdge[];
        pageInfo: PageInfo;
    }
    export interface UserConnectionEdgesArgs { }
    export interface UserConnectionPageInfoArgs { }
    export interface ChatUserEdge {
        node: User;
        isMember: boolean;
        cursor: string;
    }
    export interface ChatUserEdgeNodeArgs { }
    export interface ChatUserEdgeIsMemberArgs { }
    export interface ChatUserEdgeCursorArgs { }
    export interface ChatUserConnection {
        edges: ChatUserEdge[];
        pageInfo: PageInfo;
    }
    export interface ChatUserConnectionEdgesArgs { }
    export interface ChatUserConnectionPageInfoArgs { }
    export type FeedItem = FeedPost;
    export type FeedPostAuthor = User;
    export type FeedPostSource = FeedChannel;
    export interface FeedPost {
        id: string;
        date: Date;
        author: FeedPostAuthor;
        source: Nullable<FeedPostSource>;
        canEdit: boolean;
        edited: boolean;
        reactions: ModernMessageReaction[];
        isMentioned: boolean;
        message: Nullable<string>;
        spans: MessageSpan[];
        attachments: ModernMessageAttachment[];
        commentsCount: number;
        slides: Slide[];
        fallback: string;
    }
    export interface FeedPostIdArgs { }
    export interface FeedPostDateArgs { }
    export interface FeedPostAuthorArgs { }
    export interface FeedPostSourceArgs { }
    export interface FeedPostCanEditArgs { }
    export interface FeedPostEditedArgs { }
    export interface FeedPostReactionsArgs { }
    export interface FeedPostIsMentionedArgs { }
    export interface FeedPostMessageArgs { }
    export interface FeedPostSpansArgs { }
    export interface FeedPostAttachmentsArgs { }
    export interface FeedPostCommentsCountArgs { }
    export interface FeedPostSlidesArgs { }
    export interface FeedPostFallbackArgs { }
    export interface FeedItemConnection {
        items: FeedItem[];
        cursor: Nullable<string>;
    }
    export interface FeedItemConnectionItemsArgs { }
    export interface FeedItemConnectionCursorArgs { }
    export type Slide = TextSlide;
    export type SlideAttachment = User | SharedRoom | Organization;
    export interface TextSlide {
        id: string;
        text: string;
        spans: MessageSpan[];
        cover: Nullable<Image>;
        coverAlign: Nullable<SlideCoverAlign>;
        attachments: SlideAttachment[];
    }
    export interface TextSlideIdArgs { }
    export interface TextSlideTextArgs { }
    export interface TextSlideSpansArgs { }
    export interface TextSlideCoverArgs { }
    export interface TextSlideCoverAlignArgs { }
    export interface TextSlideAttachmentsArgs { }
    export type SlideTypeValues = 'Text';
    export type SlideType = GQLRoots.SlideTypeRoot;
    export type SlideCoverAlignValues = 'Top' | 'Bottom' | 'Cover';
    export type SlideCoverAlign = GQLRoots.SlideCoverAlignRoot;
    export interface SlideInput {
        type: SlideType;
        text: Nullable<string>;
        spans: Nullable<MessageSpanInput[]>;
        mentions: Nullable<MentionInput[]>;
        cover: Nullable<ImageRefInput>;
        coverAlign: Nullable<SlideCoverAlign>;
        attachments: Nullable<string[]>;
    }
    export interface FeedChannel {
        id: string;
        title: string;
        about: Nullable<string>;
        photo: Nullable<string>;
        socialImage: Nullable<string>;
        subscribersCount: number;
        postsCount: number;
        isGlobal: boolean;
        isHidden: boolean;
        subscribed: boolean;
        myRole: FeedChannelSubscriberRole;
        shortname: Nullable<string>;
    }
    export interface FeedChannelIdArgs { }
    export interface FeedChannelTitleArgs { }
    export interface FeedChannelAboutArgs { }
    export interface FeedChannelPhotoArgs { }
    export interface FeedChannelSocialImageArgs { }
    export interface FeedChannelSubscribersCountArgs { }
    export interface FeedChannelPostsCountArgs { }
    export interface FeedChannelIsGlobalArgs { }
    export interface FeedChannelIsHiddenArgs { }
    export interface FeedChannelSubscribedArgs { }
    export interface FeedChannelMyRoleArgs { }
    export interface FeedChannelShortnameArgs { }
    export interface FeedChannelConnection {
        items: FeedChannel[];
        cursor: Nullable<string>;
    }
    export interface FeedChannelConnectionItemsArgs { }
    export interface FeedChannelConnectionCursorArgs { }
    export interface FeedChannelEdge {
        node: FeedChannel;
        cursor: string;
    }
    export interface FeedChannelEdgeNodeArgs { }
    export interface FeedChannelEdgeCursorArgs { }
    export interface FeedChannelSearchConnection {
        edges: FeedChannelEdge[];
        pageInfo: PageInfo;
    }
    export interface FeedChannelSearchConnectionEdgesArgs { }
    export interface FeedChannelSearchConnectionPageInfoArgs { }
    export type FeedSubscription = FeedChannel;
    export type FeedChannelSubscriberRoleValues = 'Creator' | 'Editor' | 'Subscriber' | 'None';
    export type FeedChannelSubscriberRole = GQLRoots.FeedChannelSubscriberRoleRoot;
    export interface FeedChannelAdmin {
        user: User;
        role: FeedChannelSubscriberRole;
        promoter: Nullable<User>;
    }
    export interface FeedChannelAdminUserArgs { }
    export interface FeedChannelAdminRoleArgs { }
    export interface FeedChannelAdminPromoterArgs { }
    export interface FeedChannelAdminConnection {
        items: FeedChannelAdmin[];
        cursor: Nullable<string>;
    }
    export interface FeedChannelAdminConnectionItemsArgs { }
    export interface FeedChannelAdminConnectionCursorArgs { }
    export interface FeedChannelSubscriber {
        user: User;
        role: FeedChannelSubscriberRole;
    }
    export interface FeedChannelSubscriberUserArgs { }
    export interface FeedChannelSubscriberRoleArgs { }
    export interface FeedChannelSubscriberEdge {
        node: FeedChannelSubscriber;
        cursor: string;
    }
    export interface FeedChannelSubscriberEdgeNodeArgs { }
    export interface FeedChannelSubscriberEdgeCursorArgs { }
    export interface FeedChannelSubscriberConnection {
        edges: FeedChannelSubscriberEdge[];
        pageInfo: PageInfo;
    }
    export interface FeedChannelSubscriberConnectionEdgesArgs { }
    export interface FeedChannelSubscriberConnectionPageInfoArgs { }
    export type FeedReactionTypeValues = 'LIKE' | 'THUMB_UP' | 'JOY' | 'SCREAM' | 'CRYING' | 'ANGRY';
    export type FeedReactionType = GQLRoots.FeedReactionTypeRoot;
    export type GlobalSearchEntry = Organization | User | SharedRoom;
    export type GlobalSearchEntryKindValues = 'ORGANIZATION' | 'USER' | 'SHAREDROOM';
    export type GlobalSearchEntryKind = GQLRoots.GlobalSearchEntryKindRoot;
    export interface MessageWithChat {
        message: ModernMessage;
        chat: Room;
    }
    export interface MessageWithChatMessageArgs { }
    export interface MessageWithChatChatArgs { }
    export interface MessageEdge {
        node: MessageWithChat;
        cursor: string;
    }
    export interface MessageEdgeNodeArgs { }
    export interface MessageEdgeCursorArgs { }
    export interface MessageConnection {
        edges: MessageEdge[];
        pageInfo: PageInfo;
    }
    export interface MessageConnectionEdgesArgs { }
    export interface MessageConnectionPageInfoArgs { }
    export interface GlobalSearchConnection {
        globalItems: GlobalSearchEntry[];
        localItems: User[];
        cursor: Nullable<string>;
    }
    export interface GlobalSearchConnectionGlobalItemsArgs { }
    export interface GlobalSearchConnectionLocalItemsArgs { }
    export interface GlobalSearchConnectionCursorArgs { }
    export interface MentionSearchUser {
        user: User;
        fromSameChat: boolean;
    }
    export interface MentionSearchUserUserArgs { }
    export interface MentionSearchUserFromSameChatArgs { }
    export interface MentionSearchOrganization {
        organization: Organization;
    }
    export interface MentionSearchOrganizationOrganizationArgs { }
    export interface MentionSearchSharedRoom {
        room: SharedRoom;
    }
    export interface MentionSearchSharedRoomRoomArgs { }
    export type MentionSearchEntry = MentionSearchUser | MentionSearchSharedRoom | MentionSearchOrganization;
    export interface MentionSearchConnection {
        items: MentionSearchEntry[];
        cursor: Nullable<string>;
    }
    export interface MentionSearchConnectionItemsArgs { }
    export interface MentionSearchConnectionCursorArgs { }
    export type MessageSource = MessageSourceChat | MessageSourceComment;
    export interface MessageSourceChat {
        chat: Room;
    }
    export interface MessageSourceChatChatArgs { }
    export interface MessageSourceComment {
        peer: CommentsPeer;
    }
    export interface MessageSourceCommentPeerArgs { }
    export interface ModernMessage {
        id: string;
        seq: Nullable<number>;
        date: Date;
        sender: User;
        senderBadge: Nullable<UserBadge>;
        source: Nullable<MessageSource>;
        hidden: boolean;
        message: Nullable<string>;
        spans: MessageSpan[];
        fallback: string;
    }
    export interface ModernMessageIdArgs { }
    export interface ModernMessageSeqArgs { }
    export interface ModernMessageDateArgs { }
    export interface ModernMessageSenderArgs { }
    export interface ModernMessageSenderBadgeArgs { }
    export interface ModernMessageSourceArgs { }
    export interface ModernMessageHiddenArgs { }
    export interface ModernMessageMessageArgs { }
    export interface ModernMessageSpansArgs { }
    export interface ModernMessageFallbackArgs { }
    export interface ServiceMessage extends ModernMessage {
        id: string;
        seq: Nullable<number>;
        date: Date;
        sender: User;
        senderBadge: Nullable<UserBadge>;
        isMentioned: boolean;
        source: Nullable<MessageSource>;
        hidden: boolean;
        message: Nullable<string>;
        spans: MessageSpan[];
        serviceMetadata: Nullable<ServiceMetadata>;
        fallback: string;
        overrideAvatar: Nullable<ImageRef>;
        overrideName: Nullable<string>;
    }
    export interface ServiceMessageIdArgs { }
    export interface ServiceMessageSeqArgs { }
    export interface ServiceMessageDateArgs { }
    export interface ServiceMessageSenderArgs { }
    export interface ServiceMessageSenderBadgeArgs { }
    export interface ServiceMessageIsMentionedArgs { }
    export interface ServiceMessageSourceArgs { }
    export interface ServiceMessageHiddenArgs { }
    export interface ServiceMessageMessageArgs { }
    export interface ServiceMessageSpansArgs { }
    export interface ServiceMessageServiceMetadataArgs { }
    export interface ServiceMessageFallbackArgs { }
    export interface ServiceMessageOverrideAvatarArgs { }
    export interface ServiceMessageOverrideNameArgs { }
    export interface GeneralMessage extends ModernMessage {
        id: string;
        seq: Nullable<number>;
        date: Date;
        sender: User;
        senderBadge: Nullable<UserBadge>;
        edited: boolean;
        reactions: ModernMessageReaction[];
        reactionCounters: ReactionCounter[];
        isMentioned: boolean;
        source: Nullable<MessageSource>;
        hidden: boolean;
        message: Nullable<string>;
        spans: MessageSpan[];
        attachments: ModernMessageAttachment[];
        quotedMessages: ModernMessage[];
        commentsCount: number;
        fallback: string;
        overrideAvatar: Nullable<ImageRef>;
        overrideName: Nullable<string>;
    }
    export interface GeneralMessageIdArgs { }
    export interface GeneralMessageSeqArgs { }
    export interface GeneralMessageDateArgs { }
    export interface GeneralMessageSenderArgs { }
    export interface GeneralMessageSenderBadgeArgs { }
    export interface GeneralMessageEditedArgs { }
    export interface GeneralMessageReactionsArgs { }
    export interface GeneralMessageReactionCountersArgs { }
    export interface GeneralMessageIsMentionedArgs { }
    export interface GeneralMessageSourceArgs { }
    export interface GeneralMessageHiddenArgs { }
    export interface GeneralMessageMessageArgs { }
    export interface GeneralMessageSpansArgs { }
    export interface GeneralMessageAttachmentsArgs { }
    export interface GeneralMessageQuotedMessagesArgs { }
    export interface GeneralMessageCommentsCountArgs { }
    export interface GeneralMessageFallbackArgs { }
    export interface GeneralMessageOverrideAvatarArgs { }
    export interface GeneralMessageOverrideNameArgs { }
    export interface StickerMessage extends ModernMessage {
        id: string;
        seq: Nullable<number>;
        date: Date;
        sender: User;
        senderBadge: Nullable<UserBadge>;
        source: Nullable<MessageSource>;
        hidden: boolean;
        message: Nullable<string>;
        spans: MessageSpan[];
        reactions: ModernMessageReaction[];
        reactionCounters: ReactionCounter[];
        fallback: string;
        quotedMessages: ModernMessage[];
        commentsCount: number;
        sticker: Sticker;
        overrideAvatar: Nullable<ImageRef>;
        overrideName: Nullable<string>;
    }
    export interface StickerMessageIdArgs { }
    export interface StickerMessageSeqArgs { }
    export interface StickerMessageDateArgs { }
    export interface StickerMessageSenderArgs { }
    export interface StickerMessageSenderBadgeArgs { }
    export interface StickerMessageSourceArgs { }
    export interface StickerMessageHiddenArgs { }
    export interface StickerMessageMessageArgs { }
    export interface StickerMessageSpansArgs { }
    export interface StickerMessageReactionsArgs { }
    export interface StickerMessageReactionCountersArgs { }
    export interface StickerMessageFallbackArgs { }
    export interface StickerMessageQuotedMessagesArgs { }
    export interface StickerMessageCommentsCountArgs { }
    export interface StickerMessageStickerArgs { }
    export interface StickerMessageOverrideAvatarArgs { }
    export interface StickerMessageOverrideNameArgs { }
    export interface GammaMessagesBatch {
        messages: ModernMessage[];
        haveMoreForward: Nullable<boolean>;
        haveMoreBackward: Nullable<boolean>;
    }
    export interface GammaMessagesBatchMessagesArgs { }
    export interface GammaMessagesBatchHaveMoreForwardArgs { }
    export interface GammaMessagesBatchHaveMoreBackwardArgs { }
    export interface ModernMessagesBatch {
        messages: ModernMessage[];
        haveMoreForward: boolean;
        haveMoreBackward: boolean;
    }
    export interface ModernMessagesBatchMessagesArgs { }
    export interface ModernMessagesBatchHaveMoreForwardArgs { }
    export interface ModernMessagesBatchHaveMoreBackwardArgs { }
    export type SharedMediaTypeValues = 'LINK' | 'IMAGE' | 'DOCUMENT' | 'VIDEO';
    export type SharedMediaType = GQLRoots.SharedMediaTypeRoot;
    export interface SharedMediaCounters {
        links: number;
        images: number;
        documents: number;
        videos: number;
    }
    export interface SharedMediaCountersLinksArgs { }
    export interface SharedMediaCountersImagesArgs { }
    export interface SharedMediaCountersDocumentsArgs { }
    export interface SharedMediaCountersVideosArgs { }
    export interface SharedMediaMessageEdge {
        node: MessageWithChat;
        cursor: string;
        index: number;
    }
    export interface SharedMediaMessageEdgeNodeArgs { }
    export interface SharedMediaMessageEdgeCursorArgs { }
    export interface SharedMediaMessageEdgeIndexArgs { }
    export interface SharedMediaConnection {
        edges: SharedMediaMessageEdge[];
        pageInfo: PageInfo;
    }
    export interface SharedMediaConnectionEdgesArgs { }
    export interface SharedMediaConnectionPageInfoArgs { }
    export interface CommonChatsWithUserResponse {
        items: SharedRoom[];
        cursor: Nullable<string>;
        count: number;
    }
    export interface CommonChatsWithUserResponseItemsArgs { }
    export interface CommonChatsWithUserResponseCursorArgs { }
    export interface CommonChatsWithUserResponseCountArgs { }
    export interface ImageFallback {
        photo: string;
        text: string;
    }
    export interface ImageFallbackPhotoArgs { }
    export interface ImageFallbackTextArgs { }
    export interface Image {
        url: string;
        metadata: Nullable<FileMetadata>;
    }
    export interface ImageUrlArgs { }
    export interface ImageMetadataArgs { }
    export interface ModernMessageAttachment {
        id: string;
        fallback: string;
    }
    export interface ModernMessageAttachmentIdArgs { }
    export interface ModernMessageAttachmentFallbackArgs { }
    export interface MessageRichAttachment extends ModernMessageAttachment {
        id: string;
        title: Nullable<string>;
        subTitle: Nullable<string>;
        titleLink: Nullable<string>;
        titleLinkHostname: Nullable<string>;
        text: Nullable<string>;
        icon: Nullable<Image>;
        image: Nullable<Image>;
        imagePreview: Nullable<string>;
        imageFallback: Nullable<ImageFallback>;
        socialImage: Nullable<Image>;
        socialImagePreview: Nullable<string>;
        keyboard: Nullable<MessageKeyboard>;
        fallback: string;
    }
    export interface MessageRichAttachmentIdArgs { }
    export interface MessageRichAttachmentTitleArgs { }
    export interface MessageRichAttachmentSubTitleArgs { }
    export interface MessageRichAttachmentTitleLinkArgs { }
    export interface MessageRichAttachmentTitleLinkHostnameArgs { }
    export interface MessageRichAttachmentTextArgs { }
    export interface MessageRichAttachmentIconArgs { }
    export interface MessageRichAttachmentImageArgs { }
    export interface MessageRichAttachmentImagePreviewArgs { }
    export interface MessageRichAttachmentImageFallbackArgs { }
    export interface MessageRichAttachmentSocialImageArgs { }
    export interface MessageRichAttachmentSocialImagePreviewArgs { }
    export interface MessageRichAttachmentKeyboardArgs { }
    export interface MessageRichAttachmentFallbackArgs { }
    export interface MessageAttachmentFile extends ModernMessageAttachment {
        id: string;
        fileId: string;
        fileMetadata: FileMetadata;
        filePreview: Nullable<string>;
        fallback: string;
    }
    export interface MessageAttachmentFileIdArgs { }
    export interface MessageAttachmentFileFileIdArgs { }
    export interface MessageAttachmentFileFileMetadataArgs { }
    export interface MessageAttachmentFileFilePreviewArgs { }
    export interface MessageAttachmentFileFallbackArgs { }
    export interface MessageAttachmentPost extends ModernMessageAttachment {
        id: string;
        post: FeedItem;
        fallback: string;
    }
    export interface MessageAttachmentPostIdArgs { }
    export interface MessageAttachmentPostPostArgs { }
    export interface MessageAttachmentPostFallbackArgs { }
    export interface MessageAttachmentPurchase extends ModernMessageAttachment {
        id: string;
        fallback: string;
        purchase: Purchase;
    }
    export interface MessageAttachmentPurchaseIdArgs { }
    export interface MessageAttachmentPurchaseFallbackArgs { }
    export interface MessageAttachmentPurchasePurchaseArgs { }
    export interface FileAttachmentInput {
        fileId: string;
    }
    export interface MessageKeyboard {
        buttons: Nullable<ModernMessageButton[]>[];
    }
    export interface MessageKeyboardButtonsArgs { }
    export interface ModernMessageButton {
        id: string;
        title: string;
        style: ModernMessageButtonStyle;
        url: Nullable<string>;
    }
    export interface ModernMessageButtonIdArgs { }
    export interface ModernMessageButtonTitleArgs { }
    export interface ModernMessageButtonStyleArgs { }
    export interface ModernMessageButtonUrlArgs { }
    export type ModernMessageButtonStyleValues = 'DEFAULT' | 'LIGHT' | 'PAY';
    export type ModernMessageButtonStyle = GQLRoots.ModernMessageButtonStyleRoot;
    export interface MessageKeyboardInput {
        buttons: Nullable<ModernMessageButtonInput[]>[];
    }
    export interface ModernMessageButtonInput {
        id: string;
        title: string;
        style: ModernMessageButtonStyle;
    }
    export type MessageReactionTypeValues = 'LIKE' | 'THUMB_UP' | 'JOY' | 'SCREAM' | 'CRYING' | 'ANGRY' | 'DONATE';
    export type MessageReactionType = GQLRoots.MessageReactionTypeRoot;
    export interface ModernMessageReaction {
        user: User;
        reaction: MessageReactionType;
    }
    export interface ModernMessageReactionUserArgs { }
    export interface ModernMessageReactionReactionArgs { }
    export interface ReactionCounter {
        reaction: MessageReactionType;
        count: number;
        setByMe: boolean;
    }
    export interface ReactionCounterReactionArgs { }
    export interface ReactionCounterCountArgs { }
    export interface ReactionCounterSetByMeArgs { }
    export interface MessageSpan {
        offset: number;
        length: number;
    }
    export interface MessageSpanOffsetArgs { }
    export interface MessageSpanLengthArgs { }
    export interface MessageSpanUserMention extends MessageSpan {
        offset: number;
        length: number;
        user: User;
    }
    export interface MessageSpanUserMentionOffsetArgs { }
    export interface MessageSpanUserMentionLengthArgs { }
    export interface MessageSpanUserMentionUserArgs { }
    export interface MessageSpanMultiUserMention extends MessageSpan {
        offset: number;
        length: number;
        users: User[];
    }
    export interface MessageSpanMultiUserMentionOffsetArgs { }
    export interface MessageSpanMultiUserMentionLengthArgs { }
    export interface MessageSpanMultiUserMentionUsersArgs { }
    export interface MessageSpanRoomMention extends MessageSpan {
        offset: number;
        length: number;
        room: Room;
    }
    export interface MessageSpanRoomMentionOffsetArgs { }
    export interface MessageSpanRoomMentionLengthArgs { }
    export interface MessageSpanRoomMentionRoomArgs { }
    export interface MessageSpanOrganizationMention extends MessageSpan {
        offset: number;
        length: number;
        organization: Organization;
    }
    export interface MessageSpanOrganizationMentionOffsetArgs { }
    export interface MessageSpanOrganizationMentionLengthArgs { }
    export interface MessageSpanOrganizationMentionOrganizationArgs { }
    export type MentionPeer = SharedRoom | Organization | User;
    export interface MentionInput {
        chatId: Nullable<string>;
        userId: Nullable<string>;
        userIds: Nullable<string[]>;
        orgId: Nullable<string>;
        all: Nullable<boolean>;
        offset: number;
        length: number;
    }
    export interface MessageSpanLink extends MessageSpan {
        offset: number;
        length: number;
        url: string;
    }
    export interface MessageSpanLinkOffsetArgs { }
    export interface MessageSpanLinkLengthArgs { }
    export interface MessageSpanLinkUrlArgs { }
    export interface MessageSpanBold extends MessageSpan {
        offset: number;
        length: number;
    }
    export interface MessageSpanBoldOffsetArgs { }
    export interface MessageSpanBoldLengthArgs { }
    export interface MessageSpanItalic extends MessageSpan {
        offset: number;
        length: number;
    }
    export interface MessageSpanItalicOffsetArgs { }
    export interface MessageSpanItalicLengthArgs { }
    export interface MessageSpanIrony extends MessageSpan {
        offset: number;
        length: number;
    }
    export interface MessageSpanIronyOffsetArgs { }
    export interface MessageSpanIronyLengthArgs { }
    export interface MessageSpanInlineCode extends MessageSpan {
        offset: number;
        length: number;
    }
    export interface MessageSpanInlineCodeOffsetArgs { }
    export interface MessageSpanInlineCodeLengthArgs { }
    export interface MessageSpanCodeBlock extends MessageSpan {
        offset: number;
        length: number;
    }
    export interface MessageSpanCodeBlockOffsetArgs { }
    export interface MessageSpanCodeBlockLengthArgs { }
    export interface MessageSpanInsane extends MessageSpan {
        offset: number;
        length: number;
    }
    export interface MessageSpanInsaneOffsetArgs { }
    export interface MessageSpanInsaneLengthArgs { }
    export interface MessageSpanLoud extends MessageSpan {
        offset: number;
        length: number;
    }
    export interface MessageSpanLoudOffsetArgs { }
    export interface MessageSpanLoudLengthArgs { }
    export interface MessageSpanRotating extends MessageSpan {
        offset: number;
        length: number;
    }
    export interface MessageSpanRotatingOffsetArgs { }
    export interface MessageSpanRotatingLengthArgs { }
    export interface MessageSpanDate extends MessageSpan {
        offset: number;
        length: number;
        date: Date;
    }
    export interface MessageSpanDateOffsetArgs { }
    export interface MessageSpanDateLengthArgs { }
    export interface MessageSpanDateDateArgs { }
    export interface MessageSpanAllMention extends MessageSpan {
        offset: number;
        length: number;
    }
    export interface MessageSpanAllMentionOffsetArgs { }
    export interface MessageSpanAllMentionLengthArgs { }
    export interface MessageSpanHashTag extends MessageSpan {
        offset: number;
        length: number;
        tag: string;
    }
    export interface MessageSpanHashTagOffsetArgs { }
    export interface MessageSpanHashTagLengthArgs { }
    export interface MessageSpanHashTagTagArgs { }
    export type MessageSpanTypeValues = 'Bold' | 'Italic' | 'Irony' | 'InlineCode' | 'CodeBlock' | 'Insane' | 'Loud' | 'Rotating' | 'Link';
    export type MessageSpanType = GQLRoots.MessageSpanTypeRoot;
    export interface MessageSpanInput {
        offset: number;
        length: number;
        type: MessageSpanType;
        url: Nullable<string>;
    }
    export type Room = PrivateRoom | SharedRoom;
    export interface PrivateRoom {
        id: string;
        user: User;
        settings: RoomUserNotificaionSettings;
        pinnedMessage: Nullable<ModernMessage>;
        myBadge: Nullable<UserBadge>;
    }
    export interface PrivateRoomIdArgs { }
    export interface PrivateRoomUserArgs { }
    export interface PrivateRoomSettingsArgs { }
    export interface PrivateRoomPinnedMessageArgs { }
    export interface PrivateRoomMyBadgeArgs { }
    export type SharedRoomKindValues = 'INTERNAL' | 'PUBLIC' | 'GROUP';
    export type SharedRoomKind = GQLRoots.SharedRoomKindRoot;
    export type SharedRoomMembershipStatusValues = 'MEMBER' | 'REQUESTED' | 'LEFT' | 'KICKED' | 'NONE';
    export type SharedRoomMembershipStatus = GQLRoots.SharedRoomMembershipStatusRoot;
    export type RoomMemberRoleValues = 'OWNER' | 'ADMIN' | 'MEMBER';
    export type RoomMemberRole = GQLRoots.RoomMemberRoleRoot;
    export interface WelcomeMessage {
        isOn: boolean;
        sender: Nullable<User>;
        message: Nullable<string>;
    }
    export interface WelcomeMessageIsOnArgs { }
    export interface WelcomeMessageSenderArgs { }
    export interface WelcomeMessageMessageArgs { }
    export type RoomCallsModeValues = 'STANDARD' | 'LINK' | 'DISABLED';
    export type RoomCallsMode = GQLRoots.RoomCallsModeRoot;
    export interface RoomCallSettings {
        mode: RoomCallsMode;
        callLink: Nullable<string>;
    }
    export interface RoomCallSettingsModeArgs { }
    export interface RoomCallSettingsCallLinkArgs { }
    export interface RoomServiceMessageSettings {
        joinsMessageEnabled: boolean;
        leavesMessageEnabled: boolean;
    }
    export interface RoomServiceMessageSettingsJoinsMessageEnabledArgs { }
    export interface RoomServiceMessageSettingsLeavesMessageEnabledArgs { }
    export interface SharedRoom {
        id: string;
        kind: SharedRoomKind;
        isChannel: boolean;
        title: string;
        photo: string;
        socialImage: Nullable<string>;
        description: Nullable<string>;
        pinnedMessage: Nullable<ModernMessage>;
        canUnpinMessage: boolean;
        welcomeMessage: Nullable<WelcomeMessage>;
        organization: Nullable<Organization>;
        membersCount: number;
        onlineMembersCount: number;
        featuredMembersCount: number;
        previewMembers: User[];
        members: RoomMember[];
        requests: Nullable<RoomMember[]>;
        membership: SharedRoomMembershipStatus;
        role: RoomMemberRole;
        settings: RoomUserNotificaionSettings;
        canEdit: boolean;
        canSendMessage: boolean;
        archived: boolean;
        myBadge: Nullable<UserBadge>;
        matchmaking: Nullable<MatchmakingRoom>;
        isPremium: boolean;
        premiumPassIsActive: boolean;
        premiumSubscription: Nullable<WalletSubscription>;
        premiumSettings: Nullable<PremiumChatSettings>;
        repliesEnabled: boolean;
        serviceMessageSettings: RoomServiceMessageSettings;
        callSettings: RoomCallSettings;
        featured: boolean;
        owner: Nullable<User>;
        externalSocialImage: Nullable<string>;
        linkedFeedChannels: FeedChannel[];
        shortname: Nullable<string>;
    }
    export interface SharedRoomIdArgs { }
    export interface SharedRoomKindArgs { }
    export interface SharedRoomIsChannelArgs { }
    export interface SharedRoomTitleArgs { }
    export interface SharedRoomPhotoArgs { }
    export interface SharedRoomSocialImageArgs { }
    export interface SharedRoomDescriptionArgs { }
    export interface SharedRoomPinnedMessageArgs { }
    export interface SharedRoomCanUnpinMessageArgs { }
    export interface SharedRoomWelcomeMessageArgs { }
    export interface SharedRoomOrganizationArgs { }
    export interface SharedRoomMembersCountArgs { }
    export interface SharedRoomOnlineMembersCountArgs { }
    export interface SharedRoomFeaturedMembersCountArgs { }
    export interface SharedRoomPreviewMembersArgs { }
    export interface SharedRoomMembersArgs {
        first: OptionalNullable<number>;
        after: OptionalNullable<string>;
    }
    export interface SharedRoomRequestsArgs { }
    export interface SharedRoomMembershipArgs { }
    export interface SharedRoomRoleArgs { }
    export interface SharedRoomSettingsArgs { }
    export interface SharedRoomCanEditArgs { }
    export interface SharedRoomCanSendMessageArgs { }
    export interface SharedRoomArchivedArgs { }
    export interface SharedRoomMyBadgeArgs { }
    export interface SharedRoomMatchmakingArgs { }
    export interface SharedRoomIsPremiumArgs { }
    export interface SharedRoomPremiumPassIsActiveArgs { }
    export interface SharedRoomPremiumSubscriptionArgs { }
    export interface SharedRoomPremiumSettingsArgs { }
    export interface SharedRoomRepliesEnabledArgs { }
    export interface SharedRoomServiceMessageSettingsArgs { }
    export interface SharedRoomCallSettingsArgs { }
    export interface SharedRoomFeaturedArgs { }
    export interface SharedRoomOwnerArgs { }
    export interface SharedRoomExternalSocialImageArgs { }
    export interface SharedRoomLinkedFeedChannelsArgs { }
    export interface SharedRoomShortnameArgs { }
    export interface PremiumChatSettings {
        id: string;
        price: number;
        interval: Nullable<WalletSubscriptionInterval>;
    }
    export interface PremiumChatSettingsIdArgs { }
    export interface PremiumChatSettingsPriceArgs { }
    export interface PremiumChatSettingsIntervalArgs { }
    export interface RoomSuper {
        id: string;
        featured: boolean;
        listed: boolean;
        autosubscribeRooms: Room[];
    }
    export interface RoomSuperIdArgs { }
    export interface RoomSuperFeaturedArgs { }
    export interface RoomSuperListedArgs { }
    export interface RoomSuperAutosubscribeRoomsArgs { }
    export interface RoomCallSettingsInput {
        mode: RoomCallsMode;
        callLink: Nullable<string>;
    }
    export interface RoomServiceMessageSettingsInput {
        joinsMessageEnabled: boolean;
        leavesMessageEnabled: boolean;
    }
    export interface RoomUpdateInput {
        title: Nullable<string>;
        photoRef: Nullable<ImageRefInput>;
        description: Nullable<string>;
        socialImageRef: Nullable<ImageRefInput>;
        kind: Nullable<SharedRoomKind>;
        repliesEnabled: Nullable<boolean>;
        serviceMessageSettings: Nullable<RoomServiceMessageSettingsInput>;
        callSettings: Nullable<RoomCallSettingsInput>;
    }
    export interface UserMention {
        user: User;
    }
    export interface UserMentionUserArgs { }
    export interface SharedRoomMention {
        sharedRoom: SharedRoom;
    }
    export interface SharedRoomMentionSharedRoomArgs { }
    export type Mention = UserMention | SharedRoomMention;
    export interface RoomMessage {
        id: string;
        message: Nullable<string>;
        file: Nullable<string>;
        fileMetadata: Nullable<FileMetadata>;
        filePreview: Nullable<string>;
        sender: User;
        date: Date;
        repeatKey: Nullable<string>;
        isService: boolean;
        serviceMetadata: Nullable<ServiceMetadata>;
        urlAugmentation: Nullable<UrlAugmentation>;
        edited: boolean;
        reactions: MessageReaction[];
        replyMessages: Nullable<RoomMessage[]>;
        plainText: Nullable<string>;
        mentions: Nullable<User[]>;
        alphaAttachments: MessageAttachment[];
        alphaButtons: Nullable<MessageButton[]>[];
        alphaType: MessageType;
        alphaTitle: Nullable<string>;
        alphaPostType: Nullable<PostMessageType>;
        alphaMentions: Nullable<Mention[]>;
    }
    export interface RoomMessageIdArgs { }
    export interface RoomMessageMessageArgs { }
    export interface RoomMessageFileArgs { }
    export interface RoomMessageFileMetadataArgs { }
    export interface RoomMessageFilePreviewArgs { }
    export interface RoomMessageSenderArgs { }
    export interface RoomMessageDateArgs { }
    export interface RoomMessageRepeatKeyArgs { }
    export interface RoomMessageIsServiceArgs { }
    export interface RoomMessageServiceMetadataArgs { }
    export interface RoomMessageUrlAugmentationArgs { }
    export interface RoomMessageEditedArgs { }
    export interface RoomMessageReactionsArgs { }
    export interface RoomMessageReplyMessagesArgs { }
    export interface RoomMessagePlainTextArgs { }
    export interface RoomMessageMentionsArgs { }
    export interface RoomMessageAlphaAttachmentsArgs { }
    export interface RoomMessageAlphaButtonsArgs { }
    export interface RoomMessageAlphaTypeArgs { }
    export interface RoomMessageAlphaTitleArgs { }
    export interface RoomMessageAlphaPostTypeArgs { }
    export interface RoomMessageAlphaMentionsArgs { }
    export interface RoomMember {
        user: User;
        role: RoomMemberRole;
        badge: Nullable<UserBadge>;
        membership: SharedRoomMembershipStatus;
        invitedBy: User;
        canKick: boolean;
    }
    export interface RoomMemberUserArgs { }
    export interface RoomMemberRoleArgs { }
    export interface RoomMemberBadgeArgs { }
    export interface RoomMemberMembershipArgs { }
    export interface RoomMemberInvitedByArgs { }
    export interface RoomMemberCanKickArgs { }
    export interface RoomMemberEdge {
        node: RoomMember;
        cursor: string;
    }
    export interface RoomMemberEdgeNodeArgs { }
    export interface RoomMemberEdgeCursorArgs { }
    export interface RoomMemberConnection {
        edges: RoomMemberEdge[];
        pageInfo: PageInfo;
    }
    export interface RoomMemberConnectionEdgesArgs { }
    export interface RoomMemberConnectionPageInfoArgs { }
    export interface RoomUserNotificaionSettings {
        id: string;
        mute: Nullable<boolean>;
    }
    export interface RoomUserNotificaionSettingsIdArgs { }
    export interface RoomUserNotificaionSettingsMuteArgs { }
    export interface RoomUserNotificaionSettingsInput {
        mute: Nullable<boolean>;
    }
    export interface RoomInviteInput {
        userId: string;
        role: RoomMemberRole;
    }
    export interface RoomInviteEmailRequest {
        email: string;
        emailText: Nullable<string>;
        firstName: Nullable<string>;
        lastName: Nullable<string>;
    }
    export interface RoomConnectionEdge {
        node: SharedRoom;
        cursor: string;
    }
    export interface RoomConnectionEdgeNodeArgs { }
    export interface RoomConnectionEdgeCursorArgs { }
    export interface RoomConnection {
        edges: RoomConnectionEdge[];
        pageInfo: PageInfo;
    }
    export interface RoomConnectionEdgesArgs { }
    export interface RoomConnectionPageInfoArgs { }
    export interface SharedRoomConnection {
        items: SharedRoom[];
        cursor: Nullable<string>;
    }
    export interface SharedRoomConnectionItemsArgs { }
    export interface SharedRoomConnectionCursorArgs { }
    export interface RoomInvite {
        id: string;
        room: SharedRoom;
        invitedByUser: User;
    }
    export interface RoomInviteIdArgs { }
    export interface RoomInviteRoomArgs { }
    export interface RoomInviteInvitedByUserArgs { }
    export type ShortNameDestination = User | Organization | FeedChannel | SharedRoom | DiscoverChatsCollection | Channel;
    export type UpdateEvent = UpdateChatRead | UpdateProfileChanged | UpdateMyProfileChanged | UpdateChatMessage | UpdateChatMessageDeleted | UpdateChatDraftChanged;
    export interface UpdateChatRead {
        cid: string;
        seq: number;
    }
    export interface UpdateChatReadCidArgs { }
    export interface UpdateChatReadSeqArgs { }
    export interface UpdateProfileChanged {
        user: User;
    }
    export interface UpdateProfileChangedUserArgs { }
    export interface UpdateMyProfileChanged {
        user: User;
        profile: Profile;
    }
    export interface UpdateMyProfileChangedUserArgs { }
    export interface UpdateMyProfileChangedProfileArgs { }
    export interface UpdateChatMessage {
        cid: string;
        message: ModernMessage;
    }
    export interface UpdateChatMessageCidArgs { }
    export interface UpdateChatMessageMessageArgs { }
    export interface UpdateChatMessageDeleted {
        cid: string;
        mid: string;
        seq: number;
    }
    export interface UpdateChatMessageDeletedCidArgs { }
    export interface UpdateChatMessageDeletedMidArgs { }
    export interface UpdateChatMessageDeletedSeqArgs { }
    export interface UpdateChatDraftChanged {
        cid: string;
        draft: Nullable<string>;
        version: number;
        date: Date;
    }
    export interface UpdateChatDraftChangedCidArgs { }
    export interface UpdateChatDraftChangedDraftArgs { }
    export interface UpdateChatDraftChangedVersionArgs { }
    export interface UpdateChatDraftChangedDateArgs { }
}

export interface GQLResolver {
    ConversationSettings?: ComplexTypedResolver<
        GQL.ConversationSettings,
        GQLRoots.ConversationSettingsRoot,
        {
        },
        {
            id: GQL.ConversationSettingsIdArgs,
            mobileNotifications: GQL.ConversationSettingsMobileNotificationsArgs,
            mute: GQL.ConversationSettingsMuteArgs,
        }
    >;
    Conversation?: InterfaceTypeResolver<GQLRoots.ConversationRoot, 'ChannelConversation' | 'AnonymousConversation' | 'SharedConversation' | 'PrivateConversation' | 'GroupConversation'>;
    ChannelConversation?: ComplexTypedResolver<
        GQL.ChannelConversation,
        GQLRoots.ChannelConversationRoot,
        {
            members: GQLRoots.UserRoot[],
            topMessage: Nullable<GQLRoots.ConversationMessageRoot>,
            settings: GQLRoots.ConversationSettingsRoot,
        },
        {
            id: GQL.ChannelConversationIdArgs,
            flexibleId: GQL.ChannelConversationFlexibleIdArgs,
            title: GQL.ChannelConversationTitleArgs,
            photos: GQL.ChannelConversationPhotosArgs,
            members: GQL.ChannelConversationMembersArgs,
            unreadCount: GQL.ChannelConversationUnreadCountArgs,
            topMessage: GQL.ChannelConversationTopMessageArgs,
            settings: GQL.ChannelConversationSettingsArgs,
        }
    >;
    AnonymousConversation?: ComplexTypedResolver<
        GQL.AnonymousConversation,
        GQLRoots.AnonymousConversationRoot,
        {
            topMessage: Nullable<GQLRoots.ConversationMessageRoot>,
            settings: GQLRoots.ConversationSettingsRoot,
        },
        {
            id: GQL.AnonymousConversationIdArgs,
            flexibleId: GQL.AnonymousConversationFlexibleIdArgs,
            title: GQL.AnonymousConversationTitleArgs,
            photos: GQL.AnonymousConversationPhotosArgs,
            unreadCount: GQL.AnonymousConversationUnreadCountArgs,
            topMessage: GQL.AnonymousConversationTopMessageArgs,
            settings: GQL.AnonymousConversationSettingsArgs,
        }
    >;
    SharedConversation?: ComplexTypedResolver<
        GQL.SharedConversation,
        GQLRoots.SharedConversationRoot,
        {
            organizations: GQLRoots.OrganizationRoot[],
            topMessage: Nullable<GQLRoots.ConversationMessageRoot>,
            organization: Nullable<GQLRoots.OrganizationRoot>,
            settings: GQLRoots.ConversationSettingsRoot,
        },
        {
            id: GQL.SharedConversationIdArgs,
            flexibleId: GQL.SharedConversationFlexibleIdArgs,
            title: GQL.SharedConversationTitleArgs,
            photos: GQL.SharedConversationPhotosArgs,
            organizations: GQL.SharedConversationOrganizationsArgs,
            unreadCount: GQL.SharedConversationUnreadCountArgs,
            topMessage: GQL.SharedConversationTopMessageArgs,
            organization: GQL.SharedConversationOrganizationArgs,
            settings: GQL.SharedConversationSettingsArgs,
        }
    >;
    PrivateConversation?: ComplexTypedResolver<
        GQL.PrivateConversation,
        GQLRoots.PrivateConversationRoot,
        {
            user: GQLRoots.UserRoot,
            topMessage: Nullable<GQLRoots.ConversationMessageRoot>,
            settings: GQLRoots.ConversationSettingsRoot,
        },
        {
            id: GQL.PrivateConversationIdArgs,
            flexibleId: GQL.PrivateConversationFlexibleIdArgs,
            title: GQL.PrivateConversationTitleArgs,
            photos: GQL.PrivateConversationPhotosArgs,
            user: GQL.PrivateConversationUserArgs,
            unreadCount: GQL.PrivateConversationUnreadCountArgs,
            topMessage: GQL.PrivateConversationTopMessageArgs,
            blocked: GQL.PrivateConversationBlockedArgs,
            settings: GQL.PrivateConversationSettingsArgs,
        }
    >;
    GroupConversation?: ComplexTypedResolver<
        GQL.GroupConversation,
        GQLRoots.GroupConversationRoot,
        {
            members: GQLRoots.UserRoot[],
            topMessage: Nullable<GQLRoots.ConversationMessageRoot>,
            settings: GQLRoots.ConversationSettingsRoot,
            photoRef: Nullable<GQLRoots.ImageRefRoot>,
            pinnedMessage: Nullable<GQLRoots.ConversationMessageRoot>,
        },
        {
            id: GQL.GroupConversationIdArgs,
            flexibleId: GQL.GroupConversationFlexibleIdArgs,
            title: GQL.GroupConversationTitleArgs,
            photos: GQL.GroupConversationPhotosArgs,
            members: GQL.GroupConversationMembersArgs,
            unreadCount: GQL.GroupConversationUnreadCountArgs,
            topMessage: GQL.GroupConversationTopMessageArgs,
            membersCount: GQL.GroupConversationMembersCountArgs,
            settings: GQL.GroupConversationSettingsArgs,
            photo: GQL.GroupConversationPhotoArgs,
            photoRef: GQL.GroupConversationPhotoRefArgs,
            description: GQL.GroupConversationDescriptionArgs,
            longDescription: GQL.GroupConversationLongDescriptionArgs,
            pinnedMessage: GQL.GroupConversationPinnedMessageArgs,
            membersOnline: GQL.GroupConversationMembersOnlineArgs,
            myRole: GQL.GroupConversationMyRoleArgs,
        }
    >;
    InviteServiceMetadata?: ComplexTypedResolver<
        GQL.InviteServiceMetadata,
        GQLRoots.InviteServiceMetadataRoot,
        {
            users: Nullable<GQLRoots.UserRoot[]>,
            invitedBy: GQLRoots.UserRoot,
        },
        {
            users: GQL.InviteServiceMetadataUsersArgs,
            invitedBy: GQL.InviteServiceMetadataInvitedByArgs,
        }
    >;
    KickServiceMetadata?: ComplexTypedResolver<
        GQL.KickServiceMetadata,
        GQLRoots.KickServiceMetadataRoot,
        {
            user: GQLRoots.UserRoot,
            kickedBy: GQLRoots.UserRoot,
        },
        {
            user: GQL.KickServiceMetadataUserArgs,
            kickedBy: GQL.KickServiceMetadataKickedByArgs,
        }
    >;
    TitleChangeServiceMetadata?: ComplexTypedResolver<
        GQL.TitleChangeServiceMetadata,
        GQLRoots.TitleChangeServiceMetadataRoot,
        {
        },
        {
            title: GQL.TitleChangeServiceMetadataTitleArgs,
        }
    >;
    PhotoChangeServiceMetadata?: ComplexTypedResolver<
        GQL.PhotoChangeServiceMetadata,
        GQLRoots.PhotoChangeServiceMetadataRoot,
        {
            photoRef: Nullable<GQLRoots.ImageRefRoot>,
        },
        {
            photo: GQL.PhotoChangeServiceMetadataPhotoArgs,
            photoRef: GQL.PhotoChangeServiceMetadataPhotoRefArgs,
        }
    >;
    PostRespondServiceMetadata?: ComplexTypedResolver<
        GQL.PostRespondServiceMetadata,
        GQLRoots.PostRespondServiceMetadataRoot,
        {
            post: GQLRoots.RoomMessageRoot,
            postRoom: GQLRoots.RoomRoot,
            responder: GQLRoots.UserRoot,
        },
        {
            post: GQL.PostRespondServiceMetadataPostArgs,
            postRoom: GQL.PostRespondServiceMetadataPostRoomArgs,
            responder: GQL.PostRespondServiceMetadataResponderArgs,
            respondType: GQL.PostRespondServiceMetadataRespondTypeArgs,
        }
    >;
    UrlAugmentationExtra?: UnionTypeResolver<GQLRoots.UrlAugmentationExtraRoot, 'User' | 'Organization' | 'ChannelConversation'>;
    UrlAugmentation?: ComplexTypedResolver<
        GQL.UrlAugmentation,
        GQLRoots.UrlAugmentationRoot,
        {
            photo: Nullable<GQLRoots.ImageRefRoot>,
            imageInfo: Nullable<GQLRoots.FileMetadataRoot>,
            iconRef: Nullable<GQLRoots.ImageRefRoot>,
            iconInfo: Nullable<GQLRoots.FileMetadataRoot>,
            extra: Nullable<GQLRoots.UrlAugmentationExtraRoot>,
        },
        {
            url: GQL.UrlAugmentationUrlArgs,
            title: GQL.UrlAugmentationTitleArgs,
            date: GQL.UrlAugmentationDateArgs,
            subtitle: GQL.UrlAugmentationSubtitleArgs,
            description: GQL.UrlAugmentationDescriptionArgs,
            photo: GQL.UrlAugmentationPhotoArgs,
            imageInfo: GQL.UrlAugmentationImageInfoArgs,
            imageURL: GQL.UrlAugmentationImageURLArgs,
            iconRef: GQL.UrlAugmentationIconRefArgs,
            iconInfo: GQL.UrlAugmentationIconInfoArgs,
            hostname: GQL.UrlAugmentationHostnameArgs,
            type: GQL.UrlAugmentationTypeArgs,
            extra: GQL.UrlAugmentationExtraArgs,
        }
    >;
    ServiceMetadata?: UnionTypeResolver<GQLRoots.ServiceMetadataRoot, 'InviteServiceMetadata' | 'KickServiceMetadata' | 'TitleChangeServiceMetadata' | 'PhotoChangeServiceMetadata' | 'PostRespondServiceMetadata'>;
    ConversationMessage?: ComplexTypedResolver<
        GQL.ConversationMessage,
        GQLRoots.ConversationMessageRoot,
        {
            fileMetadata: Nullable<GQLRoots.FileMetadataRoot>,
            sender: GQLRoots.UserRoot,
            serviceMetadata: Nullable<GQLRoots.ServiceMetadataRoot>,
            urlAugmentation: Nullable<GQLRoots.UrlAugmentationRoot>,
            reactions: GQLRoots.MessageReactionRoot[],
            replyMessages: Nullable<GQLRoots.ConversationMessageRoot[]>,
            mentions: Nullable<GQLRoots.UserRoot[]>,
            alphaAttachments: GQLRoots.MessageAttachmentRoot[],
            alphaButtons: Nullable<GQLRoots.MessageButtonRoot[]>[],
            alphaMentions: Nullable<GQLRoots.MentionRoot[]>,
        },
        {
            id: GQL.ConversationMessageIdArgs,
            message: GQL.ConversationMessageMessageArgs,
            file: GQL.ConversationMessageFileArgs,
            fileMetadata: GQL.ConversationMessageFileMetadataArgs,
            filePreview: GQL.ConversationMessageFilePreviewArgs,
            sender: GQL.ConversationMessageSenderArgs,
            date: GQL.ConversationMessageDateArgs,
            repeatKey: GQL.ConversationMessageRepeatKeyArgs,
            isService: GQL.ConversationMessageIsServiceArgs,
            serviceMetadata: GQL.ConversationMessageServiceMetadataArgs,
            urlAugmentation: GQL.ConversationMessageUrlAugmentationArgs,
            edited: GQL.ConversationMessageEditedArgs,
            reactions: GQL.ConversationMessageReactionsArgs,
            replyMessages: GQL.ConversationMessageReplyMessagesArgs,
            plainText: GQL.ConversationMessagePlainTextArgs,
            mentions: GQL.ConversationMessageMentionsArgs,
            alphaAttachments: GQL.ConversationMessageAlphaAttachmentsArgs,
            alphaButtons: GQL.ConversationMessageAlphaButtonsArgs,
            alphaType: GQL.ConversationMessageAlphaTypeArgs,
            alphaTitle: GQL.ConversationMessageAlphaTitleArgs,
            postType: GQL.ConversationMessagePostTypeArgs,
            alphaMentions: GQL.ConversationMessageAlphaMentionsArgs,
        }
    >;
    FileMetadata?: ComplexTypedResolver<
        GQL.FileMetadata,
        GQLRoots.FileMetadataRoot,
        {
        },
        {
            name: GQL.FileMetadataNameArgs,
            mimeType: GQL.FileMetadataMimeTypeArgs,
            size: GQL.FileMetadataSizeArgs,
            isImage: GQL.FileMetadataIsImageArgs,
            imageWidth: GQL.FileMetadataImageWidthArgs,
            imageHeight: GQL.FileMetadataImageHeightArgs,
            imageFormat: GQL.FileMetadataImageFormatArgs,
        }
    >;
    ConversationEventSimpleBatch?: ComplexTypedResolver<
        GQL.ConversationEventSimpleBatch,
        GQLRoots.ConversationEventSimpleBatchRoot,
        {
            events: GQLRoots.ConversationEventRoot[],
        },
        {
            events: GQL.ConversationEventSimpleBatchEventsArgs,
        }
    >;
    ConversationEvent?: InterfaceTypeResolver<GQLRoots.ConversationEventRoot, 'ConversationEventMessage' | 'ConversationEventEditMessage' | 'ConversationEventDelete' | 'ConversationEventNewMembers' | 'ConversationEventKick' | 'ConversationEventTitle' | 'ConversationEventUpdate' | 'ConversationEventUpdateRole'>;
    ConversationEventMessage?: ComplexTypedResolver<
        GQL.ConversationEventMessage,
        GQLRoots.ConversationEventMessageRoot,
        {
            message: GQLRoots.ConversationMessageRoot,
        },
        {
            seq: GQL.ConversationEventMessageSeqArgs,
            message: GQL.ConversationEventMessageMessageArgs,
        }
    >;
    ConversationEventEditMessage?: ComplexTypedResolver<
        GQL.ConversationEventEditMessage,
        GQLRoots.ConversationEventEditMessageRoot,
        {
            message: GQLRoots.ConversationMessageRoot,
        },
        {
            seq: GQL.ConversationEventEditMessageSeqArgs,
            message: GQL.ConversationEventEditMessageMessageArgs,
        }
    >;
    ConversationEventDelete?: ComplexTypedResolver<
        GQL.ConversationEventDelete,
        GQLRoots.ConversationEventDeleteRoot,
        {
        },
        {
            seq: GQL.ConversationEventDeleteSeqArgs,
            messageId: GQL.ConversationEventDeleteMessageIdArgs,
        }
    >;
    ConversationEventNewMembers?: ComplexTypedResolver<
        GQL.ConversationEventNewMembers,
        GQLRoots.ConversationEventNewMembersRoot,
        {
            users: Nullable<GQLRoots.UserRoot[]>,
            invitedBy: GQLRoots.UserRoot,
        },
        {
            seq: GQL.ConversationEventNewMembersSeqArgs,
            users: GQL.ConversationEventNewMembersUsersArgs,
            invitedBy: GQL.ConversationEventNewMembersInvitedByArgs,
        }
    >;
    ConversationEventKick?: ComplexTypedResolver<
        GQL.ConversationEventKick,
        GQLRoots.ConversationEventKickRoot,
        {
            user: GQLRoots.UserRoot,
            kickedBy: GQLRoots.UserRoot,
        },
        {
            seq: GQL.ConversationEventKickSeqArgs,
            user: GQL.ConversationEventKickUserArgs,
            kickedBy: GQL.ConversationEventKickKickedByArgs,
        }
    >;
    ConversationEventTitle?: ComplexTypedResolver<
        GQL.ConversationEventTitle,
        GQLRoots.ConversationEventTitleRoot,
        {
        },
        {
            seq: GQL.ConversationEventTitleSeqArgs,
            title: GQL.ConversationEventTitleTitleArgs,
        }
    >;
    ConversationEventUpdate?: ComplexTypedResolver<
        GQL.ConversationEventUpdate,
        GQLRoots.ConversationEventUpdateRoot,
        {
            chat: GQLRoots.ConversationRoot,
        },
        {
            seq: GQL.ConversationEventUpdateSeqArgs,
            chat: GQL.ConversationEventUpdateChatArgs,
        }
    >;
    ConversationEventUpdateRole?: ComplexTypedResolver<
        GQL.ConversationEventUpdateRole,
        GQLRoots.ConversationEventUpdateRoleRoot,
        {
            user: GQLRoots.UserRoot,
        },
        {
            seq: GQL.ConversationEventUpdateRoleSeqArgs,
            user: GQL.ConversationEventUpdateRoleUserArgs,
            newRole: GQL.ConversationEventUpdateRoleNewRoleArgs,
        }
    >;
    ConversationState?: ComplexTypedResolver<
        GQL.ConversationState,
        GQLRoots.ConversationStateRoot,
        {
            messages: GQLRoots.ConversationMessageRoot[],
        },
        {
            seq: GQL.ConversationStateSeqArgs,
            messages: GQL.ConversationStateMessagesArgs,
        }
    >;
    ConversationConnection?: ComplexTypedResolver<
        GQL.ConversationConnection,
        GQLRoots.ConversationConnectionRoot,
        {
            conversations: GQLRoots.ConversationRoot[],
            counter: GQLRoots.NotificationCounterRoot,
        },
        {
            conversations: GQL.ConversationConnectionConversationsArgs,
            counter: GQL.ConversationConnectionCounterArgs,
            seq: GQL.ConversationConnectionSeqArgs,
            next: GQL.ConversationConnectionNextArgs,
        }
    >;
    NotificationCounter?: ComplexTypedResolver<
        GQL.NotificationCounter,
        GQLRoots.NotificationCounterRoot,
        {
        },
        {
            id: GQL.NotificationCounterIdArgs,
            unreadCount: GQL.NotificationCounterUnreadCountArgs,
        }
    >;
    ChatReadResult?: ComplexTypedResolver<
        GQL.ChatReadResult,
        GQLRoots.ChatReadResultRoot,
        {
            conversation: GQLRoots.ConversationRoot,
            counter: GQLRoots.NotificationCounterRoot,
        },
        {
            conversation: GQL.ChatReadResultConversationArgs,
            counter: GQL.ChatReadResultCounterArgs,
        }
    >;
    ComposeSearchResult?: UnionTypeResolver<GQLRoots.ComposeSearchResultRoot, 'User' | 'Organization'>;
    GroupConversationMember?: ComplexTypedResolver<
        GQL.GroupConversationMember,
        GQLRoots.GroupConversationMemberRoot,
        {
            user: GQLRoots.UserRoot,
        },
        {
            user: GQL.GroupConversationMemberUserArgs,
            role: GQL.GroupConversationMemberRoleArgs,
        }
    >;
    GroupChatUpdateResponse?: ComplexTypedResolver<
        GQL.GroupChatUpdateResponse,
        GQLRoots.GroupChatUpdateResponseRoot,
        {
            chat: GQLRoots.ConversationRoot,
            chatEventMessage: Nullable<GQLRoots.ConversationEventMessageRoot>,
            chatEvent: Nullable<GQLRoots.ConversationEventRoot>,
        },
        {
            chat: GQL.GroupChatUpdateResponseChatArgs,
            chatEventMessage: GQL.GroupChatUpdateResponseChatEventMessageArgs,
            chatEvent: GQL.GroupChatUpdateResponseChatEventArgs,
        }
    >;
    ConversationUpdateResponse?: ComplexTypedResolver<
        GQL.ConversationUpdateResponse,
        GQLRoots.ConversationUpdateResponseRoot,
        {
            chat: GQLRoots.ConversationRoot,
        },
        {
            chat: GQL.ConversationUpdateResponseChatArgs,
            curSeq: GQL.ConversationUpdateResponseCurSeqArgs,
        }
    >;
    ConversationBlockedUser?: ComplexTypedResolver<
        GQL.ConversationBlockedUser,
        GQLRoots.ConversationBlockedUserRoot,
        {
            user: GQLRoots.UserRoot,
            blockedBy: GQLRoots.UserRoot,
        },
        {
            user: GQL.ConversationBlockedUserUserArgs,
            blockedBy: GQL.ConversationBlockedUserBlockedByArgs,
        }
    >;
    CreditCard?: ComplexTypedResolver<
        GQL.CreditCard,
        GQLRoots.CreditCardRoot,
        {
        },
        {
            id: GQL.CreditCardIdArgs,
            pmid: GQL.CreditCardPmidArgs,
            brand: GQL.CreditCardBrandArgs,
            last4: GQL.CreditCardLast4Args,
            expMonth: GQL.CreditCardExpMonthArgs,
            expYear: GQL.CreditCardExpYearArgs,
            deleted: GQL.CreditCardDeletedArgs,
            isDefault: GQL.CreditCardIsDefaultArgs,
        }
    >;
    CardSetupIntent?: ComplexTypedResolver<
        GQL.CardSetupIntent,
        GQLRoots.CardSetupIntentRoot,
        {
        },
        {
            id: GQL.CardSetupIntentIdArgs,
            clientSecret: GQL.CardSetupIntentClientSecretArgs,
        }
    >;
    PaymentIntent?: ComplexTypedResolver<
        GQL.PaymentIntent,
        GQLRoots.PaymentIntentRoot,
        {
            card: Nullable<GQLRoots.CreditCardRoot>,
        },
        {
            id: GQL.PaymentIntentIdArgs,
            clientSecret: GQL.PaymentIntentClientSecretArgs,
            card: GQL.PaymentIntentCardArgs,
        }
    >;
    PaymentStatus?: EnumTypeResolver<'PENDING' | 'CANCELED' | 'FAILING' | 'ACTION_REQUIRED' | 'SUCCESS', GQLRoots.PaymentStatusRoot>;
    Payment?: ComplexTypedResolver<
        GQL.Payment,
        GQLRoots.PaymentRoot,
        {
            intent: Nullable<GQLRoots.PaymentIntentRoot>,
            card: Nullable<GQLRoots.CreditCardRoot>,
        },
        {
            id: GQL.PaymentIdArgs,
            status: GQL.PaymentStatusArgs,
            intent: GQL.PaymentIntentArgs,
            card: GQL.PaymentCardArgs,
        }
    >;
    WalletAccount?: ComplexTypedResolver<
        GQL.WalletAccount,
        GQLRoots.WalletAccountRoot,
        {
        },
        {
            id: GQL.WalletAccountIdArgs,
            balance: GQL.WalletAccountBalanceArgs,
            state: GQL.WalletAccountStateArgs,
            isLocked: GQL.WalletAccountIsLockedArgs,
            failingPaymentsCount: GQL.WalletAccountFailingPaymentsCountArgs,
        }
    >;
    WalletTransaction?: ComplexTypedResolver<
        GQL.WalletTransaction,
        GQLRoots.WalletTransactionRoot,
        {
            operation: GQLRoots.WalletTransactionOperationRoot,
        },
        {
            id: GQL.WalletTransactionIdArgs,
            date: GQL.WalletTransactionDateArgs,
            status: GQL.WalletTransactionStatusArgs,
            operation: GQL.WalletTransactionOperationArgs,
        }
    >;
    WalletTransactionStatus?: EnumTypeResolver<'PENDING' | 'CANCELING' | 'CANCELED' | 'SUCCESS', GQLRoots.WalletTransactionStatusRoot>;
    WalletTransactionDeposit?: ComplexTypedResolver<
        GQL.WalletTransactionDeposit,
        GQLRoots.WalletTransactionDepositRoot,
        {
            payment: Nullable<GQLRoots.PaymentRoot>,
        },
        {
            amount: GQL.WalletTransactionDepositAmountArgs,
            payment: GQL.WalletTransactionDepositPaymentArgs,
        }
    >;
    WalletIncomeSource?: UnionTypeResolver<GQLRoots.WalletIncomeSourceRoot, 'WalletSubscription' | 'Purchase'>;
    WalletTransactionIncome?: ComplexTypedResolver<
        GQL.WalletTransactionIncome,
        GQLRoots.WalletTransactionIncomeRoot,
        {
            payment: Nullable<GQLRoots.PaymentRoot>,
            source: Nullable<GQLRoots.WalletIncomeSourceRoot>,
        },
        {
            amount: GQL.WalletTransactionIncomeAmountArgs,
            payment: GQL.WalletTransactionIncomePaymentArgs,
            source: GQL.WalletTransactionIncomeSourceArgs,
        }
    >;
    WalletTransactionSubscription?: ComplexTypedResolver<
        GQL.WalletTransactionSubscription,
        GQLRoots.WalletTransactionSubscriptionRoot,
        {
            payment: Nullable<GQLRoots.PaymentRoot>,
            subscription: GQLRoots.WalletSubscriptionRoot,
        },
        {
            amount: GQL.WalletTransactionSubscriptionAmountArgs,
            walletAmount: GQL.WalletTransactionSubscriptionWalletAmountArgs,
            chargeAmount: GQL.WalletTransactionSubscriptionChargeAmountArgs,
            payment: GQL.WalletTransactionSubscriptionPaymentArgs,
            subscription: GQL.WalletTransactionSubscriptionSubscriptionArgs,
        }
    >;
    WalletTransactionPurchase?: ComplexTypedResolver<
        GQL.WalletTransactionPurchase,
        GQLRoots.WalletTransactionPurchaseRoot,
        {
            payment: Nullable<GQLRoots.PaymentRoot>,
            purchase: GQLRoots.PurchaseRoot,
        },
        {
            amount: GQL.WalletTransactionPurchaseAmountArgs,
            walletAmount: GQL.WalletTransactionPurchaseWalletAmountArgs,
            chargeAmount: GQL.WalletTransactionPurchaseChargeAmountArgs,
            payment: GQL.WalletTransactionPurchasePaymentArgs,
            purchase: GQL.WalletTransactionPurchasePurchaseArgs,
        }
    >;
    WalletTransactionTransferOut?: ComplexTypedResolver<
        GQL.WalletTransactionTransferOut,
        GQLRoots.WalletTransactionTransferOutRoot,
        {
            payment: Nullable<GQLRoots.PaymentRoot>,
            toUser: GQLRoots.UserRoot,
        },
        {
            amount: GQL.WalletTransactionTransferOutAmountArgs,
            walletAmount: GQL.WalletTransactionTransferOutWalletAmountArgs,
            chargeAmount: GQL.WalletTransactionTransferOutChargeAmountArgs,
            payment: GQL.WalletTransactionTransferOutPaymentArgs,
            toUser: GQL.WalletTransactionTransferOutToUserArgs,
        }
    >;
    WalletTransactionTransferIn?: ComplexTypedResolver<
        GQL.WalletTransactionTransferIn,
        GQLRoots.WalletTransactionTransferInRoot,
        {
            fromUser: GQLRoots.UserRoot,
            payment: Nullable<GQLRoots.PaymentRoot>,
        },
        {
            amount: GQL.WalletTransactionTransferInAmountArgs,
            fromUser: GQL.WalletTransactionTransferInFromUserArgs,
            payment: GQL.WalletTransactionTransferInPaymentArgs,
        }
    >;
    WalletTransactionOperation?: UnionTypeResolver<GQLRoots.WalletTransactionOperationRoot, 'WalletTransactionDeposit' | 'WalletTransactionIncome' | 'WalletTransactionSubscription' | 'WalletTransactionPurchase' | 'WalletTransactionTransferOut' | 'WalletTransactionTransferIn'>;
    WalletTransactionConnection?: ComplexTypedResolver<
        GQL.WalletTransactionConnection,
        GQLRoots.WalletTransactionConnectionRoot,
        {
            items: GQLRoots.WalletTransactionRoot[],
        },
        {
            items: GQL.WalletTransactionConnectionItemsArgs,
            cursor: GQL.WalletTransactionConnectionCursorArgs,
        }
    >;
    WalletSubscription?: ComplexTypedResolver<
        GQL.WalletSubscription,
        GQLRoots.WalletSubscriptionRoot,
        {
            product: GQLRoots.WalletProductRoot,
        },
        {
            id: GQL.WalletSubscriptionIdArgs,
            state: GQL.WalletSubscriptionStateArgs,
            amount: GQL.WalletSubscriptionAmountArgs,
            interval: GQL.WalletSubscriptionIntervalArgs,
            product: GQL.WalletSubscriptionProductArgs,
            expires: GQL.WalletSubscriptionExpiresArgs,
        }
    >;
    WalletSubscriptionState?: EnumTypeResolver<'STARTED' | 'GRACE_PERIOD' | 'RETRYING' | 'CANCELED' | 'EXPIRED', GQLRoots.WalletSubscriptionStateRoot>;
    WalletSubscriptionInterval?: EnumTypeResolver<'MONTH' | 'WEEK', GQLRoots.WalletSubscriptionIntervalRoot>;
    WalletProductGroup?: ComplexTypedResolver<
        GQL.WalletProductGroup,
        GQLRoots.WalletProductGroupRoot,
        {
            group: GQLRoots.SharedRoomRoot,
        },
        {
            group: GQL.WalletProductGroupGroupArgs,
        }
    >;
    WalletProductDonation?: ComplexTypedResolver<
        GQL.WalletProductDonation,
        GQLRoots.WalletProductDonationRoot,
        {
            user: GQLRoots.UserRoot,
        },
        {
            user: GQL.WalletProductDonationUserArgs,
        }
    >;
    WalletProductDonationMessage?: ComplexTypedResolver<
        GQL.WalletProductDonationMessage,
        GQLRoots.WalletProductDonationMessageRoot,
        {
            user: GQLRoots.UserRoot,
            chat: GQLRoots.RoomRoot,
            message: Nullable<GQLRoots.ModernMessageRoot>,
        },
        {
            user: GQL.WalletProductDonationMessageUserArgs,
            chat: GQL.WalletProductDonationMessageChatArgs,
            message: GQL.WalletProductDonationMessageMessageArgs,
        }
    >;
    WalletProductDonationReaction?: ComplexTypedResolver<
        GQL.WalletProductDonationReaction,
        GQLRoots.WalletProductDonationReactionRoot,
        {
            user: GQLRoots.UserRoot,
            chat: GQLRoots.RoomRoot,
            message: GQLRoots.ModernMessageRoot,
        },
        {
            user: GQL.WalletProductDonationReactionUserArgs,
            chat: GQL.WalletProductDonationReactionChatArgs,
            message: GQL.WalletProductDonationReactionMessageArgs,
        }
    >;
    WalletProduct?: UnionTypeResolver<GQLRoots.WalletProductRoot, 'WalletProductGroup' | 'WalletProductDonation' | 'WalletProductDonationMessage' | 'WalletProductDonationReaction'>;
    PurchaseState?: EnumTypeResolver<'PENDING' | 'COMPLETED' | 'CANCELED', GQLRoots.PurchaseStateRoot>;
    Purchase?: ComplexTypedResolver<
        GQL.Purchase,
        GQLRoots.PurchaseRoot,
        {
            intent: Nullable<GQLRoots.PaymentIntentRoot>,
            product: GQLRoots.WalletProductRoot,
            user: GQLRoots.UserRoot,
        },
        {
            id: GQL.PurchaseIdArgs,
            state: GQL.PurchaseStateArgs,
            intent: GQL.PurchaseIntentArgs,
            product: GQL.PurchaseProductArgs,
            amount: GQL.PurchaseAmountArgs,
            user: GQL.PurchaseUserArgs,
        }
    >;
    WalletUpdateSingle?: ComplexTypedResolver<
        GQL.WalletUpdateSingle,
        GQLRoots.WalletUpdateSingleRoot,
        {
            update: GQLRoots.WalletUpdateRoot,
        },
        {
            state: GQL.WalletUpdateSingleStateArgs,
            update: GQL.WalletUpdateSingleUpdateArgs,
        }
    >;
    WalletUpdateBatch?: ComplexTypedResolver<
        GQL.WalletUpdateBatch,
        GQLRoots.WalletUpdateBatchRoot,
        {
            updates: GQLRoots.WalletUpdateRoot[],
        },
        {
            state: GQL.WalletUpdateBatchStateArgs,
            updates: GQL.WalletUpdateBatchUpdatesArgs,
        }
    >;
    WalletUpdateContainer?: UnionTypeResolver<GQLRoots.WalletUpdateContainerRoot, 'WalletUpdateSingle' | 'WalletUpdateBatch'>;
    WalletUpdateBalance?: ComplexTypedResolver<
        GQL.WalletUpdateBalance,
        GQLRoots.WalletUpdateBalanceRoot,
        {
        },
        {
            amount: GQL.WalletUpdateBalanceAmountArgs,
        }
    >;
    WalletUpdateTransactionSuccess?: ComplexTypedResolver<
        GQL.WalletUpdateTransactionSuccess,
        GQLRoots.WalletUpdateTransactionSuccessRoot,
        {
            transaction: GQLRoots.WalletTransactionRoot,
        },
        {
            transaction: GQL.WalletUpdateTransactionSuccessTransactionArgs,
        }
    >;
    WalletUpdateTransactionCanceled?: ComplexTypedResolver<
        GQL.WalletUpdateTransactionCanceled,
        GQLRoots.WalletUpdateTransactionCanceledRoot,
        {
            transaction: GQLRoots.WalletTransactionRoot,
        },
        {
            transaction: GQL.WalletUpdateTransactionCanceledTransactionArgs,
        }
    >;
    WalletUpdateTransactionPending?: ComplexTypedResolver<
        GQL.WalletUpdateTransactionPending,
        GQLRoots.WalletUpdateTransactionPendingRoot,
        {
            transaction: GQLRoots.WalletTransactionRoot,
        },
        {
            transaction: GQL.WalletUpdateTransactionPendingTransactionArgs,
        }
    >;
    WalletUpdatePaymentStatus?: ComplexTypedResolver<
        GQL.WalletUpdatePaymentStatus,
        GQLRoots.WalletUpdatePaymentStatusRoot,
        {
            payment: GQLRoots.PaymentRoot,
        },
        {
            payment: GQL.WalletUpdatePaymentStatusPaymentArgs,
        }
    >;
    WalletUpdateLocked?: ComplexTypedResolver<
        GQL.WalletUpdateLocked,
        GQLRoots.WalletUpdateLockedRoot,
        {
        },
        {
            isLocked: GQL.WalletUpdateLockedIsLockedArgs,
            failingPaymentsCount: GQL.WalletUpdateLockedFailingPaymentsCountArgs,
        }
    >;
    WalletUpdate?: UnionTypeResolver<GQLRoots.WalletUpdateRoot, 'WalletUpdateBalance' | 'WalletUpdateTransactionSuccess' | 'WalletUpdateTransactionCanceled' | 'WalletUpdateTransactionPending' | 'WalletUpdatePaymentStatus' | 'WalletUpdateLocked'>;
    Invite?: ComplexTypedResolver<
        GQL.Invite,
        GQLRoots.InviteRoot,
        {
        },
        {
            id: GQL.InviteIdArgs,
            key: GQL.InviteKeyArgs,
            ttl: GQL.InviteTtlArgs,
        }
    >;
    InviteInfo?: ComplexTypedResolver<
        GQL.InviteInfo,
        GQLRoots.InviteInfoRoot,
        {
            photoRef: Nullable<GQLRoots.ImageRefRoot>,
            creator: Nullable<GQLRoots.UserRoot>,
            organization: Nullable<GQLRoots.OrganizationRoot>,
        },
        {
            id: GQL.InviteInfoIdArgs,
            key: GQL.InviteInfoKeyArgs,
            orgId: GQL.InviteInfoOrgIdArgs,
            title: GQL.InviteInfoTitleArgs,
            photo: GQL.InviteInfoPhotoArgs,
            photoRef: GQL.InviteInfoPhotoRefArgs,
            joined: GQL.InviteInfoJoinedArgs,
            creator: GQL.InviteInfoCreatorArgs,
            forEmail: GQL.InviteInfoForEmailArgs,
            forName: GQL.InviteInfoForNameArgs,
            description: GQL.InviteInfoDescriptionArgs,
            membersCount: GQL.InviteInfoMembersCountArgs,
            organization: GQL.InviteInfoOrganizationArgs,
        }
    >;
    AppInvite?: ComplexTypedResolver<
        GQL.AppInvite,
        GQLRoots.AppInviteRoot,
        {
            inviter: GQLRoots.UserRoot,
        },
        {
            inviter: GQL.AppInviteInviterArgs,
        }
    >;
    AppInviteInfo?: ComplexTypedResolver<
        GQL.AppInviteInfo,
        GQLRoots.AppInviteInfoRoot,
        {
            inviter: GQLRoots.UserRoot,
        },
        {
            inviter: GQL.AppInviteInfoInviterArgs,
        }
    >;
    InviteHistotyInfo?: ComplexTypedResolver<
        GQL.InviteHistotyInfo,
        GQLRoots.InviteHistotyInfoRoot,
        {
            acceptedBy: Nullable<GQLRoots.UserRoot>,
        },
        {
            acceptedBy: GQL.InviteHistotyInfoAcceptedByArgs,
            forEmail: GQL.InviteHistotyInfoForEmailArgs,
            isGlobal: GQL.InviteHistotyInfoIsGlobalArgs,
        }
    >;
    ResolveInviteEntry?: UnionTypeResolver<GQLRoots.ResolveInviteEntryRoot, 'InviteInfo' | 'AppInvite' | 'RoomInvite'>;
    UpdateSubscriptionStarted?: ComplexTypedResolver<
        GQL.UpdateSubscriptionStarted,
        GQLRoots.UpdateSubscriptionStartedRoot,
        {
        },
        {
            seq: GQL.UpdateSubscriptionStartedSeqArgs,
            state: GQL.UpdateSubscriptionStartedStateArgs,
        }
    >;
    UpdateSubscriptionCheckpoint?: ComplexTypedResolver<
        GQL.UpdateSubscriptionCheckpoint,
        GQLRoots.UpdateSubscriptionCheckpointRoot,
        {
        },
        {
            seq: GQL.UpdateSubscriptionCheckpointSeqArgs,
            state: GQL.UpdateSubscriptionCheckpointStateArgs,
        }
    >;
    UpdateSubscriptionEvent?: ComplexTypedResolver<
        GQL.UpdateSubscriptionEvent,
        GQLRoots.UpdateSubscriptionEventRoot,
        {
            event: GQLRoots.UpdateEventRoot,
            sequence: GQLRoots.SequenceRoot,
        },
        {
            seq: GQL.UpdateSubscriptionEventSeqArgs,
            pts: GQL.UpdateSubscriptionEventPtsArgs,
            event: GQL.UpdateSubscriptionEventEventArgs,
            sequence: GQL.UpdateSubscriptionEventSequenceArgs,
        }
    >;
    UpdateSubscriptionEphemeralEvent?: ComplexTypedResolver<
        GQL.UpdateSubscriptionEphemeralEvent,
        GQLRoots.UpdateSubscriptionEphemeralEventRoot,
        {
            event: GQLRoots.UpdateEventRoot,
            sequence: GQLRoots.SequenceRoot,
        },
        {
            seq: GQL.UpdateSubscriptionEphemeralEventSeqArgs,
            event: GQL.UpdateSubscriptionEphemeralEventEventArgs,
            sequence: GQL.UpdateSubscriptionEphemeralEventSequenceArgs,
        }
    >;
    UpdateSubscription?: UnionTypeResolver<GQLRoots.UpdateSubscriptionRoot, 'UpdateSubscriptionStarted' | 'UpdateSubscriptionCheckpoint' | 'UpdateSubscriptionEvent' | 'UpdateSubscriptionEphemeralEvent'>;
    UpdatesSequenceState?: ComplexTypedResolver<
        GQL.UpdatesSequenceState,
        GQLRoots.UpdatesSequenceStateRoot,
        {
            sequence: GQLRoots.SequenceRoot,
        },
        {
            sequence: GQL.UpdatesSequenceStateSequenceArgs,
            pts: GQL.UpdatesSequenceStatePtsArgs,
            seq: GQL.UpdatesSequenceStateSeqArgs,
        }
    >;
    UpdatesState?: ComplexTypedResolver<
        GQL.UpdatesState,
        GQLRoots.UpdatesStateRoot,
        {
            sequences: GQLRoots.UpdatesSequenceStateRoot[],
        },
        {
            seq: GQL.UpdatesStateSeqArgs,
            state: GQL.UpdatesStateStateArgs,
            sequences: GQL.UpdatesStateSequencesArgs,
        }
    >;
    UpdatesDifferenceEvent?: ComplexTypedResolver<
        GQL.UpdatesDifferenceEvent,
        GQLRoots.UpdatesDifferenceEventRoot,
        {
            event: GQLRoots.UpdateEventRoot,
        },
        {
            pts: GQL.UpdatesDifferenceEventPtsArgs,
            event: GQL.UpdatesDifferenceEventEventArgs,
        }
    >;
    UpdatesSequenceDifference?: ComplexTypedResolver<
        GQL.UpdatesSequenceDifference,
        GQLRoots.UpdatesSequenceDifferenceRoot,
        {
            sequence: GQLRoots.SequenceRoot,
            events: GQLRoots.UpdatesDifferenceEventRoot[],
        },
        {
            after: GQL.UpdatesSequenceDifferenceAfterArgs,
            sequence: GQL.UpdatesSequenceDifferenceSequenceArgs,
            events: GQL.UpdatesSequenceDifferenceEventsArgs,
        }
    >;
    UpdatesDifference?: ComplexTypedResolver<
        GQL.UpdatesDifference,
        GQLRoots.UpdatesDifferenceRoot,
        {
            sequences: GQLRoots.UpdatesSequenceDifferenceRoot[],
        },
        {
            seq: GQL.UpdatesDifferenceSeqArgs,
            state: GQL.UpdatesDifferenceStateArgs,
            hasMore: GQL.UpdatesDifferenceHasMoreArgs,
            sequences: GQL.UpdatesDifferenceSequencesArgs,
        }
    >;
    SequenceDifference?: ComplexTypedResolver<
        GQL.SequenceDifference,
        GQLRoots.SequenceDifferenceRoot,
        {
            sequence: GQLRoots.SequenceRoot,
            events: GQLRoots.UpdatesDifferenceEventRoot[],
        },
        {
            sequence: GQL.SequenceDifferenceSequenceArgs,
            events: GQL.SequenceDifferenceEventsArgs,
            after: GQL.SequenceDifferenceAfterArgs,
            hasMore: GQL.SequenceDifferenceHasMoreArgs,
            seq: GQL.SequenceDifferenceSeqArgs,
        }
    >;
    Reaction?: ComplexTypedResolver<
        GQL.Reaction,
        GQLRoots.ReactionRoot,
        {
            user: GQLRoots.UserRoot,
        },
        {
            user: GQL.ReactionUserArgs,
            reaction: GQL.ReactionReactionArgs,
        }
    >;
    Message?: ComplexTypedResolver<
        GQL.Message,
        GQLRoots.MessageRoot,
        {
            sender: GQLRoots.UserRoot,
            quoted: GQLRoots.MessageRoot[],
            alphaReactions: GQLRoots.ReactionRoot[],
        },
        {
            id: GQL.MessageIdArgs,
            date: GQL.MessageDateArgs,
            sender: GQL.MessageSenderArgs,
            edited: GQL.MessageEditedArgs,
            text: GQL.MessageTextArgs,
            quoted: GQL.MessageQuotedArgs,
            alphaReactions: GQL.MessageAlphaReactionsArgs,
        }
    >;
    ChannelType?: EnumTypeResolver<'SYSTEM' | 'PERSONAL' | 'PUBLIC' | 'SECRET', GQLRoots.ChannelTypeRoot>;
    Channel?: ComplexTypedResolver<
        GQL.Channel,
        GQLRoots.ChannelRoot,
        {
            owner: Nullable<GQLRoots.UserRoot>,
        },
        {
            id: GQL.ChannelIdArgs,
            title: GQL.ChannelTitleArgs,
            type: GQL.ChannelTypeArgs,
            owner: GQL.ChannelOwnerArgs,
            shortname: GQL.ChannelShortnameArgs,
        }
    >;
    DebugEmailType?: EnumTypeResolver<'WELCOME' | 'ACCOUNT_ACTIVATED' | 'ACCOUNT_DEACTIVATED' | 'MEMBER_REMOVED' | 'MEMBERSHIP_LEVEL_CHANGED' | 'INVITE' | 'MEMBER_JOINED' | 'SIGNUP_CODE' | 'SIGIN_CODE' | 'UNREAD_MESSAGE' | 'UNREAD_MESSAGES' | 'PUBLIC_ROOM_INVITE' | 'PRIVATE_ROOM_INVITE' | 'ROOM_INVITE_ACCEPTED' | 'WEEKLY_DIGEST' | 'GENERIC', GQLRoots.DebugEmailTypeRoot>;
    DebugID?: ComplexTypedResolver<
        GQL.DebugID,
        GQLRoots.DebugIDRoot,
        {
        },
        {
            numberID: GQL.DebugIDNumberIDArgs,
            stringID: GQL.DebugIDStringIDArgs,
            type: GQL.DebugIDTypeArgs,
        }
    >;
    DebugUserPresence?: ComplexTypedResolver<
        GQL.DebugUserPresence,
        GQLRoots.DebugUserPresenceRoot,
        {
            user: GQLRoots.UserRoot,
        },
        {
            user: GQL.DebugUserPresenceUserArgs,
            lastSeen: GQL.DebugUserPresenceLastSeenArgs,
            lastSeenStr: GQL.DebugUserPresenceLastSeenStrArgs,
            lastSeenTimeout: GQL.DebugUserPresenceLastSeenTimeoutArgs,
            platform: GQL.DebugUserPresencePlatformArgs,
            active: GQL.DebugUserPresenceActiveArgs,
        }
    >;
    OrganizationChatStats?: ComplexTypedResolver<
        GQL.OrganizationChatStats,
        GQLRoots.OrganizationChatStatsRoot,
        {
            org: GQLRoots.OrganizationRoot,
            chat: GQLRoots.SharedRoomRoot,
        },
        {
            org: GQL.OrganizationChatStatsOrgArgs,
            chat: GQL.OrganizationChatStatsChatArgs,
            messagesCount: GQL.OrganizationChatStatsMessagesCountArgs,
            lastMessageDate: GQL.OrganizationChatStatsLastMessageDateArgs,
        }
    >;
    DebugEventsState?: ComplexTypedResolver<
        GQL.DebugEventsState,
        GQLRoots.DebugEventsStateRoot,
        {
        },
        {
            state: GQL.DebugEventsStateStateArgs,
        }
    >;
    DebugEvent?: ComplexTypedResolver<
        GQL.DebugEvent,
        GQLRoots.DebugEventRoot,
        {
        },
        {
            seq: GQL.DebugEventSeqArgs,
            key: GQL.DebugEventKeyArgs,
        }
    >;
    DebugUserMetrics?: ComplexTypedResolver<
        GQL.DebugUserMetrics,
        GQLRoots.DebugUserMetricsRoot,
        {
        },
        {
            messagesSent: GQL.DebugUserMetricsMessagesSentArgs,
            messagesReceived: GQL.DebugUserMetricsMessagesReceivedArgs,
            totalChatsCount: GQL.DebugUserMetricsTotalChatsCountArgs,
            directChatsCount: GQL.DebugUserMetricsDirectChatsCountArgs,
            direct2WayChatsCount: GQL.DebugUserMetricsDirect2WayChatsCountArgs,
            directMessagesSent: GQL.DebugUserMetricsDirectMessagesSentArgs,
            successfulInvitesCount: GQL.DebugUserMetricsSuccessfulInvitesCountArgs,
            audienceCount: GQL.DebugUserMetricsAudienceCountArgs,
        }
    >;
    DebugGlobalCounters?: ComplexTypedResolver<
        GQL.DebugGlobalCounters,
        GQLRoots.DebugGlobalCountersRoot,
        {
        },
        {
            allUnreadMessages: GQL.DebugGlobalCountersAllUnreadMessagesArgs,
            unreadMessagesWithoutMuted: GQL.DebugGlobalCountersUnreadMessagesWithoutMutedArgs,
            allUnreadChats: GQL.DebugGlobalCountersAllUnreadChatsArgs,
            unreadChatsWithoutMuted: GQL.DebugGlobalCountersUnreadChatsWithoutMutedArgs,
        }
    >;
    GqlTrace?: ComplexTypedResolver<
        GQL.GqlTrace,
        GQLRoots.GqlTraceRoot,
        {
        },
        {
            id: GQL.GqlTraceIdArgs,
            name: GQL.GqlTraceNameArgs,
            duration: GQL.GqlTraceDurationArgs,
            traceData: GQL.GqlTraceTraceDataArgs,
            date: GQL.GqlTraceDateArgs,
        }
    >;
    GqlTraceConnection?: ComplexTypedResolver<
        GQL.GqlTraceConnection,
        GQLRoots.GqlTraceConnectionRoot,
        {
            items: GQLRoots.GqlTraceRoot[],
        },
        {
            items: GQL.GqlTraceConnectionItemsArgs,
            cursor: GQL.GqlTraceConnectionCursorArgs,
        }
    >;
    SuperNotificationType?: EnumTypeResolver<'ON_SIGN_UP' | 'ON_USER_PROFILE_CREATED' | 'ON_ORG_ACTIVATED_BY_ADMIN' | 'ON_ORG_ACTIVATED_VIA_INVITE' | 'ON_ORG_SUSPEND', GQLRoots.SuperNotificationTypeRoot>;
    DialogKind?: EnumTypeResolver<'PRIVATE' | 'INTERNAL' | 'PUBLIC' | 'GROUP', GQLRoots.DialogKindRoot>;
    Dialog?: ComplexTypedResolver<
        GQL.Dialog,
        GQLRoots.DialogRoot,
        {
            topMessage: Nullable<GQLRoots.MessageRoot>,
            betaTopMessage: Nullable<GQLRoots.RoomMessageRoot>,
            alphaTopMessage: Nullable<GQLRoots.ModernMessageRoot>,
        },
        {
            id: GQL.DialogIdArgs,
            cid: GQL.DialogCidArgs,
            fid: GQL.DialogFidArgs,
            kind: GQL.DialogKindArgs,
            isChannel: GQL.DialogIsChannelArgs,
            isPremium: GQL.DialogIsPremiumArgs,
            title: GQL.DialogTitleArgs,
            photo: GQL.DialogPhotoArgs,
            featured: GQL.DialogFeaturedArgs,
            unreadCount: GQL.DialogUnreadCountArgs,
            topMessage: GQL.DialogTopMessageArgs,
            betaTopMessage: GQL.DialogBetaTopMessageArgs,
            alphaTopMessage: GQL.DialogAlphaTopMessageArgs,
            isMuted: GQL.DialogIsMutedArgs,
            haveMention: GQL.DialogHaveMentionArgs,
            hasActiveCall: GQL.DialogHasActiveCallArgs,
            membership: GQL.DialogMembershipArgs,
        }
    >;
    DialogsConnection?: ComplexTypedResolver<
        GQL.DialogsConnection,
        GQLRoots.DialogsConnectionRoot,
        {
            items: GQLRoots.DialogRoot[],
        },
        {
            items: GQL.DialogsConnectionItemsArgs,
            cursor: GQL.DialogsConnectionCursorArgs,
        }
    >;
    EmailFrequency?: EnumTypeResolver<'NEVER' | 'MIN_15' | 'HOUR_1' | 'HOUR_24' | 'WEEK_1', GQLRoots.EmailFrequencyRoot>;
    NotificationMessages?: EnumTypeResolver<'ALL' | 'DIRECT' | 'NONE', GQLRoots.NotificationMessagesRoot>;
    NotificationComments?: EnumTypeResolver<'ALL' | 'DIRECT' | 'NONE', GQLRoots.NotificationCommentsRoot>;
    CommentsNotificationDelivery?: EnumTypeResolver<'ALL' | 'NONE', GQLRoots.CommentsNotificationDeliveryRoot>;
    NotificationsDelay?: EnumTypeResolver<'NONE' | 'MIN_1' | 'MIN_15', GQLRoots.NotificationsDelayRoot>;
    NotificationPreview?: EnumTypeResolver<'NAME_TEXT' | 'NAME', GQLRoots.NotificationPreviewRoot>;
    PrivacyWhoCanSee?: EnumTypeResolver<'EVERYONE' | 'NOBODY', GQLRoots.PrivacyWhoCanSeeRoot>;
    PrivacyWhoCanAddToGroups?: EnumTypeResolver<'EVERYONE' | 'CORRESPONDENTS' | 'NOBODY', GQLRoots.PrivacyWhoCanAddToGroupsRoot>;
    ChatTypeNotificationSettings?: ComplexTypedResolver<
        GQL.ChatTypeNotificationSettings,
        GQLRoots.ChatTypeNotificationSettingsRoot,
        {
        },
        {
            showNotification: GQL.ChatTypeNotificationSettingsShowNotificationArgs,
            sound: GQL.ChatTypeNotificationSettingsSoundArgs,
        }
    >;
    PlatformNotificationSettings?: ComplexTypedResolver<
        GQL.PlatformNotificationSettings,
        GQLRoots.PlatformNotificationSettingsRoot,
        {
            direct: GQLRoots.ChatTypeNotificationSettingsRoot,
            secretChat: GQLRoots.ChatTypeNotificationSettingsRoot,
            organizationChat: GQLRoots.ChatTypeNotificationSettingsRoot,
            communityChat: GQLRoots.ChatTypeNotificationSettingsRoot,
            comments: GQLRoots.ChatTypeNotificationSettingsRoot,
        },
        {
            direct: GQL.PlatformNotificationSettingsDirectArgs,
            secretChat: GQL.PlatformNotificationSettingsSecretChatArgs,
            organizationChat: GQL.PlatformNotificationSettingsOrganizationChatArgs,
            communityChat: GQL.PlatformNotificationSettingsCommunityChatArgs,
            comments: GQL.PlatformNotificationSettingsCommentsArgs,
            notificationPreview: GQL.PlatformNotificationSettingsNotificationPreviewArgs,
        }
    >;
    Settings?: ComplexTypedResolver<
        GQL.Settings,
        GQLRoots.SettingsRoot,
        {
            desktop: GQLRoots.PlatformNotificationSettingsRoot,
            mobile: GQLRoots.PlatformNotificationSettingsRoot,
        },
        {
            id: GQL.SettingsIdArgs,
            primaryEmail: GQL.SettingsPrimaryEmailArgs,
            emailFrequency: GQL.SettingsEmailFrequencyArgs,
            desktop: GQL.SettingsDesktopArgs,
            mobile: GQL.SettingsMobileArgs,
            countUnreadChats: GQL.SettingsCountUnreadChatsArgs,
            excludeMutedChats: GQL.SettingsExcludeMutedChatsArgs,
            whoCanSeeEmail: GQL.SettingsWhoCanSeeEmailArgs,
            whoCanSeePhone: GQL.SettingsWhoCanSeePhoneArgs,
            communityAdminsCanSeeContactInfo: GQL.SettingsCommunityAdminsCanSeeContactInfoArgs,
            whoCanAddToGroups: GQL.SettingsWhoCanAddToGroupsArgs,
            notificationsDelay: GQL.SettingsNotificationsDelayArgs,
            desktopNotifications: GQL.SettingsDesktopNotificationsArgs,
            mobileNotifications: GQL.SettingsMobileNotificationsArgs,
            commentNotifications: GQL.SettingsCommentNotificationsArgs,
            commentNotificationsDelivery: GQL.SettingsCommentNotificationsDeliveryArgs,
            mobileAlert: GQL.SettingsMobileAlertArgs,
            mobileIncludeText: GQL.SettingsMobileIncludeTextArgs,
            mute: GQL.SettingsMuteArgs,
        }
    >;
    AuthPoint?: ComplexTypedResolver<
        GQL.AuthPoint,
        GQLRoots.AuthPointRoot,
        {
        },
        {
            email: GQL.AuthPointEmailArgs,
            phone: GQL.AuthPointPhoneArgs,
        }
    >;
    MediaStreamIceTransportPolicy?: EnumTypeResolver<'all' | 'relay', GQLRoots.MediaStreamIceTransportPolicyRoot>;
    MediaStreamSettings?: ComplexTypedResolver<
        GQL.MediaStreamSettings,
        GQLRoots.MediaStreamSettingsRoot,
        {
        },
        {
            videoIn: GQL.MediaStreamSettingsVideoInArgs,
            videoOut: GQL.MediaStreamSettingsVideoOutArgs,
            videoOutSource: GQL.MediaStreamSettingsVideoOutSourceArgs,
            audioIn: GQL.MediaStreamSettingsAudioInArgs,
            audioOut: GQL.MediaStreamSettingsAudioOutArgs,
            iceTransportPolicy: GQL.MediaStreamSettingsIceTransportPolicyArgs,
        }
    >;
    MediaStreamVideoSource?: EnumTypeResolver<'camera' | 'screen_share', GQLRoots.MediaStreamVideoSourceRoot>;
    MediaStreamMediaState?: ComplexTypedResolver<
        GQL.MediaStreamMediaState,
        GQLRoots.MediaStreamMediaStateRoot,
        {
        },
        {
            videoPaused: GQL.MediaStreamMediaStateVideoPausedArgs,
            audioPaused: GQL.MediaStreamMediaStateAudioPausedArgs,
            videoSource: GQL.MediaStreamMediaStateVideoSourceArgs,
            videoOut: GQL.MediaStreamMediaStateVideoOutArgs,
            audioOut: GQL.MediaStreamMediaStateAudioOutArgs,
        }
    >;
    LocalStreamAudioConfig?: ComplexTypedResolver<
        GQL.LocalStreamAudioConfig,
        GQLRoots.LocalStreamAudioConfigRoot,
        {
        },
        {
            codec: GQL.LocalStreamAudioConfigCodecArgs,
        }
    >;
    LocalStreamVideoConfig?: ComplexTypedResolver<
        GQL.LocalStreamVideoConfig,
        GQLRoots.LocalStreamVideoConfigRoot,
        {
        },
        {
            codec: GQL.LocalStreamVideoConfigCodecArgs,
        }
    >;
    LocalStreamDataChannelConfig?: ComplexTypedResolver<
        GQL.LocalStreamDataChannelConfig,
        GQLRoots.LocalStreamDataChannelConfigRoot,
        {
        },
        {
            id: GQL.LocalStreamDataChannelConfigIdArgs,
            label: GQL.LocalStreamDataChannelConfigLabelArgs,
            ordered: GQL.LocalStreamDataChannelConfigOrderedArgs,
        }
    >;
    LocalStreamConfig?: UnionTypeResolver<GQLRoots.LocalStreamConfigRoot, 'LocalStreamAudioConfig' | 'LocalStreamVideoConfig' | 'LocalStreamDataChannelConfig'>;
    ConferenceKind?: EnumTypeResolver<'CONFERENCE' | 'STREAM', GQLRoots.ConferenceKindRoot>;
    ConferenceStrategy?: EnumTypeResolver<'MASH' | 'SFU', GQLRoots.ConferenceStrategyRoot>;
    OauthScope?: EnumTypeResolver<'All' | 'Zapier', GQLRoots.OauthScopeRoot>;
    OauthApp?: ComplexTypedResolver<
        GQL.OauthApp,
        GQLRoots.OauthAppRoot,
        {
            owner: GQLRoots.UserRoot,
            image: Nullable<GQLRoots.ImageRefRoot>,
        },
        {
            id: GQL.OauthAppIdArgs,
            title: GQL.OauthAppTitleArgs,
            clientId: GQL.OauthAppClientIdArgs,
            clientSecret: GQL.OauthAppClientSecretArgs,
            scopes: GQL.OauthAppScopesArgs,
            owner: GQL.OauthAppOwnerArgs,
            image: GQL.OauthAppImageArgs,
            redirectUrls: GQL.OauthAppRedirectUrlsArgs,
        }
    >;
    OauthContext?: ComplexTypedResolver<
        GQL.OauthContext,
        GQLRoots.OauthContextRoot,
        {
            app: GQLRoots.OauthAppRoot,
        },
        {
            app: GQL.OauthContextAppArgs,
            state: GQL.OauthContextStateArgs,
            redirectUrl: GQL.OauthContextRedirectUrlArgs,
            code: GQL.OauthContextCodeArgs,
        }
    >;
    OrganizationMemberRole?: EnumTypeResolver<'OWNER' | 'ADMIN' | 'MEMBER', GQLRoots.OrganizationMemberRoleRoot>;
    OrganizationMember?: InterfaceTypeResolver<GQLRoots.OrganizationMemberRoot, 'OrganizationIvitedMember' | 'OrganizationJoinedMember' | 'OrganizationRequestedMember'>;
    OrganizationIvitedMember?: ComplexTypedResolver<
        GQL.OrganizationIvitedMember,
        GQLRoots.OrganizationIvitedMemberRoot,
        {
        },
        {
            email: GQL.OrganizationIvitedMemberEmailArgs,
            role: GQL.OrganizationIvitedMemberRoleArgs,
            firstName: GQL.OrganizationIvitedMemberFirstNameArgs,
            lastName: GQL.OrganizationIvitedMemberLastNameArgs,
            inviteId: GQL.OrganizationIvitedMemberInviteIdArgs,
        }
    >;
    OrganizationJoinedMember?: ComplexTypedResolver<
        GQL.OrganizationJoinedMember,
        GQLRoots.OrganizationJoinedMemberRoot,
        {
            user: GQLRoots.UserRoot,
        },
        {
            email: GQL.OrganizationJoinedMemberEmailArgs,
            role: GQL.OrganizationJoinedMemberRoleArgs,
            user: GQL.OrganizationJoinedMemberUserArgs,
            joinedAt: GQL.OrganizationJoinedMemberJoinedAtArgs,
            showInContacts: GQL.OrganizationJoinedMemberShowInContactsArgs,
        }
    >;
    OrganizationRequestedMember?: ComplexTypedResolver<
        GQL.OrganizationRequestedMember,
        GQLRoots.OrganizationRequestedMemberRoot,
        {
            user: GQLRoots.UserRoot,
        },
        {
            email: GQL.OrganizationRequestedMemberEmailArgs,
            role: GQL.OrganizationRequestedMemberRoleArgs,
            user: GQL.OrganizationRequestedMemberUserArgs,
            joinedAt: GQL.OrganizationRequestedMemberJoinedAtArgs,
        }
    >;
    JoinedOrganizationMember?: ComplexTypedResolver<
        GQL.JoinedOrganizationMember,
        GQLRoots.JoinedOrganizationMemberRoot,
        {
            user: GQLRoots.UserRoot,
        },
        {
            user: GQL.JoinedOrganizationMemberUserArgs,
            role: GQL.JoinedOrganizationMemberRoleArgs,
            joinedAt: GQL.JoinedOrganizationMemberJoinedAtArgs,
        }
    >;
    JoinedOrganizationMemberEdge?: ComplexTypedResolver<
        GQL.JoinedOrganizationMemberEdge,
        GQLRoots.JoinedOrganizationMemberEdgeRoot,
        {
            node: GQLRoots.JoinedOrganizationMemberRoot,
        },
        {
            node: GQL.JoinedOrganizationMemberEdgeNodeArgs,
            cursor: GQL.JoinedOrganizationMemberEdgeCursorArgs,
        }
    >;
    JoinedOrganizationMembersConnection?: ComplexTypedResolver<
        GQL.JoinedOrganizationMembersConnection,
        GQLRoots.JoinedOrganizationMembersConnectionRoot,
        {
            edges: GQLRoots.JoinedOrganizationMemberEdgeRoot[],
            pageInfo: GQLRoots.PageInfoRoot,
        },
        {
            edges: GQL.JoinedOrganizationMembersConnectionEdgesArgs,
            pageInfo: GQL.JoinedOrganizationMembersConnectionPageInfoArgs,
        }
    >;
    ProfileBadgeType?: EnumTypeResolver<'ORGANIZATION', GQLRoots.ProfileBadgeTypeRoot>;
    ProfileBadge?: ComplexTypedResolver<
        GQL.ProfileBadge,
        GQLRoots.ProfileBadgeRoot,
        {
        },
        {
            type: GQL.ProfileBadgeTypeArgs,
            text: GQL.ProfileBadgeTextArgs,
        }
    >;
    Profile?: ComplexTypedResolver<
        GQL.Profile,
        GQLRoots.ProfileRoot,
        {
            photoRef: Nullable<GQLRoots.ImageRefRoot>,
            badge: Nullable<GQLRoots.ProfileBadgeRoot>,
            alphaInvitedBy: Nullable<GQLRoots.UserRoot>,
            primaryOrganization: Nullable<GQLRoots.OrganizationRoot>,
            alphaPrimaryOrganization: Nullable<GQLRoots.OrganizationRoot>,
            primaryBadge: Nullable<GQLRoots.UserBadgeRoot>,
        },
        {
            id: GQL.ProfileIdArgs,
            firstName: GQL.ProfileFirstNameArgs,
            lastName: GQL.ProfileLastNameArgs,
            photoRef: GQL.ProfilePhotoRefArgs,
            phone: GQL.ProfilePhoneArgs,
            email: GQL.ProfileEmailArgs,
            website: GQL.ProfileWebsiteArgs,
            about: GQL.ProfileAboutArgs,
            location: GQL.ProfileLocationArgs,
            linkedin: GQL.ProfileLinkedinArgs,
            instagram: GQL.ProfileInstagramArgs,
            twitter: GQL.ProfileTwitterArgs,
            facebook: GQL.ProfileFacebookArgs,
            authEmail: GQL.ProfileAuthEmailArgs,
            badge: GQL.ProfileBadgeArgs,
            birthDay: GQL.ProfileBirthDayArgs,
            status: GQL.ProfileStatusArgs,
            alphaLinkedin: GQL.ProfileAlphaLinkedinArgs,
            alphaTwitter: GQL.ProfileAlphaTwitterArgs,
            alphaJoinedAt: GQL.ProfileAlphaJoinedAtArgs,
            alphaInvitedBy: GQL.ProfileAlphaInvitedByArgs,
            alphaRole: GQL.ProfileAlphaRoleArgs,
            alphaLocations: GQL.ProfileAlphaLocationsArgs,
            primaryOrganization: GQL.ProfilePrimaryOrganizationArgs,
            alphaPrimaryOrganizationId: GQL.ProfileAlphaPrimaryOrganizationIdArgs,
            alphaPrimaryOrganization: GQL.ProfileAlphaPrimaryOrganizationArgs,
            primaryBadge: GQL.ProfilePrimaryBadgeArgs,
            shortname: GQL.ProfileShortnameArgs,
        }
    >;
    AlphaSignupData?: ComplexTypedResolver<
        GQL.AlphaSignupData,
        GQLRoots.AlphaSignupDataRoot,
        {
            user: Nullable<GQLRoots.UserRoot>,
            organization: Nullable<GQLRoots.OrganizationRoot>,
        },
        {
            user: GQL.AlphaSignupDataUserArgs,
            organization: GQL.AlphaSignupDataOrganizationArgs,
        }
    >;
    SuperAccountState?: EnumTypeResolver<'PENDING' | 'ACTIVATED' | 'SUSPENDED' | 'DELETED', GQLRoots.SuperAccountStateRoot>;
    SuperAccount?: ComplexTypedResolver<
        GQL.SuperAccount,
        GQLRoots.SuperAccountRoot,
        {
            members: GQLRoots.UserRoot[],
            createdBy: Nullable<GQLRoots.UserRoot>,
        },
        {
            id: GQL.SuperAccountIdArgs,
            orgId: GQL.SuperAccountOrgIdArgs,
            title: GQL.SuperAccountTitleArgs,
            name: GQL.SuperAccountNameArgs,
            state: GQL.SuperAccountStateArgs,
            members: GQL.SuperAccountMembersArgs,
            alphaPublished: GQL.SuperAccountAlphaPublishedArgs,
            createdAt: GQL.SuperAccountCreatedAtArgs,
            createdBy: GQL.SuperAccountCreatedByArgs,
        }
    >;
    SuperAdminRole?: EnumTypeResolver<'SUPER_ADMIN' | 'SOFTWARE_DEVELOPER' | 'EDITOR', GQLRoots.SuperAdminRoleRoot>;
    SuperAdmin?: ComplexTypedResolver<
        GQL.SuperAdmin,
        GQLRoots.SuperAdminRoot,
        {
            user: GQLRoots.UserRoot,
        },
        {
            user: GQL.SuperAdminUserArgs,
            role: GQL.SuperAdminRoleArgs,
            email: GQL.SuperAdminEmailArgs,
        }
    >;
    DiscoverChatsCollection?: ComplexTypedResolver<
        GQL.DiscoverChatsCollection,
        GQLRoots.DiscoverChatsCollectionRoot,
        {
            image: GQLRoots.ImageRefRoot,
            chats: GQLRoots.SharedRoomRoot[],
        },
        {
            id: GQL.DiscoverChatsCollectionIdArgs,
            title: GQL.DiscoverChatsCollectionTitleArgs,
            description: GQL.DiscoverChatsCollectionDescriptionArgs,
            image: GQL.DiscoverChatsCollectionImageArgs,
            chatsCount: GQL.DiscoverChatsCollectionChatsCountArgs,
            chats: GQL.DiscoverChatsCollectionChatsArgs,
            shortname: GQL.DiscoverChatsCollectionShortnameArgs,
        }
    >;
    DiscoverChatsCollectionConnection?: ComplexTypedResolver<
        GQL.DiscoverChatsCollectionConnection,
        GQLRoots.DiscoverChatsCollectionConnectionRoot,
        {
            items: GQLRoots.DiscoverChatsCollectionRoot[],
        },
        {
            items: GQL.DiscoverChatsCollectionConnectionItemsArgs,
            cursor: GQL.DiscoverChatsCollectionConnectionCursorArgs,
        }
    >;
    EditorsChoiceChat?: ComplexTypedResolver<
        GQL.EditorsChoiceChat,
        GQLRoots.EditorsChoiceChatRoot,
        {
            image: GQLRoots.ImageRefRoot,
            chat: GQLRoots.SharedRoomRoot,
        },
        {
            id: GQL.EditorsChoiceChatIdArgs,
            image: GQL.EditorsChoiceChatImageArgs,
            chat: GQL.EditorsChoiceChatChatArgs,
        }
    >;
    EventPlatform?: EnumTypeResolver<'Android' | 'iOS' | 'WEB' | 'MobileWeb', GQLRoots.EventPlatformRoot>;
    Sequence?: InterfaceTypeResolver<GQLRoots.SequenceRoot, 'SequenceCommon' | 'SequenceChat'>;
    SequenceCommon?: ComplexTypedResolver<
        GQL.SequenceCommon,
        GQLRoots.SequenceCommonRoot,
        {
        },
        {
            id: GQL.SequenceCommonIdArgs,
        }
    >;
    SequenceChat?: ComplexTypedResolver<
        GQL.SequenceChat,
        GQLRoots.SequenceChatRoot,
        {
            draft: Nullable<GQLRoots.DraftRoot>,
        },
        {
            id: GQL.SequenceChatIdArgs,
            cid: GQL.SequenceChatCidArgs,
            draft: GQL.SequenceChatDraftArgs,
        }
    >;
    PageInfo?: ComplexTypedResolver<
        GQL.PageInfo,
        GQLRoots.PageInfoRoot,
        {
        },
        {
            hasNextPage: GQL.PageInfoHasNextPageArgs,
            hasPreviousPage: GQL.PageInfoHasPreviousPageArgs,
            itemsCount: GQL.PageInfoItemsCountArgs,
            pagesCount: GQL.PageInfoPagesCountArgs,
            currentPage: GQL.PageInfoCurrentPageArgs,
            openEnded: GQL.PageInfoOpenEndedArgs,
        }
    >;
    TaskStatus?: EnumTypeResolver<'IN_PROGRESS' | 'FAILED' | 'COMPLETED', GQLRoots.TaskStatusRoot>;
    Task?: ComplexTypedResolver<
        GQL.Task,
        GQLRoots.TaskRoot,
        {
        },
        {
            id: GQL.TaskIdArgs,
            status: GQL.TaskStatusArgs,
            result: GQL.TaskResultArgs,
        }
    >;
    ImageCrop?: ComplexTypedResolver<
        GQL.ImageCrop,
        GQLRoots.ImageCropRoot,
        {
        },
        {
            x: GQL.ImageCropXArgs,
            y: GQL.ImageCropYArgs,
            w: GQL.ImageCropWArgs,
            h: GQL.ImageCropHArgs,
        }
    >;
    ImageRef?: ComplexTypedResolver<
        GQL.ImageRef,
        GQLRoots.ImageRefRoot,
        {
            crop: Nullable<GQLRoots.ImageCropRoot>,
        },
        {
            uuid: GQL.ImageRefUuidArgs,
            crop: GQL.ImageRefCropArgs,
        }
    >;
    Range?: ComplexTypedResolver<
        GQL.Range,
        GQLRoots.RangeRoot,
        {
        },
        {
            from: GQL.RangeFromArgs,
            to: GQL.RangeToArgs,
        }
    >;
    AppStorageValue?: ComplexTypedResolver<
        GQL.AppStorageValue,
        GQLRoots.AppStorageValueRoot,
        {
        },
        {
            id: GQL.AppStorageValueIdArgs,
            key: GQL.AppStorageValueKeyArgs,
            value: GQL.AppStorageValueValueArgs,
        }
    >;
    AppProfile?: ComplexTypedResolver<
        GQL.AppProfile,
        GQLRoots.AppProfileRoot,
        {
            photoRef: Nullable<GQLRoots.ImageRefRoot>,
            token: GQLRoots.AppTokenRoot,
        },
        {
            id: GQL.AppProfileIdArgs,
            name: GQL.AppProfileNameArgs,
            photoRef: GQL.AppProfilePhotoRefArgs,
            about: GQL.AppProfileAboutArgs,
            shortname: GQL.AppProfileShortnameArgs,
            token: GQL.AppProfileTokenArgs,
        }
    >;
    AppToken?: ComplexTypedResolver<
        GQL.AppToken,
        GQLRoots.AppTokenRoot,
        {
        },
        {
            salt: GQL.AppTokenSaltArgs,
        }
    >;
    AppChat?: ComplexTypedResolver<
        GQL.AppChat,
        GQLRoots.AppChatRoot,
        {
            chat: GQLRoots.RoomRoot,
        },
        {
            chat: GQL.AppChatChatArgs,
            webhook: GQL.AppChatWebhookArgs,
        }
    >;
    UserEventBusMessage?: ComplexTypedResolver<
        GQL.UserEventBusMessage,
        GQLRoots.UserEventBusMessageRoot,
        {
        },
        {
            message: GQL.UserEventBusMessageMessageArgs,
        }
    >;
    BlackListUpdateContainer?: ComplexTypedResolver<
        GQL.BlackListUpdateContainer,
        GQLRoots.BlackListUpdateContainerRoot,
        {
            updates: GQLRoots.BlackListUpdateRoot[],
        },
        {
            updates: GQL.BlackListUpdateContainerUpdatesArgs,
            state: GQL.BlackListUpdateContainerStateArgs,
        }
    >;
    BlackListUpdate?: UnionTypeResolver<GQLRoots.BlackListUpdateRoot, 'BlackListAdded' | 'BlackListRemoved'>;
    BlackListAdded?: ComplexTypedResolver<
        GQL.BlackListAdded,
        GQLRoots.BlackListAddedRoot,
        {
            bannedBy: GQLRoots.UserRoot,
            bannedUser: GQLRoots.UserRoot,
        },
        {
            bannedBy: GQL.BlackListAddedBannedByArgs,
            bannedUser: GQL.BlackListAddedBannedUserArgs,
        }
    >;
    BlackListRemoved?: ComplexTypedResolver<
        GQL.BlackListRemoved,
        GQLRoots.BlackListRemovedRoot,
        {
            bannedBy: GQLRoots.UserRoot,
            bannedUser: GQLRoots.UserRoot,
        },
        {
            bannedBy: GQL.BlackListRemovedBannedByArgs,
            bannedUser: GQL.BlackListRemovedBannedUserArgs,
        }
    >;
    BlackListUpdatesState?: ComplexTypedResolver<
        GQL.BlackListUpdatesState,
        GQLRoots.BlackListUpdatesStateRoot,
        {
        },
        {
            state: GQL.BlackListUpdatesStateStateArgs,
        }
    >;
    ChatUpdateSingle?: ComplexTypedResolver<
        GQL.ChatUpdateSingle,
        GQLRoots.ChatUpdateSingleRoot,
        {
            update: GQLRoots.ChatUpdateRoot,
        },
        {
            seq: GQL.ChatUpdateSingleSeqArgs,
            state: GQL.ChatUpdateSingleStateArgs,
            update: GQL.ChatUpdateSingleUpdateArgs,
        }
    >;
    ChatUpdateBatch?: ComplexTypedResolver<
        GQL.ChatUpdateBatch,
        GQLRoots.ChatUpdateBatchRoot,
        {
            updates: GQLRoots.ChatUpdateRoot[],
        },
        {
            seq: GQL.ChatUpdateBatchSeqArgs,
            state: GQL.ChatUpdateBatchStateArgs,
            fromSeq: GQL.ChatUpdateBatchFromSeqArgs,
            updates: GQL.ChatUpdateBatchUpdatesArgs,
        }
    >;
    ChatUpdateContainer?: UnionTypeResolver<GQLRoots.ChatUpdateContainerRoot, 'ChatUpdateSingle' | 'ChatUpdateBatch'>;
    ChatUpdate?: UnionTypeResolver<GQLRoots.ChatUpdateRoot, 'ChatUpdated' | 'ChatMessageReceived' | 'ChatMessageUpdated' | 'ChatMessageDeleted' | 'ChatLostAccess'>;
    ChatUpdated?: ComplexTypedResolver<
        GQL.ChatUpdated,
        GQLRoots.ChatUpdatedRoot,
        {
            chat: GQLRoots.RoomRoot,
            by: GQLRoots.UserRoot,
        },
        {
            chat: GQL.ChatUpdatedChatArgs,
            by: GQL.ChatUpdatedByArgs,
        }
    >;
    ChatMessageReceived?: ComplexTypedResolver<
        GQL.ChatMessageReceived,
        GQLRoots.ChatMessageReceivedRoot,
        {
            message: GQLRoots.ModernMessageRoot,
        },
        {
            message: GQL.ChatMessageReceivedMessageArgs,
            repeatKey: GQL.ChatMessageReceivedRepeatKeyArgs,
        }
    >;
    ChatMessageUpdated?: ComplexTypedResolver<
        GQL.ChatMessageUpdated,
        GQLRoots.ChatMessageUpdatedRoot,
        {
            message: GQLRoots.ModernMessageRoot,
        },
        {
            message: GQL.ChatMessageUpdatedMessageArgs,
        }
    >;
    ChatMessageDeleted?: ComplexTypedResolver<
        GQL.ChatMessageDeleted,
        GQLRoots.ChatMessageDeletedRoot,
        {
            message: GQLRoots.ModernMessageRoot,
        },
        {
            message: GQL.ChatMessageDeletedMessageArgs,
        }
    >;
    ChatUpdateState?: ComplexTypedResolver<
        GQL.ChatUpdateState,
        GQLRoots.ChatUpdateStateRoot,
        {
        },
        {
            state: GQL.ChatUpdateStateStateArgs,
        }
    >;
    ChatLostAccess?: ComplexTypedResolver<
        GQL.ChatLostAccess,
        GQLRoots.ChatLostAccessRoot,
        {
        },
        {
            lostAccess: GQL.ChatLostAccessLostAccessArgs,
        }
    >;
    ConversationUpdateState?: ComplexTypedResolver<
        GQL.ConversationUpdateState,
        GQLRoots.ConversationUpdateStateRoot,
        {
        },
        {
            state: GQL.ConversationUpdateStateStateArgs,
        }
    >;
    CommentUpdatesState?: ComplexTypedResolver<
        GQL.CommentUpdatesState,
        GQLRoots.CommentUpdatesStateRoot,
        {
        },
        {
            state: GQL.CommentUpdatesStateStateArgs,
        }
    >;
    CommentUpdateSingle?: ComplexTypedResolver<
        GQL.CommentUpdateSingle,
        GQLRoots.CommentUpdateSingleRoot,
        {
            update: GQLRoots.CommentUpdateRoot,
        },
        {
            seq: GQL.CommentUpdateSingleSeqArgs,
            state: GQL.CommentUpdateSingleStateArgs,
            update: GQL.CommentUpdateSingleUpdateArgs,
        }
    >;
    CommentUpdateBatch?: ComplexTypedResolver<
        GQL.CommentUpdateBatch,
        GQLRoots.CommentUpdateBatchRoot,
        {
            updates: GQLRoots.CommentUpdateRoot[],
        },
        {
            seq: GQL.CommentUpdateBatchSeqArgs,
            state: GQL.CommentUpdateBatchStateArgs,
            fromSeq: GQL.CommentUpdateBatchFromSeqArgs,
            updates: GQL.CommentUpdateBatchUpdatesArgs,
        }
    >;
    CommentUpdate?: UnionTypeResolver<GQLRoots.CommentUpdateRoot, 'CommentReceived' | 'CommentUpdated'>;
    CommentReceived?: ComplexTypedResolver<
        GQL.CommentReceived,
        GQLRoots.CommentReceivedRoot,
        {
            comment: GQLRoots.CommentEntryRoot,
        },
        {
            comment: GQL.CommentReceivedCommentArgs,
            repeatKey: GQL.CommentReceivedRepeatKeyArgs,
        }
    >;
    CommentUpdated?: ComplexTypedResolver<
        GQL.CommentUpdated,
        GQLRoots.CommentUpdatedRoot,
        {
            comment: GQLRoots.CommentEntryRoot,
        },
        {
            comment: GQL.CommentUpdatedCommentArgs,
        }
    >;
    CommentUpdateContainer?: UnionTypeResolver<GQLRoots.CommentUpdateContainerRoot, 'CommentUpdateSingle' | 'CommentUpdateBatch'>;
    CommentsPeer?: ComplexTypedResolver<
        GQL.CommentsPeer,
        GQLRoots.CommentsPeerRoot,
        {
            state: GQLRoots.CommentUpdatesStateRoot,
            comments: GQLRoots.CommentEntryRoot[],
            peerRoot: GQLRoots.CommentPeerRootRoot,
            subscription: Nullable<GQLRoots.CommentSubscriptionRoot>,
        },
        {
            id: GQL.CommentsPeerIdArgs,
            state: GQL.CommentsPeerStateArgs,
            count: GQL.CommentsPeerCountArgs,
            comments: GQL.CommentsPeerCommentsArgs,
            peerRoot: GQL.CommentsPeerPeerRootArgs,
            subscription: GQL.CommentsPeerSubscriptionArgs,
        }
    >;
    CommentEntry?: ComplexTypedResolver<
        GQL.CommentEntry,
        GQLRoots.CommentEntryRoot,
        {
            comment: GQLRoots.GeneralMessageRoot,
            betaComment: GQLRoots.ModernMessageRoot,
            parentComment: Nullable<GQLRoots.CommentEntryRoot>,
            childComments: GQLRoots.CommentEntryRoot[],
        },
        {
            id: GQL.CommentEntryIdArgs,
            deleted: GQL.CommentEntryDeletedArgs,
            comment: GQL.CommentEntryCommentArgs,
            betaComment: GQL.CommentEntryBetaCommentArgs,
            parentComment: GQL.CommentEntryParentCommentArgs,
            childComments: GQL.CommentEntryChildCommentsArgs,
        }
    >;
    CommentPeerRoot?: UnionTypeResolver<GQLRoots.CommentPeerRootRoot, 'CommentPeerRootMessage' | 'CommentPeerRootFeedItem' | 'CommentPeerRootPost'>;
    CommentPeerRootMessage?: ComplexTypedResolver<
        GQL.CommentPeerRootMessage,
        GQLRoots.CommentPeerRootMessageRoot,
        {
            message: GQLRoots.GeneralMessageRoot,
            chat: GQLRoots.RoomRoot,
        },
        {
            message: GQL.CommentPeerRootMessageMessageArgs,
            chat: GQL.CommentPeerRootMessageChatArgs,
        }
    >;
    CommentPeerRootFeedItem?: ComplexTypedResolver<
        GQL.CommentPeerRootFeedItem,
        GQLRoots.CommentPeerRootFeedItemRoot,
        {
            item: GQLRoots.FeedItemRoot,
        },
        {
            item: GQL.CommentPeerRootFeedItemItemArgs,
        }
    >;
    CommentPeerRootPost?: ComplexTypedResolver<
        GQL.CommentPeerRootPost,
        GQLRoots.CommentPeerRootPostRoot,
        {
            post: GQLRoots.PostRoot,
        },
        {
            post: GQL.CommentPeerRootPostPostArgs,
        }
    >;
    CommentSubscriptionType?: EnumTypeResolver<'ALL' | 'DIRECT', GQLRoots.CommentSubscriptionTypeRoot>;
    CommentSubscription?: ComplexTypedResolver<
        GQL.CommentSubscription,
        GQLRoots.CommentSubscriptionRoot,
        {
        },
        {
            type: GQL.CommentSubscriptionTypeArgs,
        }
    >;
    Conference?: ComplexTypedResolver<
        GQL.Conference,
        GQLRoots.ConferenceRoot,
        {
            peers: GQLRoots.ConferencePeerRoot[],
            room: Nullable<GQLRoots.RoomRoot>,
            iceServers: GQLRoots.ICEServerRoot[],
        },
        {
            id: GQL.ConferenceIdArgs,
            startTime: GQL.ConferenceStartTimeArgs,
            peers: GQL.ConferencePeersArgs,
            room: GQL.ConferenceRoomArgs,
            kind: GQL.ConferenceKindArgs,
            iceServers: GQL.ConferenceIceServersArgs,
            strategy: GQL.ConferenceStrategyArgs,
        }
    >;
    ConferencePeer?: ComplexTypedResolver<
        GQL.ConferencePeer,
        GQLRoots.ConferencePeerRoot,
        {
            user: GQLRoots.UserRoot,
            mediaState: GQLRoots.ConferencePeerMediaStateRoot,
        },
        {
            id: GQL.ConferencePeerIdArgs,
            user: GQL.ConferencePeerUserArgs,
            mediaState: GQL.ConferencePeerMediaStateArgs,
        }
    >;
    ConferencePeerMediaState?: ComplexTypedResolver<
        GQL.ConferencePeerMediaState,
        GQLRoots.ConferencePeerMediaStateRoot,
        {
        },
        {
            audioPaused: GQL.ConferencePeerMediaStateAudioPausedArgs,
            videoPaused: GQL.ConferencePeerMediaStateVideoPausedArgs,
            screencastEnabled: GQL.ConferencePeerMediaStateScreencastEnabledArgs,
        }
    >;
    ICEServer?: ComplexTypedResolver<
        GQL.ICEServer,
        GQLRoots.ICEServerRoot,
        {
        },
        {
            urls: GQL.ICEServerUrlsArgs,
            username: GQL.ICEServerUsernameArgs,
            credential: GQL.ICEServerCredentialArgs,
        }
    >;
    ConferenceMedia?: ComplexTypedResolver<
        GQL.ConferenceMedia,
        GQLRoots.ConferenceMediaRoot,
        {
            streams: GQLRoots.MediaStreamRoot[],
            iceServers: GQLRoots.ICEServerRoot[],
            localMedia: GQLRoots.LocalMediaStateRoot,
        },
        {
            id: GQL.ConferenceMediaIdArgs,
            streams: GQL.ConferenceMediaStreamsArgs,
            iceServers: GQL.ConferenceMediaIceServersArgs,
            localMedia: GQL.ConferenceMediaLocalMediaArgs,
        }
    >;
    MediaStreamState?: EnumTypeResolver<'WAIT_OFFER' | 'NEED_OFFER' | 'WAIT_ANSWER' | 'NEED_ANSWER' | 'READY', GQLRoots.MediaStreamStateRoot>;
    IceTransportPolicy?: EnumTypeResolver<'ALL' | 'RELAY' | 'NONE', GQLRoots.IceTransportPolicyRoot>;
    VideoSource?: EnumTypeResolver<'CAMERA' | 'SCREEN', GQLRoots.VideoSourceRoot>;
    MediaKind?: EnumTypeResolver<'AUDIO' | 'VIDEO', GQLRoots.MediaKindRoot>;
    MediaSender?: ComplexTypedResolver<
        GQL.MediaSender,
        GQLRoots.MediaSenderRoot,
        {
        },
        {
            kind: GQL.MediaSenderKindArgs,
            videoSource: GQL.MediaSenderVideoSourceArgs,
            codecParams: GQL.MediaSenderCodecParamsArgs,
            mid: GQL.MediaSenderMidArgs,
        }
    >;
    MediaReceiver?: ComplexTypedResolver<
        GQL.MediaReceiver,
        GQLRoots.MediaReceiverRoot,
        {
        },
        {
            peerId: GQL.MediaReceiverPeerIdArgs,
            kind: GQL.MediaReceiverKindArgs,
            videoSource: GQL.MediaReceiverVideoSourceArgs,
            mid: GQL.MediaReceiverMidArgs,
        }
    >;
    MediaStream?: ComplexTypedResolver<
        GQL.MediaStream,
        GQLRoots.MediaStreamRoot,
        {
            receivers: GQLRoots.MediaReceiverRoot[],
            senders: GQLRoots.MediaSenderRoot[],
            settings: GQLRoots.MediaStreamSettingsRoot,
            mediaState: GQLRoots.MediaStreamMediaStateRoot,
            localStreams: GQLRoots.LocalStreamConfigRoot[],
        },
        {
            id: GQL.MediaStreamIdArgs,
            seq: GQL.MediaStreamSeqArgs,
            state: GQL.MediaStreamStateArgs,
            sdp: GQL.MediaStreamSdpArgs,
            ice: GQL.MediaStreamIceArgs,
            iceTransportPolicy: GQL.MediaStreamIceTransportPolicyArgs,
            receivers: GQL.MediaStreamReceiversArgs,
            senders: GQL.MediaStreamSendersArgs,
            settings: GQL.MediaStreamSettingsArgs,
            mediaState: GQL.MediaStreamMediaStateArgs,
            localStreams: GQL.MediaStreamLocalStreamsArgs,
            peerId: GQL.MediaStreamPeerIdArgs,
        }
    >;
    MediaDirection?: EnumTypeResolver<'SEND' | 'RECEIVE', GQLRoots.MediaDirectionRoot>;
    ConferenceJoinResult?: ComplexTypedResolver<
        GQL.ConferenceJoinResult,
        GQLRoots.ConferenceJoinResultRoot,
        {
            conference: GQLRoots.ConferenceRoot,
        },
        {
            peerId: GQL.ConferenceJoinResultPeerIdArgs,
            conference: GQL.ConferenceJoinResultConferenceArgs,
        }
    >;
    LocalMediaState?: ComplexTypedResolver<
        GQL.LocalMediaState,
        GQLRoots.LocalMediaStateRoot,
        {
        },
        {
            sendVideo: GQL.LocalMediaStateSendVideoArgs,
            sendAudio: GQL.LocalMediaStateSendAudioArgs,
            sendScreencast: GQL.LocalMediaStateSendScreencastArgs,
        }
    >;
    Contact?: ComplexTypedResolver<
        GQL.Contact,
        GQLRoots.ContactRoot,
        {
            user: GQLRoots.UserRoot,
        },
        {
            id: GQL.ContactIdArgs,
            user: GQL.ContactUserArgs,
        }
    >;
    ContactConnection?: ComplexTypedResolver<
        GQL.ContactConnection,
        GQLRoots.ContactConnectionRoot,
        {
            items: GQLRoots.ContactRoot[],
        },
        {
            items: GQL.ContactConnectionItemsArgs,
            cursor: GQL.ContactConnectionCursorArgs,
        }
    >;
    ContactsUpdateContainer?: ComplexTypedResolver<
        GQL.ContactsUpdateContainer,
        GQLRoots.ContactsUpdateContainerRoot,
        {
            updates: GQLRoots.ContactsUpdateRoot[],
        },
        {
            updates: GQL.ContactsUpdateContainerUpdatesArgs,
            state: GQL.ContactsUpdateContainerStateArgs,
        }
    >;
    ContactsUpdate?: UnionTypeResolver<GQLRoots.ContactsUpdateRoot, 'ContactAdded' | 'ContactRemoved'>;
    ContactAdded?: ComplexTypedResolver<
        GQL.ContactAdded,
        GQLRoots.ContactAddedRoot,
        {
            contact: GQLRoots.ContactRoot,
        },
        {
            contact: GQL.ContactAddedContactArgs,
        }
    >;
    ContactRemoved?: ComplexTypedResolver<
        GQL.ContactRemoved,
        GQLRoots.ContactRemovedRoot,
        {
            contact: GQLRoots.ContactRoot,
        },
        {
            contact: GQL.ContactRemovedContactArgs,
        }
    >;
    ContactsState?: ComplexTypedResolver<
        GQL.ContactsState,
        GQLRoots.ContactsStateRoot,
        {
        },
        {
            state: GQL.ContactsStateStateArgs,
        }
    >;
    DialogUpdateSingle?: ComplexTypedResolver<
        GQL.DialogUpdateSingle,
        GQLRoots.DialogUpdateSingleRoot,
        {
            update: GQLRoots.DialogUpdateRoot,
        },
        {
            seq: GQL.DialogUpdateSingleSeqArgs,
            state: GQL.DialogUpdateSingleStateArgs,
            update: GQL.DialogUpdateSingleUpdateArgs,
        }
    >;
    DialogUpdateBatch?: ComplexTypedResolver<
        GQL.DialogUpdateBatch,
        GQLRoots.DialogUpdateBatchRoot,
        {
            updates: GQLRoots.DialogUpdateRoot[],
        },
        {
            updates: GQL.DialogUpdateBatchUpdatesArgs,
            fromSeq: GQL.DialogUpdateBatchFromSeqArgs,
            seq: GQL.DialogUpdateBatchSeqArgs,
            state: GQL.DialogUpdateBatchStateArgs,
        }
    >;
    DialogUpdateContainer?: UnionTypeResolver<GQLRoots.DialogUpdateContainerRoot, 'DialogUpdateSingle' | 'DialogUpdateBatch'>;
    DialogUpdate?: UnionTypeResolver<GQLRoots.DialogUpdateRoot, 'DialogMessageReceived' | 'DialogMessageUpdated' | 'DialogMessageDeleted' | 'DialogMessageRead' | 'DialogTitleUpdated' | 'DialogDeleted' | 'DialogPhotoUpdated' | 'DialogMuteChanged' | 'DialogMentionedChanged' | 'DialogBump' | 'DialogPeerUpdated' | 'DialogCallStateChanged' | 'DialogGotAccess' | 'DialogLostAccess'>;
    SilentMessageInfo?: ComplexTypedResolver<
        GQL.SilentMessageInfo,
        GQLRoots.SilentMessageInfoRoot,
        {
        },
        {
            mobile: GQL.SilentMessageInfoMobileArgs,
            desktop: GQL.SilentMessageInfoDesktopArgs,
        }
    >;
    ShowNotificationMessageInfo?: ComplexTypedResolver<
        GQL.ShowNotificationMessageInfo,
        GQLRoots.ShowNotificationMessageInfoRoot,
        {
        },
        {
            mobile: GQL.ShowNotificationMessageInfoMobileArgs,
            desktop: GQL.ShowNotificationMessageInfoDesktopArgs,
        }
    >;
    DialogMessageReceived?: ComplexTypedResolver<
        GQL.DialogMessageReceived,
        GQLRoots.DialogMessageReceivedRoot,
        {
            message: GQLRoots.ConversationMessageRoot,
            betaMessage: GQLRoots.RoomMessageRoot,
            alphaMessage: GQLRoots.ModernMessageRoot,
            silent: GQLRoots.SilentMessageInfoRoot,
            showNotification: GQLRoots.SilentMessageInfoRoot,
        },
        {
            cid: GQL.DialogMessageReceivedCidArgs,
            message: GQL.DialogMessageReceivedMessageArgs,
            betaMessage: GQL.DialogMessageReceivedBetaMessageArgs,
            alphaMessage: GQL.DialogMessageReceivedAlphaMessageArgs,
            unread: GQL.DialogMessageReceivedUnreadArgs,
            globalUnread: GQL.DialogMessageReceivedGlobalUnreadArgs,
            haveMention: GQL.DialogMessageReceivedHaveMentionArgs,
            silent: GQL.DialogMessageReceivedSilentArgs,
            showNotification: GQL.DialogMessageReceivedShowNotificationArgs,
            membership: GQL.DialogMessageReceivedMembershipArgs,
        }
    >;
    DialogMessageUpdated?: ComplexTypedResolver<
        GQL.DialogMessageUpdated,
        GQLRoots.DialogMessageUpdatedRoot,
        {
            message: GQLRoots.ConversationMessageRoot,
            betaMessage: GQLRoots.RoomMessageRoot,
            alphaMessage: GQLRoots.ModernMessageRoot,
        },
        {
            cid: GQL.DialogMessageUpdatedCidArgs,
            message: GQL.DialogMessageUpdatedMessageArgs,
            betaMessage: GQL.DialogMessageUpdatedBetaMessageArgs,
            alphaMessage: GQL.DialogMessageUpdatedAlphaMessageArgs,
            haveMention: GQL.DialogMessageUpdatedHaveMentionArgs,
        }
    >;
    DialogMessageDeleted?: ComplexTypedResolver<
        GQL.DialogMessageDeleted,
        GQLRoots.DialogMessageDeletedRoot,
        {
            message: GQLRoots.ConversationMessageRoot,
            betaMessage: GQLRoots.RoomMessageRoot,
            prevMessage: Nullable<GQLRoots.RoomMessageRoot>,
            alphaPrevMessage: Nullable<GQLRoots.ModernMessageRoot>,
            alphaMessage: GQLRoots.ModernMessageRoot,
        },
        {
            cid: GQL.DialogMessageDeletedCidArgs,
            message: GQL.DialogMessageDeletedMessageArgs,
            betaMessage: GQL.DialogMessageDeletedBetaMessageArgs,
            prevMessage: GQL.DialogMessageDeletedPrevMessageArgs,
            alphaPrevMessage: GQL.DialogMessageDeletedAlphaPrevMessageArgs,
            alphaMessage: GQL.DialogMessageDeletedAlphaMessageArgs,
            unread: GQL.DialogMessageDeletedUnreadArgs,
            globalUnread: GQL.DialogMessageDeletedGlobalUnreadArgs,
            haveMention: GQL.DialogMessageDeletedHaveMentionArgs,
        }
    >;
    DialogMessageRead?: ComplexTypedResolver<
        GQL.DialogMessageRead,
        GQLRoots.DialogMessageReadRoot,
        {
        },
        {
            cid: GQL.DialogMessageReadCidArgs,
            mid: GQL.DialogMessageReadMidArgs,
            unread: GQL.DialogMessageReadUnreadArgs,
            globalUnread: GQL.DialogMessageReadGlobalUnreadArgs,
            haveMention: GQL.DialogMessageReadHaveMentionArgs,
        }
    >;
    DialogTitleUpdated?: ComplexTypedResolver<
        GQL.DialogTitleUpdated,
        GQLRoots.DialogTitleUpdatedRoot,
        {
        },
        {
            cid: GQL.DialogTitleUpdatedCidArgs,
            title: GQL.DialogTitleUpdatedTitleArgs,
        }
    >;
    DialogPhotoUpdated?: ComplexTypedResolver<
        GQL.DialogPhotoUpdated,
        GQLRoots.DialogPhotoUpdatedRoot,
        {
        },
        {
            cid: GQL.DialogPhotoUpdatedCidArgs,
            photo: GQL.DialogPhotoUpdatedPhotoArgs,
        }
    >;
    DialogDeleted?: ComplexTypedResolver<
        GQL.DialogDeleted,
        GQLRoots.DialogDeletedRoot,
        {
        },
        {
            cid: GQL.DialogDeletedCidArgs,
            globalUnread: GQL.DialogDeletedGlobalUnreadArgs,
        }
    >;
    DialogBump?: ComplexTypedResolver<
        GQL.DialogBump,
        GQLRoots.DialogBumpRoot,
        {
            topMessage: Nullable<GQLRoots.ModernMessageRoot>,
        },
        {
            cid: GQL.DialogBumpCidArgs,
            globalUnread: GQL.DialogBumpGlobalUnreadArgs,
            unread: GQL.DialogBumpUnreadArgs,
            topMessage: GQL.DialogBumpTopMessageArgs,
            haveMention: GQL.DialogBumpHaveMentionArgs,
            membership: GQL.DialogBumpMembershipArgs,
        }
    >;
    DialogGotAccess?: ComplexTypedResolver<
        GQL.DialogGotAccess,
        GQLRoots.DialogGotAccessRoot,
        {
        },
        {
            cid: GQL.DialogGotAccessCidArgs,
        }
    >;
    DialogLostAccess?: ComplexTypedResolver<
        GQL.DialogLostAccess,
        GQLRoots.DialogLostAccessRoot,
        {
        },
        {
            cid: GQL.DialogLostAccessCidArgs,
        }
    >;
    DialogMuteChanged?: ComplexTypedResolver<
        GQL.DialogMuteChanged,
        GQLRoots.DialogMuteChangedRoot,
        {
        },
        {
            cid: GQL.DialogMuteChangedCidArgs,
            mute: GQL.DialogMuteChangedMuteArgs,
            globalUnread: GQL.DialogMuteChangedGlobalUnreadArgs,
        }
    >;
    DialogPeerUpdated?: ComplexTypedResolver<
        GQL.DialogPeerUpdated,
        GQLRoots.DialogPeerUpdatedRoot,
        {
            peer: GQLRoots.RoomRoot,
        },
        {
            cid: GQL.DialogPeerUpdatedCidArgs,
            peer: GQL.DialogPeerUpdatedPeerArgs,
        }
    >;
    DialogCallStateChanged?: ComplexTypedResolver<
        GQL.DialogCallStateChanged,
        GQLRoots.DialogCallStateChangedRoot,
        {
        },
        {
            cid: GQL.DialogCallStateChangedCidArgs,
            hasActiveCall: GQL.DialogCallStateChangedHasActiveCallArgs,
        }
    >;
    DialogMentionedChanged?: ComplexTypedResolver<
        GQL.DialogMentionedChanged,
        GQLRoots.DialogMentionedChangedRoot,
        {
        },
        {
            cid: GQL.DialogMentionedChangedCidArgs,
            haveMention: GQL.DialogMentionedChangedHaveMentionArgs,
        }
    >;
    DialogUpdateState?: ComplexTypedResolver<
        GQL.DialogUpdateState,
        GQLRoots.DialogUpdateStateRoot,
        {
        },
        {
            state: GQL.DialogUpdateStateStateArgs,
        }
    >;
    Draft?: ComplexTypedResolver<
        GQL.Draft,
        GQLRoots.DraftRoot,
        {
        },
        {
            message: GQL.DraftMessageArgs,
            date: GQL.DraftDateArgs,
            version: GQL.DraftVersionArgs,
        }
    >;
    EnvVar?: ComplexTypedResolver<
        GQL.EnvVar,
        GQLRoots.EnvVarRoot,
        {
        },
        {
            name: GQL.EnvVarNameArgs,
            value: GQL.EnvVarValueArgs,
        }
    >;
    FeedUpdateContainer?: ComplexTypedResolver<
        GQL.FeedUpdateContainer,
        GQLRoots.FeedUpdateContainerRoot,
        {
            updates: GQLRoots.FeedUpdateRoot[],
        },
        {
            updates: GQL.FeedUpdateContainerUpdatesArgs,
            state: GQL.FeedUpdateContainerStateArgs,
        }
    >;
    FeedUpdate?: UnionTypeResolver<GQLRoots.FeedUpdateRoot, 'FeedItemReceived' | 'FeedItemUpdated' | 'FeedItemDeleted' | 'FeedRebuildNeeded'>;
    FeedItemReceived?: ComplexTypedResolver<
        GQL.FeedItemReceived,
        GQLRoots.FeedItemReceivedRoot,
        {
            item: GQLRoots.FeedItemRoot,
        },
        {
            item: GQL.FeedItemReceivedItemArgs,
        }
    >;
    FeedItemUpdated?: ComplexTypedResolver<
        GQL.FeedItemUpdated,
        GQLRoots.FeedItemUpdatedRoot,
        {
            item: GQLRoots.FeedItemRoot,
        },
        {
            item: GQL.FeedItemUpdatedItemArgs,
        }
    >;
    FeedItemDeleted?: ComplexTypedResolver<
        GQL.FeedItemDeleted,
        GQLRoots.FeedItemDeletedRoot,
        {
            item: GQLRoots.FeedItemRoot,
        },
        {
            item: GQL.FeedItemDeletedItemArgs,
        }
    >;
    FeedRebuildNeeded?: ComplexTypedResolver<
        GQL.FeedRebuildNeeded,
        GQLRoots.FeedRebuildNeededRoot,
        {
            homeFeed: GQLRoots.FeedItemConnectionRoot,
        },
        {
            homeFeed: GQL.FeedRebuildNeededHomeFeedArgs,
        }
    >;
    GeoLocation?: ComplexTypedResolver<
        GQL.GeoLocation,
        GQLRoots.GeoLocationRoot,
        {
        },
        {
            long: GQL.GeoLocationLongArgs,
            lat: GQL.GeoLocationLatArgs,
        }
    >;
    IpLocation?: ComplexTypedResolver<
        GQL.IpLocation,
        GQLRoots.IpLocationRoot,
        {
            location: Nullable<GQLRoots.GeoLocationRoot>,
        },
        {
            ip: GQL.IpLocationIpArgs,
            countryCode: GQL.IpLocationCountryCodeArgs,
            locationName: GQL.IpLocationLocationNameArgs,
            location: GQL.IpLocationLocationArgs,
        }
    >;
    ImageSticker?: ComplexTypedResolver<
        GQL.ImageSticker,
        GQLRoots.ImageStickerRoot,
        {
            image: GQLRoots.ImageRefRoot,
            pack: GQLRoots.StickerPackRoot,
        },
        {
            id: GQL.ImageStickerIdArgs,
            image: GQL.ImageStickerImageArgs,
            pack: GQL.ImageStickerPackArgs,
            emoji: GQL.ImageStickerEmojiArgs,
        }
    >;
    Sticker?: UnionTypeResolver<GQLRoots.StickerRoot, 'ImageSticker'>;
    StickerPack?: ComplexTypedResolver<
        GQL.StickerPack,
        GQLRoots.StickerPackRoot,
        {
            stickers: GQLRoots.StickerRoot[],
            author: GQLRoots.UserRoot,
        },
        {
            id: GQL.StickerPackIdArgs,
            title: GQL.StickerPackTitleArgs,
            stickers: GQL.StickerPackStickersArgs,
            author: GQL.StickerPackAuthorArgs,
            usesCount: GQL.StickerPackUsesCountArgs,
            added: GQL.StickerPackAddedArgs,
            published: GQL.StickerPackPublishedArgs,
        }
    >;
    UserStickers?: ComplexTypedResolver<
        GQL.UserStickers,
        GQLRoots.UserStickersRoot,
        {
            packs: GQLRoots.StickerPackRoot[],
            favorites: GQLRoots.StickerRoot[],
        },
        {
            packs: GQL.UserStickersPacksArgs,
            favorites: GQL.UserStickersFavoritesArgs,
        }
    >;
    MessageReaction?: ComplexTypedResolver<
        GQL.MessageReaction,
        GQLRoots.MessageReactionRoot,
        {
            user: GQLRoots.UserRoot,
        },
        {
            user: GQL.MessageReactionUserArgs,
            reaction: GQL.MessageReactionReactionArgs,
        }
    >;
    MessageAttachment?: ComplexTypedResolver<
        GQL.MessageAttachment,
        GQLRoots.MessageAttachmentRoot,
        {
            fileMetadata: Nullable<GQLRoots.FileMetadataRoot>,
        },
        {
            fileId: GQL.MessageAttachmentFileIdArgs,
            fileMetadata: GQL.MessageAttachmentFileMetadataArgs,
            filePreview: GQL.MessageAttachmentFilePreviewArgs,
        }
    >;
    MessageButtonStyle?: EnumTypeResolver<'DEFAULT' | 'LIGHT', GQLRoots.MessageButtonStyleRoot>;
    MessageButton?: ComplexTypedResolver<
        GQL.MessageButton,
        GQLRoots.MessageButtonRoot,
        {
        },
        {
            title: GQL.MessageButtonTitleArgs,
            style: GQL.MessageButtonStyleArgs,
            id: GQL.MessageButtonIdArgs,
        }
    >;
    MessageType?: EnumTypeResolver<'MESSAGE' | 'POST', GQLRoots.MessageTypeRoot>;
    PostMessageType?: EnumTypeResolver<'BLANK' | 'JOB_OPPORTUNITY' | 'OFFICE_HOURS' | 'REQUEST_FOR_STARTUPS', GQLRoots.PostMessageTypeRoot>;
    Mutation?: ComplexTypedResolver<
        GQL.Mutation,
        GQLRoots.MutationRoot,
        {
            alphaSendMessage: GQLRoots.ConversationEventMessageRoot,
            alphaReadChat: GQLRoots.ChatReadResultRoot,
            alphaEditMessage: GQLRoots.ConversationEventEditMessageRoot,
            alphaSendIntro: GQLRoots.ConversationEventMessageRoot,
            alphaEditIntro: GQLRoots.ConversationEventMessageRoot,
            alphaDeleteMessageUrlAugmentation: GQLRoots.ConversationEventMessageRoot,
            alphaDeleteMessage: GQLRoots.ConversationEventDeleteRoot,
            alphaChatCreateGroup: GQLRoots.ConversationRoot,
            alphaChatUpdateGroup: GQLRoots.ConversationUpdateResponseRoot,
            alphaChatChangeGroupTitle: GQLRoots.GroupChatUpdateResponseRoot,
            alphaChatInviteToGroup: GQLRoots.GroupChatUpdateResponseRoot,
            alphaChatKickFromGroup: GQLRoots.GroupChatUpdateResponseRoot,
            alphaChatChangeRoleInGroup: GQLRoots.GroupChatUpdateResponseRoot,
            alphaChatCopyGroup: GQLRoots.GroupChatUpdateResponseRoot,
            alphaChatLeave: GQLRoots.ConversationUpdateResponseRoot,
            alphaUpdateConversationSettings: GQLRoots.ConversationSettingsRoot,
            cardCreateSetupIntent: GQLRoots.CardSetupIntentRoot,
            cardCommitSetupIntent: GQLRoots.CreditCardRoot,
            cardRemove: GQLRoots.CreditCardRoot,
            cardMakeDefault: GQLRoots.CreditCardRoot,
            cardDepositIntent: GQLRoots.PaymentIntentRoot,
            subscriptionCancel: GQLRoots.WalletSubscriptionRoot,
            channelCreate: GQLRoots.ChannelRoot,
            channelCreatePublic: GQLRoots.ChannelRoot,
            debugCreateTestUser: GQLRoots.UserRoot,
            debugFixStickerPack: Nullable<GQLRoots.StickerPackRoot>,
            settingsUpdate: GQLRoots.SettingsRoot,
            updateSettings: GQLRoots.SettingsRoot,
            conferenceAlterMediaState: GQLRoots.ConferenceRoot,
            conferenceAddScreenShare: GQLRoots.ConferenceRoot,
            conferenceRemoveScreenShare: GQLRoots.ConferenceRoot,
            conferenceAlterSettings: GQLRoots.ConferenceRoot,
            mediaStreamNegotiationNeeded: GQLRoots.ConferenceMediaRoot,
            createOauthApp: GQLRoots.OauthAppRoot,
            updateOauthApp: GQLRoots.OauthAppRoot,
            betaOrganizationMemberRequestApprove: GQLRoots.OrganizationRoot,
            betaOrganizationMemberRemove: GQLRoots.OrganizationRoot,
            betaOrganizationMemberAdd: GQLRoots.OrganizationRoot,
            alphaOrganizationMemberAdd: GQLRoots.OrganizationJoinedMemberRoot[],
            alphaOrganizationRefreshInviteLink: GQLRoots.InviteRoot,
            alphaOrganizationCreatePublicInvite: GQLRoots.InviteRoot,
            profileCreate: GQLRoots.ProfileRoot,
            profileUpdate: GQLRoots.ProfileRoot,
            createProfile: GQLRoots.ProfileRoot,
            updateProfile: GQLRoots.ProfileRoot,
            alphaCreateUserProfileAndOrganization: GQLRoots.AlphaSignupDataRoot,
            superAccountAdd: GQLRoots.SuperAccountRoot,
            superAccountRename: GQLRoots.SuperAccountRoot,
            superAccountActivate: GQLRoots.SuperAccountRoot,
            superAccountSuspend: GQLRoots.SuperAccountRoot,
            superAccountPend: GQLRoots.SuperAccountRoot,
            superAccountMemberAdd: GQLRoots.SuperAccountRoot,
            superAccountMemberRemove: GQLRoots.SuperAccountRoot,
            alphaAlterPublished: GQLRoots.OrganizationRoot,
            discoverCollectionsCreate: GQLRoots.DiscoverChatsCollectionRoot,
            discoverCollectionsUpdate: GQLRoots.DiscoverChatsCollectionRoot,
            discoverEditorsChoiceCreate: GQLRoots.EditorsChoiceChatRoot,
            discoverEditorsChoiceUpdate: GQLRoots.EditorsChoiceChatRoot,
            createApp: GQLRoots.AppProfileRoot,
            createSuperApp: GQLRoots.AppProfileRoot,
            refreshAppToken: GQLRoots.AppProfileRoot,
            updateAppProfile: GQLRoots.AppProfileRoot,
            addAppToChat: GQLRoots.AppChatRoot,
            userStorageSet: GQLRoots.AppStorageValueRoot[],
            betaAddComment: GQLRoots.CommentEntryRoot,
            betaAddStickerComment: GQLRoots.CommentEntryRoot,
            conferenceJoin: GQLRoots.ConferenceJoinResultRoot,
            conferenceKeepAlive: GQLRoots.ConferenceRoot,
            conferenceLeave: GQLRoots.ConferenceRoot,
            conferenceRequestLocalMediaChange: GQLRoots.ConferenceRoot,
            mediaStreamOffer: GQLRoots.ConferenceMediaRoot,
            mediaStreamAnswer: GQLRoots.ConferenceMediaRoot,
            mediaStreamCandidate: GQLRoots.ConferenceMediaRoot,
            mediaStreamFailed: GQLRoots.ConferenceMediaRoot,
            conversationDraftUpdate: GQLRoots.DraftRoot,
            stickerPackCreate: GQLRoots.StickerPackRoot,
            stickerPackUpdate: GQLRoots.StickerPackRoot,
            stickerPackAddSticker: GQLRoots.StickerRoot,
            readNotification: GQLRoots.NotificationCenterRoot,
            updateOrganizationProfile: GQLRoots.OrganizationProfileRoot,
            createOrganization: GQLRoots.OrganizationRoot,
            postDraftCreate: GQLRoots.PostDraftRoot,
            postDraftUpdate: GQLRoots.PostDraftRoot,
            postDraftPublish: GQLRoots.PostRoot,
            betaDiscoverSkip: Nullable<GQLRoots.DiscoverPageRoot>,
            betaNextDiscoverPageOrChats: Nullable<GQLRoots.DiscoverPageRoot>,
            betaSaveSelectedTags: Nullable<GQLRoots.DiscoverPageRoot>,
            betaSubmitNextDiscover: Nullable<GQLRoots.DiscoverPageRoot>,
            matchmakingRoomSave: GQLRoots.MatchmakingRoomRoot,
            matchmakingProfileFill: GQLRoots.MatchmakingProfileRoot,
            superBadgeCreateToRoom: GQLRoots.UserBadgeRoot,
            badgeCreate: GQLRoots.UserRoot,
            badgeCreateToRoom: GQLRoots.UserBadgeRoot,
            badgeSetToRoom: GQLRoots.UserBadgeRoot,
            badgeDelete: GQLRoots.UserRoot,
            badgeSetPrimary: GQLRoots.UserRoot,
            badgeUnsetPrimary: GQLRoots.UserRoot,
            superBadgeCreate: GQLRoots.UserRoot,
            superBadgeSetToRoom: GQLRoots.UserBadgeRoot,
            superBadgeDelete: GQLRoots.UserRoot,
            superBadgeVerify: GQLRoots.UserRoot,
            superBadgeUnverify: GQLRoots.UserRoot,
            alphaCreateFeedPost: GQLRoots.FeedItemRoot,
            alphaEditFeedPost: GQLRoots.FeedItemRoot,
            alphaFeedCreateChannel: GQLRoots.FeedChannelRoot,
            alphaFeedUpdateChannel: GQLRoots.FeedChannelRoot,
            betaPinMessage: GQLRoots.SharedRoomRoot,
            betaUnpinMessage: GQLRoots.SharedRoomRoot,
            gammaPinMessage: GQLRoots.RoomRoot,
            gammaUnpinMessage: GQLRoots.RoomRoot,
            betaRoomCreate: GQLRoots.SharedRoomRoot,
            betaRoomUpdate: GQLRoots.RoomRoot,
            betaRoomMove: GQLRoots.RoomRoot,
            betaRoomInvite: GQLRoots.RoomRoot,
            alphaRoomInvite: GQLRoots.RoomMemberRoot[],
            betaRoomKick: GQLRoots.RoomRoot,
            betaRoomLeave: GQLRoots.RoomRoot,
            betaRoomChangeRole: GQLRoots.RoomRoot,
            betaRoomJoin: GQLRoots.RoomRoot,
            betaRoomsJoin: GQLRoots.RoomRoot[],
            betaRoomDeclineJoinRequest: GQLRoots.RoomRoot,
            betaBuyPremiumChatSubscription: GQLRoots.SharedRoomRoot,
            betaBuyPremiumChatPass: GQLRoots.SharedRoomRoot,
            betaRoomInviteLinkJoin: GQLRoots.RoomRoot,
            betaRoomUpdateUserNotificationSettings: GQLRoots.RoomUserNotificaionSettingsRoot,
            betaRoomsInviteUser: GQLRoots.RoomRoot[],
            betaRoomAlterFeatured: GQLRoots.RoomSuperRoot,
            betaRoomAlterListed: GQLRoots.RoomSuperRoot,
            betaRoomSetupAutosubscribe: GQLRoots.RoomSuperRoot,
        },
        {
            lifecheck: GQL.MutationLifecheckArgs,
            alphaSendMessage: GQL.MutationAlphaSendMessageArgs,
            alphaReadChat: GQL.MutationAlphaReadChatArgs,
            alphaEditMessage: GQL.MutationAlphaEditMessageArgs,
            alphaSendIntro: GQL.MutationAlphaSendIntroArgs,
            alphaEditIntro: GQL.MutationAlphaEditIntroArgs,
            alphaDeleteMessageUrlAugmentation: GQL.MutationAlphaDeleteMessageUrlAugmentationArgs,
            alphaDeleteMessage: GQL.MutationAlphaDeleteMessageArgs,
            alphaChatSetReaction: GQL.MutationAlphaChatSetReactionArgs,
            alphaChatUnsetReaction: GQL.MutationAlphaChatUnsetReactionArgs,
            alphaGlobalRead: GQL.MutationAlphaGlobalReadArgs,
            alphaBlockUser: GQL.MutationAlphaBlockUserArgs,
            alphaUnblockUser: GQL.MutationAlphaUnblockUserArgs,
            alphaChatCreateGroup: GQL.MutationAlphaChatCreateGroupArgs,
            alphaChatUpdateGroup: GQL.MutationAlphaChatUpdateGroupArgs,
            alphaChatChangeGroupTitle: GQL.MutationAlphaChatChangeGroupTitleArgs,
            alphaChatInviteToGroup: GQL.MutationAlphaChatInviteToGroupArgs,
            alphaChatKickFromGroup: GQL.MutationAlphaChatKickFromGroupArgs,
            alphaChatChangeRoleInGroup: GQL.MutationAlphaChatChangeRoleInGroupArgs,
            alphaChatCopyGroup: GQL.MutationAlphaChatCopyGroupArgs,
            alphaChatLeave: GQL.MutationAlphaChatLeaveArgs,
            alphaUpdateConversationSettings: GQL.MutationAlphaUpdateConversationSettingsArgs,
            cardCreateSetupIntent: GQL.MutationCardCreateSetupIntentArgs,
            cardCommitSetupIntent: GQL.MutationCardCommitSetupIntentArgs,
            cardRemove: GQL.MutationCardRemoveArgs,
            cardMakeDefault: GQL.MutationCardMakeDefaultArgs,
            cardDepositEnqueue: GQL.MutationCardDepositEnqueueArgs,
            cardDepositIntent: GQL.MutationCardDepositIntentArgs,
            paymentIntentCommit: GQL.MutationPaymentIntentCommitArgs,
            paymentCancel: GQL.MutationPaymentCancelArgs,
            subscriptionCancel: GQL.MutationSubscriptionCancelArgs,
            alphaJoinInvite: GQL.MutationAlphaJoinInviteArgs,
            joinAppInvite: GQL.MutationJoinAppInviteArgs,
            phonebookAdd: GQL.MutationPhonebookAddArgs,
            channelCreate: GQL.MutationChannelCreateArgs,
            channelCreatePublic: GQL.MutationChannelCreatePublicArgs,
            debugSendSMS: GQL.MutationDebugSendSMSArgs,
            debugSerializeId: GQL.MutationDebugSerializeIdArgs,
            debugSendEmail: GQL.MutationDebugSendEmailArgs,
            debugCreateTestUser: GQL.MutationDebugCreateTestUserArgs,
            debugDeleteUrlInfoCache: GQL.MutationDebugDeleteUrlInfoCacheArgs,
            debugDeleteUrlInfoCacheAll: GQL.MutationDebugDeleteUrlInfoCacheAllArgs,
            debugSuperNotifications: GQL.MutationDebugSuperNotificationsArgs,
            debugCalcUsersMessagingStats: GQL.MutationDebugCalcUsersMessagingStatsArgs,
            debugCalcUsersChatsStats: GQL.MutationDebugCalcUsersChatsStatsArgs,
            debugConvertOrgChatToNormal: GQL.MutationDebugConvertOrgChatToNormalArgs,
            debugDeleteEmptyOrgChats: GQL.MutationDebugDeleteEmptyOrgChatsArgs,
            debugFixCommentsVisibility: GQL.MutationDebugFixCommentsVisibilityArgs,
            debugSetCommentVisibility: GQL.MutationDebugSetCommentVisibilityArgs,
            debugRemoveDeletedDialogs: GQL.MutationDebugRemoveDeletedDialogsArgs,
            debugReindexOrgs: GQL.MutationDebugReindexOrgsArgs,
            debugCalcRoomsActiveMembers: GQL.MutationDebugCalcRoomsActiveMembersArgs,
            debugCalcOrgsActiveMembers: GQL.MutationDebugCalcOrgsActiveMembersArgs,
            debugCreateCommentSubscriptions: GQL.MutationDebugCreateCommentSubscriptionsArgs,
            debugDeveloperInit: GQL.MutationDebugDeveloperInitArgs,
            debugResetAudienceCounter: GQL.MutationDebugResetAudienceCounterArgs,
            debugCalcUsersAudienceCounter: GQL.MutationDebugCalcUsersAudienceCounterArgs,
            debugCalcUsers2WayDirectChatsCounter: GQL.MutationDebugCalcUsers2WayDirectChatsCounterArgs,
            debugFixMessage: GQL.MutationDebugFixMessageArgs,
            debugEnableNotificationCenterForAll: GQL.MutationDebugEnableNotificationCenterForAllArgs,
            debugResetGlobalCounters: GQL.MutationDebugResetGlobalCountersArgs,
            debugCalcGlobalCountersForAll: GQL.MutationDebugCalcGlobalCountersForAllArgs,
            debugValidateGlobalCountersForAll: GQL.MutationDebugValidateGlobalCountersForAllArgs,
            debugCreateBigChat: GQL.MutationDebugCreateBigChatArgs,
            debugFlood: GQL.MutationDebugFloodArgs,
            debugQueueDailyEngagementReport: GQL.MutationDebugQueueDailyEngagementReportArgs,
            debugQueueDailyOnboardingReport: GQL.MutationDebugQueueDailyOnboardingReportArgs,
            debugQueueWeeklyEngagementReport: GQL.MutationDebugQueueWeeklyEngagementReportArgs,
            debugQueueWeeklyOnboardingReport: GQL.MutationDebugQueueWeeklyOnboardingReportArgs,
            debugQueueWeeklyUserLeaderboard: GQL.MutationDebugQueueWeeklyUserLeaderboardArgs,
            debugQueueWeeklyRoomLeaderboard: GQL.MutationDebugQueueWeeklyRoomLeaderboardArgs,
            debugQueueWeeklyRoomByMessagesLeaderboard: GQL.MutationDebugQueueWeeklyRoomByMessagesLeaderboardArgs,
            debugReindexUserProfiles: GQL.MutationDebugReindexUserProfilesArgs,
            debugReindexRoomProfiles: GQL.MutationDebugReindexRoomProfilesArgs,
            debugSendPush: GQL.MutationDebugSendPushArgs,
            debugReindexPrivateDialogs: GQL.MutationDebugReindexPrivateDialogsArgs,
            debugReindexUsersDialogs: GQL.MutationDebugReindexUsersDialogsArgs,
            debugReindexFeedEvents: GQL.MutationDebugReindexFeedEventsArgs,
            debugChangeUserEmail: GQL.MutationDebugChangeUserEmailArgs,
            debugSwapUserEmails: GQL.MutationDebugSwapUserEmailsArgs,
            debugFindUsefulCommunities: GQL.MutationDebugFindUsefulCommunitiesArgs,
            debugFixStickerPack: GQL.MutationDebugFixStickerPackArgs,
            debugReverseStickers: GQL.MutationDebugReverseStickersArgs,
            debugReindexShortnames: GQL.MutationDebugReindexShortnamesArgs,
            debugFixHyperlogEvent: GQL.MutationDebugFixHyperlogEventArgs,
            debugReindexFeedChannelAdmins: GQL.MutationDebugReindexFeedChannelAdminsArgs,
            debugReindexFeedChannels: GQL.MutationDebugReindexFeedChannelsArgs,
            debugReindexFeedTopics: GQL.MutationDebugReindexFeedTopicsArgs,
            debugCalcChannelPostsCount: GQL.MutationDebugCalcChannelPostsCountArgs,
            debugCalcChannelsSubscribersCount: GQL.MutationDebugCalcChannelsSubscribersCountArgs,
            debugResetUrlInfoFreshness: GQL.MutationDebugResetUrlInfoFreshnessArgs,
            debugFixUsersPrimaryOrganization: GQL.MutationDebugFixUsersPrimaryOrganizationArgs,
            debugResetPushDelivery: GQL.MutationDebugResetPushDeliveryArgs,
            debugAddStickerPackToAll: GQL.MutationDebugAddStickerPackToAllArgs,
            debugReplaceCommunityForChat: GQL.MutationDebugReplaceCommunityForChatArgs,
            debugRecountSeqForMessages: GQL.MutationDebugRecountSeqForMessagesArgs,
            debugReindexRoomMessagesCounter: GQL.MutationDebugReindexRoomMessagesCounterArgs,
            debugQueueDailyPaidLeaderboard: GQL.MutationDebugQueueDailyPaidLeaderboardArgs,
            debugQueueWeeklyPaidLeaderboard: GQL.MutationDebugQueueWeeklyPaidLeaderboardArgs,
            debugSendHiddenMessage: GQL.MutationDebugSendHiddenMessageArgs,
            debugFixBrokenDonations: GQL.MutationDebugFixBrokenDonationsArgs,
            debugCreateTransfer: GQL.MutationDebugCreateTransferArgs,
            debugSetCommission: GQL.MutationDebugSetCommissionArgs,
            debugFixEditedMessagesAugmentation: GQL.MutationDebugFixEditedMessagesAugmentationArgs,
            debugReindexUsers: GQL.MutationDebugReindexUsersArgs,
            debugSetChatPayments: GQL.MutationDebugSetChatPaymentsArgs,
            debugCalcEntitiesCount: GQL.MutationDebugCalcEntitiesCountArgs,
            debugCalcEntitiesCountAll: GQL.MutationDebugCalcEntitiesCountAllArgs,
            debugSetRoomOwner: GQL.MutationDebugSetRoomOwnerArgs,
            debugClearSchedulerFromConferences: GQL.MutationDebugClearSchedulerFromConferencesArgs,
            debugInvalidateAllMessages: GQL.MutationDebugInvalidateAllMessagesArgs,
            debugFixUserSettings: GQL.MutationDebugFixUserSettingsArgs,
            debugFixDeletedRooms: GQL.MutationDebugFixDeletedRoomsArgs,
            debugUnsubscribeEveryoneFromChat: GQL.MutationDebugUnsubscribeEveryoneFromChatArgs,
            debugInviteMembersFromChat: GQL.MutationDebugInviteMembersFromChatArgs,
            debugDeleteAllContacts: GQL.MutationDebugDeleteAllContactsArgs,
            debugChangeGlobalCounterTypeForAll: GQL.MutationDebugChangeGlobalCounterTypeForAllArgs,
            debugReindexOrganizationMembers: GQL.MutationDebugReindexOrganizationMembersArgs,
            debugReindexRoomParticipants: GQL.MutationDebugReindexRoomParticipantsArgs,
            debugDeleteTask: GQL.MutationDebugDeleteTaskArgs,
            debugDeliverCallStateEventsForAll: GQL.MutationDebugDeliverCallStateEventsForAllArgs,
            debugMigrateMuteSettings: GQL.MutationDebugMigrateMuteSettingsArgs,
            debugMigrateUserChatsList: GQL.MutationDebugMigrateUserChatsListArgs,
            debugFreeUnusedShortnames: GQL.MutationDebugFreeUnusedShortnamesArgs,
            debugFreeShortname: GQL.MutationDebugFreeShortnameArgs,
            debugRemoveKickedUsersFromOrgChats: GQL.MutationDebugRemoveKickedUsersFromOrgChatsArgs,
            debugMigrateToNewCounters: GQL.MutationDebugMigrateToNewCountersArgs,
            debugMigrateToNewLastRead: GQL.MutationDebugMigrateToNewLastReadArgs,
            debugFixReadSeqs: GQL.MutationDebugFixReadSeqsArgs,
            debugExportUsers: GQL.MutationDebugExportUsersArgs,
            debugMigrateUserStatus: GQL.MutationDebugMigrateUserStatusArgs,
            debugMigrateToExperimentalCounters: GQL.MutationDebugMigrateToExperimentalCountersArgs,
            debugFixCompactMessages: GQL.MutationDebugFixCompactMessagesArgs,
            debugMigrateToNewerCounters: GQL.MutationDebugMigrateToNewerCountersArgs,
            debugUserAuth: GQL.MutationDebugUserAuthArgs,
            debugCreateOrganizationMailing: GQL.MutationDebugCreateOrganizationMailingArgs,
            debugPaymentCancel: GQL.MutationDebugPaymentCancelArgs,
            debugInvalidateAllSocialImages: GQL.MutationDebugInvalidateAllSocialImagesArgs,
            debugChangeChatPrice: GQL.MutationDebugChangeChatPriceArgs,
            settingsUpdate: GQL.MutationSettingsUpdateArgs,
            sendEmailPairCode: GQL.MutationSendEmailPairCodeArgs,
            pairEmail: GQL.MutationPairEmailArgs,
            sendPhonePairCode: GQL.MutationSendPhonePairCodeArgs,
            pairPhone: GQL.MutationPairPhoneArgs,
            updateSettings: GQL.MutationUpdateSettingsArgs,
            conferenceAlterMediaState: GQL.MutationConferenceAlterMediaStateArgs,
            conferenceAddScreenShare: GQL.MutationConferenceAddScreenShareArgs,
            conferenceRemoveScreenShare: GQL.MutationConferenceRemoveScreenShareArgs,
            conferenceAlterSettings: GQL.MutationConferenceAlterSettingsArgs,
            mediaStreamNegotiationNeeded: GQL.MutationMediaStreamNegotiationNeededArgs,
            createOauthApp: GQL.MutationCreateOauthAppArgs,
            updateOauthApp: GQL.MutationUpdateOauthAppArgs,
            betaOrganizationMemberRequestApprove: GQL.MutationBetaOrganizationMemberRequestApproveArgs,
            betaOrganizationMemberRemove: GQL.MutationBetaOrganizationMemberRemoveArgs,
            betaOrganizationMemberAdd: GQL.MutationBetaOrganizationMemberAddArgs,
            alphaOrganizationMemberAdd: GQL.MutationAlphaOrganizationMemberAddArgs,
            alphaOrganizationChangeMemberRole: GQL.MutationAlphaOrganizationChangeMemberRoleArgs,
            alphaOrganizationInviteMembers: GQL.MutationAlphaOrganizationInviteMembersArgs,
            alphaOrganizationRefreshInviteLink: GQL.MutationAlphaOrganizationRefreshInviteLinkArgs,
            alphaOrganizationCreatePublicInvite: GQL.MutationAlphaOrganizationCreatePublicInviteArgs,
            alphaOrganizationRemoveMember: GQL.MutationAlphaOrganizationRemoveMemberArgs,
            alphaOrganizationDeletePublicInvite: GQL.MutationAlphaOrganizationDeletePublicInviteArgs,
            profileCreate: GQL.MutationProfileCreateArgs,
            profileUpdate: GQL.MutationProfileUpdateArgs,
            createProfile: GQL.MutationCreateProfileArgs,
            updateProfile: GQL.MutationUpdateProfileArgs,
            alphaCreateUserProfileAndOrganization: GQL.MutationAlphaCreateUserProfileAndOrganizationArgs,
            superAccountAdd: GQL.MutationSuperAccountAddArgs,
            superAccountRename: GQL.MutationSuperAccountRenameArgs,
            superAccountActivate: GQL.MutationSuperAccountActivateArgs,
            superAccountSuspend: GQL.MutationSuperAccountSuspendArgs,
            superAccountPend: GQL.MutationSuperAccountPendArgs,
            superAccountMemberAdd: GQL.MutationSuperAccountMemberAddArgs,
            superAccountMemberRemove: GQL.MutationSuperAccountMemberRemoveArgs,
            superAccountChannelMemberAdd: GQL.MutationSuperAccountChannelMemberAddArgs,
            superDeleteUser: GQL.MutationSuperDeleteUserArgs,
            superAdminAdd: GQL.MutationSuperAdminAddArgs,
            superAdminRemove: GQL.MutationSuperAdminRemoveArgs,
            alphaAlterPublished: GQL.MutationAlphaAlterPublishedArgs,
            betaFixCounter: GQL.MutationBetaFixCounterArgs,
            betaFixCountersForAll: GQL.MutationBetaFixCountersForAllArgs,
            deliverCountersForAll: GQL.MutationDeliverCountersForAllArgs,
            banUser: GQL.MutationBanUserArgs,
            unBanUser: GQL.MutationUnBanUserArgs,
            discoverCollectionsCreate: GQL.MutationDiscoverCollectionsCreateArgs,
            discoverCollectionsUpdate: GQL.MutationDiscoverCollectionsUpdateArgs,
            discoverCollectionsDelete: GQL.MutationDiscoverCollectionsDeleteArgs,
            discoverEditorsChoiceCreate: GQL.MutationDiscoverEditorsChoiceCreateArgs,
            discoverEditorsChoiceUpdate: GQL.MutationDiscoverEditorsChoiceUpdateArgs,
            discoverEditorsChoiceDelete: GQL.MutationDiscoverEditorsChoiceDeleteArgs,
            track: GQL.MutationTrackArgs,
            createApp: GQL.MutationCreateAppArgs,
            createSuperApp: GQL.MutationCreateSuperAppArgs,
            refreshAppToken: GQL.MutationRefreshAppTokenArgs,
            updateAppProfile: GQL.MutationUpdateAppProfileArgs,
            deleteApp: GQL.MutationDeleteAppArgs,
            addAppToChat: GQL.MutationAddAppToChatArgs,
            userStorageSet: GQL.MutationUserStorageSetArgs,
            userEventBusPublish: GQL.MutationUserEventBusPublishArgs,
            globalEventBusPublish: GQL.MutationGlobalEventBusPublishArgs,
            betaAddComment: GQL.MutationBetaAddCommentArgs,
            betaAddStickerComment: GQL.MutationBetaAddStickerCommentArgs,
            editComment: GQL.MutationEditCommentArgs,
            deleteComment: GQL.MutationDeleteCommentArgs,
            deleteCommentAugmentation: GQL.MutationDeleteCommentAugmentationArgs,
            commentReactionAdd: GQL.MutationCommentReactionAddArgs,
            commentReactionRemove: GQL.MutationCommentReactionRemoveArgs,
            subscribeToComments: GQL.MutationSubscribeToCommentsArgs,
            unsubscribeFromComments: GQL.MutationUnsubscribeFromCommentsArgs,
            conferenceJoin: GQL.MutationConferenceJoinArgs,
            conferenceKeepAlive: GQL.MutationConferenceKeepAliveArgs,
            conferenceLeave: GQL.MutationConferenceLeaveArgs,
            conferenceRequestLocalMediaChange: GQL.MutationConferenceRequestLocalMediaChangeArgs,
            mediaStreamOffer: GQL.MutationMediaStreamOfferArgs,
            mediaStreamAnswer: GQL.MutationMediaStreamAnswerArgs,
            mediaStreamCandidate: GQL.MutationMediaStreamCandidateArgs,
            mediaStreamFailed: GQL.MutationMediaStreamFailedArgs,
            addToContacts: GQL.MutationAddToContactsArgs,
            removeFromContacts: GQL.MutationRemoveFromContactsArgs,
            conversationDraftUpdate: GQL.MutationConversationDraftUpdateArgs,
            setEnvVar: GQL.MutationSetEnvVarArgs,
            setEnvVarString: GQL.MutationSetEnvVarStringArgs,
            setEnvVarNumber: GQL.MutationSetEnvVarNumberArgs,
            setEnvVarBoolean: GQL.MutationSetEnvVarBooleanArgs,
            stickerPackCreate: GQL.MutationStickerPackCreateArgs,
            stickerPackUpdate: GQL.MutationStickerPackUpdateArgs,
            stickerPackAddSticker: GQL.MutationStickerPackAddStickerArgs,
            stickerPackRemoveSticker: GQL.MutationStickerPackRemoveStickerArgs,
            stickerPackAddToCollection: GQL.MutationStickerPackAddToCollectionArgs,
            stickerPackRemoveFromCollection: GQL.MutationStickerPackRemoveFromCollectionArgs,
            stickerAddToFavorites: GQL.MutationStickerAddToFavoritesArgs,
            stickerRemoveFromFavorites: GQL.MutationStickerRemoveFromFavoritesArgs,
            roomRead: GQL.MutationRoomReadArgs,
            betaMessageSend: GQL.MutationBetaMessageSendArgs,
            betaMessageEdit: GQL.MutationBetaMessageEditArgs,
            betaMessageDeleteAugmentation: GQL.MutationBetaMessageDeleteAugmentationArgs,
            betaMessageDelete: GQL.MutationBetaMessageDeleteArgs,
            betaReactionSet: GQL.MutationBetaReactionSetArgs,
            betaReactionRemove: GQL.MutationBetaReactionRemoveArgs,
            betaIntroSend: GQL.MutationBetaIntroSendArgs,
            betaIntroEdit: GQL.MutationBetaIntroEditArgs,
            readNotification: GQL.MutationReadNotificationArgs,
            deleteNotification: GQL.MutationDeleteNotificationArgs,
            notificationCenterMarkSeqRead: GQL.MutationNotificationCenterMarkSeqReadArgs,
            debugCreateNotification: GQL.MutationDebugCreateNotificationArgs,
            presenceReportOnline: GQL.MutationPresenceReportOnlineArgs,
            presenceReportOffline: GQL.MutationPresenceReportOfflineArgs,
            updateOrganizationProfile: GQL.MutationUpdateOrganizationProfileArgs,
            deleteOrganization: GQL.MutationDeleteOrganizationArgs,
            createOrganization: GQL.MutationCreateOrganizationArgs,
            requestOrganizationMembersExport: GQL.MutationRequestOrganizationMembersExportArgs,
            postDraftCreate: GQL.MutationPostDraftCreateArgs,
            postDraftUpdate: GQL.MutationPostDraftUpdateArgs,
            postDraftPublish: GQL.MutationPostDraftPublishArgs,
            postsDropAll: GQL.MutationPostsDropAllArgs,
            registerWebPush: GQL.MutationRegisterWebPushArgs,
            registerPush: GQL.MutationRegisterPushArgs,
            debugSendAndroidDataPush: GQL.MutationDebugSendAndroidDataPushArgs,
            debugSendAppleDataPush: GQL.MutationDebugSendAppleDataPushArgs,
            terminateSession: GQL.MutationTerminateSessionArgs,
            terminateAllSessionsExcept: GQL.MutationTerminateAllSessionsExceptArgs,
            betaDiscoverSkip: GQL.MutationBetaDiscoverSkipArgs,
            betaNextDiscoverReset: GQL.MutationBetaNextDiscoverResetArgs,
            betaNextDiscoverPageOrChats: GQL.MutationBetaNextDiscoverPageOrChatsArgs,
            betaSaveSelectedTags: GQL.MutationBetaSaveSelectedTagsArgs,
            betaSubmitNextDiscover: GQL.MutationBetaSubmitNextDiscoverArgs,
            matchmakingRoomSave: GQL.MutationMatchmakingRoomSaveArgs,
            matchmakingProfileFill: GQL.MutationMatchmakingProfileFillArgs,
            matchmakingConnect: GQL.MutationMatchmakingConnectArgs,
            createHistoricUserMetricsReport: GQL.MutationCreateHistoricUserMetricsReportArgs,
            queueWeeklyRoomScreenViewsLeaderboard: GQL.MutationQueueWeeklyRoomScreenViewsLeaderboardArgs,
            typingSend: GQL.MutationTypingSendArgs,
            typingCancel: GQL.MutationTypingCancelArgs,
            reportContent: GQL.MutationReportContentArgs,
            deleteMyAccount: GQL.MutationDeleteMyAccountArgs,
            superBadgeCreateToRoom: GQL.MutationSuperBadgeCreateToRoomArgs,
            superBadgeUnsetToRoom: GQL.MutationSuperBadgeUnsetToRoomArgs,
            badgeCreate: GQL.MutationBadgeCreateArgs,
            badgeCreateToRoom: GQL.MutationBadgeCreateToRoomArgs,
            badgeSetToRoom: GQL.MutationBadgeSetToRoomArgs,
            badgeUnsetToRoom: GQL.MutationBadgeUnsetToRoomArgs,
            badgeDelete: GQL.MutationBadgeDeleteArgs,
            badgeSetPrimary: GQL.MutationBadgeSetPrimaryArgs,
            badgeUnsetPrimary: GQL.MutationBadgeUnsetPrimaryArgs,
            superBadgeCreate: GQL.MutationSuperBadgeCreateArgs,
            superBadgeSetToRoom: GQL.MutationSuperBadgeSetToRoomArgs,
            superBadgeDelete: GQL.MutationSuperBadgeDeleteArgs,
            superBadgeVerify: GQL.MutationSuperBadgeVerifyArgs,
            superBadgeUnverify: GQL.MutationSuperBadgeUnverifyArgs,
            alphaCreateFeedPost: GQL.MutationAlphaCreateFeedPostArgs,
            alphaEditFeedPost: GQL.MutationAlphaEditFeedPostArgs,
            alphaDeleteFeedPost: GQL.MutationAlphaDeleteFeedPostArgs,
            feedReactionAdd: GQL.MutationFeedReactionAddArgs,
            feedReactionRemove: GQL.MutationFeedReactionRemoveArgs,
            alphaFeedCreateChannel: GQL.MutationAlphaFeedCreateChannelArgs,
            alphaFeedUpdateChannel: GQL.MutationAlphaFeedUpdateChannelArgs,
            alphaFeedChannelSubscribe: GQL.MutationAlphaFeedChannelSubscribeArgs,
            alphaFeedChannelUnsubscribe: GQL.MutationAlphaFeedChannelUnsubscribeArgs,
            alphaFeedChannelAddEditor: GQL.MutationAlphaFeedChannelAddEditorArgs,
            alphaFeedChannelRemoveEditor: GQL.MutationAlphaFeedChannelRemoveEditorArgs,
            alphaFeedChannelEnableRoomAutoSubscription: GQL.MutationAlphaFeedChannelEnableRoomAutoSubscriptionArgs,
            alphaFeedChannelDisableRoomAutoSubscription: GQL.MutationAlphaFeedChannelDisableRoomAutoSubscriptionArgs,
            alphaFeedChannelEnableCommunityAutoSubscription: GQL.MutationAlphaFeedChannelEnableCommunityAutoSubscriptionArgs,
            alphaFeedChannelDisableCommunityAutoSubscription: GQL.MutationAlphaFeedChannelDisableCommunityAutoSubscriptionArgs,
            sendMessage: GQL.MutationSendMessageArgs,
            sendSticker: GQL.MutationSendStickerArgs,
            sendDonation: GQL.MutationSendDonationArgs,
            editMessage: GQL.MutationEditMessageArgs,
            pinMessage: GQL.MutationPinMessageArgs,
            unpinMessage: GQL.MutationUnpinMessageArgs,
            betaPinMessage: GQL.MutationBetaPinMessageArgs,
            betaUnpinMessage: GQL.MutationBetaUnpinMessageArgs,
            gammaPinMessage: GQL.MutationGammaPinMessageArgs,
            gammaUnpinMessage: GQL.MutationGammaUnpinMessageArgs,
            messageReactionAdd: GQL.MutationMessageReactionAddArgs,
            messageDonationReactionAdd: GQL.MutationMessageDonationReactionAddArgs,
            messageReactionRemove: GQL.MutationMessageReactionRemoveArgs,
            deleteChat: GQL.MutationDeleteChatArgs,
            archiveChat: GQL.MutationArchiveChatArgs,
            betaRoomCreate: GQL.MutationBetaRoomCreateArgs,
            betaRoomUpdate: GQL.MutationBetaRoomUpdateArgs,
            betaRoomMove: GQL.MutationBetaRoomMoveArgs,
            betaRoomInvite: GQL.MutationBetaRoomInviteArgs,
            alphaRoomInvite: GQL.MutationAlphaRoomInviteArgs,
            betaRoomKick: GQL.MutationBetaRoomKickArgs,
            betaRoomLeave: GQL.MutationBetaRoomLeaveArgs,
            betaRoomChangeRole: GQL.MutationBetaRoomChangeRoleArgs,
            betaRoomJoin: GQL.MutationBetaRoomJoinArgs,
            betaRoomsJoin: GQL.MutationBetaRoomsJoinArgs,
            betaRoomDeclineJoinRequest: GQL.MutationBetaRoomDeclineJoinRequestArgs,
            betaBuyPremiumChatSubscription: GQL.MutationBetaBuyPremiumChatSubscriptionArgs,
            betaBuyPremiumChatPass: GQL.MutationBetaBuyPremiumChatPassArgs,
            betaRoomInviteLinkSendEmail: GQL.MutationBetaRoomInviteLinkSendEmailArgs,
            betaRoomInviteLinkJoin: GQL.MutationBetaRoomInviteLinkJoinArgs,
            betaRoomInviteLinkRenew: GQL.MutationBetaRoomInviteLinkRenewArgs,
            betaRoomUpdateUserNotificationSettings: GQL.MutationBetaRoomUpdateUserNotificationSettingsArgs,
            betaRoomsInviteUser: GQL.MutationBetaRoomsInviteUserArgs,
            betaRoomAlterFeatured: GQL.MutationBetaRoomAlterFeaturedArgs,
            betaRoomAlterListed: GQL.MutationBetaRoomAlterListedArgs,
            betaRoomSetupAutosubscribe: GQL.MutationBetaRoomSetupAutosubscribeArgs,
            updateWelcomeMessage: GQL.MutationUpdateWelcomeMessageArgs,
            alphaSetUserShortName: GQL.MutationAlphaSetUserShortNameArgs,
            alphaSetOrgShortName: GQL.MutationAlphaSetOrgShortNameArgs,
            alphaSetFeedChannelShortName: GQL.MutationAlphaSetFeedChannelShortNameArgs,
            alphaSetRoomShortName: GQL.MutationAlphaSetRoomShortNameArgs,
            alphaSetCollectionShortName: GQL.MutationAlphaSetCollectionShortNameArgs,
        }
    >;
    NotificationCenter?: ComplexTypedResolver<
        GQL.NotificationCenter,
        GQLRoots.NotificationCenterRoot,
        {
            state: GQLRoots.NotificationCenterUpdatesStateRoot,
        },
        {
            id: GQL.NotificationCenterIdArgs,
            unread: GQL.NotificationCenterUnreadArgs,
            state: GQL.NotificationCenterStateArgs,
        }
    >;
    Notification?: ComplexTypedResolver<
        GQL.Notification,
        GQLRoots.NotificationRoot,
        {
            content: GQLRoots.NotificationContentRoot[],
        },
        {
            id: GQL.NotificationIdArgs,
            text: GQL.NotificationTextArgs,
            content: GQL.NotificationContentArgs,
        }
    >;
    NotificationContent?: UnionTypeResolver<GQLRoots.NotificationContentRoot, 'NewCommentNotification' | 'NewMatchmakingProfilesNotification' | 'MentionNotification'>;
    NewCommentNotification?: ComplexTypedResolver<
        GQL.NewCommentNotification,
        GQLRoots.NewCommentNotificationRoot,
        {
            peer: GQLRoots.CommentsPeerRoot,
            comment: GQLRoots.CommentEntryRoot,
        },
        {
            peer: GQL.NewCommentNotificationPeerArgs,
            comment: GQL.NewCommentNotificationCommentArgs,
        }
    >;
    NewMatchmakingProfilesNotification?: ComplexTypedResolver<
        GQL.NewMatchmakingProfilesNotification,
        GQLRoots.NewMatchmakingProfilesNotificationRoot,
        {
            room: GQLRoots.MatchmakingRoomRoot,
            profiles: GQLRoots.MatchmakingProfileRoot[],
        },
        {
            room: GQL.NewMatchmakingProfilesNotificationRoomArgs,
            profiles: GQL.NewMatchmakingProfilesNotificationProfilesArgs,
        }
    >;
    MessageWithMention?: UnionTypeResolver<GQLRoots.MessageWithMentionRoot, 'FeedPost' | 'Message'>;
    MentionNotification?: ComplexTypedResolver<
        GQL.MentionNotification,
        GQLRoots.MentionNotificationRoot,
        {
            peer: GQLRoots.MentionPeerRoot,
            message: GQLRoots.MessageWithMentionRoot,
        },
        {
            peer: GQL.MentionNotificationPeerArgs,
            message: GQL.MentionNotificationMessageArgs,
        }
    >;
    NotificationConnection?: ComplexTypedResolver<
        GQL.NotificationConnection,
        GQLRoots.NotificationConnectionRoot,
        {
            items: GQLRoots.NotificationRoot[],
        },
        {
            items: GQL.NotificationConnectionItemsArgs,
            cursor: GQL.NotificationConnectionCursorArgs,
        }
    >;
    NotificationCenterUpdatesState?: ComplexTypedResolver<
        GQL.NotificationCenterUpdatesState,
        GQLRoots.NotificationCenterUpdatesStateRoot,
        {
        },
        {
            state: GQL.NotificationCenterUpdatesStateStateArgs,
        }
    >;
    NotificationCenterUpdateSingle?: ComplexTypedResolver<
        GQL.NotificationCenterUpdateSingle,
        GQLRoots.NotificationCenterUpdateSingleRoot,
        {
            update: GQLRoots.NotificationCenterUpdateRoot,
        },
        {
            seq: GQL.NotificationCenterUpdateSingleSeqArgs,
            state: GQL.NotificationCenterUpdateSingleStateArgs,
            update: GQL.NotificationCenterUpdateSingleUpdateArgs,
        }
    >;
    NotificationCenterUpdateBatch?: ComplexTypedResolver<
        GQL.NotificationCenterUpdateBatch,
        GQLRoots.NotificationCenterUpdateBatchRoot,
        {
            updates: GQLRoots.NotificationCenterUpdateRoot[],
        },
        {
            seq: GQL.NotificationCenterUpdateBatchSeqArgs,
            state: GQL.NotificationCenterUpdateBatchStateArgs,
            fromSeq: GQL.NotificationCenterUpdateBatchFromSeqArgs,
            updates: GQL.NotificationCenterUpdateBatchUpdatesArgs,
        }
    >;
    NotificationCenterUpdate?: UnionTypeResolver<GQLRoots.NotificationCenterUpdateRoot, 'NotificationReceived' | 'NotificationRead' | 'NotificationDeleted' | 'NotificationUpdated' | 'NotificationContentUpdated'>;
    NotificationReceived?: ComplexTypedResolver<
        GQL.NotificationReceived,
        GQLRoots.NotificationReceivedRoot,
        {
            center: GQLRoots.NotificationCenterRoot,
            notification: GQLRoots.NotificationRoot,
        },
        {
            center: GQL.NotificationReceivedCenterArgs,
            notification: GQL.NotificationReceivedNotificationArgs,
            unread: GQL.NotificationReceivedUnreadArgs,
        }
    >;
    NotificationRead?: ComplexTypedResolver<
        GQL.NotificationRead,
        GQLRoots.NotificationReadRoot,
        {
            center: GQLRoots.NotificationCenterRoot,
        },
        {
            center: GQL.NotificationReadCenterArgs,
            unread: GQL.NotificationReadUnreadArgs,
        }
    >;
    NotificationDeleted?: ComplexTypedResolver<
        GQL.NotificationDeleted,
        GQLRoots.NotificationDeletedRoot,
        {
            center: GQLRoots.NotificationCenterRoot,
            notification: GQLRoots.NotificationRoot,
        },
        {
            center: GQL.NotificationDeletedCenterArgs,
            notification: GQL.NotificationDeletedNotificationArgs,
            unread: GQL.NotificationDeletedUnreadArgs,
        }
    >;
    NotificationUpdated?: ComplexTypedResolver<
        GQL.NotificationUpdated,
        GQLRoots.NotificationUpdatedRoot,
        {
            center: GQLRoots.NotificationCenterRoot,
            notification: GQLRoots.NotificationRoot,
        },
        {
            center: GQL.NotificationUpdatedCenterArgs,
            notification: GQL.NotificationUpdatedNotificationArgs,
            unread: GQL.NotificationUpdatedUnreadArgs,
        }
    >;
    UpdatedNotificationContent?: UnionTypeResolver<GQLRoots.UpdatedNotificationContentRoot, 'UpdatedNotificationContentComment'>;
    UpdatedNotificationContentComment?: ComplexTypedResolver<
        GQL.UpdatedNotificationContentComment,
        GQLRoots.UpdatedNotificationContentCommentRoot,
        {
            peer: GQLRoots.CommentsPeerRoot,
            comment: Nullable<GQLRoots.CommentEntryRoot>,
        },
        {
            peer: GQL.UpdatedNotificationContentCommentPeerArgs,
            comment: GQL.UpdatedNotificationContentCommentCommentArgs,
        }
    >;
    NotificationContentUpdated?: ComplexTypedResolver<
        GQL.NotificationContentUpdated,
        GQLRoots.NotificationContentUpdatedRoot,
        {
            center: GQLRoots.NotificationCenterRoot,
            content: GQLRoots.UpdatedNotificationContentRoot,
        },
        {
            center: GQL.NotificationContentUpdatedCenterArgs,
            content: GQL.NotificationContentUpdatedContentArgs,
        }
    >;
    NotificationCenterUpdateContainer?: UnionTypeResolver<GQLRoots.NotificationCenterUpdateContainerRoot, 'NotificationCenterUpdateSingle' | 'NotificationCenterUpdateBatch'>;
    OnlineEvent?: ComplexTypedResolver<
        GQL.OnlineEvent,
        GQLRoots.OnlineEventRoot,
        {
            user: GQLRoots.UserRoot,
        },
        {
            user: GQL.OnlineEventUserArgs,
            timeout: GQL.OnlineEventTimeoutArgs,
        }
    >;
    ChatOnlineEvent?: ComplexTypedResolver<
        GQL.ChatOnlineEvent,
        GQLRoots.ChatOnlineEventRoot,
        {
        },
        {
            onlineMembers: GQL.ChatOnlineEventOnlineMembersArgs,
        }
    >;
    OrganizationContact?: ComplexTypedResolver<
        GQL.OrganizationContact,
        GQLRoots.OrganizationContactRoot,
        {
            photoRef: Nullable<GQLRoots.ImageRefRoot>,
        },
        {
            name: GQL.OrganizationContactNameArgs,
            photo: GQL.OrganizationContactPhotoArgs,
            photoRef: GQL.OrganizationContactPhotoRefArgs,
            position: GQL.OrganizationContactPositionArgs,
            email: GQL.OrganizationContactEmailArgs,
            phone: GQL.OrganizationContactPhoneArgs,
            link: GQL.OrganizationContactLinkArgs,
            twitter: GQL.OrganizationContactTwitterArgs,
        }
    >;
    Organization?: ComplexTypedResolver<
        GQL.Organization,
        GQLRoots.OrganizationRoot,
        {
            owner: GQLRoots.UserRoot,
            alphaOrganizationMembers: GQLRoots.OrganizationJoinedMemberRoot[],
            alphaOrganizationAdminMembers: GQLRoots.OrganizationJoinedMemberRoot[],
            alphaOrganizationMemberRequests: GQLRoots.OrganizationRequestedMemberRoot[],
            betaPublicRooms: GQLRoots.SharedRoomRoot[],
            linkedFeedChannels: GQLRoots.FeedChannelRoot[],
        },
        {
            id: GQL.OrganizationIdArgs,
            isMine: GQL.OrganizationIsMineArgs,
            isDeleted: GQL.OrganizationIsDeletedArgs,
            name: GQL.OrganizationNameArgs,
            photo: GQL.OrganizationPhotoArgs,
            website: GQL.OrganizationWebsiteArgs,
            websiteTitle: GQL.OrganizationWebsiteTitleArgs,
            about: GQL.OrganizationAboutArgs,
            twitter: GQL.OrganizationTwitterArgs,
            facebook: GQL.OrganizationFacebookArgs,
            linkedin: GQL.OrganizationLinkedinArgs,
            instagram: GQL.OrganizationInstagramArgs,
            location: GQL.OrganizationLocationArgs,
            betaIsOwner: GQL.OrganizationBetaIsOwnerArgs,
            betaIsAdmin: GQL.OrganizationBetaIsAdminArgs,
            betaIsPrimary: GQL.OrganizationBetaIsPrimaryArgs,
            owner: GQL.OrganizationOwnerArgs,
            applyLinkEnabled: GQL.OrganizationApplyLinkEnabledArgs,
            applyLink: GQL.OrganizationApplyLinkArgs,
            socialImage: GQL.OrganizationSocialImageArgs,
            superAccountId: GQL.OrganizationSuperAccountIdArgs,
            alphaIsOwner: GQL.OrganizationAlphaIsOwnerArgs,
            alphaOrganizationMembers: GQL.OrganizationAlphaOrganizationMembersArgs,
            alphaOrganizationAdminMembers: GQL.OrganizationAlphaOrganizationAdminMembersArgs,
            alphaOrganizationMemberRequests: GQL.OrganizationAlphaOrganizationMemberRequestsArgs,
            alphaFeatured: GQL.OrganizationAlphaFeaturedArgs,
            alphaIsCommunity: GQL.OrganizationAlphaIsCommunityArgs,
            alphaIsPrivate: GQL.OrganizationAlphaIsPrivateArgs,
            betaMembersCanInvite: GQL.OrganizationBetaMembersCanInviteArgs,
            betaPublicRooms: GQL.OrganizationBetaPublicRoomsArgs,
            betaPublicRoomsCount: GQL.OrganizationBetaPublicRoomsCountArgs,
            status: GQL.OrganizationStatusArgs,
            membersCount: GQL.OrganizationMembersCountArgs,
            personal: GQL.OrganizationPersonalArgs,
            externalSocialImage: GQL.OrganizationExternalSocialImageArgs,
            linkedFeedChannels: GQL.OrganizationLinkedFeedChannelsArgs,
            shortname: GQL.OrganizationShortnameArgs,
        }
    >;
    OrganizationProfile?: ComplexTypedResolver<
        GQL.OrganizationProfile,
        GQLRoots.OrganizationProfileRoot,
        {
            photoRef: Nullable<GQLRoots.ImageRefRoot>,
            contacts: GQLRoots.OrganizationContactRoot[],
        },
        {
            id: GQL.OrganizationProfileIdArgs,
            name: GQL.OrganizationProfileNameArgs,
            photoRef: GQL.OrganizationProfilePhotoRefArgs,
            website: GQL.OrganizationProfileWebsiteArgs,
            websiteTitle: GQL.OrganizationProfileWebsiteTitleArgs,
            about: GQL.OrganizationProfileAboutArgs,
            twitter: GQL.OrganizationProfileTwitterArgs,
            facebook: GQL.OrganizationProfileFacebookArgs,
            linkedin: GQL.OrganizationProfileLinkedinArgs,
            instagram: GQL.OrganizationProfileInstagramArgs,
            contacts: GQL.OrganizationProfileContactsArgs,
            location: GQL.OrganizationProfileLocationArgs,
            socialImage: GQL.OrganizationProfileSocialImageArgs,
            alphaPublished: GQL.OrganizationProfileAlphaPublishedArgs,
            alphaEditorial: GQL.OrganizationProfileAlphaEditorialArgs,
            alphaFeatured: GQL.OrganizationProfileAlphaFeaturedArgs,
            alphaIsCommunity: GQL.OrganizationProfileAlphaIsCommunityArgs,
            alphaIsPrivate: GQL.OrganizationProfileAlphaIsPrivateArgs,
            applyLink: GQL.OrganizationProfileApplyLinkArgs,
            applyLinkEnabled: GQL.OrganizationProfileApplyLinkEnabledArgs,
            betaMembersCanInvite: GQL.OrganizationProfileBetaMembersCanInviteArgs,
            autosubscribeRooms: GQL.OrganizationProfileAutosubscribeRoomsArgs,
            shortname: GQL.OrganizationProfileShortnameArgs,
        }
    >;
    OrganizationsEdge?: ComplexTypedResolver<
        GQL.OrganizationsEdge,
        GQLRoots.OrganizationsEdgeRoot,
        {
            node: GQLRoots.OrganizationRoot,
        },
        {
            node: GQL.OrganizationsEdgeNodeArgs,
            cursor: GQL.OrganizationsEdgeCursorArgs,
        }
    >;
    OrganizationsConnection?: ComplexTypedResolver<
        GQL.OrganizationsConnection,
        GQLRoots.OrganizationsConnectionRoot,
        {
            edges: GQLRoots.OrganizationsEdgeRoot[],
            pageInfo: GQLRoots.PageInfoRoot,
        },
        {
            edges: GQL.OrganizationsConnectionEdgesArgs,
            pageInfo: GQL.OrganizationsConnectionPageInfoArgs,
        }
    >;
    Permissions?: ComplexTypedResolver<
        GQL.Permissions,
        GQLRoots.PermissionsRoot,
        {
        },
        {
            roles: GQL.PermissionsRolesArgs,
        }
    >;
    PopularNowRoom?: ComplexTypedResolver<
        GQL.PopularNowRoom,
        GQLRoots.PopularNowRoomRoot,
        {
            room: GQLRoots.SharedRoomRoot,
        },
        {
            room: GQL.PopularNowRoomRoomArgs,
            newMessages: GQL.PopularNowRoomNewMessagesArgs,
        }
    >;
    PopularNowRoomConnection?: ComplexTypedResolver<
        GQL.PopularNowRoomConnection,
        GQLRoots.PopularNowRoomConnectionRoot,
        {
            items: GQLRoots.PopularNowRoomRoot[],
        },
        {
            items: GQL.PopularNowRoomConnectionItemsArgs,
            cursor: GQL.PopularNowRoomConnectionCursorArgs,
        }
    >;
    PopularNowOrganization?: ComplexTypedResolver<
        GQL.PopularNowOrganization,
        GQLRoots.PopularNowOrganizationRoot,
        {
            organization: GQLRoots.OrganizationRoot,
        },
        {
            organization: GQL.PopularNowOrganizationOrganizationArgs,
            newMessages: GQL.PopularNowOrganizationNewMessagesArgs,
        }
    >;
    NewAndGrowingOrganizationConnection?: ComplexTypedResolver<
        GQL.NewAndGrowingOrganizationConnection,
        GQLRoots.NewAndGrowingOrganizationConnectionRoot,
        {
            items: GQLRoots.OrganizationRoot[],
        },
        {
            items: GQL.NewAndGrowingOrganizationConnectionItemsArgs,
            cursor: GQL.NewAndGrowingOrganizationConnectionCursorArgs,
        }
    >;
    PopularNowOrganizationConnection?: ComplexTypedResolver<
        GQL.PopularNowOrganizationConnection,
        GQLRoots.PopularNowOrganizationConnectionRoot,
        {
            items: GQLRoots.PopularNowOrganizationRoot[],
        },
        {
            items: GQL.PopularNowOrganizationConnectionItemsArgs,
            cursor: GQL.PopularNowOrganizationConnectionCursorArgs,
        }
    >;
    OrganizationConnection?: ComplexTypedResolver<
        GQL.OrganizationConnection,
        GQLRoots.OrganizationConnectionRoot,
        {
            items: GQLRoots.OrganizationRoot[],
        },
        {
            items: GQL.OrganizationConnectionItemsArgs,
            cursor: GQL.OrganizationConnectionCursorArgs,
        }
    >;
    Post?: ComplexTypedResolver<
        GQL.Post,
        GQLRoots.PostRoot,
        {
            author: Nullable<GQLRoots.UserRoot>,
            content: GQLRoots.ParagraphRoot[],
            draft: Nullable<GQLRoots.PostDraftRoot>,
            channel: Nullable<GQLRoots.ChannelRoot>,
        },
        {
            id: GQL.PostIdArgs,
            author: GQL.PostAuthorArgs,
            title: GQL.PostTitleArgs,
            content: GQL.PostContentArgs,
            draft: GQL.PostDraftArgs,
            canEdit: GQL.PostCanEditArgs,
            channel: GQL.PostChannelArgs,
            createdAt: GQL.PostCreatedAtArgs,
            updatedAt: GQL.PostUpdatedAtArgs,
            deletedAt: GQL.PostDeletedAtArgs,
        }
    >;
    PostDraft?: ComplexTypedResolver<
        GQL.PostDraft,
        GQLRoots.PostDraftRoot,
        {
            author: Nullable<GQLRoots.UserRoot>,
            content: GQLRoots.ParagraphRoot[],
            publishedCopy: Nullable<GQLRoots.PostRoot>,
            channel: Nullable<GQLRoots.ChannelRoot>,
        },
        {
            id: GQL.PostDraftIdArgs,
            author: GQL.PostDraftAuthorArgs,
            title: GQL.PostDraftTitleArgs,
            content: GQL.PostDraftContentArgs,
            publishedCopy: GQL.PostDraftPublishedCopyArgs,
            channel: GQL.PostDraftChannelArgs,
            createdAt: GQL.PostDraftCreatedAtArgs,
            updatedAt: GQL.PostDraftUpdatedAtArgs,
            deletedAt: GQL.PostDraftDeletedAtArgs,
        }
    >;
    PostSpan?: InterfaceTypeResolver<GQLRoots.PostSpanRoot, 'PostSpanBold' | 'PostSpanItalic' | 'PostSpanIrony' | 'PostSpanLink'>;
    PostSpanBold?: ComplexTypedResolver<
        GQL.PostSpanBold,
        GQLRoots.PostSpanBoldRoot,
        {
        },
        {
            offset: GQL.PostSpanBoldOffsetArgs,
            length: GQL.PostSpanBoldLengthArgs,
        }
    >;
    PostSpanItalic?: ComplexTypedResolver<
        GQL.PostSpanItalic,
        GQLRoots.PostSpanItalicRoot,
        {
        },
        {
            offset: GQL.PostSpanItalicOffsetArgs,
            length: GQL.PostSpanItalicLengthArgs,
        }
    >;
    PostSpanIrony?: ComplexTypedResolver<
        GQL.PostSpanIrony,
        GQLRoots.PostSpanIronyRoot,
        {
        },
        {
            offset: GQL.PostSpanIronyOffsetArgs,
            length: GQL.PostSpanIronyLengthArgs,
        }
    >;
    PostSpanLink?: ComplexTypedResolver<
        GQL.PostSpanLink,
        GQLRoots.PostSpanLinkRoot,
        {
        },
        {
            offset: GQL.PostSpanLinkOffsetArgs,
            length: GQL.PostSpanLinkLengthArgs,
            url: GQL.PostSpanLinkUrlArgs,
        }
    >;
    PostSpanType?: EnumTypeResolver<'Bold' | 'Italic' | 'Irony' | 'Link', GQLRoots.PostSpanTypeRoot>;
    Paragraph?: UnionTypeResolver<GQLRoots.ParagraphRoot, 'TextParagraph' | 'ImageParagraph' | 'H1Paragraph' | 'H2Paragraph'>;
    TextParagraph?: ComplexTypedResolver<
        GQL.TextParagraph,
        GQLRoots.TextParagraphRoot,
        {
            spans: GQLRoots.PostSpanRoot[],
        },
        {
            text: GQL.TextParagraphTextArgs,
            spans: GQL.TextParagraphSpansArgs,
        }
    >;
    ImageParagraph?: ComplexTypedResolver<
        GQL.ImageParagraph,
        GQLRoots.ImageParagraphRoot,
        {
            image: GQLRoots.ImageRefRoot,
            fileMetadata: GQLRoots.FileMetadataRoot,
        },
        {
            url: GQL.ImageParagraphUrlArgs,
            image: GQL.ImageParagraphImageArgs,
            fileMetadata: GQL.ImageParagraphFileMetadataArgs,
        }
    >;
    H1Paragraph?: ComplexTypedResolver<
        GQL.H1Paragraph,
        GQLRoots.H1ParagraphRoot,
        {
        },
        {
            text: GQL.H1ParagraphTextArgs,
        }
    >;
    H2Paragraph?: ComplexTypedResolver<
        GQL.H2Paragraph,
        GQLRoots.H2ParagraphRoot,
        {
        },
        {
            text: GQL.H2ParagraphTextArgs,
        }
    >;
    PostContentType?: EnumTypeResolver<'Text' | 'Image' | 'H1' | 'H2', GQLRoots.PostContentTypeRoot>;
    PostConnection?: ComplexTypedResolver<
        GQL.PostConnection,
        GQLRoots.PostConnectionRoot,
        {
            items: GQLRoots.PostRoot[],
        },
        {
            items: GQL.PostConnectionItemsArgs,
            cursor: GQL.PostConnectionCursorArgs,
        }
    >;
    PostDraftConnection?: ComplexTypedResolver<
        GQL.PostDraftConnection,
        GQLRoots.PostDraftConnectionRoot,
        {
            items: GQLRoots.PostDraftRoot[],
        },
        {
            items: GQL.PostDraftConnectionItemsArgs,
            cursor: GQL.PostDraftConnectionCursorArgs,
        }
    >;
    ProfilePrefill?: ComplexTypedResolver<
        GQL.ProfilePrefill,
        GQLRoots.ProfilePrefillRoot,
        {
        },
        {
            firstName: GQL.ProfilePrefillFirstNameArgs,
            lastName: GQL.ProfilePrefillLastNameArgs,
            picture: GQL.ProfilePrefillPictureArgs,
        }
    >;
    PushSettings?: ComplexTypedResolver<
        GQL.PushSettings,
        GQLRoots.PushSettingsRoot,
        {
        },
        {
            webPushKey: GQL.PushSettingsWebPushKeyArgs,
        }
    >;
    PushType?: EnumTypeResolver<'WEB_PUSH' | 'IOS' | 'ANDROID' | 'SAFARI', GQLRoots.PushTypeRoot>;
    Query?: ComplexTypedResolver<
        GQL.Query,
        GQLRoots.QueryRoot,
        {
            alphaNotificationCounter: GQLRoots.NotificationCounterRoot,
            alphaChat: GQLRoots.ConversationRoot,
            alphaLoadMessages: GQLRoots.ConversationStateRoot,
            alphaChatsSearchForCompose: GQLRoots.ComposeSearchResultRoot[],
            alphaChatSearch: Nullable<GQLRoots.ConversationRoot>,
            alphaGroupConversationMembers: GQLRoots.GroupConversationMemberRoot[],
            myCards: GQLRoots.CreditCardRoot[],
            myWallet: GQLRoots.WalletAccountRoot,
            transactionsPending: GQLRoots.WalletTransactionRoot[],
            transactionsHistory: GQLRoots.WalletTransactionConnectionRoot,
            subscriptions: GQLRoots.WalletSubscriptionRoot[],
            alphaInviteInfo: Nullable<GQLRoots.InviteInfoRoot>,
            appInviteInfo: Nullable<GQLRoots.AppInviteRoot>,
            alphaResolveInvite: Nullable<GQLRoots.ResolveInviteEntryRoot>,
            updatesState: GQLRoots.UpdatesStateRoot,
            sequenceState: GQLRoots.UpdatesSequenceStateRoot,
            updatesDifference: GQLRoots.UpdatesDifferenceRoot,
            sequenceDifference: GQLRoots.SequenceDifferenceRoot,
            channels: GQLRoots.ChannelRoot[],
            channel: Nullable<GQLRoots.ChannelRoot>,
            debugParseID: GQLRoots.DebugIDRoot,
            debugUrlInfo: Nullable<GQLRoots.UrlAugmentationRoot>,
            userPresence: GQLRoots.DebugUserPresenceRoot[],
            organizationChatsStats: GQLRoots.OrganizationChatStatsRoot[],
            debugEventsState: GQLRoots.DebugEventsStateRoot,
            debugUserMetrics: GQLRoots.DebugUserMetricsRoot,
            debugGlobalCounters: GQLRoots.DebugGlobalCountersRoot,
            debugGqlTraces: GQLRoots.GqlTraceConnectionRoot,
            debugGqlTrace: GQLRoots.GqlTraceRoot,
            debugUserWallet: GQLRoots.WalletAccountRoot,
            debugFindUser: Nullable<GQLRoots.UserRoot>,
            dialogs: GQLRoots.DialogsConnectionRoot,
            settings: GQLRoots.SettingsRoot,
            authPoints: GQLRoots.AuthPointRoot,
            myOauthApps: GQLRoots.OauthAppRoot[],
            oauthContext: Nullable<GQLRoots.OauthContextRoot>,
            alphaOrganizationMembers: GQLRoots.OrganizationMemberRoot[],
            alphaOrganizationInviteLink: Nullable<GQLRoots.InviteRoot>,
            alphaOrganizationPublicInvite: Nullable<GQLRoots.InviteRoot>,
            myProfile: Nullable<GQLRoots.ProfileRoot>,
            superAccounts: GQLRoots.SuperAccountRoot[],
            superAccount: GQLRoots.SuperAccountRoot,
            superAdmins: GQLRoots.SuperAdminRoot[],
            alphaChatTextSearch: GQLRoots.ConversationRoot[],
            betaDialogTextSearch: GQLRoots.DialogRoot[],
            myBlackList: GQLRoots.UserRoot[],
            discoverCollections: Nullable<GQLRoots.DiscoverChatsCollectionConnectionRoot>,
            discoverCollection: Nullable<GQLRoots.DiscoverChatsCollectionRoot>,
            discoverEditorsChoice: GQLRoots.EditorsChoiceChatRoot[],
            discoverEditorsChoiceChat: GQLRoots.EditorsChoiceChatRoot,
            myApps: GQLRoots.AppProfileRoot[],
            userStorage: GQLRoots.AppStorageValueRoot[],
            blackListUpdatesState: GQLRoots.BlackListUpdatesStateRoot,
            chatState: GQLRoots.ChatUpdateStateRoot,
            conversationState: GQLRoots.ConversationUpdateStateRoot,
            messageComments: GQLRoots.CommentsPeerRoot,
            feedItemComments: GQLRoots.CommentsPeerRoot,
            postComments: GQLRoots.CommentsPeerRoot,
            comments: GQLRoots.CommentsPeerRoot,
            commentEntry: Nullable<GQLRoots.CommentEntryRoot>,
            conference: GQLRoots.ConferenceRoot,
            conferenceMedia: GQLRoots.ConferenceMediaRoot,
            myContacts: GQLRoots.ContactConnectionRoot,
            myContactsSearch: GQLRoots.UserConnectionRoot,
            myContactsState: GQLRoots.ContactsStateRoot,
            dialogsState: GQLRoots.DialogUpdateStateRoot,
            envVars: Nullable<GQLRoots.EnvVarRoot[]>,
            envVar: Nullable<GQLRoots.EnvVarRoot>,
            ipLocation: Nullable<GQLRoots.IpLocationRoot>,
            myStickers: GQLRoots.UserStickersRoot,
            createdStickerPacks: GQLRoots.StickerPackRoot[],
            stickersByEmoji: GQLRoots.StickerRoot[],
            stickerPack: Nullable<GQLRoots.StickerPackRoot>,
            stickerPackCatalog: GQLRoots.StickerPackRoot[],
            myNotificationCenter: GQLRoots.NotificationCenterRoot,
            myNotifications: GQLRoots.NotificationConnectionRoot,
            myOrganization: Nullable<GQLRoots.OrganizationRoot>,
            myOrganizations: GQLRoots.OrganizationRoot[],
            myCommunities: GQLRoots.OrganizationRoot[],
            organization: GQLRoots.OrganizationRoot,
            organizationPublicRooms: GQLRoots.SharedRoomConnectionRoot,
            myOrganizationProfile: GQLRoots.OrganizationProfileRoot,
            organizationProfile: GQLRoots.OrganizationProfileRoot,
            alphaOrganizations: GQLRoots.OrganizationsConnectionRoot,
            alphaOrganizationByPrefix: Nullable<GQLRoots.OrganizationRoot>,
            alphaComunityPrefixSearch: GQLRoots.OrganizationsConnectionRoot,
            myPermissions: GQLRoots.PermissionsRoot,
            users: GQLRoots.UserRoot[],
            discoverNewAndGrowing: GQLRoots.SharedRoomConnectionRoot,
            discoverPopularNow: GQLRoots.PopularNowRoomConnectionRoot,
            discoverNewAndGrowingOrganizations: GQLRoots.NewAndGrowingOrganizationConnectionRoot,
            discoverPopularNowOrganizations: GQLRoots.PopularNowOrganizationConnectionRoot,
            discoverTopOrganizations: GQLRoots.OrganizationConnectionRoot,
            discoverTopPremium: GQLRoots.SharedRoomConnectionRoot,
            discoverTopFree: GQLRoots.SharedRoomConnectionRoot,
            post: Nullable<GQLRoots.PostRoot>,
            postDraft: Nullable<GQLRoots.PostDraftRoot>,
            posts: GQLRoots.PostConnectionRoot,
            postMyDrafts: GQLRoots.PostDraftConnectionRoot,
            myProfilePrefill: Nullable<GQLRoots.ProfilePrefillRoot>,
            pushSettings: GQLRoots.PushSettingsRoot,
            activeSessions: Nullable<GQLRoots.SessionRoot>[],
            sessionState: GQLRoots.SessionStateRoot,
            syncUserChats: GQLRoots.SyncChatsConnectionRoot,
            betaNextDiscoverPage: Nullable<GQLRoots.DiscoverPageRoot>,
            gammaNextDiscoverPage: Nullable<GQLRoots.DiscoverPageRoot>,
            betaSuggestedRooms: GQLRoots.RoomRoot[],
            matchmakingRoom: Nullable<GQLRoots.MatchmakingRoomRoot>,
            matchmakingProfile: Nullable<GQLRoots.MatchmakingProfileRoot>,
            trendingRoomsByMessages: GQLRoots.TrendingRoomRoot[],
            me: Nullable<GQLRoots.UserRoot>,
            user: GQLRoots.UserRoot,
            superBadgeInRoom: Nullable<GQLRoots.UserBadgeRoot>,
            badgeInRoom: Nullable<GQLRoots.UserBadgeRoot>,
            userSearch: GQLRoots.UserConnectionRoot,
            userSearchForChat: GQLRoots.ChatUserConnectionRoot,
            alphaProfiles: GQLRoots.UserConnectionRoot,
            alphaHomeFeed: GQLRoots.FeedItemConnectionRoot,
            alphaFeedItem: Nullable<GQLRoots.FeedItemRoot>,
            alphaFeedChannel: GQLRoots.FeedChannelRoot,
            alphaFeedMyDraftsChannel: GQLRoots.FeedChannelRoot,
            alphaFeedChannelContent: GQLRoots.FeedItemConnectionRoot,
            alphaFeedMySubscriptions: GQLRoots.FeedChannelConnectionRoot,
            alphaFeedMyChannels: GQLRoots.FeedChannelConnectionRoot,
            alphaWritableChannels: GQLRoots.FeedChannelConnectionRoot,
            alphaFeedChannelAdmins: GQLRoots.FeedChannelAdminConnectionRoot,
            alphaFeedChannelSearch: GQLRoots.FeedChannelSearchConnectionRoot,
            alphaFeedChannelSubscribers: GQLRoots.FeedChannelSubscriberConnectionRoot,
            alphaRecommendedChannels: GQLRoots.FeedChannelSearchConnectionRoot,
            alphaGlobalSearch: GQLRoots.GlobalSearchEntryRoot[],
            featuredGroups: Nullable<GQLRoots.SharedRoomRoot[]>,
            featuredCommunities: Nullable<GQLRoots.OrganizationRoot[]>,
            messagesSearch: GQLRoots.MessageConnectionRoot,
            chatMembersSearch: GQLRoots.RoomMemberConnectionRoot,
            chatMentionSearch: GQLRoots.GlobalSearchConnectionRoot,
            orgMembersSearch: GQLRoots.JoinedOrganizationMembersConnectionRoot,
            betaChatMentionSearch: GQLRoots.MentionSearchConnectionRoot,
            messages: GQLRoots.ModernMessageRoot[],
            gammaMessages: Nullable<GQLRoots.GammaMessagesBatchRoot>,
            modernMessages: GQLRoots.ModernMessagesBatchRoot,
            message: Nullable<GQLRoots.ModernMessageRoot>,
            lastReadedMessage: Nullable<GQLRoots.ModernMessageRoot>,
            chatSharedMedia: GQLRoots.SharedMediaConnectionRoot,
            chatSharedMediaCounters: GQLRoots.SharedMediaCountersRoot,
            commonChatsWithUser: GQLRoots.CommonChatsWithUserResponseRoot,
            room: Nullable<GQLRoots.RoomRoot>,
            rooms: GQLRoots.RoomRoot[],
            roomSuper: Nullable<GQLRoots.RoomSuperRoot>,
            roomMessages: GQLRoots.RoomMessageRoot[],
            roomMembers: GQLRoots.RoomMemberRoot[],
            roomAdmins: GQLRoots.RoomMemberRoot[],
            roomFeaturedMembers: GQLRoots.RoomMemberRoot[],
            roomMember: Nullable<GQLRoots.RoomMemberRoot>,
            betaRoomSearch: GQLRoots.RoomConnectionRoot,
            betaRoomInviteInfo: Nullable<GQLRoots.RoomInviteRoot>,
            betaAvailableRooms: GQLRoots.SharedRoomRoot[],
            betaUserRooms: GQLRoots.SharedRoomRoot[],
            betaUserAvailableRooms: GQLRoots.SharedRoomRoot[],
            alphaUserAvailableRooms: GQLRoots.RoomConnectionRoot,
            alphaResolveShortName: Nullable<GQLRoots.ShortNameDestinationRoot>,
        },
        {
            lifecheck: GQL.QueryLifecheckArgs,
            alphaNotificationCounter: GQL.QueryAlphaNotificationCounterArgs,
            alphaChat: GQL.QueryAlphaChatArgs,
            alphaLoadMessages: GQL.QueryAlphaLoadMessagesArgs,
            alphaChatsSearchForCompose: GQL.QueryAlphaChatsSearchForComposeArgs,
            alphaChatSearch: GQL.QueryAlphaChatSearchArgs,
            alphaGroupConversationMembers: GQL.QueryAlphaGroupConversationMembersArgs,
            myCards: GQL.QueryMyCardsArgs,
            myWallet: GQL.QueryMyWalletArgs,
            transactionsPending: GQL.QueryTransactionsPendingArgs,
            transactionsHistory: GQL.QueryTransactionsHistoryArgs,
            subscriptions: GQL.QuerySubscriptionsArgs,
            stripeToken: GQL.QueryStripeTokenArgs,
            alphaInviteInfo: GQL.QueryAlphaInviteInfoArgs,
            appInvite: GQL.QueryAppInviteArgs,
            appInviteFromUser: GQL.QueryAppInviteFromUserArgs,
            appInviteInfo: GQL.QueryAppInviteInfoArgs,
            alphaResolveInvite: GQL.QueryAlphaResolveInviteArgs,
            updatesState: GQL.QueryUpdatesStateArgs,
            sequenceState: GQL.QuerySequenceStateArgs,
            updatesDifference: GQL.QueryUpdatesDifferenceArgs,
            sequenceDifference: GQL.QuerySequenceDifferenceArgs,
            phonebookWasExported: GQL.QueryPhonebookWasExportedArgs,
            channels: GQL.QueryChannelsArgs,
            channel: GQL.QueryChannelArgs,
            debugParseID: GQL.QueryDebugParseIDArgs,
            debugCrashQuery: GQL.QueryDebugCrashQueryArgs,
            debugUrlInfo: GQL.QueryDebugUrlInfoArgs,
            userPresence: GQL.QueryUserPresenceArgs,
            debugValidateMessages: GQL.QueryDebugValidateMessagesArgs,
            organizationChatsStats: GQL.QueryOrganizationChatsStatsArgs,
            debugEventsState: GQL.QueryDebugEventsStateArgs,
            debugCheckTasksIndex: GQL.QueryDebugCheckTasksIndexArgs,
            debug2WayDirectChatsCounter: GQL.QueryDebug2WayDirectChatsCounterArgs,
            debugUserMetrics: GQL.QueryDebugUserMetricsArgs,
            debugGlobalCounters: GQL.QueryDebugGlobalCountersArgs,
            debugServerId: GQL.QueryDebugServerIdArgs,
            debugGqlTraces: GQL.QueryDebugGqlTracesArgs,
            debugGqlTrace: GQL.QueryDebugGqlTraceArgs,
            debugUserWallet: GQL.QueryDebugUserWalletArgs,
            debugEntitiesCounter: GQL.QueryDebugEntitiesCounterArgs,
            debugEntitiesCleanerProgress: GQL.QueryDebugEntitiesCleanerProgressArgs,
            debugUserSearch: GQL.QueryDebugUserSearchArgs,
            debugMentionSearch: GQL.QueryDebugMentionSearchArgs,
            debugMentionSearchGetUserData: GQL.QueryDebugMentionSearchGetUserDataArgs,
            debugGetCounters: GQL.QueryDebugGetCountersArgs,
            debugExperimentalCounter: GQL.QueryDebugExperimentalCounterArgs,
            debugFindUser: GQL.QueryDebugFindUserArgs,
            debugSocialSharingImage: GQL.QueryDebugSocialSharingImageArgs,
            dialogs: GQL.QueryDialogsArgs,
            settings: GQL.QuerySettingsArgs,
            authPoints: GQL.QueryAuthPointsArgs,
            myOauthApps: GQL.QueryMyOauthAppsArgs,
            oauthContext: GQL.QueryOauthContextArgs,
            alphaOrganizationMembers: GQL.QueryAlphaOrganizationMembersArgs,
            alphaOrganizationInviteLink: GQL.QueryAlphaOrganizationInviteLinkArgs,
            alphaOrganizationPublicInvite: GQL.QueryAlphaOrganizationPublicInviteArgs,
            myProfile: GQL.QueryMyProfileArgs,
            superAccounts: GQL.QuerySuperAccountsArgs,
            superAccount: GQL.QuerySuperAccountArgs,
            superAdmins: GQL.QuerySuperAdminsArgs,
            alphaChatTextSearch: GQL.QueryAlphaChatTextSearchArgs,
            betaDialogTextSearch: GQL.QueryBetaDialogTextSearchArgs,
            myBlackList: GQL.QueryMyBlackListArgs,
            discoverCollections: GQL.QueryDiscoverCollectionsArgs,
            discoverCollection: GQL.QueryDiscoverCollectionArgs,
            discoverEditorsChoice: GQL.QueryDiscoverEditorsChoiceArgs,
            discoverEditorsChoiceChat: GQL.QueryDiscoverEditorsChoiceChatArgs,
            myApps: GQL.QueryMyAppsArgs,
            userStorage: GQL.QueryUserStorageArgs,
            blackListUpdatesState: GQL.QueryBlackListUpdatesStateArgs,
            chatState: GQL.QueryChatStateArgs,
            conversationState: GQL.QueryConversationStateArgs,
            messageComments: GQL.QueryMessageCommentsArgs,
            feedItemComments: GQL.QueryFeedItemCommentsArgs,
            postComments: GQL.QueryPostCommentsArgs,
            comments: GQL.QueryCommentsArgs,
            commentEntry: GQL.QueryCommentEntryArgs,
            conference: GQL.QueryConferenceArgs,
            conferenceMedia: GQL.QueryConferenceMediaArgs,
            myContacts: GQL.QueryMyContactsArgs,
            myContactsSearch: GQL.QueryMyContactsSearchArgs,
            myContactsState: GQL.QueryMyContactsStateArgs,
            dialogsState: GQL.QueryDialogsStateArgs,
            envVars: GQL.QueryEnvVarsArgs,
            envVar: GQL.QueryEnvVarArgs,
            ipLocation: GQL.QueryIpLocationArgs,
            myStickers: GQL.QueryMyStickersArgs,
            createdStickerPacks: GQL.QueryCreatedStickerPacksArgs,
            stickersByEmoji: GQL.QueryStickersByEmojiArgs,
            stickerPack: GQL.QueryStickerPackArgs,
            stickerPackCatalog: GQL.QueryStickerPackCatalogArgs,
            myNotificationCenter: GQL.QueryMyNotificationCenterArgs,
            myNotifications: GQL.QueryMyNotificationsArgs,
            myOrganization: GQL.QueryMyOrganizationArgs,
            myOrganizations: GQL.QueryMyOrganizationsArgs,
            myCommunities: GQL.QueryMyCommunitiesArgs,
            organization: GQL.QueryOrganizationArgs,
            organizationPublicRooms: GQL.QueryOrganizationPublicRoomsArgs,
            myOrganizationProfile: GQL.QueryMyOrganizationProfileArgs,
            organizationProfile: GQL.QueryOrganizationProfileArgs,
            alphaOrganizations: GQL.QueryAlphaOrganizationsArgs,
            alphaOrganizationByPrefix: GQL.QueryAlphaOrganizationByPrefixArgs,
            alphaComunityPrefixSearch: GQL.QueryAlphaComunityPrefixSearchArgs,
            myPermissions: GQL.QueryMyPermissionsArgs,
            users: GQL.QueryUsersArgs,
            discoverNewAndGrowing: GQL.QueryDiscoverNewAndGrowingArgs,
            discoverPopularNow: GQL.QueryDiscoverPopularNowArgs,
            discoverNewAndGrowingOrganizations: GQL.QueryDiscoverNewAndGrowingOrganizationsArgs,
            discoverPopularNowOrganizations: GQL.QueryDiscoverPopularNowOrganizationsArgs,
            discoverTopOrganizations: GQL.QueryDiscoverTopOrganizationsArgs,
            discoverTopPremium: GQL.QueryDiscoverTopPremiumArgs,
            discoverTopFree: GQL.QueryDiscoverTopFreeArgs,
            post: GQL.QueryPostArgs,
            postDraft: GQL.QueryPostDraftArgs,
            posts: GQL.QueryPostsArgs,
            postMyDrafts: GQL.QueryPostMyDraftsArgs,
            myProfilePrefill: GQL.QueryMyProfilePrefillArgs,
            pushSettings: GQL.QueryPushSettingsArgs,
            activeSessions: GQL.QueryActiveSessionsArgs,
            sessionState: GQL.QuerySessionStateArgs,
            syncUserChats: GQL.QuerySyncUserChatsArgs,
            betaNextDiscoverPage: GQL.QueryBetaNextDiscoverPageArgs,
            gammaNextDiscoverPage: GQL.QueryGammaNextDiscoverPageArgs,
            betaSuggestedRooms: GQL.QueryBetaSuggestedRoomsArgs,
            betaIsDiscoverDone: GQL.QueryBetaIsDiscoverDoneArgs,
            isDiscoverSkipped: GQL.QueryIsDiscoverSkippedArgs,
            matchmakingRoom: GQL.QueryMatchmakingRoomArgs,
            matchmakingProfile: GQL.QueryMatchmakingProfileArgs,
            trendingRoomsByMessages: GQL.QueryTrendingRoomsByMessagesArgs,
            groupScreenViews: GQL.QueryGroupScreenViewsArgs,
            me: GQL.QueryMeArgs,
            user: GQL.QueryUserArgs,
            mySuccessfulInvitesCount: GQL.QueryMySuccessfulInvitesCountArgs,
            superBadgeInRoom: GQL.QuerySuperBadgeInRoomArgs,
            badgeInRoom: GQL.QueryBadgeInRoomArgs,
            userSearch: GQL.QueryUserSearchArgs,
            userSearchForChat: GQL.QueryUserSearchForChatArgs,
            alphaProfiles: GQL.QueryAlphaProfilesArgs,
            alphaHomeFeed: GQL.QueryAlphaHomeFeedArgs,
            alphaFeedItem: GQL.QueryAlphaFeedItemArgs,
            alphaFeedChannel: GQL.QueryAlphaFeedChannelArgs,
            alphaFeedMyDraftsChannel: GQL.QueryAlphaFeedMyDraftsChannelArgs,
            alphaFeedChannelContent: GQL.QueryAlphaFeedChannelContentArgs,
            alphaFeedMySubscriptions: GQL.QueryAlphaFeedMySubscriptionsArgs,
            alphaFeedMyChannels: GQL.QueryAlphaFeedMyChannelsArgs,
            alphaWritableChannels: GQL.QueryAlphaWritableChannelsArgs,
            alphaFeedChannelAdmins: GQL.QueryAlphaFeedChannelAdminsArgs,
            alphaFeedChannelSearch: GQL.QueryAlphaFeedChannelSearchArgs,
            alphaFeedChannelSubscribers: GQL.QueryAlphaFeedChannelSubscribersArgs,
            alphaRecommendedChannels: GQL.QueryAlphaRecommendedChannelsArgs,
            alphaGlobalSearch: GQL.QueryAlphaGlobalSearchArgs,
            featuredGroups: GQL.QueryFeaturedGroupsArgs,
            featuredCommunities: GQL.QueryFeaturedCommunitiesArgs,
            messagesSearch: GQL.QueryMessagesSearchArgs,
            chatMembersSearch: GQL.QueryChatMembersSearchArgs,
            chatMentionSearch: GQL.QueryChatMentionSearchArgs,
            orgMembersSearch: GQL.QueryOrgMembersSearchArgs,
            betaChatMentionSearch: GQL.QueryBetaChatMentionSearchArgs,
            messages: GQL.QueryMessagesArgs,
            gammaMessages: GQL.QueryGammaMessagesArgs,
            modernMessages: GQL.QueryModernMessagesArgs,
            message: GQL.QueryMessageArgs,
            lastReadedMessage: GQL.QueryLastReadedMessageArgs,
            chatSharedMedia: GQL.QueryChatSharedMediaArgs,
            chatSharedMediaCounters: GQL.QueryChatSharedMediaCountersArgs,
            haveAccessToChat: GQL.QueryHaveAccessToChatArgs,
            commonChatsWithUser: GQL.QueryCommonChatsWithUserArgs,
            room: GQL.QueryRoomArgs,
            rooms: GQL.QueryRoomsArgs,
            roomSuper: GQL.QueryRoomSuperArgs,
            roomMessages: GQL.QueryRoomMessagesArgs,
            roomMembers: GQL.QueryRoomMembersArgs,
            roomAdmins: GQL.QueryRoomAdminsArgs,
            roomFeaturedMembers: GQL.QueryRoomFeaturedMembersArgs,
            roomMember: GQL.QueryRoomMemberArgs,
            roomSocialImage: GQL.QueryRoomSocialImageArgs,
            betaRoomSearch: GQL.QueryBetaRoomSearchArgs,
            betaRoomInviteInfo: GQL.QueryBetaRoomInviteInfoArgs,
            betaRoomInviteLink: GQL.QueryBetaRoomInviteLinkArgs,
            betaAvailableRooms: GQL.QueryBetaAvailableRoomsArgs,
            betaUserRooms: GQL.QueryBetaUserRoomsArgs,
            betaUserAvailableRooms: GQL.QueryBetaUserAvailableRoomsArgs,
            alphaUserAvailableRooms: GQL.QueryAlphaUserAvailableRoomsArgs,
            alphaResolveShortName: GQL.QueryAlphaResolveShortNameArgs,
        }
    >;
    Session?: ComplexTypedResolver<
        GQL.Session,
        GQLRoots.SessionRoot,
        {
        },
        {
            id: GQL.SessionIdArgs,
            lastIp: GQL.SessionLastIpArgs,
            lastLocation: GQL.SessionLastLocationArgs,
            online: GQL.SessionOnlineArgs,
            lastSeen: GQL.SessionLastSeenArgs,
            platform: GQL.SessionPlatformArgs,
            current: GQL.SessionCurrentArgs,
        }
    >;
    SessionState?: ComplexTypedResolver<
        GQL.SessionState,
        GQLRoots.SessionStateRoot,
        {
        },
        {
            isLoggedIn: GQL.SessionStateIsLoggedInArgs,
            isProfileCreated: GQL.SessionStateIsProfileCreatedArgs,
            isActivated: GQL.SessionStateIsActivatedArgs,
            isAccountExists: GQL.SessionStateIsAccountExistsArgs,
            isCompleted: GQL.SessionStateIsCompletedArgs,
            isBlocked: GQL.SessionStateIsBlockedArgs,
            isAccountPicked: GQL.SessionStateIsAccountPickedArgs,
            isAccountActivated: GQL.SessionStateIsAccountActivatedArgs,
        }
    >;
    Subscription?: ComplexTypedSubscriptionResolver<
        GQL.Subscription,
        GQLRoots.SubscriptionRoot,
        {
            walletUpdates: GQLRoots.WalletUpdateContainerRoot,
            watchUpdates: GQLRoots.UpdateSubscriptionRoot,
            debugEvents: GQLRoots.DebugEventRoot,
            settingsWatch: GQLRoots.SettingsRoot,
            watchSettings: GQLRoots.SettingsRoot,
            alphaConferenceWatch: GQLRoots.ConferenceRoot,
            alphaConferenceMediaWatch: GQLRoots.ConferenceMediaRoot,
            userEventBus: GQLRoots.UserEventBusMessageRoot,
            globalEventBus: GQLRoots.UserEventBusMessageRoot,
            blackListUpdates: GQLRoots.BlackListUpdateContainerRoot,
            chatUpdates: GQLRoots.ChatUpdateContainerRoot,
            commentUpdates: Nullable<GQLRoots.CommentUpdateContainerRoot>,
            conferenceWatch: GQLRoots.ConferenceRoot,
            conferenceMediaWatch: GQLRoots.ConferenceMediaRoot,
            myContactsUpdates: GQLRoots.ContactsUpdateContainerRoot,
            dialogsUpdates: GQLRoots.DialogUpdateContainerRoot,
            homeFeedUpdates: GQLRoots.FeedUpdateContainerRoot,
            notificationCenterUpdates: Nullable<GQLRoots.NotificationCenterUpdateContainerRoot>,
            alphaSubscribeOnline: GQLRoots.OnlineEventRoot,
            chatOnlinesCount: GQLRoots.ChatOnlineEventRoot,
            typings: GQLRoots.TypingEventRoot,
        },
        {
            lifecheck: GQL.SubscriptionLifecheckArgs,
            walletUpdates: GQL.SubscriptionWalletUpdatesArgs,
            watchUpdates: GQL.SubscriptionWatchUpdatesArgs,
            debugEvents: GQL.SubscriptionDebugEventsArgs,
            debugReaderState: GQL.SubscriptionDebugReaderStateArgs,
            debugServerId: GQL.SubscriptionDebugServerIdArgs,
            settingsWatch: GQL.SubscriptionSettingsWatchArgs,
            watchSettings: GQL.SubscriptionWatchSettingsArgs,
            alphaConferenceWatch: GQL.SubscriptionAlphaConferenceWatchArgs,
            alphaConferenceMediaWatch: GQL.SubscriptionAlphaConferenceMediaWatchArgs,
            userEventBus: GQL.SubscriptionUserEventBusArgs,
            globalEventBus: GQL.SubscriptionGlobalEventBusArgs,
            blackListUpdates: GQL.SubscriptionBlackListUpdatesArgs,
            chatUpdates: GQL.SubscriptionChatUpdatesArgs,
            commentUpdates: GQL.SubscriptionCommentUpdatesArgs,
            conferenceWatch: GQL.SubscriptionConferenceWatchArgs,
            conferenceMediaWatch: GQL.SubscriptionConferenceMediaWatchArgs,
            myContactsUpdates: GQL.SubscriptionMyContactsUpdatesArgs,
            dialogsUpdates: GQL.SubscriptionDialogsUpdatesArgs,
            homeFeedUpdates: GQL.SubscriptionHomeFeedUpdatesArgs,
            notificationCenterUpdates: GQL.SubscriptionNotificationCenterUpdatesArgs,
            alphaSubscribeOnline: GQL.SubscriptionAlphaSubscribeOnlineArgs,
            chatOnlinesCount: GQL.SubscriptionChatOnlinesCountArgs,
            typings: GQL.SubscriptionTypingsArgs,
        }
    >;
    SyncChat?: ComplexTypedResolver<
        GQL.SyncChat,
        GQLRoots.SyncChatRoot,
        {
            conversation: GQLRoots.ConversationRoot,
            sequence: GQLRoots.SequenceRoot,
        },
        {
            conversation: GQL.SyncChatConversationArgs,
            sequence: GQL.SyncChatSequenceArgs,
            pts: GQL.SyncChatPtsArgs,
        }
    >;
    SyncChatsConnection?: ComplexTypedResolver<
        GQL.SyncChatsConnection,
        GQLRoots.SyncChatsConnectionRoot,
        {
            items: GQLRoots.SyncChatRoot[],
        },
        {
            items: GQL.SyncChatsConnectionItemsArgs,
            cursor: GQL.SyncChatsConnectionCursorArgs,
        }
    >;
    Tag?: ComplexTypedResolver<
        GQL.Tag,
        GQLRoots.TagRoot,
        {
        },
        {
            id: GQL.TagIdArgs,
            title: GQL.TagTitleArgs,
        }
    >;
    TagGroup?: ComplexTypedResolver<
        GQL.TagGroup,
        GQLRoots.TagGroupRoot,
        {
            tags: GQLRoots.TagRoot[],
        },
        {
            id: GQL.TagGroupIdArgs,
            title: GQL.TagGroupTitleArgs,
            subtitle: GQL.TagGroupSubtitleArgs,
            tags: GQL.TagGroupTagsArgs,
        }
    >;
    DiscoverPage?: ComplexTypedResolver<
        GQL.DiscoverPage,
        GQLRoots.DiscoverPageRoot,
        {
            chats: Nullable<GQLRoots.RoomRoot[]>,
            tagGroup: Nullable<GQLRoots.TagGroupRoot>,
        },
        {
            chats: GQL.DiscoverPageChatsArgs,
            tagGroup: GQL.DiscoverPageTagGroupArgs,
        }
    >;
    TextMatchmakingQuestion?: ComplexTypedResolver<
        GQL.TextMatchmakingQuestion,
        GQLRoots.TextMatchmakingQuestionRoot,
        {
        },
        {
            id: GQL.TextMatchmakingQuestionIdArgs,
            title: GQL.TextMatchmakingQuestionTitleArgs,
            subtitle: GQL.TextMatchmakingQuestionSubtitleArgs,
        }
    >;
    MultiselectMatchmakingQuestion?: ComplexTypedResolver<
        GQL.MultiselectMatchmakingQuestion,
        GQLRoots.MultiselectMatchmakingQuestionRoot,
        {
        },
        {
            id: GQL.MultiselectMatchmakingQuestionIdArgs,
            title: GQL.MultiselectMatchmakingQuestionTitleArgs,
            subtitle: GQL.MultiselectMatchmakingQuestionSubtitleArgs,
            tags: GQL.MultiselectMatchmakingQuestionTagsArgs,
        }
    >;
    MatchmakingQuestion?: UnionTypeResolver<GQLRoots.MatchmakingQuestionRoot, 'TextMatchmakingQuestion' | 'MultiselectMatchmakingQuestion'>;
    TextMatchmakingAnswer?: ComplexTypedResolver<
        GQL.TextMatchmakingAnswer,
        GQLRoots.TextMatchmakingAnswerRoot,
        {
            question: GQLRoots.TextMatchmakingQuestionRoot,
        },
        {
            question: GQL.TextMatchmakingAnswerQuestionArgs,
            answer: GQL.TextMatchmakingAnswerAnswerArgs,
        }
    >;
    MultiselectMatchmakingAnswer?: ComplexTypedResolver<
        GQL.MultiselectMatchmakingAnswer,
        GQLRoots.MultiselectMatchmakingAnswerRoot,
        {
            question: GQLRoots.MultiselectMatchmakingQuestionRoot,
        },
        {
            question: GQL.MultiselectMatchmakingAnswerQuestionArgs,
            tags: GQL.MultiselectMatchmakingAnswerTagsArgs,
        }
    >;
    MatchmakingAnswer?: UnionTypeResolver<GQLRoots.MatchmakingAnswerRoot, 'TextMatchmakingAnswer' | 'MultiselectMatchmakingAnswer'>;
    MatchmakingProfile?: ComplexTypedResolver<
        GQL.MatchmakingProfile,
        GQLRoots.MatchmakingProfileRoot,
        {
            user: GQLRoots.UserRoot,
            answers: GQLRoots.MatchmakingAnswerRoot[],
        },
        {
            user: GQL.MatchmakingProfileUserArgs,
            answers: GQL.MatchmakingProfileAnswersArgs,
            chatCreated: GQL.MatchmakingProfileChatCreatedArgs,
        }
    >;
    MatchmakingPeer?: UnionTypeResolver<GQLRoots.MatchmakingPeerRoot, 'SharedRoom'>;
    MatchmakingRoom?: ComplexTypedResolver<
        GQL.MatchmakingRoom,
        GQLRoots.MatchmakingRoomRoot,
        {
            questions: Nullable<GQLRoots.MatchmakingQuestionRoot[]>,
            profiles: Nullable<GQLRoots.MatchmakingProfileRoot[]>,
            myProfile: Nullable<GQLRoots.MatchmakingProfileRoot>,
            peer: GQLRoots.MatchmakingPeerRoot,
        },
        {
            enabled: GQL.MatchmakingRoomEnabledArgs,
            questions: GQL.MatchmakingRoomQuestionsArgs,
            profiles: GQL.MatchmakingRoomProfilesArgs,
            myProfile: GQL.MatchmakingRoomMyProfileArgs,
            peer: GQL.MatchmakingRoomPeerArgs,
        }
    >;
    MatchmakingQuestionType?: EnumTypeResolver<'Text' | 'Multiselect', GQLRoots.MatchmakingQuestionTypeRoot>;
    TrendingRoom?: ComplexTypedResolver<
        GQL.TrendingRoom,
        GQLRoots.TrendingRoomRoot,
        {
            room: GQLRoots.RoomRoot,
        },
        {
            room: GQL.TrendingRoomRoomArgs,
            messagesDelta: GQL.TrendingRoomMessagesDeltaArgs,
        }
    >;
    TypingEvent?: ComplexTypedResolver<
        GQL.TypingEvent,
        GQLRoots.TypingEventRoot,
        {
            conversation: GQLRoots.ConversationRoot,
            chat: GQLRoots.RoomRoot,
            user: GQLRoots.UserRoot,
        },
        {
            conversation: GQL.TypingEventConversationArgs,
            chat: GQL.TypingEventChatArgs,
            user: GQL.TypingEventUserArgs,
            type: GQL.TypingEventTypeArgs,
            cancel: GQL.TypingEventCancelArgs,
        }
    >;
    TypingType?: EnumTypeResolver<'TEXT' | 'PHOTO' | 'FILE' | 'STICKER' | 'VIDEO', GQLRoots.TypingTypeRoot>;
    User?: ComplexTypedResolver<
        GQL.User,
        GQLRoots.UserRoot,
        {
            badge: Nullable<GQLRoots.ProfileBadgeRoot>,
            channelsJoined: GQLRoots.ChannelConversationRoot[],
            photoRef: Nullable<GQLRoots.ImageRefRoot>,
            pictureRef: Nullable<GQLRoots.ImageRefRoot>,
            chatsWithBadge: GQLRoots.UserChatWithBadgeRoot[],
            organizations: GQLRoots.OrganizationRoot[],
            primaryOrganization: Nullable<GQLRoots.OrganizationRoot>,
            alphaPrimaryOrganization: Nullable<GQLRoots.OrganizationRoot>,
            badges: GQLRoots.UserBadgeRoot[],
            primaryBadge: Nullable<GQLRoots.UserBadgeRoot>,
        },
        {
            id: GQL.UserIdArgs,
            isYou: GQL.UserIsYouArgs,
            isBot: GQL.UserIsBotArgs,
            isDeleted: GQL.UserIsDeletedArgs,
            name: GQL.UserNameArgs,
            firstName: GQL.UserFirstNameArgs,
            lastName: GQL.UserLastNameArgs,
            photo: GQL.UserPhotoArgs,
            phone: GQL.UserPhoneArgs,
            email: GQL.UserEmailArgs,
            website: GQL.UserWebsiteArgs,
            about: GQL.UserAboutArgs,
            location: GQL.UserLocationArgs,
            linkedin: GQL.UserLinkedinArgs,
            instagram: GQL.UserInstagramArgs,
            twitter: GQL.UserTwitterArgs,
            facebook: GQL.UserFacebookArgs,
            audienceSize: GQL.UserAudienceSizeArgs,
            badge: GQL.UserBadgeArgs,
            joinDate: GQL.UserJoinDateArgs,
            birthDay: GQL.UserBirthDayArgs,
            status: GQL.UserStatusArgs,
            channelsJoined: GQL.UserChannelsJoinedArgs,
            photoRef: GQL.UserPhotoRefArgs,
            picture: GQL.UserPictureArgs,
            pictureRef: GQL.UserPictureRefArgs,
            alphaRole: GQL.UserAlphaRoleArgs,
            alphaLinkedin: GQL.UserAlphaLinkedinArgs,
            alphaTwitter: GQL.UserAlphaTwitterArgs,
            alphaLocations: GQL.UserAlphaLocationsArgs,
            chatsWithBadge: GQL.UserChatsWithBadgeArgs,
            externalSocialImage: GQL.UserExternalSocialImageArgs,
            isBanned: GQL.UserIsBannedArgs,
            isMeBanned: GQL.UserIsMeBannedArgs,
            online: GQL.UserOnlineArgs,
            active: GQL.UserActiveArgs,
            lastSeen: GQL.UserLastSeenArgs,
            organizations: GQL.UserOrganizationsArgs,
            primaryOrganization: GQL.UserPrimaryOrganizationArgs,
            alphaPrimaryOrganization: GQL.UserAlphaPrimaryOrganizationArgs,
            inContacts: GQL.UserInContactsArgs,
            badges: GQL.UserBadgesArgs,
            primaryBadge: GQL.UserPrimaryBadgeArgs,
            shortname: GQL.UserShortnameArgs,
        }
    >;
    UserChatWithBadge?: ComplexTypedResolver<
        GQL.UserChatWithBadge,
        GQLRoots.UserChatWithBadgeRoot,
        {
            badge: GQLRoots.UserBadgeRoot,
            chat: GQLRoots.RoomRoot,
        },
        {
            badge: GQL.UserChatWithBadgeBadgeArgs,
            chat: GQL.UserChatWithBadgeChatArgs,
        }
    >;
    UserBadge?: ComplexTypedResolver<
        GQL.UserBadge,
        GQLRoots.UserBadgeRoot,
        {
        },
        {
            id: GQL.UserBadgeIdArgs,
            name: GQL.UserBadgeNameArgs,
            verified: GQL.UserBadgeVerifiedArgs,
        }
    >;
    UserEdge?: ComplexTypedResolver<
        GQL.UserEdge,
        GQLRoots.UserEdgeRoot,
        {
            node: GQLRoots.UserRoot,
        },
        {
            node: GQL.UserEdgeNodeArgs,
            cursor: GQL.UserEdgeCursorArgs,
        }
    >;
    UserConnection?: ComplexTypedResolver<
        GQL.UserConnection,
        GQLRoots.UserConnectionRoot,
        {
            edges: GQLRoots.UserEdgeRoot[],
            pageInfo: GQLRoots.PageInfoRoot,
        },
        {
            edges: GQL.UserConnectionEdgesArgs,
            pageInfo: GQL.UserConnectionPageInfoArgs,
        }
    >;
    ChatUserEdge?: ComplexTypedResolver<
        GQL.ChatUserEdge,
        GQLRoots.ChatUserEdgeRoot,
        {
            node: GQLRoots.UserRoot,
        },
        {
            node: GQL.ChatUserEdgeNodeArgs,
            isMember: GQL.ChatUserEdgeIsMemberArgs,
            cursor: GQL.ChatUserEdgeCursorArgs,
        }
    >;
    ChatUserConnection?: ComplexTypedResolver<
        GQL.ChatUserConnection,
        GQLRoots.ChatUserConnectionRoot,
        {
            edges: GQLRoots.ChatUserEdgeRoot[],
            pageInfo: GQLRoots.PageInfoRoot,
        },
        {
            edges: GQL.ChatUserConnectionEdgesArgs,
            pageInfo: GQL.ChatUserConnectionPageInfoArgs,
        }
    >;
    FeedItem?: UnionTypeResolver<GQLRoots.FeedItemRoot, 'FeedPost'>;
    FeedPostAuthor?: UnionTypeResolver<GQLRoots.FeedPostAuthorRoot, 'User'>;
    FeedPostSource?: UnionTypeResolver<GQLRoots.FeedPostSourceRoot, 'FeedChannel'>;
    FeedPost?: ComplexTypedResolver<
        GQL.FeedPost,
        GQLRoots.FeedPostRoot,
        {
            author: GQLRoots.FeedPostAuthorRoot,
            source: Nullable<GQLRoots.FeedPostSourceRoot>,
            reactions: GQLRoots.ModernMessageReactionRoot[],
            spans: GQLRoots.MessageSpanRoot[],
            attachments: GQLRoots.ModernMessageAttachmentRoot[],
            slides: GQLRoots.SlideRoot[],
        },
        {
            id: GQL.FeedPostIdArgs,
            date: GQL.FeedPostDateArgs,
            author: GQL.FeedPostAuthorArgs,
            source: GQL.FeedPostSourceArgs,
            canEdit: GQL.FeedPostCanEditArgs,
            edited: GQL.FeedPostEditedArgs,
            reactions: GQL.FeedPostReactionsArgs,
            isMentioned: GQL.FeedPostIsMentionedArgs,
            message: GQL.FeedPostMessageArgs,
            spans: GQL.FeedPostSpansArgs,
            attachments: GQL.FeedPostAttachmentsArgs,
            commentsCount: GQL.FeedPostCommentsCountArgs,
            slides: GQL.FeedPostSlidesArgs,
            fallback: GQL.FeedPostFallbackArgs,
        }
    >;
    FeedItemConnection?: ComplexTypedResolver<
        GQL.FeedItemConnection,
        GQLRoots.FeedItemConnectionRoot,
        {
            items: GQLRoots.FeedItemRoot[],
        },
        {
            items: GQL.FeedItemConnectionItemsArgs,
            cursor: GQL.FeedItemConnectionCursorArgs,
        }
    >;
    Slide?: UnionTypeResolver<GQLRoots.SlideRoot, 'TextSlide'>;
    SlideAttachment?: UnionTypeResolver<GQLRoots.SlideAttachmentRoot, 'User' | 'SharedRoom' | 'Organization'>;
    TextSlide?: ComplexTypedResolver<
        GQL.TextSlide,
        GQLRoots.TextSlideRoot,
        {
            spans: GQLRoots.MessageSpanRoot[],
            cover: Nullable<GQLRoots.ImageRoot>,
            attachments: GQLRoots.SlideAttachmentRoot[],
        },
        {
            id: GQL.TextSlideIdArgs,
            text: GQL.TextSlideTextArgs,
            spans: GQL.TextSlideSpansArgs,
            cover: GQL.TextSlideCoverArgs,
            coverAlign: GQL.TextSlideCoverAlignArgs,
            attachments: GQL.TextSlideAttachmentsArgs,
        }
    >;
    SlideType?: EnumTypeResolver<'Text', GQLRoots.SlideTypeRoot>;
    SlideCoverAlign?: EnumTypeResolver<'Top' | 'Bottom' | 'Cover', GQLRoots.SlideCoverAlignRoot>;
    FeedChannel?: ComplexTypedResolver<
        GQL.FeedChannel,
        GQLRoots.FeedChannelRoot,
        {
        },
        {
            id: GQL.FeedChannelIdArgs,
            title: GQL.FeedChannelTitleArgs,
            about: GQL.FeedChannelAboutArgs,
            photo: GQL.FeedChannelPhotoArgs,
            socialImage: GQL.FeedChannelSocialImageArgs,
            subscribersCount: GQL.FeedChannelSubscribersCountArgs,
            postsCount: GQL.FeedChannelPostsCountArgs,
            isGlobal: GQL.FeedChannelIsGlobalArgs,
            isHidden: GQL.FeedChannelIsHiddenArgs,
            subscribed: GQL.FeedChannelSubscribedArgs,
            myRole: GQL.FeedChannelMyRoleArgs,
            shortname: GQL.FeedChannelShortnameArgs,
        }
    >;
    FeedChannelConnection?: ComplexTypedResolver<
        GQL.FeedChannelConnection,
        GQLRoots.FeedChannelConnectionRoot,
        {
            items: GQLRoots.FeedChannelRoot[],
        },
        {
            items: GQL.FeedChannelConnectionItemsArgs,
            cursor: GQL.FeedChannelConnectionCursorArgs,
        }
    >;
    FeedChannelEdge?: ComplexTypedResolver<
        GQL.FeedChannelEdge,
        GQLRoots.FeedChannelEdgeRoot,
        {
            node: GQLRoots.FeedChannelRoot,
        },
        {
            node: GQL.FeedChannelEdgeNodeArgs,
            cursor: GQL.FeedChannelEdgeCursorArgs,
        }
    >;
    FeedChannelSearchConnection?: ComplexTypedResolver<
        GQL.FeedChannelSearchConnection,
        GQLRoots.FeedChannelSearchConnectionRoot,
        {
            edges: GQLRoots.FeedChannelEdgeRoot[],
            pageInfo: GQLRoots.PageInfoRoot,
        },
        {
            edges: GQL.FeedChannelSearchConnectionEdgesArgs,
            pageInfo: GQL.FeedChannelSearchConnectionPageInfoArgs,
        }
    >;
    FeedSubscription?: UnionTypeResolver<GQLRoots.FeedSubscriptionRoot, 'FeedChannel'>;
    FeedChannelSubscriberRole?: EnumTypeResolver<'Creator' | 'Editor' | 'Subscriber' | 'None', GQLRoots.FeedChannelSubscriberRoleRoot>;
    FeedChannelAdmin?: ComplexTypedResolver<
        GQL.FeedChannelAdmin,
        GQLRoots.FeedChannelAdminRoot,
        {
            user: GQLRoots.UserRoot,
            promoter: Nullable<GQLRoots.UserRoot>,
        },
        {
            user: GQL.FeedChannelAdminUserArgs,
            role: GQL.FeedChannelAdminRoleArgs,
            promoter: GQL.FeedChannelAdminPromoterArgs,
        }
    >;
    FeedChannelAdminConnection?: ComplexTypedResolver<
        GQL.FeedChannelAdminConnection,
        GQLRoots.FeedChannelAdminConnectionRoot,
        {
            items: GQLRoots.FeedChannelAdminRoot[],
        },
        {
            items: GQL.FeedChannelAdminConnectionItemsArgs,
            cursor: GQL.FeedChannelAdminConnectionCursorArgs,
        }
    >;
    FeedChannelSubscriber?: ComplexTypedResolver<
        GQL.FeedChannelSubscriber,
        GQLRoots.FeedChannelSubscriberRoot,
        {
            user: GQLRoots.UserRoot,
        },
        {
            user: GQL.FeedChannelSubscriberUserArgs,
            role: GQL.FeedChannelSubscriberRoleArgs,
        }
    >;
    FeedChannelSubscriberEdge?: ComplexTypedResolver<
        GQL.FeedChannelSubscriberEdge,
        GQLRoots.FeedChannelSubscriberEdgeRoot,
        {
            node: GQLRoots.FeedChannelSubscriberRoot,
        },
        {
            node: GQL.FeedChannelSubscriberEdgeNodeArgs,
            cursor: GQL.FeedChannelSubscriberEdgeCursorArgs,
        }
    >;
    FeedChannelSubscriberConnection?: ComplexTypedResolver<
        GQL.FeedChannelSubscriberConnection,
        GQLRoots.FeedChannelSubscriberConnectionRoot,
        {
            edges: GQLRoots.FeedChannelSubscriberEdgeRoot[],
            pageInfo: GQLRoots.PageInfoRoot,
        },
        {
            edges: GQL.FeedChannelSubscriberConnectionEdgesArgs,
            pageInfo: GQL.FeedChannelSubscriberConnectionPageInfoArgs,
        }
    >;
    FeedReactionType?: EnumTypeResolver<'LIKE' | 'THUMB_UP' | 'JOY' | 'SCREAM' | 'CRYING' | 'ANGRY', GQLRoots.FeedReactionTypeRoot>;
    GlobalSearchEntry?: UnionTypeResolver<GQLRoots.GlobalSearchEntryRoot, 'Organization' | 'User' | 'SharedRoom'>;
    GlobalSearchEntryKind?: EnumTypeResolver<'ORGANIZATION' | 'USER' | 'SHAREDROOM', GQLRoots.GlobalSearchEntryKindRoot>;
    MessageWithChat?: ComplexTypedResolver<
        GQL.MessageWithChat,
        GQLRoots.MessageWithChatRoot,
        {
            message: GQLRoots.ModernMessageRoot,
            chat: GQLRoots.RoomRoot,
        },
        {
            message: GQL.MessageWithChatMessageArgs,
            chat: GQL.MessageWithChatChatArgs,
        }
    >;
    MessageEdge?: ComplexTypedResolver<
        GQL.MessageEdge,
        GQLRoots.MessageEdgeRoot,
        {
            node: GQLRoots.MessageWithChatRoot,
        },
        {
            node: GQL.MessageEdgeNodeArgs,
            cursor: GQL.MessageEdgeCursorArgs,
        }
    >;
    MessageConnection?: ComplexTypedResolver<
        GQL.MessageConnection,
        GQLRoots.MessageConnectionRoot,
        {
            edges: GQLRoots.MessageEdgeRoot[],
            pageInfo: GQLRoots.PageInfoRoot,
        },
        {
            edges: GQL.MessageConnectionEdgesArgs,
            pageInfo: GQL.MessageConnectionPageInfoArgs,
        }
    >;
    GlobalSearchConnection?: ComplexTypedResolver<
        GQL.GlobalSearchConnection,
        GQLRoots.GlobalSearchConnectionRoot,
        {
            globalItems: GQLRoots.GlobalSearchEntryRoot[],
            localItems: GQLRoots.UserRoot[],
        },
        {
            globalItems: GQL.GlobalSearchConnectionGlobalItemsArgs,
            localItems: GQL.GlobalSearchConnectionLocalItemsArgs,
            cursor: GQL.GlobalSearchConnectionCursorArgs,
        }
    >;
    MentionSearchUser?: ComplexTypedResolver<
        GQL.MentionSearchUser,
        GQLRoots.MentionSearchUserRoot,
        {
            user: GQLRoots.UserRoot,
        },
        {
            user: GQL.MentionSearchUserUserArgs,
            fromSameChat: GQL.MentionSearchUserFromSameChatArgs,
        }
    >;
    MentionSearchOrganization?: ComplexTypedResolver<
        GQL.MentionSearchOrganization,
        GQLRoots.MentionSearchOrganizationRoot,
        {
            organization: GQLRoots.OrganizationRoot,
        },
        {
            organization: GQL.MentionSearchOrganizationOrganizationArgs,
        }
    >;
    MentionSearchSharedRoom?: ComplexTypedResolver<
        GQL.MentionSearchSharedRoom,
        GQLRoots.MentionSearchSharedRoomRoot,
        {
            room: GQLRoots.SharedRoomRoot,
        },
        {
            room: GQL.MentionSearchSharedRoomRoomArgs,
        }
    >;
    MentionSearchEntry?: UnionTypeResolver<GQLRoots.MentionSearchEntryRoot, 'MentionSearchUser' | 'MentionSearchSharedRoom' | 'MentionSearchOrganization'>;
    MentionSearchConnection?: ComplexTypedResolver<
        GQL.MentionSearchConnection,
        GQLRoots.MentionSearchConnectionRoot,
        {
            items: GQLRoots.MentionSearchEntryRoot[],
        },
        {
            items: GQL.MentionSearchConnectionItemsArgs,
            cursor: GQL.MentionSearchConnectionCursorArgs,
        }
    >;
    MessageSource?: UnionTypeResolver<GQLRoots.MessageSourceRoot, 'MessageSourceChat' | 'MessageSourceComment'>;
    MessageSourceChat?: ComplexTypedResolver<
        GQL.MessageSourceChat,
        GQLRoots.MessageSourceChatRoot,
        {
            chat: GQLRoots.RoomRoot,
        },
        {
            chat: GQL.MessageSourceChatChatArgs,
        }
    >;
    MessageSourceComment?: ComplexTypedResolver<
        GQL.MessageSourceComment,
        GQLRoots.MessageSourceCommentRoot,
        {
            peer: GQLRoots.CommentsPeerRoot,
        },
        {
            peer: GQL.MessageSourceCommentPeerArgs,
        }
    >;
    ModernMessage?: InterfaceTypeResolver<GQLRoots.ModernMessageRoot, 'ServiceMessage' | 'GeneralMessage' | 'StickerMessage'>;
    ServiceMessage?: ComplexTypedResolver<
        GQL.ServiceMessage,
        GQLRoots.ServiceMessageRoot,
        {
            sender: GQLRoots.UserRoot,
            senderBadge: Nullable<GQLRoots.UserBadgeRoot>,
            source: Nullable<GQLRoots.MessageSourceRoot>,
            spans: GQLRoots.MessageSpanRoot[],
            serviceMetadata: Nullable<GQLRoots.ServiceMetadataRoot>,
            overrideAvatar: Nullable<GQLRoots.ImageRefRoot>,
        },
        {
            id: GQL.ServiceMessageIdArgs,
            seq: GQL.ServiceMessageSeqArgs,
            date: GQL.ServiceMessageDateArgs,
            sender: GQL.ServiceMessageSenderArgs,
            senderBadge: GQL.ServiceMessageSenderBadgeArgs,
            isMentioned: GQL.ServiceMessageIsMentionedArgs,
            source: GQL.ServiceMessageSourceArgs,
            hidden: GQL.ServiceMessageHiddenArgs,
            message: GQL.ServiceMessageMessageArgs,
            spans: GQL.ServiceMessageSpansArgs,
            serviceMetadata: GQL.ServiceMessageServiceMetadataArgs,
            fallback: GQL.ServiceMessageFallbackArgs,
            overrideAvatar: GQL.ServiceMessageOverrideAvatarArgs,
            overrideName: GQL.ServiceMessageOverrideNameArgs,
        }
    >;
    GeneralMessage?: ComplexTypedResolver<
        GQL.GeneralMessage,
        GQLRoots.GeneralMessageRoot,
        {
            sender: GQLRoots.UserRoot,
            senderBadge: Nullable<GQLRoots.UserBadgeRoot>,
            reactions: GQLRoots.ModernMessageReactionRoot[],
            reactionCounters: GQLRoots.ReactionCounterRoot[],
            source: Nullable<GQLRoots.MessageSourceRoot>,
            spans: GQLRoots.MessageSpanRoot[],
            attachments: GQLRoots.ModernMessageAttachmentRoot[],
            quotedMessages: GQLRoots.ModernMessageRoot[],
            overrideAvatar: Nullable<GQLRoots.ImageRefRoot>,
        },
        {
            id: GQL.GeneralMessageIdArgs,
            seq: GQL.GeneralMessageSeqArgs,
            date: GQL.GeneralMessageDateArgs,
            sender: GQL.GeneralMessageSenderArgs,
            senderBadge: GQL.GeneralMessageSenderBadgeArgs,
            edited: GQL.GeneralMessageEditedArgs,
            reactions: GQL.GeneralMessageReactionsArgs,
            reactionCounters: GQL.GeneralMessageReactionCountersArgs,
            isMentioned: GQL.GeneralMessageIsMentionedArgs,
            source: GQL.GeneralMessageSourceArgs,
            hidden: GQL.GeneralMessageHiddenArgs,
            message: GQL.GeneralMessageMessageArgs,
            spans: GQL.GeneralMessageSpansArgs,
            attachments: GQL.GeneralMessageAttachmentsArgs,
            quotedMessages: GQL.GeneralMessageQuotedMessagesArgs,
            commentsCount: GQL.GeneralMessageCommentsCountArgs,
            fallback: GQL.GeneralMessageFallbackArgs,
            overrideAvatar: GQL.GeneralMessageOverrideAvatarArgs,
            overrideName: GQL.GeneralMessageOverrideNameArgs,
        }
    >;
    StickerMessage?: ComplexTypedResolver<
        GQL.StickerMessage,
        GQLRoots.StickerMessageRoot,
        {
            sender: GQLRoots.UserRoot,
            senderBadge: Nullable<GQLRoots.UserBadgeRoot>,
            source: Nullable<GQLRoots.MessageSourceRoot>,
            spans: GQLRoots.MessageSpanRoot[],
            reactions: GQLRoots.ModernMessageReactionRoot[],
            reactionCounters: GQLRoots.ReactionCounterRoot[],
            quotedMessages: GQLRoots.ModernMessageRoot[],
            sticker: GQLRoots.StickerRoot,
            overrideAvatar: Nullable<GQLRoots.ImageRefRoot>,
        },
        {
            id: GQL.StickerMessageIdArgs,
            seq: GQL.StickerMessageSeqArgs,
            date: GQL.StickerMessageDateArgs,
            sender: GQL.StickerMessageSenderArgs,
            senderBadge: GQL.StickerMessageSenderBadgeArgs,
            source: GQL.StickerMessageSourceArgs,
            hidden: GQL.StickerMessageHiddenArgs,
            message: GQL.StickerMessageMessageArgs,
            spans: GQL.StickerMessageSpansArgs,
            reactions: GQL.StickerMessageReactionsArgs,
            reactionCounters: GQL.StickerMessageReactionCountersArgs,
            fallback: GQL.StickerMessageFallbackArgs,
            quotedMessages: GQL.StickerMessageQuotedMessagesArgs,
            commentsCount: GQL.StickerMessageCommentsCountArgs,
            sticker: GQL.StickerMessageStickerArgs,
            overrideAvatar: GQL.StickerMessageOverrideAvatarArgs,
            overrideName: GQL.StickerMessageOverrideNameArgs,
        }
    >;
    GammaMessagesBatch?: ComplexTypedResolver<
        GQL.GammaMessagesBatch,
        GQLRoots.GammaMessagesBatchRoot,
        {
            messages: GQLRoots.ModernMessageRoot[],
        },
        {
            messages: GQL.GammaMessagesBatchMessagesArgs,
            haveMoreForward: GQL.GammaMessagesBatchHaveMoreForwardArgs,
            haveMoreBackward: GQL.GammaMessagesBatchHaveMoreBackwardArgs,
        }
    >;
    ModernMessagesBatch?: ComplexTypedResolver<
        GQL.ModernMessagesBatch,
        GQLRoots.ModernMessagesBatchRoot,
        {
            messages: GQLRoots.ModernMessageRoot[],
        },
        {
            messages: GQL.ModernMessagesBatchMessagesArgs,
            haveMoreForward: GQL.ModernMessagesBatchHaveMoreForwardArgs,
            haveMoreBackward: GQL.ModernMessagesBatchHaveMoreBackwardArgs,
        }
    >;
    SharedMediaType?: EnumTypeResolver<'LINK' | 'IMAGE' | 'DOCUMENT' | 'VIDEO', GQLRoots.SharedMediaTypeRoot>;
    SharedMediaCounters?: ComplexTypedResolver<
        GQL.SharedMediaCounters,
        GQLRoots.SharedMediaCountersRoot,
        {
        },
        {
            links: GQL.SharedMediaCountersLinksArgs,
            images: GQL.SharedMediaCountersImagesArgs,
            documents: GQL.SharedMediaCountersDocumentsArgs,
            videos: GQL.SharedMediaCountersVideosArgs,
        }
    >;
    SharedMediaMessageEdge?: ComplexTypedResolver<
        GQL.SharedMediaMessageEdge,
        GQLRoots.SharedMediaMessageEdgeRoot,
        {
            node: GQLRoots.MessageWithChatRoot,
        },
        {
            node: GQL.SharedMediaMessageEdgeNodeArgs,
            cursor: GQL.SharedMediaMessageEdgeCursorArgs,
            index: GQL.SharedMediaMessageEdgeIndexArgs,
        }
    >;
    SharedMediaConnection?: ComplexTypedResolver<
        GQL.SharedMediaConnection,
        GQLRoots.SharedMediaConnectionRoot,
        {
            edges: GQLRoots.SharedMediaMessageEdgeRoot[],
            pageInfo: GQLRoots.PageInfoRoot,
        },
        {
            edges: GQL.SharedMediaConnectionEdgesArgs,
            pageInfo: GQL.SharedMediaConnectionPageInfoArgs,
        }
    >;
    CommonChatsWithUserResponse?: ComplexTypedResolver<
        GQL.CommonChatsWithUserResponse,
        GQLRoots.CommonChatsWithUserResponseRoot,
        {
            items: GQLRoots.SharedRoomRoot[],
        },
        {
            items: GQL.CommonChatsWithUserResponseItemsArgs,
            cursor: GQL.CommonChatsWithUserResponseCursorArgs,
            count: GQL.CommonChatsWithUserResponseCountArgs,
        }
    >;
    ImageFallback?: ComplexTypedResolver<
        GQL.ImageFallback,
        GQLRoots.ImageFallbackRoot,
        {
        },
        {
            photo: GQL.ImageFallbackPhotoArgs,
            text: GQL.ImageFallbackTextArgs,
        }
    >;
    Image?: ComplexTypedResolver<
        GQL.Image,
        GQLRoots.ImageRoot,
        {
            metadata: Nullable<GQLRoots.FileMetadataRoot>,
        },
        {
            url: GQL.ImageUrlArgs,
            metadata: GQL.ImageMetadataArgs,
        }
    >;
    ModernMessageAttachment?: InterfaceTypeResolver<GQLRoots.ModernMessageAttachmentRoot, 'MessageRichAttachment' | 'MessageAttachmentFile' | 'MessageAttachmentPost' | 'MessageAttachmentPurchase'>;
    MessageRichAttachment?: ComplexTypedResolver<
        GQL.MessageRichAttachment,
        GQLRoots.MessageRichAttachmentRoot,
        {
            icon: Nullable<GQLRoots.ImageRoot>,
            image: Nullable<GQLRoots.ImageRoot>,
            imageFallback: Nullable<GQLRoots.ImageFallbackRoot>,
            socialImage: Nullable<GQLRoots.ImageRoot>,
            keyboard: Nullable<GQLRoots.MessageKeyboardRoot>,
        },
        {
            id: GQL.MessageRichAttachmentIdArgs,
            title: GQL.MessageRichAttachmentTitleArgs,
            subTitle: GQL.MessageRichAttachmentSubTitleArgs,
            titleLink: GQL.MessageRichAttachmentTitleLinkArgs,
            titleLinkHostname: GQL.MessageRichAttachmentTitleLinkHostnameArgs,
            text: GQL.MessageRichAttachmentTextArgs,
            icon: GQL.MessageRichAttachmentIconArgs,
            image: GQL.MessageRichAttachmentImageArgs,
            imagePreview: GQL.MessageRichAttachmentImagePreviewArgs,
            imageFallback: GQL.MessageRichAttachmentImageFallbackArgs,
            socialImage: GQL.MessageRichAttachmentSocialImageArgs,
            socialImagePreview: GQL.MessageRichAttachmentSocialImagePreviewArgs,
            keyboard: GQL.MessageRichAttachmentKeyboardArgs,
            fallback: GQL.MessageRichAttachmentFallbackArgs,
        }
    >;
    MessageAttachmentFile?: ComplexTypedResolver<
        GQL.MessageAttachmentFile,
        GQLRoots.MessageAttachmentFileRoot,
        {
            fileMetadata: GQLRoots.FileMetadataRoot,
        },
        {
            id: GQL.MessageAttachmentFileIdArgs,
            fileId: GQL.MessageAttachmentFileFileIdArgs,
            fileMetadata: GQL.MessageAttachmentFileFileMetadataArgs,
            filePreview: GQL.MessageAttachmentFileFilePreviewArgs,
            fallback: GQL.MessageAttachmentFileFallbackArgs,
        }
    >;
    MessageAttachmentPost?: ComplexTypedResolver<
        GQL.MessageAttachmentPost,
        GQLRoots.MessageAttachmentPostRoot,
        {
            post: GQLRoots.FeedItemRoot,
        },
        {
            id: GQL.MessageAttachmentPostIdArgs,
            post: GQL.MessageAttachmentPostPostArgs,
            fallback: GQL.MessageAttachmentPostFallbackArgs,
        }
    >;
    MessageAttachmentPurchase?: ComplexTypedResolver<
        GQL.MessageAttachmentPurchase,
        GQLRoots.MessageAttachmentPurchaseRoot,
        {
            purchase: GQLRoots.PurchaseRoot,
        },
        {
            id: GQL.MessageAttachmentPurchaseIdArgs,
            fallback: GQL.MessageAttachmentPurchaseFallbackArgs,
            purchase: GQL.MessageAttachmentPurchasePurchaseArgs,
        }
    >;
    MessageKeyboard?: ComplexTypedResolver<
        GQL.MessageKeyboard,
        GQLRoots.MessageKeyboardRoot,
        {
            buttons: Nullable<GQLRoots.ModernMessageButtonRoot[]>[],
        },
        {
            buttons: GQL.MessageKeyboardButtonsArgs,
        }
    >;
    ModernMessageButton?: ComplexTypedResolver<
        GQL.ModernMessageButton,
        GQLRoots.ModernMessageButtonRoot,
        {
        },
        {
            id: GQL.ModernMessageButtonIdArgs,
            title: GQL.ModernMessageButtonTitleArgs,
            style: GQL.ModernMessageButtonStyleArgs,
            url: GQL.ModernMessageButtonUrlArgs,
        }
    >;
    ModernMessageButtonStyle?: EnumTypeResolver<'DEFAULT' | 'LIGHT' | 'PAY', GQLRoots.ModernMessageButtonStyleRoot>;
    MessageReactionType?: EnumTypeResolver<'LIKE' | 'THUMB_UP' | 'JOY' | 'SCREAM' | 'CRYING' | 'ANGRY' | 'DONATE', GQLRoots.MessageReactionTypeRoot>;
    ModernMessageReaction?: ComplexTypedResolver<
        GQL.ModernMessageReaction,
        GQLRoots.ModernMessageReactionRoot,
        {
            user: GQLRoots.UserRoot,
        },
        {
            user: GQL.ModernMessageReactionUserArgs,
            reaction: GQL.ModernMessageReactionReactionArgs,
        }
    >;
    ReactionCounter?: ComplexTypedResolver<
        GQL.ReactionCounter,
        GQLRoots.ReactionCounterRoot,
        {
        },
        {
            reaction: GQL.ReactionCounterReactionArgs,
            count: GQL.ReactionCounterCountArgs,
            setByMe: GQL.ReactionCounterSetByMeArgs,
        }
    >;
    MessageSpan?: InterfaceTypeResolver<GQLRoots.MessageSpanRoot, 'MessageSpanUserMention' | 'MessageSpanMultiUserMention' | 'MessageSpanRoomMention' | 'MessageSpanOrganizationMention' | 'MessageSpanLink' | 'MessageSpanBold' | 'MessageSpanItalic' | 'MessageSpanIrony' | 'MessageSpanInlineCode' | 'MessageSpanCodeBlock' | 'MessageSpanInsane' | 'MessageSpanLoud' | 'MessageSpanRotating' | 'MessageSpanDate' | 'MessageSpanAllMention' | 'MessageSpanHashTag'>;
    MessageSpanUserMention?: ComplexTypedResolver<
        GQL.MessageSpanUserMention,
        GQLRoots.MessageSpanUserMentionRoot,
        {
            user: GQLRoots.UserRoot,
        },
        {
            offset: GQL.MessageSpanUserMentionOffsetArgs,
            length: GQL.MessageSpanUserMentionLengthArgs,
            user: GQL.MessageSpanUserMentionUserArgs,
        }
    >;
    MessageSpanMultiUserMention?: ComplexTypedResolver<
        GQL.MessageSpanMultiUserMention,
        GQLRoots.MessageSpanMultiUserMentionRoot,
        {
            users: GQLRoots.UserRoot[],
        },
        {
            offset: GQL.MessageSpanMultiUserMentionOffsetArgs,
            length: GQL.MessageSpanMultiUserMentionLengthArgs,
            users: GQL.MessageSpanMultiUserMentionUsersArgs,
        }
    >;
    MessageSpanRoomMention?: ComplexTypedResolver<
        GQL.MessageSpanRoomMention,
        GQLRoots.MessageSpanRoomMentionRoot,
        {
            room: GQLRoots.RoomRoot,
        },
        {
            offset: GQL.MessageSpanRoomMentionOffsetArgs,
            length: GQL.MessageSpanRoomMentionLengthArgs,
            room: GQL.MessageSpanRoomMentionRoomArgs,
        }
    >;
    MessageSpanOrganizationMention?: ComplexTypedResolver<
        GQL.MessageSpanOrganizationMention,
        GQLRoots.MessageSpanOrganizationMentionRoot,
        {
            organization: GQLRoots.OrganizationRoot,
        },
        {
            offset: GQL.MessageSpanOrganizationMentionOffsetArgs,
            length: GQL.MessageSpanOrganizationMentionLengthArgs,
            organization: GQL.MessageSpanOrganizationMentionOrganizationArgs,
        }
    >;
    MentionPeer?: UnionTypeResolver<GQLRoots.MentionPeerRoot, 'SharedRoom' | 'Organization' | 'User'>;
    MessageSpanLink?: ComplexTypedResolver<
        GQL.MessageSpanLink,
        GQLRoots.MessageSpanLinkRoot,
        {
        },
        {
            offset: GQL.MessageSpanLinkOffsetArgs,
            length: GQL.MessageSpanLinkLengthArgs,
            url: GQL.MessageSpanLinkUrlArgs,
        }
    >;
    MessageSpanBold?: ComplexTypedResolver<
        GQL.MessageSpanBold,
        GQLRoots.MessageSpanBoldRoot,
        {
        },
        {
            offset: GQL.MessageSpanBoldOffsetArgs,
            length: GQL.MessageSpanBoldLengthArgs,
        }
    >;
    MessageSpanItalic?: ComplexTypedResolver<
        GQL.MessageSpanItalic,
        GQLRoots.MessageSpanItalicRoot,
        {
        },
        {
            offset: GQL.MessageSpanItalicOffsetArgs,
            length: GQL.MessageSpanItalicLengthArgs,
        }
    >;
    MessageSpanIrony?: ComplexTypedResolver<
        GQL.MessageSpanIrony,
        GQLRoots.MessageSpanIronyRoot,
        {
        },
        {
            offset: GQL.MessageSpanIronyOffsetArgs,
            length: GQL.MessageSpanIronyLengthArgs,
        }
    >;
    MessageSpanInlineCode?: ComplexTypedResolver<
        GQL.MessageSpanInlineCode,
        GQLRoots.MessageSpanInlineCodeRoot,
        {
        },
        {
            offset: GQL.MessageSpanInlineCodeOffsetArgs,
            length: GQL.MessageSpanInlineCodeLengthArgs,
        }
    >;
    MessageSpanCodeBlock?: ComplexTypedResolver<
        GQL.MessageSpanCodeBlock,
        GQLRoots.MessageSpanCodeBlockRoot,
        {
        },
        {
            offset: GQL.MessageSpanCodeBlockOffsetArgs,
            length: GQL.MessageSpanCodeBlockLengthArgs,
        }
    >;
    MessageSpanInsane?: ComplexTypedResolver<
        GQL.MessageSpanInsane,
        GQLRoots.MessageSpanInsaneRoot,
        {
        },
        {
            offset: GQL.MessageSpanInsaneOffsetArgs,
            length: GQL.MessageSpanInsaneLengthArgs,
        }
    >;
    MessageSpanLoud?: ComplexTypedResolver<
        GQL.MessageSpanLoud,
        GQLRoots.MessageSpanLoudRoot,
        {
        },
        {
            offset: GQL.MessageSpanLoudOffsetArgs,
            length: GQL.MessageSpanLoudLengthArgs,
        }
    >;
    MessageSpanRotating?: ComplexTypedResolver<
        GQL.MessageSpanRotating,
        GQLRoots.MessageSpanRotatingRoot,
        {
        },
        {
            offset: GQL.MessageSpanRotatingOffsetArgs,
            length: GQL.MessageSpanRotatingLengthArgs,
        }
    >;
    MessageSpanDate?: ComplexTypedResolver<
        GQL.MessageSpanDate,
        GQLRoots.MessageSpanDateRoot,
        {
        },
        {
            offset: GQL.MessageSpanDateOffsetArgs,
            length: GQL.MessageSpanDateLengthArgs,
            date: GQL.MessageSpanDateDateArgs,
        }
    >;
    MessageSpanAllMention?: ComplexTypedResolver<
        GQL.MessageSpanAllMention,
        GQLRoots.MessageSpanAllMentionRoot,
        {
        },
        {
            offset: GQL.MessageSpanAllMentionOffsetArgs,
            length: GQL.MessageSpanAllMentionLengthArgs,
        }
    >;
    MessageSpanHashTag?: ComplexTypedResolver<
        GQL.MessageSpanHashTag,
        GQLRoots.MessageSpanHashTagRoot,
        {
        },
        {
            offset: GQL.MessageSpanHashTagOffsetArgs,
            length: GQL.MessageSpanHashTagLengthArgs,
            tag: GQL.MessageSpanHashTagTagArgs,
        }
    >;
    MessageSpanType?: EnumTypeResolver<'Bold' | 'Italic' | 'Irony' | 'InlineCode' | 'CodeBlock' | 'Insane' | 'Loud' | 'Rotating' | 'Link', GQLRoots.MessageSpanTypeRoot>;
    Room?: UnionTypeResolver<GQLRoots.RoomRoot, 'PrivateRoom' | 'SharedRoom'>;
    PrivateRoom?: ComplexTypedResolver<
        GQL.PrivateRoom,
        GQLRoots.PrivateRoomRoot,
        {
            user: GQLRoots.UserRoot,
            settings: GQLRoots.RoomUserNotificaionSettingsRoot,
            pinnedMessage: Nullable<GQLRoots.ModernMessageRoot>,
            myBadge: Nullable<GQLRoots.UserBadgeRoot>,
        },
        {
            id: GQL.PrivateRoomIdArgs,
            user: GQL.PrivateRoomUserArgs,
            settings: GQL.PrivateRoomSettingsArgs,
            pinnedMessage: GQL.PrivateRoomPinnedMessageArgs,
            myBadge: GQL.PrivateRoomMyBadgeArgs,
        }
    >;
    SharedRoomKind?: EnumTypeResolver<'INTERNAL' | 'PUBLIC' | 'GROUP', GQLRoots.SharedRoomKindRoot>;
    SharedRoomMembershipStatus?: EnumTypeResolver<'MEMBER' | 'REQUESTED' | 'LEFT' | 'KICKED' | 'NONE', GQLRoots.SharedRoomMembershipStatusRoot>;
    RoomMemberRole?: EnumTypeResolver<'OWNER' | 'ADMIN' | 'MEMBER', GQLRoots.RoomMemberRoleRoot>;
    WelcomeMessage?: ComplexTypedResolver<
        GQL.WelcomeMessage,
        GQLRoots.WelcomeMessageRoot,
        {
            sender: Nullable<GQLRoots.UserRoot>,
        },
        {
            isOn: GQL.WelcomeMessageIsOnArgs,
            sender: GQL.WelcomeMessageSenderArgs,
            message: GQL.WelcomeMessageMessageArgs,
        }
    >;
    RoomCallsMode?: EnumTypeResolver<'STANDARD' | 'LINK' | 'DISABLED', GQLRoots.RoomCallsModeRoot>;
    RoomCallSettings?: ComplexTypedResolver<
        GQL.RoomCallSettings,
        GQLRoots.RoomCallSettingsRoot,
        {
        },
        {
            mode: GQL.RoomCallSettingsModeArgs,
            callLink: GQL.RoomCallSettingsCallLinkArgs,
        }
    >;
    RoomServiceMessageSettings?: ComplexTypedResolver<
        GQL.RoomServiceMessageSettings,
        GQLRoots.RoomServiceMessageSettingsRoot,
        {
        },
        {
            joinsMessageEnabled: GQL.RoomServiceMessageSettingsJoinsMessageEnabledArgs,
            leavesMessageEnabled: GQL.RoomServiceMessageSettingsLeavesMessageEnabledArgs,
        }
    >;
    SharedRoom?: ComplexTypedResolver<
        GQL.SharedRoom,
        GQLRoots.SharedRoomRoot,
        {
            pinnedMessage: Nullable<GQLRoots.ModernMessageRoot>,
            welcomeMessage: Nullable<GQLRoots.WelcomeMessageRoot>,
            organization: Nullable<GQLRoots.OrganizationRoot>,
            previewMembers: GQLRoots.UserRoot[],
            members: GQLRoots.RoomMemberRoot[],
            requests: Nullable<GQLRoots.RoomMemberRoot[]>,
            settings: GQLRoots.RoomUserNotificaionSettingsRoot,
            myBadge: Nullable<GQLRoots.UserBadgeRoot>,
            matchmaking: Nullable<GQLRoots.MatchmakingRoomRoot>,
            premiumSubscription: Nullable<GQLRoots.WalletSubscriptionRoot>,
            premiumSettings: Nullable<GQLRoots.PremiumChatSettingsRoot>,
            serviceMessageSettings: GQLRoots.RoomServiceMessageSettingsRoot,
            callSettings: GQLRoots.RoomCallSettingsRoot,
            owner: Nullable<GQLRoots.UserRoot>,
            linkedFeedChannels: GQLRoots.FeedChannelRoot[],
        },
        {
            id: GQL.SharedRoomIdArgs,
            kind: GQL.SharedRoomKindArgs,
            isChannel: GQL.SharedRoomIsChannelArgs,
            title: GQL.SharedRoomTitleArgs,
            photo: GQL.SharedRoomPhotoArgs,
            socialImage: GQL.SharedRoomSocialImageArgs,
            description: GQL.SharedRoomDescriptionArgs,
            pinnedMessage: GQL.SharedRoomPinnedMessageArgs,
            canUnpinMessage: GQL.SharedRoomCanUnpinMessageArgs,
            welcomeMessage: GQL.SharedRoomWelcomeMessageArgs,
            organization: GQL.SharedRoomOrganizationArgs,
            membersCount: GQL.SharedRoomMembersCountArgs,
            onlineMembersCount: GQL.SharedRoomOnlineMembersCountArgs,
            featuredMembersCount: GQL.SharedRoomFeaturedMembersCountArgs,
            previewMembers: GQL.SharedRoomPreviewMembersArgs,
            members: GQL.SharedRoomMembersArgs,
            requests: GQL.SharedRoomRequestsArgs,
            membership: GQL.SharedRoomMembershipArgs,
            role: GQL.SharedRoomRoleArgs,
            settings: GQL.SharedRoomSettingsArgs,
            canEdit: GQL.SharedRoomCanEditArgs,
            canSendMessage: GQL.SharedRoomCanSendMessageArgs,
            archived: GQL.SharedRoomArchivedArgs,
            myBadge: GQL.SharedRoomMyBadgeArgs,
            matchmaking: GQL.SharedRoomMatchmakingArgs,
            isPremium: GQL.SharedRoomIsPremiumArgs,
            premiumPassIsActive: GQL.SharedRoomPremiumPassIsActiveArgs,
            premiumSubscription: GQL.SharedRoomPremiumSubscriptionArgs,
            premiumSettings: GQL.SharedRoomPremiumSettingsArgs,
            repliesEnabled: GQL.SharedRoomRepliesEnabledArgs,
            serviceMessageSettings: GQL.SharedRoomServiceMessageSettingsArgs,
            callSettings: GQL.SharedRoomCallSettingsArgs,
            featured: GQL.SharedRoomFeaturedArgs,
            owner: GQL.SharedRoomOwnerArgs,
            externalSocialImage: GQL.SharedRoomExternalSocialImageArgs,
            linkedFeedChannels: GQL.SharedRoomLinkedFeedChannelsArgs,
            shortname: GQL.SharedRoomShortnameArgs,
        }
    >;
    PremiumChatSettings?: ComplexTypedResolver<
        GQL.PremiumChatSettings,
        GQLRoots.PremiumChatSettingsRoot,
        {
        },
        {
            id: GQL.PremiumChatSettingsIdArgs,
            price: GQL.PremiumChatSettingsPriceArgs,
            interval: GQL.PremiumChatSettingsIntervalArgs,
        }
    >;
    RoomSuper?: ComplexTypedResolver<
        GQL.RoomSuper,
        GQLRoots.RoomSuperRoot,
        {
            autosubscribeRooms: GQLRoots.RoomRoot[],
        },
        {
            id: GQL.RoomSuperIdArgs,
            featured: GQL.RoomSuperFeaturedArgs,
            listed: GQL.RoomSuperListedArgs,
            autosubscribeRooms: GQL.RoomSuperAutosubscribeRoomsArgs,
        }
    >;
    UserMention?: ComplexTypedResolver<
        GQL.UserMention,
        GQLRoots.UserMentionRoot,
        {
            user: GQLRoots.UserRoot,
        },
        {
            user: GQL.UserMentionUserArgs,
        }
    >;
    SharedRoomMention?: ComplexTypedResolver<
        GQL.SharedRoomMention,
        GQLRoots.SharedRoomMentionRoot,
        {
            sharedRoom: GQLRoots.SharedRoomRoot,
        },
        {
            sharedRoom: GQL.SharedRoomMentionSharedRoomArgs,
        }
    >;
    Mention?: UnionTypeResolver<GQLRoots.MentionRoot, 'UserMention' | 'SharedRoomMention'>;
    RoomMessage?: ComplexTypedResolver<
        GQL.RoomMessage,
        GQLRoots.RoomMessageRoot,
        {
            fileMetadata: Nullable<GQLRoots.FileMetadataRoot>,
            sender: GQLRoots.UserRoot,
            serviceMetadata: Nullable<GQLRoots.ServiceMetadataRoot>,
            urlAugmentation: Nullable<GQLRoots.UrlAugmentationRoot>,
            reactions: GQLRoots.MessageReactionRoot[],
            replyMessages: Nullable<GQLRoots.RoomMessageRoot[]>,
            mentions: Nullable<GQLRoots.UserRoot[]>,
            alphaAttachments: GQLRoots.MessageAttachmentRoot[],
            alphaButtons: Nullable<GQLRoots.MessageButtonRoot[]>[],
            alphaMentions: Nullable<GQLRoots.MentionRoot[]>,
        },
        {
            id: GQL.RoomMessageIdArgs,
            message: GQL.RoomMessageMessageArgs,
            file: GQL.RoomMessageFileArgs,
            fileMetadata: GQL.RoomMessageFileMetadataArgs,
            filePreview: GQL.RoomMessageFilePreviewArgs,
            sender: GQL.RoomMessageSenderArgs,
            date: GQL.RoomMessageDateArgs,
            repeatKey: GQL.RoomMessageRepeatKeyArgs,
            isService: GQL.RoomMessageIsServiceArgs,
            serviceMetadata: GQL.RoomMessageServiceMetadataArgs,
            urlAugmentation: GQL.RoomMessageUrlAugmentationArgs,
            edited: GQL.RoomMessageEditedArgs,
            reactions: GQL.RoomMessageReactionsArgs,
            replyMessages: GQL.RoomMessageReplyMessagesArgs,
            plainText: GQL.RoomMessagePlainTextArgs,
            mentions: GQL.RoomMessageMentionsArgs,
            alphaAttachments: GQL.RoomMessageAlphaAttachmentsArgs,
            alphaButtons: GQL.RoomMessageAlphaButtonsArgs,
            alphaType: GQL.RoomMessageAlphaTypeArgs,
            alphaTitle: GQL.RoomMessageAlphaTitleArgs,
            alphaPostType: GQL.RoomMessageAlphaPostTypeArgs,
            alphaMentions: GQL.RoomMessageAlphaMentionsArgs,
        }
    >;
    RoomMember?: ComplexTypedResolver<
        GQL.RoomMember,
        GQLRoots.RoomMemberRoot,
        {
            user: GQLRoots.UserRoot,
            badge: Nullable<GQLRoots.UserBadgeRoot>,
            invitedBy: GQLRoots.UserRoot,
        },
        {
            user: GQL.RoomMemberUserArgs,
            role: GQL.RoomMemberRoleArgs,
            badge: GQL.RoomMemberBadgeArgs,
            membership: GQL.RoomMemberMembershipArgs,
            invitedBy: GQL.RoomMemberInvitedByArgs,
            canKick: GQL.RoomMemberCanKickArgs,
        }
    >;
    RoomMemberEdge?: ComplexTypedResolver<
        GQL.RoomMemberEdge,
        GQLRoots.RoomMemberEdgeRoot,
        {
            node: GQLRoots.RoomMemberRoot,
        },
        {
            node: GQL.RoomMemberEdgeNodeArgs,
            cursor: GQL.RoomMemberEdgeCursorArgs,
        }
    >;
    RoomMemberConnection?: ComplexTypedResolver<
        GQL.RoomMemberConnection,
        GQLRoots.RoomMemberConnectionRoot,
        {
            edges: GQLRoots.RoomMemberEdgeRoot[],
            pageInfo: GQLRoots.PageInfoRoot,
        },
        {
            edges: GQL.RoomMemberConnectionEdgesArgs,
            pageInfo: GQL.RoomMemberConnectionPageInfoArgs,
        }
    >;
    RoomUserNotificaionSettings?: ComplexTypedResolver<
        GQL.RoomUserNotificaionSettings,
        GQLRoots.RoomUserNotificaionSettingsRoot,
        {
        },
        {
            id: GQL.RoomUserNotificaionSettingsIdArgs,
            mute: GQL.RoomUserNotificaionSettingsMuteArgs,
        }
    >;
    RoomConnectionEdge?: ComplexTypedResolver<
        GQL.RoomConnectionEdge,
        GQLRoots.RoomConnectionEdgeRoot,
        {
            node: GQLRoots.SharedRoomRoot,
        },
        {
            node: GQL.RoomConnectionEdgeNodeArgs,
            cursor: GQL.RoomConnectionEdgeCursorArgs,
        }
    >;
    RoomConnection?: ComplexTypedResolver<
        GQL.RoomConnection,
        GQLRoots.RoomConnectionRoot,
        {
            edges: GQLRoots.RoomConnectionEdgeRoot[],
            pageInfo: GQLRoots.PageInfoRoot,
        },
        {
            edges: GQL.RoomConnectionEdgesArgs,
            pageInfo: GQL.RoomConnectionPageInfoArgs,
        }
    >;
    SharedRoomConnection?: ComplexTypedResolver<
        GQL.SharedRoomConnection,
        GQLRoots.SharedRoomConnectionRoot,
        {
            items: GQLRoots.SharedRoomRoot[],
        },
        {
            items: GQL.SharedRoomConnectionItemsArgs,
            cursor: GQL.SharedRoomConnectionCursorArgs,
        }
    >;
    RoomInvite?: ComplexTypedResolver<
        GQL.RoomInvite,
        GQLRoots.RoomInviteRoot,
        {
            room: GQLRoots.SharedRoomRoot,
            invitedByUser: GQLRoots.UserRoot,
        },
        {
            id: GQL.RoomInviteIdArgs,
            room: GQL.RoomInviteRoomArgs,
            invitedByUser: GQL.RoomInviteInvitedByUserArgs,
        }
    >;
    ShortNameDestination?: UnionTypeResolver<GQLRoots.ShortNameDestinationRoot, 'User' | 'Organization' | 'FeedChannel' | 'SharedRoom' | 'DiscoverChatsCollection' | 'Channel'>;
    UpdateEvent?: UnionTypeResolver<GQLRoots.UpdateEventRoot, 'UpdateChatRead' | 'UpdateProfileChanged' | 'UpdateMyProfileChanged' | 'UpdateChatMessage' | 'UpdateChatMessageDeleted' | 'UpdateChatDraftChanged'>;
    UpdateChatRead?: ComplexTypedResolver<
        GQL.UpdateChatRead,
        GQLRoots.UpdateChatReadRoot,
        {
        },
        {
            cid: GQL.UpdateChatReadCidArgs,
            seq: GQL.UpdateChatReadSeqArgs,
        }
    >;
    UpdateProfileChanged?: ComplexTypedResolver<
        GQL.UpdateProfileChanged,
        GQLRoots.UpdateProfileChangedRoot,
        {
            user: GQLRoots.UserRoot,
        },
        {
            user: GQL.UpdateProfileChangedUserArgs,
        }
    >;
    UpdateMyProfileChanged?: ComplexTypedResolver<
        GQL.UpdateMyProfileChanged,
        GQLRoots.UpdateMyProfileChangedRoot,
        {
            user: GQLRoots.UserRoot,
            profile: GQLRoots.ProfileRoot,
        },
        {
            user: GQL.UpdateMyProfileChangedUserArgs,
            profile: GQL.UpdateMyProfileChangedProfileArgs,
        }
    >;
    UpdateChatMessage?: ComplexTypedResolver<
        GQL.UpdateChatMessage,
        GQLRoots.UpdateChatMessageRoot,
        {
            message: GQLRoots.ModernMessageRoot,
        },
        {
            cid: GQL.UpdateChatMessageCidArgs,
            message: GQL.UpdateChatMessageMessageArgs,
        }
    >;
    UpdateChatMessageDeleted?: ComplexTypedResolver<
        GQL.UpdateChatMessageDeleted,
        GQLRoots.UpdateChatMessageDeletedRoot,
        {
        },
        {
            cid: GQL.UpdateChatMessageDeletedCidArgs,
            mid: GQL.UpdateChatMessageDeletedMidArgs,
            seq: GQL.UpdateChatMessageDeletedSeqArgs,
        }
    >;
    UpdateChatDraftChanged?: ComplexTypedResolver<
        GQL.UpdateChatDraftChanged,
        GQLRoots.UpdateChatDraftChangedRoot,
        {
        },
        {
            cid: GQL.UpdateChatDraftChangedCidArgs,
            draft: GQL.UpdateChatDraftChangedDraftArgs,
            version: GQL.UpdateChatDraftChangedVersionArgs,
            date: GQL.UpdateChatDraftChangedDateArgs,
        }
    >;
}
