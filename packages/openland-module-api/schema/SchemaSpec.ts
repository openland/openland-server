// THIS FILE IS AUTOGENERATED! DO NOT TRY TO EDIT!
import { ComplexTypedResolver, ComplexTypedSubscriptionResolver, UnionTypeResolver, Nullable } from './SchemaUtils';
import { GQLRoots } from './SchemaRoots';

export const GQL_SPEC_VERSION = 'd7f4ca445982dc300b68d6fd5dc4aced';

export namespace GQL {
    export interface UpdateConversationSettingsInput {
        mobileNotifications: Nullable<NotificationMessages>;
        mute: Nullable<boolean>;
    }
    export interface ConversationSettings {
        id?: string;
        mobileNotifications?: NotificationMessages;
        mute?: boolean;
    }
    export interface Conversation {
        id?: string;
        flexibleId?: string;
        title?: string;
        photos?: string[];
        unreadCount?: number;
        topMessage?: Nullable<ConversationMessage>;
        settings?: ConversationSettings;
    }
    export interface AnonymousConversation extends Conversation {
        id?: string;
        flexibleId?: string;
        title?: string;
        photos?: string[];
        unreadCount?: number;
        topMessage?: Nullable<ConversationMessage>;
        settings?: ConversationSettings;
    }
    export interface SharedConversation extends Conversation {
        id?: string;
        flexibleId?: string;
        title?: string;
        photos?: string[];
        organizations?: Organization[];
        unreadCount?: number;
        topMessage?: Nullable<ConversationMessage>;
        organization?: Nullable<Organization>;
        settings?: ConversationSettings;
    }
    export interface PrivateConversation extends Conversation {
        id?: string;
        flexibleId?: string;
        title?: string;
        photos?: string[];
        user?: User;
        unreadCount?: number;
        topMessage?: Nullable<ConversationMessage>;
        blocked?: boolean;
        settings?: ConversationSettings;
    }
    export interface GroupConversation extends Conversation {
        id?: string;
        flexibleId?: string;
        title?: string;
        photos?: string[];
        members?: User[];
        unreadCount?: number;
        topMessage?: Nullable<ConversationMessage>;
        membersCount?: number;
        settings?: ConversationSettings;
        photo?: Nullable<string>;
        photoRef?: Nullable<ImageRef>;
        description?: Nullable<string>;
        longDescription?: Nullable<string>;
        pinnedMessage?: Nullable<ConversationMessage>;
        membersOnline?: number;
        myRole?: Nullable<string>;
    }
    export interface InviteServiceMetadata {
        users?: Nullable<User[]>;
        invitedBy?: User;
    }
    export interface KickServiceMetadata {
        user?: User;
        kickedBy?: User;
    }
    export interface TitleChangeServiceMetadata {
        title?: string;
    }
    export interface PhotoChangeServiceMetadata {
        photo?: Nullable<string>;
        photoRef?: Nullable<ImageRef>;
    }
    export interface PostRespondServiceMetadata {
        post?: RoomMessage;
        postRoom?: Room;
        responder?: User;
        respondType?: string;
    }
    export type UrlAugmentationExtra = User | Organization | ChannelConversation;
    export interface UrlAugmentation {
        url?: string;
        title?: Nullable<string>;
        date?: Nullable<string>;
        subtitle?: Nullable<string>;
        description?: Nullable<string>;
        photo?: Nullable<ImageRef>;
        imageInfo?: Nullable<FileMetadata>;
        imageURL?: Nullable<string>;
        iconRef?: Nullable<ImageRef>;
        iconInfo?: Nullable<FileMetadata>;
        hostname?: Nullable<string>;
        type?: Nullable<string>;
        extra?: Nullable<UrlAugmentationExtra>;
    }
    export type ServiceMetadata = InviteServiceMetadata | KickServiceMetadata | TitleChangeServiceMetadata | PhotoChangeServiceMetadata | PostRespondServiceMetadata;
    export interface ConversationMessage {
        id?: string;
        message?: Nullable<string>;
        file?: Nullable<string>;
        fileMetadata?: Nullable<FileMetadata>;
        filePreview?: Nullable<string>;
        sender?: User;
        date?: Date;
        repeatKey?: Nullable<string>;
        isService?: boolean;
        serviceMetadata?: Nullable<ServiceMetadata>;
        urlAugmentation?: Nullable<UrlAugmentation>;
        edited?: boolean;
        reactions?: MessageReaction[];
        replyMessages?: Nullable<ConversationMessage[]>;
        plainText?: Nullable<string>;
        mentions?: Nullable<User[]>;
        alphaAttachments?: MessageAttachment[];
        alphaButtons?: Nullable<MessageButton[]>[];
        alphaType?: MessageType;
        alphaTitle?: Nullable<string>;
        postType?: Nullable<string>;
        alphaMentions?: Nullable<Mention[]>;
    }
    export interface FileMetadata {
        name?: string;
        mimeType?: Nullable<string>;
        size?: number;
        isImage?: boolean;
        imageWidth?: Nullable<number>;
        imageHeight?: Nullable<number>;
        imageFormat?: Nullable<string>;
    }
    export interface StickerPack {
        name?: string;
        stickers?: Nullable<Sticker[]>;
    }
    export interface Sticker {
        aliases?: string[];
        uuid?: string;
        meta?: FileMetadata;
    }
    export interface ConversationEventSimpleBatch {
        events?: ConversationEvent[];
    }
    export interface ConversationEvent {
        seq?: number;
    }
    export interface ConversationEventMessage extends ConversationEvent {
        seq?: number;
        message?: ConversationMessage;
    }
    export interface ConversationEventEditMessage extends ConversationEvent {
        seq?: number;
        message?: ConversationMessage;
    }
    export interface ConversationEventDelete extends ConversationEvent {
        seq?: number;
        messageId?: string;
    }
    export interface ConversationEventNewMembers extends ConversationEvent {
        seq?: number;
        users?: Nullable<User[]>;
        invitedBy?: User;
    }
    export interface ConversationEventKick extends ConversationEvent {
        seq?: number;
        user?: User;
        kickedBy?: User;
    }
    export interface ConversationEventTitle extends ConversationEvent {
        seq?: number;
        title?: string;
    }
    export interface ConversationEventUpdate extends ConversationEvent {
        seq?: number;
        chat?: Conversation;
    }
    export interface ConversationEventUpdateRole extends ConversationEvent {
        seq?: number;
        user?: User;
        newRole?: string;
    }
    export interface ConversationState {
        seq?: number;
        messages?: ConversationMessage[];
    }
    export interface ConversationConnection {
        conversations?: Conversation[];
        counter?: NotificationCounter;
        seq?: number;
        next?: Nullable<string>;
    }
    export interface NotificationCounter {
        id?: string;
        unreadCount?: number;
    }
    export interface ChatReadResult {
        conversation?: Conversation;
        counter?: NotificationCounter;
    }
    export type ComposeSearchResult = User | Organization;
    export interface GroupConversationMember {
        user?: User;
        role?: string;
    }
    export interface GroupConversationInvite {
        userId: string;
        role: string;
    }
    export interface GroupChatUpdateResponse {
        chat?: Conversation;
        chatEventMessage?: Nullable<ConversationEventMessage>;
        chatEvent?: Nullable<ConversationEvent>;
    }
    export interface ConversationUpdateResponse {
        chat?: Conversation;
        curSeq?: number;
    }
    export interface ConversationBlockedUser {
        user?: User;
        blockedBy?: User;
    }
    export interface UpdateGroupInput {
        title: Nullable<string>;
        photoRef: Nullable<ImageRefInput>;
        description: Nullable<string>;
        longDescription: Nullable<string>;
        socialImageRef: Nullable<ImageRefInput>;
    }
    export interface Profile {
        id?: string;
        firstName?: Nullable<string>;
        lastName?: Nullable<string>;
        photoRef?: Nullable<ImageRef>;
        phone?: Nullable<string>;
        email?: Nullable<string>;
        website?: Nullable<string>;
        about?: Nullable<string>;
        location?: Nullable<string>;
        linkedin?: Nullable<string>;
        twitter?: Nullable<string>;
        alphaLinkedin?: Nullable<string>;
        alphaTwitter?: Nullable<string>;
        alphaJoinedAt?: Nullable<string>;
        alphaInvitedBy?: Nullable<User>;
        alphaRole?: Nullable<string>;
        alphaLocations?: Nullable<string[]>;
        primaryOrganization?: Nullable<Organization>;
        alphaPrimaryOrganizationId?: Nullable<string>;
        alphaPrimaryOrganization?: Nullable<Organization>;
        shortname?: Nullable<string>;
    }
    export interface ProfileInput {
        firstName: Nullable<string>;
        lastName: Nullable<string>;
        photoRef: Nullable<ImageRefInput>;
        phone: Nullable<string>;
        email: Nullable<string>;
        website: Nullable<string>;
        about: Nullable<string>;
        location: Nullable<string>;
        linkedin: Nullable<string>;
        twitter: Nullable<string>;
        primaryOrganization: Nullable<string>;
    }
    export interface UpdateProfileInput {
        firstName: Nullable<string>;
        lastName: Nullable<string>;
        photoRef: Nullable<ImageRefInput>;
        phone: Nullable<string>;
        email: Nullable<string>;
        website: Nullable<string>;
        about: Nullable<string>;
        location: Nullable<string>;
        linkedin: Nullable<string>;
        twitter: Nullable<string>;
        primaryOrganization: Nullable<string>;
        alphaRole: Nullable<string>;
        alphaLocations: Nullable<string[]>;
        alphaLinkedin: Nullable<string>;
        alphaTwitter: Nullable<string>;
        alphaPrimaryOrganizationId: Nullable<string>;
    }
    export interface CreateProfileInput {
        firstName: string;
        lastName: Nullable<string>;
        photoRef: Nullable<ImageRefInput>;
        phone: Nullable<string>;
        email: Nullable<string>;
        about: Nullable<string>;
        location: Nullable<string>;
        website: Nullable<string>;
        linkedin: Nullable<string>;
        twitter: Nullable<string>;
        primaryOrganization: Nullable<string>;
    }
    export interface AlphaSignupData {
        user?: Nullable<User>;
        organization?: Nullable<Organization>;
    }
    export interface Invite {
        id?: string;
        key?: string;
        ttl?: Nullable<string>;
    }
    export interface InviteInfo {
        id?: string;
        key?: string;
        orgId?: string;
        title?: string;
        photo?: Nullable<string>;
        photoRef?: Nullable<ImageRef>;
        joined?: boolean;
        creator?: Nullable<User>;
        forEmail?: Nullable<string>;
        forName?: Nullable<string>;
        description?: Nullable<string>;
    }
    export interface AppInvite {
        inviter?: User;
    }
    export interface AppInviteInfo {
        inviter?: User;
    }
    export interface InviteHistotyInfo {
        acceptedBy?: Nullable<User>;
        forEmail?: string;
        isGlobal?: boolean;
    }
    export interface Reaction {
        user?: User;
        reaction?: string;
    }
    export interface Message {
        id?: string;
        date?: Date;
        sender?: User;
        edited?: boolean;
        text?: Nullable<string>;
        quoted?: Message[];
        alphaReactions?: Reaction[];
    }
    export type DebugEmailType = 'WELCOME' | 'ACCOUNT_ACTIVATED' | 'ACCOUNT_DEACTIVATED' | 'MEMBER_REMOVED' | 'MEMBERSHIP_LEVEL_CHANGED' | 'INVITE' | 'MEMBER_JOINED' | 'SIGNUP_CODE' | 'SIGIN_CODE' | 'UNREAD_MESSAGE' | 'UNREAD_MESSAGES' | 'PUBLIC_ROOM_INVITE' | 'PRIVATE_ROOM_INVITE' | 'ROOM_INVITE_ACCEPTED';
    export interface DebugID {
        internalID?: number;
        type?: string;
    }
    export type DialogKind = 'PRIVATE' | 'INTERNAL' | 'PUBLIC' | 'GROUP';
    export interface Dialog {
        id?: string;
        cid?: string;
        fid?: string;
        kind?: DialogKind;
        title?: string;
        photo?: string;
        unreadCount?: number;
        topMessage?: Nullable<Message>;
        betaTopMessage?: Nullable<RoomMessage>;
        isMuted?: boolean;
        haveMention?: boolean;
    }
    export interface DialogsConnection {
        items?: Dialog[];
        cursor?: Nullable<string>;
    }
    export type EmailFrequency = 'NEVER' | 'MIN_15' | 'HOUR_1' | 'HOUR_24' | 'WEEK_1';
    export type NotificationMessages = 'ALL' | 'DIRECT' | 'NONE';
    export type NotificationsDelay = 'NONE' | 'MIN_1' | 'MIN_15';
    export interface UpdateSettingsInput {
        emailFrequency: Nullable<EmailFrequency>;
        desktopNotifications: Nullable<NotificationMessages>;
        mobileNotifications: Nullable<NotificationMessages>;
        mobileAlert: Nullable<boolean>;
        mobileIncludeText: Nullable<boolean>;
        mute: Nullable<boolean>;
        notificationsDelay: Nullable<NotificationsDelay>;
    }
    export interface Settings {
        id?: string;
        primaryEmail?: string;
        emailFrequency?: EmailFrequency;
        desktopNotifications?: NotificationMessages;
        mobileNotifications?: NotificationMessages;
        mobileAlert?: boolean;
        mobileIncludeText?: boolean;
        mute?: Nullable<boolean>;
        notificationsDelay?: NotificationsDelay;
    }
    export type OrganizationMemberRole = 'OWNER' | 'ADMIN' | 'MEMBER';
    export interface OrganizationMember {
        email?: string;
        role?: OrganizationMemberRole;
    }
    export interface OrganizationIvitedMember extends OrganizationMember {
        email?: string;
        role?: OrganizationMemberRole;
        firstName?: Nullable<string>;
        lastName?: Nullable<string>;
        inviteId?: string;
    }
    export interface OrganizationJoinedMember extends OrganizationMember {
        email?: string;
        role?: OrganizationMemberRole;
        user?: User;
        joinedAt?: Nullable<string>;
        showInContacts?: boolean;
    }
    export interface OrganizationRequestedMember extends OrganizationMember {
        email?: string;
        role?: OrganizationMemberRole;
        user?: User;
        joinedAt?: Nullable<string>;
    }
    export interface InviteRequest {
        email: string;
        emailText: Nullable<string>;
        role: OrganizationMemberRole;
        firstName: Nullable<string>;
        lastName: Nullable<string>;
    }
    export type Platform = 'WEB' | 'IOS' | 'ANDROID';
    export interface OnlineEvent {
        user?: User;
        type?: string;
        timeout?: number;
    }
    export type SuperAccountState = 'PENDING' | 'ACTIVATED' | 'SUSPENDED' | 'DELETED';
    export interface SuperAccount {
        id?: string;
        orgId?: string;
        title?: string;
        name?: string;
        state?: SuperAccountState;
        members?: User[];
        features?: FeatureFlag[];
        alphaPublished?: boolean;
        createdAt?: Nullable<string>;
        createdBy?: Nullable<User>;
    }
    export type SuperAdminRole = 'SUPER_ADMIN' | 'SOFTWARE_DEVELOPER' | 'EDITOR';
    export interface SuperAdmin {
        user?: User;
        role?: SuperAdminRole;
        email?: Nullable<string>;
    }
    export interface Event {
        id: string;
        event: string;
        params: Nullable<string>;
    }
    export interface BaseMessage {
        id?: string;
        date?: Date;
        sender?: User;
        message?: Nullable<string>;
        spans?: MessageSpan[];
        fallback?: string;
    }
    export interface ServiceMessage extends BaseMessage {
        id?: string;
        date?: Date;
        sender?: User;
        message?: Nullable<string>;
        spans?: MessageSpan[];
        serviceMetadata?: Nullable<ServiceMetadata>;
        fallback?: string;
    }
    export interface ModernMessage extends BaseMessage {
        id?: string;
        date?: Date;
        sender?: User;
        edited?: boolean;
        reactions?: ModernMessageReaction[];
        message?: Nullable<string>;
        spans?: MessageSpan[];
        attachments?: ModernMessageAttachment[];
        quotedMessages?: Message[];
        fallback?: string;
    }
    export interface Image {
        url?: string;
        metadata?: Nullable<FileMetadata>;
    }
    export interface ModernMessageAttachment {
        id?: string;
        fallback?: string;
    }
    export interface MessageRichAttachment extends ModernMessageAttachment {
        id?: string;
        title?: Nullable<string>;
        subTitle?: Nullable<string>;
        titleLink?: Nullable<string>;
        text?: Nullable<string>;
        icon?: Nullable<Image>;
        image?: Nullable<Image>;
        keyboard?: Nullable<MessageKeyboard>;
        fallback?: string;
    }
    export interface MessageAttachmentFile extends ModernMessageAttachment {
        id?: string;
        fileId?: string;
        fileMetadata?: FileMetadata;
        filePreview?: Nullable<string>;
        fallback?: string;
    }
    export interface MessageAttachmentPost extends ModernMessageAttachment {
        id?: string;
        post?: FeedItem;
        fallback?: string;
    }
    export interface MessageRichAttachmentInput {
        title: Nullable<string>;
        titleLink: Nullable<string>;
        text: Nullable<string>;
        icon: Nullable<string>;
        image: Nullable<string>;
        keyboard: Nullable<MessageKeyboardInput>;
        fallback: Nullable<string>;
    }
    export interface MessageAttachmentFileInput {
        fileId?: string;
        fallback?: Nullable<string>;
    }
    export interface MessageAttachmentPostInput {
        postId?: string;
        fallback?: Nullable<string>;
    }
    export interface MessageKeyboard {
        buttons?: Nullable<ModernMessageButton[]>[];
    }
    export interface ModernMessageButton {
        id?: string;
        title?: string;
        style?: ModernMessageButtonStyle;
    }
    export type ModernMessageButtonStyle = 'DEFAULT' | 'LIGHT';
    export interface MessageKeyboardInput {
        buttons: Nullable<ModernMessageButtonInput[]>[];
    }
    export interface ModernMessageButtonInput {
        id: string;
        title: string;
        style: ModernMessageButtonStyle;
    }
    export type MessageReactionType = 'LIKE' | 'THUMB_UP' | 'JOY' | 'SCREAM' | 'CRYING' | 'ANGRY';
    export interface ModernMessageReaction {
        user?: User;
        reaction?: MessageReactionType;
    }
    export interface MessageSpan {
        offset?: number;
        length?: number;
    }
    export interface MessageSpanUserMention extends MessageSpan {
        offset?: number;
        length?: number;
        user?: User;
    }
    export interface MessageSpanRoomMention extends MessageSpan {
        offset?: number;
        length?: number;
        room?: Room;
    }
    export interface MessageSpanLink extends MessageSpan {
        offset?: number;
        length?: number;
        url?: string;
    }
    export interface MessageSpanUserMentionInput {
        offset: number;
        length: number;
        userId: string;
    }
    export interface MessageSpanRoomMentionInput {
        offset: number;
        length: number;
        roomId: string;
    }
    export interface PageInfo {
        hasNextPage?: boolean;
        hasPreviousPage?: boolean;
        itemsCount?: number;
        pagesCount?: number;
        currentPage?: number;
        openEnded?: boolean;
    }
    export type TaskStatus = 'IN_PROGRESS' | 'FAILED' | 'COMPLETED';
    export interface Task {
        id?: string;
        status?: TaskStatus;
        result?: Nullable<string>;
    }
    export interface ImageCropInput {
        x: number;
        y: number;
        w: number;
        h: number;
    }
    export interface ImageCrop {
        x?: number;
        y?: number;
        w?: number;
        h?: number;
    }
    export interface ImageRef {
        uuid?: string;
        crop?: Nullable<ImageCrop>;
    }
    export interface ImageRefInput {
        uuid: string;
        crop: Nullable<ImageCropInput>;
    }
    export interface Range {
        from?: Nullable<number>;
        to?: Nullable<number>;
    }
    export interface RangeInput {
        from: Nullable<number>;
        to: Nullable<number>;
    }
    export interface AppProfile {
        id?: string;
        name?: string;
        photoRef?: Nullable<ImageRef>;
        about?: Nullable<string>;
        shortname?: Nullable<string>;
        token?: AppToken;
    }
    export interface AppProfileInput {
        name: Nullable<string>;
        shortname: Nullable<string>;
        photoRef: Nullable<ImageRefInput>;
        about: Nullable<string>;
    }
    export interface AppToken {
        salt?: string;
    }
    export interface AppChat {
        chat?: Room;
        webhook?: string;
    }
    export interface ChannelConversation extends Conversation {
        id?: string;
        flexibleId?: string;
        title?: string;
        photos?: string[];
        members?: User[];
        unreadCount?: number;
        topMessage?: Nullable<ConversationMessage>;
        settings?: ConversationSettings;
        membersCount?: number;
        memberRequestsCount?: number;
        featured?: boolean;
        hidden?: boolean;
        description?: Nullable<string>;
        longDescription?: Nullable<string>;
        myStatus?: ChannelMembershipStatus;
        organization?: Nullable<Organization>;
        isRoot?: boolean;
        photo?: Nullable<string>;
        photoRef?: Nullable<ImageRef>;
        socialImage?: Nullable<string>;
        socialImageRef?: Nullable<ImageRef>;
        pinnedMessage?: Nullable<ConversationMessage>;
        membersOnline?: number;
        myRole?: Nullable<string>;
    }
    export type ChannelMembershipStatus = 'invited' | 'member' | 'requested' | 'none';
    export interface ChannelMemberOrg {
        organization?: Organization;
        role?: string;
        status?: string;
    }
    export interface ChannelMember {
        user?: User;
        role?: string;
        status?: string;
    }
    export interface ChannelInvite {
        channel?: ChannelConversation;
        invitedByUser?: User;
    }
    export interface ChannelOrgInvite {
        channel?: ChannelConversation;
        invitedByOrg?: Organization;
        invitedByUser?: User;
    }
    export interface ChannelJoinRequestOrg {
        organization?: Organization;
        user?: User;
    }
    export interface ChannelConversationConnectionEdge {
        node?: ChannelConversation;
        cursor?: string;
    }
    export interface ChannelConversationConnection {
        edges?: ChannelConversationConnectionEdge[];
        pageInfo?: PageInfo;
    }
    export interface ChannelInviteRequest {
        email: string;
        emailText: Nullable<string>;
        firstName: Nullable<string>;
        lastName: Nullable<string>;
    }
    export interface ChatUpdateSingle {
        seq?: number;
        state?: string;
        update?: ChatUpdate;
    }
    export interface ChatUpdateBatch {
        seq?: number;
        state?: string;
        fromSeq?: number;
        updates?: ChatUpdate[];
    }
    export type ChatUpdateContainer = ChatUpdateSingle | ChatUpdateBatch;
    export type ChatUpdate = ChatMessageReceived | ChatMessageUpdated | ChatMessageDeleted;
    export interface ChatMessageReceived {
        message?: BaseMessage;
    }
    export interface ChatMessageUpdated {
        message?: BaseMessage;
    }
    export interface ChatMessageDeleted {
        message?: BaseMessage;
    }
    export interface ChatUpdateState {
        state?: Nullable<string>;
    }
    export interface ConversationUpdateSingle {
        seq?: number;
        state?: string;
        update?: ConversationUpdate;
    }
    export interface ConversationUpdateBatch {
        updates?: ConversationUpdate[];
        fromSeq?: number;
        seq?: number;
        state?: string;
    }
    export type ConversationUpdateContainer = ConversationUpdateSingle | ConversationUpdateBatch;
    export type ConversationUpdate = ConversationMessageReceived | ConversationMessageUpdated | ConversationMessageDeleted;
    export interface ConversationMessageReceived {
        message?: ConversationMessage;
        betaMessage?: RoomMessage;
    }
    export interface ConversationMessageUpdated {
        message?: ConversationMessage;
        betaMessage?: RoomMessage;
    }
    export interface ConversationMessageDeleted {
        message?: ConversationMessage;
        betaMessage?: RoomMessage;
    }
    export interface ConversationUpdateState {
        state?: Nullable<string>;
    }
    export interface DialogUpdateSingle {
        seq?: number;
        state?: string;
        update?: DialogUpdate;
    }
    export interface DialogUpdateBatch {
        updates?: DialogUpdate[];
        fromSeq?: number;
        seq?: number;
        state?: string;
    }
    export type DialogUpdateContainer = DialogUpdateSingle | DialogUpdateBatch;
    export type DialogUpdate = DialogMessageReceived | DialogMessageUpdated | DialogMessageDeleted | DialogMessageRead | DialogTitleUpdated | DialogDeleted | DialogPhotoUpdated | DialogMuteChanged | DialogMentionedChanged;
    export interface DialogMessageReceived {
        cid?: string;
        message?: ConversationMessage;
        betaMessage?: RoomMessage;
        unread?: number;
        globalUnread?: number;
    }
    export interface DialogMessageUpdated {
        cid?: string;
        message?: ConversationMessage;
        betaMessage?: RoomMessage;
    }
    export interface DialogMessageDeleted {
        cid?: string;
        message?: ConversationMessage;
        betaMessage?: RoomMessage;
        unread?: number;
        globalUnread?: number;
    }
    export interface DialogMessageRead {
        cid?: string;
        unread?: number;
        globalUnread?: number;
    }
    export interface DialogTitleUpdated {
        cid?: string;
        title?: string;
    }
    export interface DialogPhotoUpdated {
        cid?: string;
        photo?: Nullable<string>;
    }
    export interface DialogDeleted {
        cid?: string;
        globalUnread?: number;
    }
    export interface DialogMuteChanged {
        cid?: string;
        mute?: boolean;
    }
    export interface DialogMentionedChanged {
        cid?: string;
        haveMention?: boolean;
    }
    export interface DialogUpdateState {
        state?: Nullable<string>;
    }
    export interface FeatureFlag {
        id?: string;
        key?: string;
        title?: string;
    }
    export interface FeedItem {
        id?: string;
        text?: string;
        date?: Date;
        alphaBy?: User;
    }
    export interface ICEServer {
        urls?: string[];
        username?: Nullable<string>;
        credential?: Nullable<string>;
    }
    export interface Conference {
        id?: string;
        peers?: ConferencePeer[];
        iceServers?: ICEServer[];
    }
    export interface ConferencePeer {
        id?: string;
        user?: User;
        connection?: Nullable<ConferencePeerConnection>;
    }
    export interface MediaSession {
        id?: string;
        conference?: Conference;
        streams?: MediaStream[];
    }
    export type MediaStreamState = 'WAIT_OFFER' | 'NEED_OFFER' | 'WAIT_ANSWER' | 'NEED_ANSWER' | 'READY';
    export interface MediaStream {
        id?: string;
        state?: MediaStreamState;
        sdp?: Nullable<string>;
        ice?: string[];
    }
    export type ConferencePeerConnectionState = 'WAIT_OFFER' | 'NEED_OFFER' | 'WAIT_ANSWER' | 'NEED_ANSWER' | 'READY';
    export interface ConferencePeerConnection {
        state?: ConferencePeerConnectionState;
        sdp?: Nullable<string>;
        ice?: string[];
    }
    export interface ConferenceJoinResult {
        peerId?: string;
        conference?: Conference;
    }
    export interface MessageReaction {
        user?: User;
        reaction?: string;
    }
    export interface MessageAttachment {
        fileId?: string;
        fileMetadata?: Nullable<FileMetadata>;
        filePreview?: Nullable<string>;
    }
    export type MessageButtonStyle = 'DEFAULT' | 'LIGHT';
    export interface MessageButton {
        title?: string;
        style?: MessageButtonStyle;
        id?: string;
    }
    export interface MessageButtonInput {
        title: string;
        style: MessageButtonStyle;
        id: string;
    }
    export type MessageType = 'MESSAGE' | 'POST';
    export type PostMessageType = 'BLANK' | 'JOB_OPPORTUNITY' | 'OFFICE_HOURS' | 'REQUEST_FOR_STARTUPS';
    export interface Mutation {
        lifecheck?: Nullable<string>;
        alphaSendMessage?: ConversationEventMessage;
        alphaReadChat?: ChatReadResult;
        alphaEditMessage?: ConversationEventEditMessage;
        alphaSendIntro?: ConversationEventMessage;
        alphaEditIntro?: ConversationEventMessage;
        alphaDeleteMessageUrlAugmentation?: ConversationEventMessage;
        alphaDeleteMessage?: ConversationEventDelete;
        alphaChatSetReaction?: string;
        alphaChatUnsetReaction?: string;
        alphaGlobalRead?: string;
        alphaBlockUser?: string;
        alphaUnblockUser?: string;
        alphaChatCreateGroup?: Conversation;
        alphaChatUpdateGroup?: ConversationUpdateResponse;
        alphaChatChangeGroupTitle?: GroupChatUpdateResponse;
        alphaChatInviteToGroup?: GroupChatUpdateResponse;
        alphaChatKickFromGroup?: GroupChatUpdateResponse;
        alphaChatChangeRoleInGroup?: GroupChatUpdateResponse;
        alphaChatCopyGroup?: GroupChatUpdateResponse;
        alphaChatLeave?: ConversationUpdateResponse;
        alphaUpdateConversationSettings?: ConversationSettings;
        profileCreate?: Profile;
        profileUpdate?: Profile;
        createProfile?: Profile;
        updateProfile?: Profile;
        alphaCreateUserProfileAndOrganization?: AlphaSignupData;
        alphaCreateInvite?: Invite;
        alphaDeleteInvite?: string;
        alphaJoinInvite?: string;
        joinAppInvite?: string;
        debugSendEmail?: Nullable<boolean>;
        debugCreateTestUser?: Nullable<boolean>;
        settingsUpdate?: Settings;
        updateSettings?: Settings;
        betaOrganizationMemberRequestApprove?: Organization;
        betaOrganizationMemberRemove?: Organization;
        betaOrganizationMemberAdd?: Organization;
        alphaOrganizationChangeMemberRole?: string;
        alphaOrganizationInviteMembers?: string;
        alphaOrganizationRefreshInviteLink?: Invite;
        alphaOrganizationCreatePublicInvite?: Invite;
        alphaOrganizationRemoveMember?: string;
        alphaOrganizationDeletePublicInvite?: string;
        presenceReportOnline?: string;
        presenceReportOffline?: string;
        alphaReportActive?: string;
        superAccountAdd?: SuperAccount;
        superAccountRename?: SuperAccount;
        superAccountActivate?: SuperAccount;
        superAccountSuspend?: SuperAccount;
        superAccountPend?: SuperAccount;
        superAccountMemberAdd?: SuperAccount;
        superAccountMemberRemove?: SuperAccount;
        superAccountChannelMemberAdd?: string;
        superAdminAdd?: string;
        superAdminRemove?: string;
        alphaAlterPublished?: Organization;
        betaFixCounter?: boolean;
        betaFixCountersForAll?: boolean;
        conversationDraftUpdate?: string;
        alphaSaveDraftMessage?: string;
        track?: string;
        createApp?: AppProfile;
        refreshAppToken?: AppProfile;
        updateAppProfile?: AppProfile;
        deleteApp?: boolean;
        addAppToChat?: AppChat;
        alphaChannelCreate?: Conversation;
        alphaChannelSetFeatured?: Conversation;
        alphaChannelHideFromSearch?: Conversation;
        alphaChannelInvite?: ConversationUpdateResponse;
        alphaChannelJoin?: ConversationUpdateResponse;
        alphaChannelRevokeInvite?: string;
        alphaChannelCancelRequest?: Nullable<string>;
        alphaChannelInviteMembers?: string;
        alphaChannelJoinInvite?: string;
        alphaChannelRenewInviteLink?: string;
        featureFlagAdd?: FeatureFlag;
        superAccountFeatureAdd?: SuperAccount;
        superAccountFeatureRemove?: SuperAccount;
        alphaCreateFeedPost?: FeedItem;
        conferenceJoin?: ConferenceJoinResult;
        conferenceKeepAlive?: Conference;
        conferenceLeave?: Conference;
        peerConnectionOffer?: Conference;
        peerConnectionAnswer?: Conference;
        peerConnectionCandidate?: Conference;
        roomRead?: boolean;
        betaMessageSend?: boolean;
        betaMessageEdit?: boolean;
        betaMessageDeleteAugmentation?: boolean;
        betaMessageDelete?: boolean;
        betaReactionSet?: boolean;
        betaReactionRemove?: boolean;
        betaIntroSend?: boolean;
        betaIntroEdit?: boolean;
        alphaSendPostMessage?: ConversationEventMessage;
        alphaEditPostMessage?: ConversationEventMessage;
        alphaRespondPostMessage?: Nullable<boolean>;
        createOrganization?: OrganizationProfile;
        updateOrganizationProfile?: OrganizationProfile;
        deleteOrganization?: boolean;
        registerWebPush?: string;
        registerPush?: string;
        typingSend?: string;
        typingCancel?: string;
        alphaSetTyping?: string;
        betaRoomCreate?: SharedRoom;
        betaRoomUpdate?: Room;
        betaRoomMove?: Room;
        betaRoomInvite?: Room;
        betaRoomKick?: Room;
        betaRoomLeave?: Room;
        betaRoomChangeRole?: Room;
        betaRoomJoin?: Room;
        betaRoomDeclineJoinRequest?: Room;
        betaRoomInviteLinkSendEmail?: string;
        betaRoomInviteLinkJoin?: Room;
        betaRoomInviteLinkRenew?: string;
        betaRoomUpdateUserNotificationSettings?: RoomUserNotificaionSettings;
        betaRoomAlterFeatured?: RoomSuper;
        betaRoomAlterListed?: RoomSuper;
        alphaSetUserShortName?: Nullable<string>;
        alphaSetOrgShortName?: Nullable<string>;
    }
    export interface MutationAlphaSendMessageArgs {
        conversationId: string;
        message: Nullable<string>;
        file: Nullable<string>;
        repeatKey: Nullable<string>;
        replyMessages: Nullable<string[]>;
        mentions: Nullable<string[]>;
    }
    export interface MutationAlphaReadChatArgs {
        conversationId: string;
        messageId: string;
    }
    export interface MutationAlphaEditMessageArgs {
        messageId: string;
        message: Nullable<string>;
        file: Nullable<string>;
        replyMessages: Nullable<string[]>;
        mentions: Nullable<string[]>;
    }
    export interface MutationAlphaSendIntroArgs {
        conversationId: string;
        userId: string;
        about: Nullable<string>;
        message: Nullable<string>;
        file: Nullable<string>;
        repeatKey: Nullable<string>;
    }
    export interface MutationAlphaEditIntroArgs {
        messageId: string;
        userId: string;
        about: Nullable<string>;
        message: Nullable<string>;
        file: Nullable<string>;
    }
    export interface MutationAlphaDeleteMessageUrlAugmentationArgs {
        messageId: string;
    }
    export interface MutationAlphaDeleteMessageArgs {
        messageId: string;
    }
    export interface MutationAlphaChatSetReactionArgs {
        messageId: string;
        reaction: string;
    }
    export interface MutationAlphaChatUnsetReactionArgs {
        messageId: string;
        reaction: string;
    }
    export interface MutationAlphaGlobalReadArgs {
        toSeq: number;
    }
    export interface MutationAlphaBlockUserArgs {
        userId: string;
    }
    export interface MutationAlphaUnblockUserArgs {
        userId: string;
        conversationId: Nullable<string>;
    }
    export interface MutationAlphaChatCreateGroupArgs {
        title: Nullable<string>;
        photoRef: Nullable<ImageRefInput>;
        members: string[];
        message: Nullable<string>;
    }
    export interface MutationAlphaChatUpdateGroupArgs {
        conversationId: string;
        input: UpdateGroupInput;
    }
    export interface MutationAlphaChatChangeGroupTitleArgs {
        conversationId: string;
        title: string;
    }
    export interface MutationAlphaChatInviteToGroupArgs {
        conversationId: string;
        invites: GroupConversationInvite[];
    }
    export interface MutationAlphaChatKickFromGroupArgs {
        conversationId: string;
        userId: string;
    }
    export interface MutationAlphaChatChangeRoleInGroupArgs {
        conversationId: string;
        userId: string;
        newRole: string;
    }
    export interface MutationAlphaChatCopyGroupArgs {
        conversationId: string;
        title: Nullable<string>;
        extraMembers: Nullable<string[]>;
        message: string;
    }
    export interface MutationAlphaChatLeaveArgs {
        conversationId: string;
    }
    export interface MutationAlphaUpdateConversationSettingsArgs {
        settings: UpdateConversationSettingsInput;
        conversationId: string;
    }
    export interface MutationProfileCreateArgs {
        input: ProfileInput;
    }
    export interface MutationProfileUpdateArgs {
        input: ProfileInput;
        uid: Nullable<string>;
    }
    export interface MutationCreateProfileArgs {
        input: CreateProfileInput;
    }
    export interface MutationUpdateProfileArgs {
        input: UpdateProfileInput;
        uid: Nullable<string>;
    }
    export interface MutationAlphaCreateUserProfileAndOrganizationArgs {
        user: ProfileInput;
        organization: CreateOrganizationInput;
    }
    export interface MutationAlphaDeleteInviteArgs {
        id: string;
    }
    export interface MutationAlphaJoinInviteArgs {
        key: string;
    }
    export interface MutationJoinAppInviteArgs {
        key: string;
    }
    export interface MutationDebugSendEmailArgs {
        type: DebugEmailType;
    }
    export interface MutationDebugCreateTestUserArgs {
        key: string;
        name: string;
    }
    export interface MutationSettingsUpdateArgs {
        settings: Nullable<UpdateSettingsInput>;
    }
    export interface MutationUpdateSettingsArgs {
        settings: Nullable<UpdateSettingsInput>;
    }
    export interface MutationBetaOrganizationMemberRequestApproveArgs {
        userId: string;
        organizationId: string;
    }
    export interface MutationBetaOrganizationMemberRemoveArgs {
        userId: string;
        organizationId: string;
    }
    export interface MutationBetaOrganizationMemberAddArgs {
        userId: Nullable<string>;
        userIds: Nullable<string[]>;
        organizationId: string;
    }
    export interface MutationAlphaOrganizationChangeMemberRoleArgs {
        memberId: string;
        newRole: OrganizationMemberRole;
        organizationId: string;
    }
    export interface MutationAlphaOrganizationInviteMembersArgs {
        inviteRequests: InviteRequest[];
        organizationId: Nullable<string>;
    }
    export interface MutationAlphaOrganizationRefreshInviteLinkArgs {
        expirationDays: Nullable<number>;
        organizationId: Nullable<string>;
    }
    export interface MutationAlphaOrganizationCreatePublicInviteArgs {
        expirationDays: Nullable<number>;
        organizationId: Nullable<string>;
    }
    export interface MutationAlphaOrganizationRemoveMemberArgs {
        memberId: string;
        organizationId: string;
    }
    export interface MutationAlphaOrganizationDeletePublicInviteArgs {
        organizationId: Nullable<string>;
    }
    export interface MutationPresenceReportOnlineArgs {
        timeout: number;
        platform: Nullable<Platform>;
        active: Nullable<boolean>;
    }
    export interface MutationPresenceReportOfflineArgs {
        platform: Nullable<Platform>;
    }
    export interface MutationAlphaReportActiveArgs {
        timeout: number;
        platform: Nullable<Platform>;
    }
    export interface MutationSuperAccountAddArgs {
        title: string;
    }
    export interface MutationSuperAccountRenameArgs {
        id: string;
        title: string;
    }
    export interface MutationSuperAccountActivateArgs {
        id: string;
    }
    export interface MutationSuperAccountSuspendArgs {
        id: string;
    }
    export interface MutationSuperAccountPendArgs {
        id: string;
    }
    export interface MutationSuperAccountMemberAddArgs {
        id: string;
        userId: string;
    }
    export interface MutationSuperAccountMemberRemoveArgs {
        id: string;
        userId: string;
    }
    export interface MutationSuperAccountChannelMemberAddArgs {
        id: string;
        userId: string;
    }
    export interface MutationSuperAdminAddArgs {
        userId: string;
        role: SuperAdminRole;
    }
    export interface MutationSuperAdminRemoveArgs {
        userId: string;
    }
    export interface MutationAlphaAlterPublishedArgs {
        id: string;
        published: boolean;
    }
    export interface MutationBetaFixCounterArgs {
        uid: string;
    }
    export interface MutationConversationDraftUpdateArgs {
        conversationId: string;
        message: Nullable<string>;
    }
    export interface MutationAlphaSaveDraftMessageArgs {
        conversationId: string;
        message: Nullable<string>;
    }
    export interface MutationTrackArgs {
        did: string;
        events: Event[];
    }
    export interface MutationCreateAppArgs {
        name: string;
        photoRef: Nullable<ImageRefInput>;
        about: Nullable<string>;
        shortname: Nullable<string>;
    }
    export interface MutationRefreshAppTokenArgs {
        appId: string;
    }
    export interface MutationUpdateAppProfileArgs {
        appId: string;
        input: AppProfileInput;
    }
    export interface MutationDeleteAppArgs {
        appId: string;
    }
    export interface MutationAddAppToChatArgs {
        appId: string;
        chatId: string;
    }
    export interface MutationAlphaChannelCreateArgs {
        title: string;
        photoRef: Nullable<ImageRefInput>;
        message: Nullable<string>;
        description: Nullable<string>;
        oid: Nullable<string>;
    }
    export interface MutationAlphaChannelSetFeaturedArgs {
        channelId: string;
        featured: boolean;
    }
    export interface MutationAlphaChannelHideFromSearchArgs {
        channelId: string;
        hidden: boolean;
    }
    export interface MutationAlphaChannelInviteArgs {
        channelId: string;
        userId: string;
    }
    export interface MutationAlphaChannelJoinArgs {
        channelId: string;
    }
    export interface MutationAlphaChannelRevokeInviteArgs {
        channelId: string;
        userId: string;
    }
    export interface MutationAlphaChannelCancelRequestArgs {
        channelId: string;
    }
    export interface MutationAlphaChannelInviteMembersArgs {
        channelId: string;
        inviteRequests: ChannelInviteRequest[];
    }
    export interface MutationAlphaChannelJoinInviteArgs {
        invite: string;
    }
    export interface MutationAlphaChannelRenewInviteLinkArgs {
        channelId: string;
    }
    export interface MutationFeatureFlagAddArgs {
        key: string;
        title: string;
    }
    export interface MutationSuperAccountFeatureAddArgs {
        id: string;
        featureId: string;
    }
    export interface MutationSuperAccountFeatureRemoveArgs {
        id: string;
        featureId: string;
    }
    export interface MutationAlphaCreateFeedPostArgs {
        message: string;
    }
    export interface MutationConferenceJoinArgs {
        id: string;
    }
    export interface MutationConferenceKeepAliveArgs {
        id: string;
        peerId: string;
    }
    export interface MutationConferenceLeaveArgs {
        id: string;
        peerId: string;
    }
    export interface MutationPeerConnectionOfferArgs {
        id: string;
        ownPeerId: string;
        peerId: string;
        offer: string;
    }
    export interface MutationPeerConnectionAnswerArgs {
        id: string;
        ownPeerId: string;
        peerId: string;
        answer: string;
    }
    export interface MutationPeerConnectionCandidateArgs {
        id: string;
        ownPeerId: string;
        peerId: string;
        candidate: string;
    }
    export interface MutationRoomReadArgs {
        id: string;
        mid: string;
    }
    export interface MutationBetaMessageSendArgs {
        message: Nullable<string>;
        file: Nullable<string>;
        repeatKey: Nullable<string>;
        replyMessages: Nullable<string[]>;
        mentions: Nullable<string[]>;
        room: string;
    }
    export interface MutationBetaMessageEditArgs {
        mid: string;
        message: Nullable<string>;
        file: Nullable<string>;
        replyMessages: Nullable<string[]>;
        mentions: Nullable<string[]>;
    }
    export interface MutationBetaMessageDeleteAugmentationArgs {
        mid: string;
    }
    export interface MutationBetaMessageDeleteArgs {
        mid: Nullable<string>;
        mids: Nullable<string[]>;
    }
    export interface MutationBetaReactionSetArgs {
        mid: string;
        reaction: string;
    }
    export interface MutationBetaReactionRemoveArgs {
        mid: string;
        reaction: string;
    }
    export interface MutationBetaIntroSendArgs {
        room: string;
        uid: string;
        about: Nullable<string>;
        message: Nullable<string>;
        file: Nullable<string>;
        repeatKey: Nullable<string>;
    }
    export interface MutationBetaIntroEditArgs {
        mid: string;
        uid: string;
        about: Nullable<string>;
        message: Nullable<string>;
        file: Nullable<string>;
    }
    export interface MutationAlphaSendPostMessageArgs {
        conversationId: string;
        title: string;
        text: string;
        attachments: Nullable<string[]>;
        postType: PostMessageType;
        repeatKey: Nullable<string>;
    }
    export interface MutationAlphaEditPostMessageArgs {
        messageId: string;
        title: string;
        text: string;
        attachments: Nullable<string[]>;
        postType: PostMessageType;
    }
    export interface MutationAlphaRespondPostMessageArgs {
        messageId: string;
        buttonId: string;
    }
    export interface MutationCreateOrganizationArgs {
        input: CreateOrganizationInput;
    }
    export interface MutationUpdateOrganizationProfileArgs {
        input: UpdateOrganizationProfileInput;
        id: Nullable<string>;
    }
    export interface MutationDeleteOrganizationArgs {
        id: string;
    }
    export interface MutationRegisterWebPushArgs {
        endpoint: string;
    }
    export interface MutationRegisterPushArgs {
        endpoint: string;
        type: PushType;
    }
    export interface MutationTypingSendArgs {
        conversationId: string;
        type: TypingType;
    }
    export interface MutationTypingCancelArgs {
        conversationId: string;
    }
    export interface MutationAlphaSetTypingArgs {
        conversationId: string;
        type: Nullable<string>;
    }
    export interface MutationBetaRoomCreateArgs {
        kind: SharedRoomKind;
        title: Nullable<string>;
        description: Nullable<string>;
        photoRef: Nullable<ImageRefInput>;
        members: string[];
        message: Nullable<string>;
        listed: Nullable<boolean>;
        organizationId: Nullable<string>;
    }
    export interface MutationBetaRoomUpdateArgs {
        roomId: string;
        input: RoomUpdateInput;
    }
    export interface MutationBetaRoomMoveArgs {
        roomId: string;
        toOrg: string;
    }
    export interface MutationBetaRoomInviteArgs {
        roomId: string;
        invites: RoomInviteInput[];
    }
    export interface MutationBetaRoomKickArgs {
        roomId: string;
        userId: string;
    }
    export interface MutationBetaRoomLeaveArgs {
        roomId: string;
    }
    export interface MutationBetaRoomChangeRoleArgs {
        roomId: string;
        userId: string;
        newRole: RoomMemberRole;
    }
    export interface MutationBetaRoomJoinArgs {
        roomId: string;
    }
    export interface MutationBetaRoomDeclineJoinRequestArgs {
        roomId: string;
        userId: string;
    }
    export interface MutationBetaRoomInviteLinkSendEmailArgs {
        roomId: string;
        inviteRequests: RoomInviteEmailRequest[];
    }
    export interface MutationBetaRoomInviteLinkJoinArgs {
        invite: string;
    }
    export interface MutationBetaRoomInviteLinkRenewArgs {
        roomId: string;
    }
    export interface MutationBetaRoomUpdateUserNotificationSettingsArgs {
        settings: RoomUserNotificaionSettingsInput;
        roomId: string;
    }
    export interface MutationBetaRoomAlterFeaturedArgs {
        roomId: string;
        featured: boolean;
    }
    export interface MutationBetaRoomAlterListedArgs {
        roomId: string;
        listed: boolean;
    }
    export interface MutationAlphaSetUserShortNameArgs {
        shortname: string;
    }
    export interface MutationAlphaSetOrgShortNameArgs {
        id: string;
        shortname: string;
    }
    export interface OrganizationContact {
        name?: string;
        photo?: Nullable<string>;
        photoRef?: Nullable<ImageRef>;
        position?: Nullable<string>;
        email?: Nullable<string>;
        phone?: Nullable<string>;
        link?: Nullable<string>;
        twitter?: Nullable<string>;
    }
    export interface Organization {
        id?: string;
        isMine?: boolean;
        name?: string;
        photo?: Nullable<string>;
        website?: Nullable<string>;
        websiteTitle?: Nullable<string>;
        about?: Nullable<string>;
        twitter?: Nullable<string>;
        facebook?: Nullable<string>;
        linkedin?: Nullable<string>;
        location?: Nullable<string>;
        betaIsOwner?: boolean;
        betaIsAdmin?: boolean;
        betaIsPrimary?: boolean;
        superAccountId?: string;
        alphaIsOwner?: boolean;
        alphaOrganizationMembers?: OrganizationJoinedMember[];
        alphaOrganizationMemberRequests?: OrganizationRequestedMember[];
        alphaFeatured?: boolean;
        alphaIsCommunity?: boolean;
        alphaCreatedChannels?: Nullable<ChannelConversation>[];
        betaPublicRooms?: SharedRoom[];
        status?: string;
        shortname?: Nullable<string>;
    }
    export interface OrganizationProfile {
        id?: string;
        name?: string;
        photoRef?: Nullable<ImageRef>;
        website?: Nullable<string>;
        websiteTitle?: Nullable<string>;
        about?: Nullable<string>;
        twitter?: Nullable<string>;
        facebook?: Nullable<string>;
        linkedin?: Nullable<string>;
        contacts?: OrganizationContact[];
        location?: Nullable<string>;
        alphaPublished?: boolean;
        alphaEditorial?: boolean;
        alphaFeatured?: boolean;
        alphaIsCommunity?: boolean;
        alphaLocations?: Nullable<string[]>;
        alphaInterests?: Nullable<string[]>;
        alphaOrganizationType?: Nullable<string[]>;
        alphaPotentialSites?: Nullable<Range[]>;
        alphaSiteSizes?: Nullable<Range[]>;
        alphaDevelopmentModels?: Nullable<string[]>;
        alphaAvailability?: Nullable<string[]>;
        alphaLandUse?: Nullable<string[]>;
        alphaGoodFor?: Nullable<string[]>;
        alphaSpecialAttributes?: Nullable<string[]>;
        alphaLookingFor?: Nullable<string[]>;
        alphaGeographies?: Nullable<string[]>;
        alphaDOShapeAndForm?: Nullable<string[]>;
        alphaDOCurrentUse?: Nullable<string[]>;
        alphaDOGoodFitFor?: Nullable<string[]>;
        alphaDOSpecialAttributes?: Nullable<string[]>;
        alphaDOAvailability?: Nullable<string[]>;
        alphaARGeographies?: Nullable<string[]>;
        alphaARAreaRange?: Nullable<string[]>;
        alphaARHeightLimit?: Nullable<string[]>;
        alphaARActivityStatus?: Nullable<string[]>;
        alphaARAquisitionBudget?: Nullable<string[]>;
        alphaARAquisitionRate?: Nullable<string[]>;
        alphaARClosingTime?: Nullable<string[]>;
        alphaARSpecialAttributes?: Nullable<string[]>;
        alphaARLandUse?: Nullable<string[]>;
        alphaJoinedChannels?: Nullable<ChannelConversation>[];
        alphaCreatedChannels?: Nullable<ChannelConversation>[];
        shortname?: Nullable<string>;
    }
    export interface CreateOrganizationInput {
        id: Nullable<string>;
        name: string;
        website: Nullable<string>;
        personal: boolean;
        photoRef: Nullable<ImageRefInput>;
        about: Nullable<string>;
        isCommunity: Nullable<boolean>;
    }
    export interface UpdateOrganizationProfileInput {
        name: Nullable<string>;
        photoRef: Nullable<ImageRefInput>;
        website: Nullable<string>;
        websiteTitle: Nullable<string>;
        about: Nullable<string>;
        twitter: Nullable<string>;
        facebook: Nullable<string>;
        linkedin: Nullable<string>;
        location: Nullable<string>;
        contacts: Nullable<ContactPersonInput[]>;
        alphaPublished: Nullable<boolean>;
        alphaEditorial: Nullable<boolean>;
        alphaFeatured: Nullable<boolean>;
        alphaLocations: Nullable<string[]>;
        alphaInterests: Nullable<string[]>;
        alphaOrganizationType: Nullable<string[]>;
        alphaPotentialSites: Nullable<Nullable<RangeInput>[]>;
        alphaSiteSizes: Nullable<Nullable<RangeInput>[]>;
        alphaDevelopmentModels: Nullable<Nullable<string>[]>;
        alphaAvailability: Nullable<Nullable<string>[]>;
        alphaLandUse: Nullable<Nullable<string>[]>;
        alphaGoodFor: Nullable<Nullable<string>[]>;
        alphaSpecialAttributes: Nullable<Nullable<string>[]>;
        alphaLookingFor: Nullable<string[]>;
        alphaGeographies: Nullable<string[]>;
        alphaDOShapeAndForm: Nullable<string[]>;
        alphaDOCurrentUse: Nullable<string[]>;
        alphaDOGoodFitFor: Nullable<string[]>;
        alphaDOSpecialAttributes: Nullable<string[]>;
        alphaDOAvailability: Nullable<string[]>;
        alphaARGeographies: Nullable<string[]>;
        alphaARAreaRange: Nullable<string[]>;
        alphaARHeightLimit: Nullable<string[]>;
        alphaARActivityStatus: Nullable<string[]>;
        alphaARAquisitionBudget: Nullable<string[]>;
        alphaARAquisitionRate: Nullable<string[]>;
        alphaARClosingTime: Nullable<string[]>;
        alphaARSpecialAttributes: Nullable<string[]>;
        alphaARLandUse: Nullable<string[]>;
    }
    export interface ContactPersonInput {
        name: string;
        photoRef: Nullable<ImageRefInput>;
        position: Nullable<string>;
        email: Nullable<string>;
        phone: Nullable<string>;
        link: Nullable<string>;
        twitter: Nullable<string>;
    }
    export interface OrganizationsEdge {
        node?: Organization;
        cursor?: string;
    }
    export interface OrganizationsConnection {
        edges?: OrganizationsEdge[];
        pageInfo?: PageInfo;
    }
    export interface Permissions {
        roles?: string[];
    }
    export interface ProfilePrefill {
        firstName?: Nullable<string>;
        lastName?: Nullable<string>;
        picture?: Nullable<string>;
    }
    export interface PushSettings {
        webPushKey?: Nullable<string>;
    }
    export type PushType = 'WEB_PUSH' | 'IOS' | 'ANDROID' | 'SAFARI';
    export interface Query {
        lifecheck?: Nullable<string>;
        alphaNotificationCounter?: NotificationCounter;
        alphaChat?: Conversation;
        alphaLoadMessages?: ConversationState;
        alphaChatsSearchForCompose?: ComposeSearchResult[];
        alphaChatSearch?: Nullable<Conversation>;
        alphaGroupConversationMembers?: GroupConversationMember[];
        myProfile?: Nullable<Profile>;
        alphaInvites?: Nullable<Invite[]>;
        alphaInviteInfo?: Nullable<InviteInfo>;
        appInvite?: string;
        appInviteInfo?: Nullable<AppInvite>;
        alphaAppInvite?: string;
        alphaAppInviteInfo?: Nullable<AppInviteInfo>;
        alphaInvitesHistory?: Nullable<InviteHistotyInfo[]>;
        debugParseID?: DebugID;
        debugCrashQuery?: string;
        alphaChats?: ConversationConnection;
        dialogs?: DialogsConnection;
        settings?: Settings;
        alphaOrganizationMembers?: OrganizationMember[];
        alphaOrganizationInviteLink?: Nullable<Invite>;
        alphaOrganizationPublicInvite?: Nullable<Invite>;
        superAccounts?: SuperAccount[];
        superAccount?: SuperAccount;
        superAdmins?: SuperAdmin[];
        alphaChatTextSearch?: Conversation[];
        betaDialogTextSearch?: Dialog[];
        conversationDraft?: Nullable<string>;
        alphaDraftMessage?: Nullable<string>;
        messages?: BaseMessage[];
        myApps?: AppProfile[];
        alphaChannelsList?: ConversationConnection;
        alphaChannelMembers?: ChannelMember[];
        alphaChannelsFeatured?: ChannelConversation[];
        alphaChannels?: ChannelConversationConnection;
        alphaChannelInviteInfo?: Nullable<ChannelInvite>;
        alphaChannelInviteLink?: string;
        chatState?: ChatUpdateState;
        conversationState?: ConversationUpdateState;
        dialogsState?: DialogUpdateState;
        featureFlags?: FeatureFlag[];
        alphaHomeFeed?: FeedItem[];
        conference?: Conference;
        myOrganization?: Nullable<Organization>;
        myOrganizations?: Organization[];
        organization?: Organization;
        myOrganizationProfile?: OrganizationProfile;
        organizationProfile?: OrganizationProfile;
        alphaOrganizations?: OrganizationsConnection;
        alphaOrganizationByPrefix?: Nullable<Organization>;
        alphaComunityPrefixSearch?: OrganizationsConnection;
        myPermissions?: Permissions;
        users?: User[];
        myProfilePrefill?: Nullable<ProfilePrefill>;
        pushSettings?: PushSettings;
        sessionState?: SessionState;
        me?: Nullable<User>;
        user?: User;
        userSearch?: UserConnection;
        alphaProfiles?: UserConnection;
        alphaGlobalSearch?: GlobalSearchEntry[];
        room?: Nullable<Room>;
        roomSuper?: Nullable<RoomSuper>;
        roomMessages?: RoomMessage[];
        roomMembers?: RoomMember[];
        betaRoomSearch?: RoomConnection;
        betaRoomInviteInfo?: Nullable<RoomInvite>;
        betaRoomInviteLink?: string;
        betaAvailableRooms?: SharedRoom[];
        alphaResolveShortName?: Nullable<ShortNameDestination>;
    }
    export interface QueryAlphaChatArgs {
        conversationId: Nullable<string>;
        shortName: Nullable<string>;
    }
    export interface QueryAlphaLoadMessagesArgs {
        conversationId: string;
        first: Nullable<number>;
        before: Nullable<string>;
        after: Nullable<string>;
    }
    export interface QueryAlphaChatsSearchForComposeArgs {
        query: Nullable<string>;
        organizations: Nullable<boolean>;
        limit: Nullable<number>;
    }
    export interface QueryAlphaChatSearchArgs {
        members: string[];
    }
    export interface QueryAlphaGroupConversationMembersArgs {
        conversationId: string;
    }
    export interface QueryAlphaInviteInfoArgs {
        key: string;
    }
    export interface QueryAppInviteInfoArgs {
        key: string;
    }
    export interface QueryAlphaAppInviteInfoArgs {
        key: string;
    }
    export interface QueryDebugParseIDArgs {
        id: string;
    }
    export interface QueryAlphaChatsArgs {
        first: number;
        after: Nullable<string>;
    }
    export interface QueryDialogsArgs {
        first: number;
        after: Nullable<string>;
    }
    export interface QueryAlphaOrganizationMembersArgs {
        orgId: string;
    }
    export interface QueryAlphaOrganizationInviteLinkArgs {
        organizationId: Nullable<string>;
    }
    export interface QueryAlphaOrganizationPublicInviteArgs {
        organizationId: Nullable<string>;
    }
    export interface QuerySuperAccountArgs {
        id: string;
        viaOrgId: Nullable<boolean>;
    }
    export interface QueryAlphaChatTextSearchArgs {
        query: string;
    }
    export interface QueryBetaDialogTextSearchArgs {
        query: string;
    }
    export interface QueryConversationDraftArgs {
        conversationId: string;
    }
    export interface QueryAlphaDraftMessageArgs {
        conversationId: string;
    }
    export interface QueryMessagesArgs {
        chatId: string;
        first: number;
        before: Nullable<string>;
    }
    export interface QueryAlphaChannelsListArgs {
        first: number;
        after: Nullable<string>;
    }
    export interface QueryAlphaChannelMembersArgs {
        channelId: string;
    }
    export interface QueryAlphaChannelsArgs {
        query: Nullable<string>;
        first: number;
        after: Nullable<string>;
        page: Nullable<number>;
        sort: Nullable<string>;
    }
    export interface QueryAlphaChannelInviteInfoArgs {
        uuid: string;
    }
    export interface QueryAlphaChannelInviteLinkArgs {
        channelId: string;
    }
    export interface QueryChatStateArgs {
        chatId: string;
    }
    export interface QueryConversationStateArgs {
        id: string;
    }
    export interface QueryConferenceArgs {
        id: string;
    }
    export interface QueryOrganizationArgs {
        id: string;
    }
    export interface QueryOrganizationProfileArgs {
        id: string;
    }
    export interface QueryAlphaOrganizationsArgs {
        query: Nullable<string>;
        all: Nullable<boolean>;
        prefix: Nullable<string>;
        sort: Nullable<string>;
        first: number;
        after: Nullable<string>;
        page: Nullable<number>;
    }
    export interface QueryAlphaOrganizationByPrefixArgs {
        query: Nullable<string>;
    }
    export interface QueryAlphaComunityPrefixSearchArgs {
        query: Nullable<string>;
        sort: Nullable<string>;
        first: number;
        after: Nullable<string>;
        page: Nullable<number>;
    }
    export interface QueryUsersArgs {
        query: string;
    }
    export interface QueryUserArgs {
        id: string;
    }
    export interface QueryUserSearchArgs {
        query: Nullable<string>;
        first: number;
        after: Nullable<string>;
        page: Nullable<number>;
        sort: Nullable<string>;
    }
    export interface QueryAlphaProfilesArgs {
        query: Nullable<string>;
        first: number;
        after: Nullable<string>;
        page: Nullable<number>;
        sort: Nullable<string>;
    }
    export interface QueryAlphaGlobalSearchArgs {
        query: string;
    }
    export interface QueryRoomArgs {
        id: string;
    }
    export interface QueryRoomSuperArgs {
        id: string;
    }
    export interface QueryRoomMessagesArgs {
        roomId: string;
        first: Nullable<number>;
        before: Nullable<string>;
    }
    export interface QueryRoomMembersArgs {
        roomId: string;
    }
    export interface QueryBetaRoomSearchArgs {
        query: Nullable<string>;
        first: number;
        after: Nullable<string>;
        page: Nullable<number>;
        sort: Nullable<string>;
    }
    export interface QueryBetaRoomInviteInfoArgs {
        invite: string;
    }
    export interface QueryBetaRoomInviteLinkArgs {
        roomId: string;
    }
    export interface QueryAlphaResolveShortNameArgs {
        shortname: string;
    }
    export interface SessionState {
        isLoggedIn?: boolean;
        isProfileCreated?: boolean;
        isActivated?: boolean;
        isAccountExists?: boolean;
        isCompleted?: boolean;
        isBlocked?: boolean;
        isAccountPicked?: boolean;
        isAccountActivated?: boolean;
    }
    export interface Subscription {
        lifecheck?: Nullable<string>;
        settingsWatch?: Settings;
        watchSettings?: Settings;
        alphaSubscribeChatOnline?: OnlineEvent;
        alphaSubscribeOnline?: OnlineEvent;
        chatUpdates?: ChatUpdateContainer;
        conversationUpdates?: ConversationUpdateContainer;
        dialogsUpdates?: DialogUpdateContainer;
        alphaConferenceWatch?: Conference;
        typings?: TypingEvent;
        conversationTypings?: TypingEvent;
        alphaSubscribeTypings?: TypingEvent;
        alphaSubscribeChatTypings?: TypingEvent;
    }
    export interface SubscriptionAlphaSubscribeChatOnlineArgs {
        conversations: string[];
    }
    export interface SubscriptionAlphaSubscribeOnlineArgs {
        users: string[];
    }
    export interface SubscriptionChatUpdatesArgs {
        chatId: string;
        fromState: Nullable<string>;
    }
    export interface SubscriptionConversationUpdatesArgs {
        conversationId: string;
        fromState: Nullable<string>;
    }
    export interface SubscriptionDialogsUpdatesArgs {
        fromState: Nullable<string>;
    }
    export interface SubscriptionAlphaConferenceWatchArgs {
        id: string;
    }
    export interface SubscriptionConversationTypingsArgs {
        conversationId: string;
    }
    export interface SubscriptionAlphaSubscribeChatTypingsArgs {
        conversationId: string;
    }
    export interface TypingEvent {
        conversation?: Conversation;
        user?: User;
        type?: TypingType;
        cancel?: boolean;
    }
    export type TypingType = 'TEXT' | 'PHOTO' | 'FILE';
    export interface User {
        id?: string;
        isYou?: boolean;
        isBot?: boolean;
        name?: string;
        firstName?: string;
        lastName?: Nullable<string>;
        photo?: Nullable<string>;
        phone?: Nullable<string>;
        email?: Nullable<string>;
        website?: Nullable<string>;
        about?: Nullable<string>;
        location?: Nullable<string>;
        linkedin?: Nullable<string>;
        twitter?: Nullable<string>;
        channelsJoined?: ChannelConversation[];
        photoRef?: Nullable<ImageRef>;
        picture?: Nullable<string>;
        pictureRef?: Nullable<ImageRef>;
        alphaRole?: Nullable<string>;
        alphaLinkedin?: Nullable<string>;
        alphaTwitter?: Nullable<string>;
        alphaLocations?: Nullable<string[]>;
        online?: boolean;
        active?: boolean;
        lastSeen?: Nullable<string>;
        organizations?: Organization[];
        primaryOrganization?: Nullable<Organization>;
        alphaPrimaryOrganization?: Nullable<Organization>;
        shortname?: Nullable<string>;
    }
    export interface UserEdge {
        node?: User;
        cursor?: string;
    }
    export interface UserConnection {
        edges?: UserEdge[];
        pageInfo?: PageInfo;
    }
    export type GlobalSearchEntry = Organization | User | SharedRoom;
    export type Room = PrivateRoom | SharedRoom;
    export interface PrivateRoom {
        id?: string;
        user?: User;
        settings?: RoomUserNotificaionSettings;
    }
    export type SharedRoomKind = 'INTERNAL' | 'PUBLIC' | 'GROUP';
    export type SharedRoomMembershipStatus = 'MEMBER' | 'REQUESTED' | 'LEFT' | 'KICKED' | 'NONE';
    export type RoomMemberRole = 'OWNER' | 'ADMIN' | 'MEMBER';
    export interface SharedRoom {
        id?: string;
        kind?: SharedRoomKind;
        title?: string;
        photo?: string;
        socialImage?: Nullable<string>;
        description?: Nullable<string>;
        organization?: Nullable<Organization>;
        membersCount?: Nullable<number>;
        members?: RoomMember[];
        requests?: Nullable<RoomMember[]>;
        membership?: SharedRoomMembershipStatus;
        role?: RoomMemberRole;
        settings?: RoomUserNotificaionSettings;
    }
    export interface RoomSuper {
        id?: string;
        featured?: boolean;
        listed?: boolean;
    }
    export interface RoomUpdateInput {
        title: Nullable<string>;
        photoRef: Nullable<ImageRefInput>;
        description: Nullable<string>;
        socialImageRef: Nullable<ImageRefInput>;
        kind: Nullable<SharedRoomKind>;
    }
    export interface UserMention {
        user?: User;
    }
    export interface SharedRoomMention {
        sharedRoom?: SharedRoom;
    }
    export type Mention = UserMention | SharedRoomMention;
    export interface RoomMessage {
        id?: string;
        message?: Nullable<string>;
        file?: Nullable<string>;
        fileMetadata?: Nullable<FileMetadata>;
        filePreview?: Nullable<string>;
        sender?: User;
        date?: Date;
        repeatKey?: Nullable<string>;
        isService?: boolean;
        serviceMetadata?: Nullable<ServiceMetadata>;
        urlAugmentation?: Nullable<UrlAugmentation>;
        edited?: boolean;
        reactions?: MessageReaction[];
        replyMessages?: Nullable<RoomMessage[]>;
        plainText?: Nullable<string>;
        mentions?: Nullable<User[]>;
        alphaAttachments?: MessageAttachment[];
        alphaButtons?: Nullable<MessageButton[]>[];
        alphaType?: MessageType;
        alphaTitle?: Nullable<string>;
        alphaPostType?: Nullable<PostMessageType>;
        alphaMentions?: Nullable<Mention[]>;
    }
    export interface RoomMember {
        user?: User;
        role?: RoomMemberRole;
        membership?: SharedRoomMembershipStatus;
    }
    export interface RoomUserNotificaionSettings {
        id?: string;
        mute?: Nullable<boolean>;
    }
    export interface RoomUserNotificaionSettingsInput {
        mute: Nullable<boolean>;
    }
    export interface RoomInviteInput {
        userId: string;
        role: RoomMemberRole;
    }
    export interface RoomInviteEmailRequest {
        email: string;
        emailText: Nullable<string>;
        firstName: Nullable<string>;
        lastName: Nullable<string>;
    }
    export interface RoomConnectionEdge {
        node?: SharedRoom;
        cursor?: string;
    }
    export interface RoomConnection {
        edges?: RoomConnectionEdge[];
        pageInfo?: PageInfo;
    }
    export interface RoomInvite {
        room?: SharedRoom;
        invitedByUser?: User;
    }
    export type ShortNameDestination = User | Organization;
}

export interface GQLResolver {
    ConversationSettings?: ComplexTypedResolver<GQL.ConversationSettings, GQLRoots.ConversationSettingsRoot, {}, {}>;
    AnonymousConversation?: ComplexTypedResolver<GQL.AnonymousConversation, GQLRoots.AnonymousConversationRoot, {topMessage: Nullable<GQLRoots.ConversationMessageRoot>, settings: GQLRoots.ConversationSettingsRoot}, {}>;
    SharedConversation?: ComplexTypedResolver<GQL.SharedConversation, GQLRoots.SharedConversationRoot, {organizations: GQLRoots.OrganizationRoot[], topMessage: Nullable<GQLRoots.ConversationMessageRoot>, organization: Nullable<GQLRoots.OrganizationRoot>, settings: GQLRoots.ConversationSettingsRoot}, {}>;
    PrivateConversation?: ComplexTypedResolver<GQL.PrivateConversation, GQLRoots.PrivateConversationRoot, {user: GQLRoots.UserRoot, topMessage: Nullable<GQLRoots.ConversationMessageRoot>, settings: GQLRoots.ConversationSettingsRoot}, {}>;
    GroupConversation?: ComplexTypedResolver<GQL.GroupConversation, GQLRoots.GroupConversationRoot, {members: GQLRoots.UserRoot[], topMessage: Nullable<GQLRoots.ConversationMessageRoot>, settings: GQLRoots.ConversationSettingsRoot, photoRef: Nullable<GQLRoots.ImageRefRoot>, pinnedMessage: Nullable<GQLRoots.ConversationMessageRoot>}, {}>;
    InviteServiceMetadata?: ComplexTypedResolver<GQL.InviteServiceMetadata, GQLRoots.InviteServiceMetadataRoot, {users: Nullable<GQLRoots.UserRoot[]>, invitedBy: GQLRoots.UserRoot}, {}>;
    KickServiceMetadata?: ComplexTypedResolver<GQL.KickServiceMetadata, GQLRoots.KickServiceMetadataRoot, {user: GQLRoots.UserRoot, kickedBy: GQLRoots.UserRoot}, {}>;
    TitleChangeServiceMetadata?: ComplexTypedResolver<GQL.TitleChangeServiceMetadata, GQLRoots.TitleChangeServiceMetadataRoot, {}, {}>;
    PhotoChangeServiceMetadata?: ComplexTypedResolver<GQL.PhotoChangeServiceMetadata, GQLRoots.PhotoChangeServiceMetadataRoot, {photoRef: Nullable<GQLRoots.ImageRefRoot>}, {}>;
    PostRespondServiceMetadata?: ComplexTypedResolver<GQL.PostRespondServiceMetadata, GQLRoots.PostRespondServiceMetadataRoot, {post: GQLRoots.RoomMessageRoot, postRoom: GQLRoots.RoomRoot, responder: GQLRoots.UserRoot}, {}>;
    UrlAugmentationExtra?: UnionTypeResolver<GQLRoots.UrlAugmentationExtraRoot, 'User' | 'Organization' | 'ChannelConversation'>;
    UrlAugmentation?: ComplexTypedResolver<GQL.UrlAugmentation, GQLRoots.UrlAugmentationRoot, {photo: Nullable<GQLRoots.ImageRefRoot>, imageInfo: Nullable<GQLRoots.FileMetadataRoot>, iconRef: Nullable<GQLRoots.ImageRefRoot>, iconInfo: Nullable<GQLRoots.FileMetadataRoot>, extra: Nullable<GQLRoots.UrlAugmentationExtraRoot>}, {}>;
    ServiceMetadata?: UnionTypeResolver<GQLRoots.ServiceMetadataRoot, 'InviteServiceMetadata' | 'KickServiceMetadata' | 'TitleChangeServiceMetadata' | 'PhotoChangeServiceMetadata' | 'PostRespondServiceMetadata'>;
    ConversationMessage?: ComplexTypedResolver<GQL.ConversationMessage, GQLRoots.ConversationMessageRoot, {fileMetadata: Nullable<GQLRoots.FileMetadataRoot>, sender: GQLRoots.UserRoot, serviceMetadata: Nullable<GQLRoots.ServiceMetadataRoot>, urlAugmentation: Nullable<GQLRoots.UrlAugmentationRoot>, reactions: GQLRoots.MessageReactionRoot[], replyMessages: Nullable<GQLRoots.ConversationMessageRoot[]>, mentions: Nullable<GQLRoots.UserRoot[]>, alphaAttachments: GQLRoots.MessageAttachmentRoot[], alphaButtons: Nullable<GQLRoots.MessageButtonRoot[]>[], alphaMentions: Nullable<GQLRoots.MentionRoot[]>}, {}>;
    FileMetadata?: ComplexTypedResolver<GQL.FileMetadata, GQLRoots.FileMetadataRoot, {}, {}>;
    StickerPack?: ComplexTypedResolver<GQL.StickerPack, GQLRoots.StickerPackRoot, {stickers: Nullable<GQLRoots.StickerRoot[]>}, {}>;
    Sticker?: ComplexTypedResolver<GQL.Sticker, GQLRoots.StickerRoot, {meta: GQLRoots.FileMetadataRoot}, {}>;
    ConversationEventSimpleBatch?: ComplexTypedResolver<GQL.ConversationEventSimpleBatch, GQLRoots.ConversationEventSimpleBatchRoot, {events: GQLRoots.ConversationEventRoot[]}, {}>;
    ConversationEventMessage?: ComplexTypedResolver<GQL.ConversationEventMessage, GQLRoots.ConversationEventMessageRoot, {message: GQLRoots.ConversationMessageRoot}, {}>;
    ConversationEventEditMessage?: ComplexTypedResolver<GQL.ConversationEventEditMessage, GQLRoots.ConversationEventEditMessageRoot, {message: GQLRoots.ConversationMessageRoot}, {}>;
    ConversationEventDelete?: ComplexTypedResolver<GQL.ConversationEventDelete, GQLRoots.ConversationEventDeleteRoot, {}, {}>;
    ConversationEventNewMembers?: ComplexTypedResolver<GQL.ConversationEventNewMembers, GQLRoots.ConversationEventNewMembersRoot, {users: Nullable<GQLRoots.UserRoot[]>, invitedBy: GQLRoots.UserRoot}, {}>;
    ConversationEventKick?: ComplexTypedResolver<GQL.ConversationEventKick, GQLRoots.ConversationEventKickRoot, {user: GQLRoots.UserRoot, kickedBy: GQLRoots.UserRoot}, {}>;
    ConversationEventTitle?: ComplexTypedResolver<GQL.ConversationEventTitle, GQLRoots.ConversationEventTitleRoot, {}, {}>;
    ConversationEventUpdate?: ComplexTypedResolver<GQL.ConversationEventUpdate, GQLRoots.ConversationEventUpdateRoot, {chat: GQLRoots.ConversationRoot}, {}>;
    ConversationEventUpdateRole?: ComplexTypedResolver<GQL.ConversationEventUpdateRole, GQLRoots.ConversationEventUpdateRoleRoot, {user: GQLRoots.UserRoot}, {}>;
    ConversationState?: ComplexTypedResolver<GQL.ConversationState, GQLRoots.ConversationStateRoot, {messages: GQLRoots.ConversationMessageRoot[]}, {}>;
    ConversationConnection?: ComplexTypedResolver<GQL.ConversationConnection, GQLRoots.ConversationConnectionRoot, {conversations: GQLRoots.ConversationRoot[], counter: GQLRoots.NotificationCounterRoot}, {}>;
    NotificationCounter?: ComplexTypedResolver<GQL.NotificationCounter, GQLRoots.NotificationCounterRoot, {}, {}>;
    ChatReadResult?: ComplexTypedResolver<GQL.ChatReadResult, GQLRoots.ChatReadResultRoot, {conversation: GQLRoots.ConversationRoot, counter: GQLRoots.NotificationCounterRoot}, {}>;
    ComposeSearchResult?: UnionTypeResolver<GQLRoots.ComposeSearchResultRoot, 'User' | 'Organization'>;
    GroupConversationMember?: ComplexTypedResolver<GQL.GroupConversationMember, GQLRoots.GroupConversationMemberRoot, {user: GQLRoots.UserRoot}, {}>;
    GroupChatUpdateResponse?: ComplexTypedResolver<GQL.GroupChatUpdateResponse, GQLRoots.GroupChatUpdateResponseRoot, {chat: GQLRoots.ConversationRoot, chatEventMessage: Nullable<GQLRoots.ConversationEventMessageRoot>, chatEvent: Nullable<GQLRoots.ConversationEventRoot>}, {}>;
    ConversationUpdateResponse?: ComplexTypedResolver<GQL.ConversationUpdateResponse, GQLRoots.ConversationUpdateResponseRoot, {chat: GQLRoots.ConversationRoot}, {}>;
    ConversationBlockedUser?: ComplexTypedResolver<GQL.ConversationBlockedUser, GQLRoots.ConversationBlockedUserRoot, {user: GQLRoots.UserRoot, blockedBy: GQLRoots.UserRoot}, {}>;
    Profile?: ComplexTypedResolver<GQL.Profile, GQLRoots.ProfileRoot, {photoRef: Nullable<GQLRoots.ImageRefRoot>, alphaInvitedBy: Nullable<GQLRoots.UserRoot>, primaryOrganization: Nullable<GQLRoots.OrganizationRoot>, alphaPrimaryOrganization: Nullable<GQLRoots.OrganizationRoot>}, {}>;
    AlphaSignupData?: ComplexTypedResolver<GQL.AlphaSignupData, GQLRoots.AlphaSignupDataRoot, {user: Nullable<GQLRoots.UserRoot>, organization: Nullable<GQLRoots.OrganizationRoot>}, {}>;
    Invite?: ComplexTypedResolver<GQL.Invite, GQLRoots.InviteRoot, {}, {}>;
    InviteInfo?: ComplexTypedResolver<GQL.InviteInfo, GQLRoots.InviteInfoRoot, {photoRef: Nullable<GQLRoots.ImageRefRoot>, creator: Nullable<GQLRoots.UserRoot>}, {}>;
    AppInvite?: ComplexTypedResolver<GQL.AppInvite, GQLRoots.AppInviteRoot, {inviter: GQLRoots.UserRoot}, {}>;
    AppInviteInfo?: ComplexTypedResolver<GQL.AppInviteInfo, GQLRoots.AppInviteInfoRoot, {inviter: GQLRoots.UserRoot}, {}>;
    InviteHistotyInfo?: ComplexTypedResolver<GQL.InviteHistotyInfo, GQLRoots.InviteHistotyInfoRoot, {acceptedBy: Nullable<GQLRoots.UserRoot>}, {}>;
    Reaction?: ComplexTypedResolver<GQL.Reaction, GQLRoots.ReactionRoot, {user: GQLRoots.UserRoot}, {}>;
    Message?: ComplexTypedResolver<GQL.Message, GQLRoots.MessageRoot, {sender: GQLRoots.UserRoot, quoted: GQLRoots.MessageRoot[], alphaReactions: GQLRoots.ReactionRoot[]}, {}>;
    DebugID?: ComplexTypedResolver<GQL.DebugID, GQLRoots.DebugIDRoot, {}, {}>;
    Dialog?: ComplexTypedResolver<GQL.Dialog, GQLRoots.DialogRoot, {topMessage: Nullable<GQLRoots.MessageRoot>, betaTopMessage: Nullable<GQLRoots.RoomMessageRoot>}, {}>;
    DialogsConnection?: ComplexTypedResolver<GQL.DialogsConnection, GQLRoots.DialogsConnectionRoot, {items: GQLRoots.DialogRoot[]}, {}>;
    Settings?: ComplexTypedResolver<GQL.Settings, GQLRoots.SettingsRoot, {}, {}>;
    OrganizationIvitedMember?: ComplexTypedResolver<GQL.OrganizationIvitedMember, GQLRoots.OrganizationIvitedMemberRoot, {}, {}>;
    OrganizationJoinedMember?: ComplexTypedResolver<GQL.OrganizationJoinedMember, GQLRoots.OrganizationJoinedMemberRoot, {user: GQLRoots.UserRoot}, {}>;
    OrganizationRequestedMember?: ComplexTypedResolver<GQL.OrganizationRequestedMember, GQLRoots.OrganizationRequestedMemberRoot, {user: GQLRoots.UserRoot}, {}>;
    OnlineEvent?: ComplexTypedResolver<GQL.OnlineEvent, GQLRoots.OnlineEventRoot, {user: GQLRoots.UserRoot}, {}>;
    SuperAccount?: ComplexTypedResolver<GQL.SuperAccount, GQLRoots.SuperAccountRoot, {members: GQLRoots.UserRoot[], features: GQLRoots.FeatureFlagRoot[], createdBy: Nullable<GQLRoots.UserRoot>}, {}>;
    SuperAdmin?: ComplexTypedResolver<GQL.SuperAdmin, GQLRoots.SuperAdminRoot, {user: GQLRoots.UserRoot}, {}>;
    ServiceMessage?: ComplexTypedResolver<GQL.ServiceMessage, GQLRoots.ServiceMessageRoot, {sender: GQLRoots.UserRoot, spans: GQLRoots.MessageSpanRoot[], serviceMetadata: Nullable<GQLRoots.ServiceMetadataRoot>}, {}>;
    ModernMessage?: ComplexTypedResolver<GQL.ModernMessage, GQLRoots.ModernMessageRoot, {sender: GQLRoots.UserRoot, reactions: GQLRoots.ModernMessageReactionRoot[], spans: GQLRoots.MessageSpanRoot[], attachments: GQLRoots.ModernMessageAttachmentRoot[], quotedMessages: GQLRoots.MessageRoot[]}, {}>;
    Image?: ComplexTypedResolver<GQL.Image, GQLRoots.ImageRoot, {metadata: Nullable<GQLRoots.FileMetadataRoot>}, {}>;
    MessageRichAttachment?: ComplexTypedResolver<GQL.MessageRichAttachment, GQLRoots.MessageRichAttachmentRoot, {icon: Nullable<GQLRoots.ImageRoot>, image: Nullable<GQLRoots.ImageRoot>, keyboard: Nullable<GQLRoots.MessageKeyboardRoot>}, {}>;
    MessageAttachmentFile?: ComplexTypedResolver<GQL.MessageAttachmentFile, GQLRoots.MessageAttachmentFileRoot, {fileMetadata: GQLRoots.FileMetadataRoot}, {}>;
    MessageAttachmentPost?: ComplexTypedResolver<GQL.MessageAttachmentPost, GQLRoots.MessageAttachmentPostRoot, {post: GQLRoots.FeedItemRoot}, {}>;
    MessageAttachmentFileInput?: ComplexTypedResolver<GQL.MessageAttachmentFileInput, GQLRoots.MessageAttachmentFileInputRoot, {}, {}>;
    MessageAttachmentPostInput?: ComplexTypedResolver<GQL.MessageAttachmentPostInput, GQLRoots.MessageAttachmentPostInputRoot, {}, {}>;
    MessageKeyboard?: ComplexTypedResolver<GQL.MessageKeyboard, GQLRoots.MessageKeyboardRoot, {buttons: Nullable<GQLRoots.ModernMessageButtonRoot[]>[]}, {}>;
    ModernMessageButton?: ComplexTypedResolver<GQL.ModernMessageButton, GQLRoots.ModernMessageButtonRoot, {}, {}>;
    ModernMessageReaction?: ComplexTypedResolver<GQL.ModernMessageReaction, GQLRoots.ModernMessageReactionRoot, {user: GQLRoots.UserRoot}, {}>;
    MessageSpanUserMention?: ComplexTypedResolver<GQL.MessageSpanUserMention, GQLRoots.MessageSpanUserMentionRoot, {user: GQLRoots.UserRoot}, {}>;
    MessageSpanRoomMention?: ComplexTypedResolver<GQL.MessageSpanRoomMention, GQLRoots.MessageSpanRoomMentionRoot, {room: GQLRoots.RoomRoot}, {}>;
    MessageSpanLink?: ComplexTypedResolver<GQL.MessageSpanLink, GQLRoots.MessageSpanLinkRoot, {}, {}>;
    PageInfo?: ComplexTypedResolver<GQL.PageInfo, GQLRoots.PageInfoRoot, {}, {}>;
    Task?: ComplexTypedResolver<GQL.Task, GQLRoots.TaskRoot, {}, {}>;
    ImageCrop?: ComplexTypedResolver<GQL.ImageCrop, GQLRoots.ImageCropRoot, {}, {}>;
    ImageRef?: ComplexTypedResolver<GQL.ImageRef, GQLRoots.ImageRefRoot, {crop: Nullable<GQLRoots.ImageCropRoot>}, {}>;
    Range?: ComplexTypedResolver<GQL.Range, GQLRoots.RangeRoot, {}, {}>;
    AppProfile?: ComplexTypedResolver<GQL.AppProfile, GQLRoots.AppProfileRoot, {photoRef: Nullable<GQLRoots.ImageRefRoot>, token: GQLRoots.AppTokenRoot}, {}>;
    AppToken?: ComplexTypedResolver<GQL.AppToken, GQLRoots.AppTokenRoot, {}, {}>;
    AppChat?: ComplexTypedResolver<GQL.AppChat, GQLRoots.AppChatRoot, {chat: GQLRoots.RoomRoot}, {}>;
    ChannelConversation?: ComplexTypedResolver<GQL.ChannelConversation, GQLRoots.ChannelConversationRoot, {members: GQLRoots.UserRoot[], topMessage: Nullable<GQLRoots.ConversationMessageRoot>, settings: GQLRoots.ConversationSettingsRoot, organization: Nullable<GQLRoots.OrganizationRoot>, photoRef: Nullable<GQLRoots.ImageRefRoot>, socialImageRef: Nullable<GQLRoots.ImageRefRoot>, pinnedMessage: Nullable<GQLRoots.ConversationMessageRoot>}, {}>;
    ChannelMemberOrg?: ComplexTypedResolver<GQL.ChannelMemberOrg, GQLRoots.ChannelMemberOrgRoot, {organization: GQLRoots.OrganizationRoot}, {}>;
    ChannelMember?: ComplexTypedResolver<GQL.ChannelMember, GQLRoots.ChannelMemberRoot, {user: GQLRoots.UserRoot}, {}>;
    ChannelInvite?: ComplexTypedResolver<GQL.ChannelInvite, GQLRoots.ChannelInviteRoot, {channel: GQLRoots.ChannelConversationRoot, invitedByUser: GQLRoots.UserRoot}, {}>;
    ChannelOrgInvite?: ComplexTypedResolver<GQL.ChannelOrgInvite, GQLRoots.ChannelOrgInviteRoot, {channel: GQLRoots.ChannelConversationRoot, invitedByOrg: GQLRoots.OrganizationRoot, invitedByUser: GQLRoots.UserRoot}, {}>;
    ChannelJoinRequestOrg?: ComplexTypedResolver<GQL.ChannelJoinRequestOrg, GQLRoots.ChannelJoinRequestOrgRoot, {organization: GQLRoots.OrganizationRoot, user: GQLRoots.UserRoot}, {}>;
    ChannelConversationConnectionEdge?: ComplexTypedResolver<GQL.ChannelConversationConnectionEdge, GQLRoots.ChannelConversationConnectionEdgeRoot, {node: GQLRoots.ChannelConversationRoot}, {}>;
    ChannelConversationConnection?: ComplexTypedResolver<GQL.ChannelConversationConnection, GQLRoots.ChannelConversationConnectionRoot, {edges: GQLRoots.ChannelConversationConnectionEdgeRoot[], pageInfo: GQLRoots.PageInfoRoot}, {}>;
    ChatUpdateSingle?: ComplexTypedResolver<GQL.ChatUpdateSingle, GQLRoots.ChatUpdateSingleRoot, {update: GQLRoots.ChatUpdateRoot}, {}>;
    ChatUpdateBatch?: ComplexTypedResolver<GQL.ChatUpdateBatch, GQLRoots.ChatUpdateBatchRoot, {updates: GQLRoots.ChatUpdateRoot[]}, {}>;
    ChatUpdateContainer?: UnionTypeResolver<GQLRoots.ChatUpdateContainerRoot, 'ChatUpdateSingle' | 'ChatUpdateBatch'>;
    ChatUpdate?: UnionTypeResolver<GQLRoots.ChatUpdateRoot, 'ChatMessageReceived' | 'ChatMessageUpdated' | 'ChatMessageDeleted'>;
    ChatMessageReceived?: ComplexTypedResolver<GQL.ChatMessageReceived, GQLRoots.ChatMessageReceivedRoot, {message: GQLRoots.BaseMessageRoot}, {}>;
    ChatMessageUpdated?: ComplexTypedResolver<GQL.ChatMessageUpdated, GQLRoots.ChatMessageUpdatedRoot, {message: GQLRoots.BaseMessageRoot}, {}>;
    ChatMessageDeleted?: ComplexTypedResolver<GQL.ChatMessageDeleted, GQLRoots.ChatMessageDeletedRoot, {message: GQLRoots.BaseMessageRoot}, {}>;
    ChatUpdateState?: ComplexTypedResolver<GQL.ChatUpdateState, GQLRoots.ChatUpdateStateRoot, {}, {}>;
    ConversationUpdateSingle?: ComplexTypedResolver<GQL.ConversationUpdateSingle, GQLRoots.ConversationUpdateSingleRoot, {update: GQLRoots.ConversationUpdateRoot}, {}>;
    ConversationUpdateBatch?: ComplexTypedResolver<GQL.ConversationUpdateBatch, GQLRoots.ConversationUpdateBatchRoot, {updates: GQLRoots.ConversationUpdateRoot[]}, {}>;
    ConversationUpdateContainer?: UnionTypeResolver<GQLRoots.ConversationUpdateContainerRoot, 'ConversationUpdateSingle' | 'ConversationUpdateBatch'>;
    ConversationUpdate?: UnionTypeResolver<GQLRoots.ConversationUpdateRoot, 'ConversationMessageReceived' | 'ConversationMessageUpdated' | 'ConversationMessageDeleted'>;
    ConversationMessageReceived?: ComplexTypedResolver<GQL.ConversationMessageReceived, GQLRoots.ConversationMessageReceivedRoot, {message: GQLRoots.ConversationMessageRoot, betaMessage: GQLRoots.RoomMessageRoot}, {}>;
    ConversationMessageUpdated?: ComplexTypedResolver<GQL.ConversationMessageUpdated, GQLRoots.ConversationMessageUpdatedRoot, {message: GQLRoots.ConversationMessageRoot, betaMessage: GQLRoots.RoomMessageRoot}, {}>;
    ConversationMessageDeleted?: ComplexTypedResolver<GQL.ConversationMessageDeleted, GQLRoots.ConversationMessageDeletedRoot, {message: GQLRoots.ConversationMessageRoot, betaMessage: GQLRoots.RoomMessageRoot}, {}>;
    ConversationUpdateState?: ComplexTypedResolver<GQL.ConversationUpdateState, GQLRoots.ConversationUpdateStateRoot, {}, {}>;
    DialogUpdateSingle?: ComplexTypedResolver<GQL.DialogUpdateSingle, GQLRoots.DialogUpdateSingleRoot, {update: GQLRoots.DialogUpdateRoot}, {}>;
    DialogUpdateBatch?: ComplexTypedResolver<GQL.DialogUpdateBatch, GQLRoots.DialogUpdateBatchRoot, {updates: GQLRoots.DialogUpdateRoot[]}, {}>;
    DialogUpdateContainer?: UnionTypeResolver<GQLRoots.DialogUpdateContainerRoot, 'DialogUpdateSingle' | 'DialogUpdateBatch'>;
    DialogUpdate?: UnionTypeResolver<GQLRoots.DialogUpdateRoot, 'DialogMessageReceived' | 'DialogMessageUpdated' | 'DialogMessageDeleted' | 'DialogMessageRead' | 'DialogTitleUpdated' | 'DialogDeleted' | 'DialogPhotoUpdated' | 'DialogMuteChanged' | 'DialogMentionedChanged'>;
    DialogMessageReceived?: ComplexTypedResolver<GQL.DialogMessageReceived, GQLRoots.DialogMessageReceivedRoot, {message: GQLRoots.ConversationMessageRoot, betaMessage: GQLRoots.RoomMessageRoot}, {}>;
    DialogMessageUpdated?: ComplexTypedResolver<GQL.DialogMessageUpdated, GQLRoots.DialogMessageUpdatedRoot, {message: GQLRoots.ConversationMessageRoot, betaMessage: GQLRoots.RoomMessageRoot}, {}>;
    DialogMessageDeleted?: ComplexTypedResolver<GQL.DialogMessageDeleted, GQLRoots.DialogMessageDeletedRoot, {message: GQLRoots.ConversationMessageRoot, betaMessage: GQLRoots.RoomMessageRoot}, {}>;
    DialogMessageRead?: ComplexTypedResolver<GQL.DialogMessageRead, GQLRoots.DialogMessageReadRoot, {}, {}>;
    DialogTitleUpdated?: ComplexTypedResolver<GQL.DialogTitleUpdated, GQLRoots.DialogTitleUpdatedRoot, {}, {}>;
    DialogPhotoUpdated?: ComplexTypedResolver<GQL.DialogPhotoUpdated, GQLRoots.DialogPhotoUpdatedRoot, {}, {}>;
    DialogDeleted?: ComplexTypedResolver<GQL.DialogDeleted, GQLRoots.DialogDeletedRoot, {}, {}>;
    DialogMuteChanged?: ComplexTypedResolver<GQL.DialogMuteChanged, GQLRoots.DialogMuteChangedRoot, {}, {}>;
    DialogMentionedChanged?: ComplexTypedResolver<GQL.DialogMentionedChanged, GQLRoots.DialogMentionedChangedRoot, {}, {}>;
    DialogUpdateState?: ComplexTypedResolver<GQL.DialogUpdateState, GQLRoots.DialogUpdateStateRoot, {}, {}>;
    FeatureFlag?: ComplexTypedResolver<GQL.FeatureFlag, GQLRoots.FeatureFlagRoot, {}, {}>;
    FeedItem?: ComplexTypedResolver<GQL.FeedItem, GQLRoots.FeedItemRoot, {alphaBy: GQLRoots.UserRoot}, {}>;
    ICEServer?: ComplexTypedResolver<GQL.ICEServer, GQLRoots.ICEServerRoot, {}, {}>;
    Conference?: ComplexTypedResolver<GQL.Conference, GQLRoots.ConferenceRoot, {peers: GQLRoots.ConferencePeerRoot[], iceServers: GQLRoots.ICEServerRoot[]}, {}>;
    ConferencePeer?: ComplexTypedResolver<GQL.ConferencePeer, GQLRoots.ConferencePeerRoot, {user: GQLRoots.UserRoot, connection: Nullable<GQLRoots.ConferencePeerConnectionRoot>}, {}>;
    MediaSession?: ComplexTypedResolver<GQL.MediaSession, GQLRoots.MediaSessionRoot, {conference: GQLRoots.ConferenceRoot, streams: GQLRoots.MediaStreamRoot[]}, {}>;
    MediaStream?: ComplexTypedResolver<GQL.MediaStream, GQLRoots.MediaStreamRoot, {}, {}>;
    ConferencePeerConnection?: ComplexTypedResolver<GQL.ConferencePeerConnection, GQLRoots.ConferencePeerConnectionRoot, {}, {}>;
    ConferenceJoinResult?: ComplexTypedResolver<GQL.ConferenceJoinResult, GQLRoots.ConferenceJoinResultRoot, {conference: GQLRoots.ConferenceRoot}, {}>;
    MessageReaction?: ComplexTypedResolver<GQL.MessageReaction, GQLRoots.MessageReactionRoot, {user: GQLRoots.UserRoot}, {}>;
    MessageAttachment?: ComplexTypedResolver<GQL.MessageAttachment, GQLRoots.MessageAttachmentRoot, {fileMetadata: Nullable<GQLRoots.FileMetadataRoot>}, {}>;
    MessageButton?: ComplexTypedResolver<GQL.MessageButton, GQLRoots.MessageButtonRoot, {}, {}>;
    Mutation?: ComplexTypedResolver<GQL.Mutation, GQLRoots.MutationRoot, {alphaSendMessage: GQLRoots.ConversationEventMessageRoot, alphaReadChat: GQLRoots.ChatReadResultRoot, alphaEditMessage: GQLRoots.ConversationEventEditMessageRoot, alphaSendIntro: GQLRoots.ConversationEventMessageRoot, alphaEditIntro: GQLRoots.ConversationEventMessageRoot, alphaDeleteMessageUrlAugmentation: GQLRoots.ConversationEventMessageRoot, alphaDeleteMessage: GQLRoots.ConversationEventDeleteRoot, alphaChatCreateGroup: GQLRoots.ConversationRoot, alphaChatUpdateGroup: GQLRoots.ConversationUpdateResponseRoot, alphaChatChangeGroupTitle: GQLRoots.GroupChatUpdateResponseRoot, alphaChatInviteToGroup: GQLRoots.GroupChatUpdateResponseRoot, alphaChatKickFromGroup: GQLRoots.GroupChatUpdateResponseRoot, alphaChatChangeRoleInGroup: GQLRoots.GroupChatUpdateResponseRoot, alphaChatCopyGroup: GQLRoots.GroupChatUpdateResponseRoot, alphaChatLeave: GQLRoots.ConversationUpdateResponseRoot, alphaUpdateConversationSettings: GQLRoots.ConversationSettingsRoot, profileCreate: GQLRoots.ProfileRoot, profileUpdate: GQLRoots.ProfileRoot, createProfile: GQLRoots.ProfileRoot, updateProfile: GQLRoots.ProfileRoot, alphaCreateUserProfileAndOrganization: GQLRoots.AlphaSignupDataRoot, alphaCreateInvite: GQLRoots.InviteRoot, settingsUpdate: GQLRoots.SettingsRoot, updateSettings: GQLRoots.SettingsRoot, betaOrganizationMemberRequestApprove: GQLRoots.OrganizationRoot, betaOrganizationMemberRemove: GQLRoots.OrganizationRoot, betaOrganizationMemberAdd: GQLRoots.OrganizationRoot, alphaOrganizationRefreshInviteLink: GQLRoots.InviteRoot, alphaOrganizationCreatePublicInvite: GQLRoots.InviteRoot, superAccountAdd: GQLRoots.SuperAccountRoot, superAccountRename: GQLRoots.SuperAccountRoot, superAccountActivate: GQLRoots.SuperAccountRoot, superAccountSuspend: GQLRoots.SuperAccountRoot, superAccountPend: GQLRoots.SuperAccountRoot, superAccountMemberAdd: GQLRoots.SuperAccountRoot, superAccountMemberRemove: GQLRoots.SuperAccountRoot, alphaAlterPublished: GQLRoots.OrganizationRoot, createApp: GQLRoots.AppProfileRoot, refreshAppToken: GQLRoots.AppProfileRoot, updateAppProfile: GQLRoots.AppProfileRoot, addAppToChat: GQLRoots.AppChatRoot, alphaChannelCreate: GQLRoots.ConversationRoot, alphaChannelSetFeatured: GQLRoots.ConversationRoot, alphaChannelHideFromSearch: GQLRoots.ConversationRoot, alphaChannelInvite: GQLRoots.ConversationUpdateResponseRoot, alphaChannelJoin: GQLRoots.ConversationUpdateResponseRoot, featureFlagAdd: GQLRoots.FeatureFlagRoot, superAccountFeatureAdd: GQLRoots.SuperAccountRoot, superAccountFeatureRemove: GQLRoots.SuperAccountRoot, alphaCreateFeedPost: GQLRoots.FeedItemRoot, conferenceJoin: GQLRoots.ConferenceJoinResultRoot, conferenceKeepAlive: GQLRoots.ConferenceRoot, conferenceLeave: GQLRoots.ConferenceRoot, peerConnectionOffer: GQLRoots.ConferenceRoot, peerConnectionAnswer: GQLRoots.ConferenceRoot, peerConnectionCandidate: GQLRoots.ConferenceRoot, alphaSendPostMessage: GQLRoots.ConversationEventMessageRoot, alphaEditPostMessage: GQLRoots.ConversationEventMessageRoot, createOrganization: GQLRoots.OrganizationProfileRoot, updateOrganizationProfile: GQLRoots.OrganizationProfileRoot, betaRoomCreate: GQLRoots.SharedRoomRoot, betaRoomUpdate: GQLRoots.RoomRoot, betaRoomMove: GQLRoots.RoomRoot, betaRoomInvite: GQLRoots.RoomRoot, betaRoomKick: GQLRoots.RoomRoot, betaRoomLeave: GQLRoots.RoomRoot, betaRoomChangeRole: GQLRoots.RoomRoot, betaRoomJoin: GQLRoots.RoomRoot, betaRoomDeclineJoinRequest: GQLRoots.RoomRoot, betaRoomInviteLinkJoin: GQLRoots.RoomRoot, betaRoomUpdateUserNotificationSettings: GQLRoots.RoomUserNotificaionSettingsRoot, betaRoomAlterFeatured: GQLRoots.RoomSuperRoot, betaRoomAlterListed: GQLRoots.RoomSuperRoot}, {alphaSendMessage: GQL.MutationAlphaSendMessageArgs, alphaReadChat: GQL.MutationAlphaReadChatArgs, alphaEditMessage: GQL.MutationAlphaEditMessageArgs, alphaSendIntro: GQL.MutationAlphaSendIntroArgs, alphaEditIntro: GQL.MutationAlphaEditIntroArgs, alphaDeleteMessageUrlAugmentation: GQL.MutationAlphaDeleteMessageUrlAugmentationArgs, alphaDeleteMessage: GQL.MutationAlphaDeleteMessageArgs, alphaChatSetReaction: GQL.MutationAlphaChatSetReactionArgs, alphaChatUnsetReaction: GQL.MutationAlphaChatUnsetReactionArgs, alphaGlobalRead: GQL.MutationAlphaGlobalReadArgs, alphaBlockUser: GQL.MutationAlphaBlockUserArgs, alphaUnblockUser: GQL.MutationAlphaUnblockUserArgs, alphaChatCreateGroup: GQL.MutationAlphaChatCreateGroupArgs, alphaChatUpdateGroup: GQL.MutationAlphaChatUpdateGroupArgs, alphaChatChangeGroupTitle: GQL.MutationAlphaChatChangeGroupTitleArgs, alphaChatInviteToGroup: GQL.MutationAlphaChatInviteToGroupArgs, alphaChatKickFromGroup: GQL.MutationAlphaChatKickFromGroupArgs, alphaChatChangeRoleInGroup: GQL.MutationAlphaChatChangeRoleInGroupArgs, alphaChatCopyGroup: GQL.MutationAlphaChatCopyGroupArgs, alphaChatLeave: GQL.MutationAlphaChatLeaveArgs, alphaUpdateConversationSettings: GQL.MutationAlphaUpdateConversationSettingsArgs, profileCreate: GQL.MutationProfileCreateArgs, profileUpdate: GQL.MutationProfileUpdateArgs, createProfile: GQL.MutationCreateProfileArgs, updateProfile: GQL.MutationUpdateProfileArgs, alphaCreateUserProfileAndOrganization: GQL.MutationAlphaCreateUserProfileAndOrganizationArgs, alphaDeleteInvite: GQL.MutationAlphaDeleteInviteArgs, alphaJoinInvite: GQL.MutationAlphaJoinInviteArgs, joinAppInvite: GQL.MutationJoinAppInviteArgs, debugSendEmail: GQL.MutationDebugSendEmailArgs, debugCreateTestUser: GQL.MutationDebugCreateTestUserArgs, settingsUpdate: GQL.MutationSettingsUpdateArgs, updateSettings: GQL.MutationUpdateSettingsArgs, betaOrganizationMemberRequestApprove: GQL.MutationBetaOrganizationMemberRequestApproveArgs, betaOrganizationMemberRemove: GQL.MutationBetaOrganizationMemberRemoveArgs, betaOrganizationMemberAdd: GQL.MutationBetaOrganizationMemberAddArgs, alphaOrganizationChangeMemberRole: GQL.MutationAlphaOrganizationChangeMemberRoleArgs, alphaOrganizationInviteMembers: GQL.MutationAlphaOrganizationInviteMembersArgs, alphaOrganizationRefreshInviteLink: GQL.MutationAlphaOrganizationRefreshInviteLinkArgs, alphaOrganizationCreatePublicInvite: GQL.MutationAlphaOrganizationCreatePublicInviteArgs, alphaOrganizationRemoveMember: GQL.MutationAlphaOrganizationRemoveMemberArgs, alphaOrganizationDeletePublicInvite: GQL.MutationAlphaOrganizationDeletePublicInviteArgs, presenceReportOnline: GQL.MutationPresenceReportOnlineArgs, presenceReportOffline: GQL.MutationPresenceReportOfflineArgs, alphaReportActive: GQL.MutationAlphaReportActiveArgs, superAccountAdd: GQL.MutationSuperAccountAddArgs, superAccountRename: GQL.MutationSuperAccountRenameArgs, superAccountActivate: GQL.MutationSuperAccountActivateArgs, superAccountSuspend: GQL.MutationSuperAccountSuspendArgs, superAccountPend: GQL.MutationSuperAccountPendArgs, superAccountMemberAdd: GQL.MutationSuperAccountMemberAddArgs, superAccountMemberRemove: GQL.MutationSuperAccountMemberRemoveArgs, superAccountChannelMemberAdd: GQL.MutationSuperAccountChannelMemberAddArgs, superAdminAdd: GQL.MutationSuperAdminAddArgs, superAdminRemove: GQL.MutationSuperAdminRemoveArgs, alphaAlterPublished: GQL.MutationAlphaAlterPublishedArgs, betaFixCounter: GQL.MutationBetaFixCounterArgs, conversationDraftUpdate: GQL.MutationConversationDraftUpdateArgs, alphaSaveDraftMessage: GQL.MutationAlphaSaveDraftMessageArgs, track: GQL.MutationTrackArgs, createApp: GQL.MutationCreateAppArgs, refreshAppToken: GQL.MutationRefreshAppTokenArgs, updateAppProfile: GQL.MutationUpdateAppProfileArgs, deleteApp: GQL.MutationDeleteAppArgs, addAppToChat: GQL.MutationAddAppToChatArgs, alphaChannelCreate: GQL.MutationAlphaChannelCreateArgs, alphaChannelSetFeatured: GQL.MutationAlphaChannelSetFeaturedArgs, alphaChannelHideFromSearch: GQL.MutationAlphaChannelHideFromSearchArgs, alphaChannelInvite: GQL.MutationAlphaChannelInviteArgs, alphaChannelJoin: GQL.MutationAlphaChannelJoinArgs, alphaChannelRevokeInvite: GQL.MutationAlphaChannelRevokeInviteArgs, alphaChannelCancelRequest: GQL.MutationAlphaChannelCancelRequestArgs, alphaChannelInviteMembers: GQL.MutationAlphaChannelInviteMembersArgs, alphaChannelJoinInvite: GQL.MutationAlphaChannelJoinInviteArgs, alphaChannelRenewInviteLink: GQL.MutationAlphaChannelRenewInviteLinkArgs, featureFlagAdd: GQL.MutationFeatureFlagAddArgs, superAccountFeatureAdd: GQL.MutationSuperAccountFeatureAddArgs, superAccountFeatureRemove: GQL.MutationSuperAccountFeatureRemoveArgs, alphaCreateFeedPost: GQL.MutationAlphaCreateFeedPostArgs, conferenceJoin: GQL.MutationConferenceJoinArgs, conferenceKeepAlive: GQL.MutationConferenceKeepAliveArgs, conferenceLeave: GQL.MutationConferenceLeaveArgs, peerConnectionOffer: GQL.MutationPeerConnectionOfferArgs, peerConnectionAnswer: GQL.MutationPeerConnectionAnswerArgs, peerConnectionCandidate: GQL.MutationPeerConnectionCandidateArgs, roomRead: GQL.MutationRoomReadArgs, betaMessageSend: GQL.MutationBetaMessageSendArgs, betaMessageEdit: GQL.MutationBetaMessageEditArgs, betaMessageDeleteAugmentation: GQL.MutationBetaMessageDeleteAugmentationArgs, betaMessageDelete: GQL.MutationBetaMessageDeleteArgs, betaReactionSet: GQL.MutationBetaReactionSetArgs, betaReactionRemove: GQL.MutationBetaReactionRemoveArgs, betaIntroSend: GQL.MutationBetaIntroSendArgs, betaIntroEdit: GQL.MutationBetaIntroEditArgs, alphaSendPostMessage: GQL.MutationAlphaSendPostMessageArgs, alphaEditPostMessage: GQL.MutationAlphaEditPostMessageArgs, alphaRespondPostMessage: GQL.MutationAlphaRespondPostMessageArgs, createOrganization: GQL.MutationCreateOrganizationArgs, updateOrganizationProfile: GQL.MutationUpdateOrganizationProfileArgs, deleteOrganization: GQL.MutationDeleteOrganizationArgs, registerWebPush: GQL.MutationRegisterWebPushArgs, registerPush: GQL.MutationRegisterPushArgs, typingSend: GQL.MutationTypingSendArgs, typingCancel: GQL.MutationTypingCancelArgs, alphaSetTyping: GQL.MutationAlphaSetTypingArgs, betaRoomCreate: GQL.MutationBetaRoomCreateArgs, betaRoomUpdate: GQL.MutationBetaRoomUpdateArgs, betaRoomMove: GQL.MutationBetaRoomMoveArgs, betaRoomInvite: GQL.MutationBetaRoomInviteArgs, betaRoomKick: GQL.MutationBetaRoomKickArgs, betaRoomLeave: GQL.MutationBetaRoomLeaveArgs, betaRoomChangeRole: GQL.MutationBetaRoomChangeRoleArgs, betaRoomJoin: GQL.MutationBetaRoomJoinArgs, betaRoomDeclineJoinRequest: GQL.MutationBetaRoomDeclineJoinRequestArgs, betaRoomInviteLinkSendEmail: GQL.MutationBetaRoomInviteLinkSendEmailArgs, betaRoomInviteLinkJoin: GQL.MutationBetaRoomInviteLinkJoinArgs, betaRoomInviteLinkRenew: GQL.MutationBetaRoomInviteLinkRenewArgs, betaRoomUpdateUserNotificationSettings: GQL.MutationBetaRoomUpdateUserNotificationSettingsArgs, betaRoomAlterFeatured: GQL.MutationBetaRoomAlterFeaturedArgs, betaRoomAlterListed: GQL.MutationBetaRoomAlterListedArgs, alphaSetUserShortName: GQL.MutationAlphaSetUserShortNameArgs, alphaSetOrgShortName: GQL.MutationAlphaSetOrgShortNameArgs}>;
    OrganizationContact?: ComplexTypedResolver<GQL.OrganizationContact, GQLRoots.OrganizationContactRoot, {photoRef: Nullable<GQLRoots.ImageRefRoot>}, {}>;
    Organization?: ComplexTypedResolver<GQL.Organization, GQLRoots.OrganizationRoot, {alphaOrganizationMembers: GQLRoots.OrganizationJoinedMemberRoot[], alphaOrganizationMemberRequests: GQLRoots.OrganizationRequestedMemberRoot[], alphaCreatedChannels: Nullable<GQLRoots.ChannelConversationRoot>[], betaPublicRooms: GQLRoots.SharedRoomRoot[]}, {}>;
    OrganizationProfile?: ComplexTypedResolver<GQL.OrganizationProfile, GQLRoots.OrganizationProfileRoot, {photoRef: Nullable<GQLRoots.ImageRefRoot>, contacts: GQLRoots.OrganizationContactRoot[], alphaPotentialSites: Nullable<GQLRoots.RangeRoot[]>, alphaSiteSizes: Nullable<GQLRoots.RangeRoot[]>, alphaJoinedChannels: Nullable<GQLRoots.ChannelConversationRoot>[], alphaCreatedChannels: Nullable<GQLRoots.ChannelConversationRoot>[]}, {}>;
    OrganizationsEdge?: ComplexTypedResolver<GQL.OrganizationsEdge, GQLRoots.OrganizationsEdgeRoot, {node: GQLRoots.OrganizationRoot}, {}>;
    OrganizationsConnection?: ComplexTypedResolver<GQL.OrganizationsConnection, GQLRoots.OrganizationsConnectionRoot, {edges: GQLRoots.OrganizationsEdgeRoot[], pageInfo: GQLRoots.PageInfoRoot}, {}>;
    Permissions?: ComplexTypedResolver<GQL.Permissions, GQLRoots.PermissionsRoot, {}, {}>;
    ProfilePrefill?: ComplexTypedResolver<GQL.ProfilePrefill, GQLRoots.ProfilePrefillRoot, {}, {}>;
    PushSettings?: ComplexTypedResolver<GQL.PushSettings, GQLRoots.PushSettingsRoot, {}, {}>;
    Query?: ComplexTypedResolver<GQL.Query, GQLRoots.QueryRoot, {alphaNotificationCounter: GQLRoots.NotificationCounterRoot, alphaChat: GQLRoots.ConversationRoot, alphaLoadMessages: GQLRoots.ConversationStateRoot, alphaChatsSearchForCompose: GQLRoots.ComposeSearchResultRoot[], alphaChatSearch: Nullable<GQLRoots.ConversationRoot>, alphaGroupConversationMembers: GQLRoots.GroupConversationMemberRoot[], myProfile: Nullable<GQLRoots.ProfileRoot>, alphaInvites: Nullable<GQLRoots.InviteRoot[]>, alphaInviteInfo: Nullable<GQLRoots.InviteInfoRoot>, appInviteInfo: Nullable<GQLRoots.AppInviteRoot>, alphaAppInviteInfo: Nullable<GQLRoots.AppInviteInfoRoot>, alphaInvitesHistory: Nullable<GQLRoots.InviteHistotyInfoRoot[]>, debugParseID: GQLRoots.DebugIDRoot, alphaChats: GQLRoots.ConversationConnectionRoot, dialogs: GQLRoots.DialogsConnectionRoot, settings: GQLRoots.SettingsRoot, alphaOrganizationMembers: GQLRoots.OrganizationMemberRoot[], alphaOrganizationInviteLink: Nullable<GQLRoots.InviteRoot>, alphaOrganizationPublicInvite: Nullable<GQLRoots.InviteRoot>, superAccounts: GQLRoots.SuperAccountRoot[], superAccount: GQLRoots.SuperAccountRoot, superAdmins: GQLRoots.SuperAdminRoot[], alphaChatTextSearch: GQLRoots.ConversationRoot[], betaDialogTextSearch: GQLRoots.DialogRoot[], messages: GQLRoots.BaseMessageRoot[], myApps: GQLRoots.AppProfileRoot[], alphaChannelsList: GQLRoots.ConversationConnectionRoot, alphaChannelMembers: GQLRoots.ChannelMemberRoot[], alphaChannelsFeatured: GQLRoots.ChannelConversationRoot[], alphaChannels: GQLRoots.ChannelConversationConnectionRoot, alphaChannelInviteInfo: Nullable<GQLRoots.ChannelInviteRoot>, chatState: GQLRoots.ChatUpdateStateRoot, conversationState: GQLRoots.ConversationUpdateStateRoot, dialogsState: GQLRoots.DialogUpdateStateRoot, featureFlags: GQLRoots.FeatureFlagRoot[], alphaHomeFeed: GQLRoots.FeedItemRoot[], conference: GQLRoots.ConferenceRoot, myOrganization: Nullable<GQLRoots.OrganizationRoot>, myOrganizations: GQLRoots.OrganizationRoot[], organization: GQLRoots.OrganizationRoot, myOrganizationProfile: GQLRoots.OrganizationProfileRoot, organizationProfile: GQLRoots.OrganizationProfileRoot, alphaOrganizations: GQLRoots.OrganizationsConnectionRoot, alphaOrganizationByPrefix: Nullable<GQLRoots.OrganizationRoot>, alphaComunityPrefixSearch: GQLRoots.OrganizationsConnectionRoot, myPermissions: GQLRoots.PermissionsRoot, users: GQLRoots.UserRoot[], myProfilePrefill: Nullable<GQLRoots.ProfilePrefillRoot>, pushSettings: GQLRoots.PushSettingsRoot, sessionState: GQLRoots.SessionStateRoot, me: Nullable<GQLRoots.UserRoot>, user: GQLRoots.UserRoot, userSearch: GQLRoots.UserConnectionRoot, alphaProfiles: GQLRoots.UserConnectionRoot, alphaGlobalSearch: GQLRoots.GlobalSearchEntryRoot[], room: Nullable<GQLRoots.RoomRoot>, roomSuper: Nullable<GQLRoots.RoomSuperRoot>, roomMessages: GQLRoots.RoomMessageRoot[], roomMembers: GQLRoots.RoomMemberRoot[], betaRoomSearch: GQLRoots.RoomConnectionRoot, betaRoomInviteInfo: Nullable<GQLRoots.RoomInviteRoot>, betaAvailableRooms: GQLRoots.SharedRoomRoot[], alphaResolveShortName: Nullable<GQLRoots.ShortNameDestinationRoot>}, {alphaChat: GQL.QueryAlphaChatArgs, alphaLoadMessages: GQL.QueryAlphaLoadMessagesArgs, alphaChatsSearchForCompose: GQL.QueryAlphaChatsSearchForComposeArgs, alphaChatSearch: GQL.QueryAlphaChatSearchArgs, alphaGroupConversationMembers: GQL.QueryAlphaGroupConversationMembersArgs, alphaInviteInfo: GQL.QueryAlphaInviteInfoArgs, appInviteInfo: GQL.QueryAppInviteInfoArgs, alphaAppInviteInfo: GQL.QueryAlphaAppInviteInfoArgs, debugParseID: GQL.QueryDebugParseIDArgs, alphaChats: GQL.QueryAlphaChatsArgs, dialogs: GQL.QueryDialogsArgs, alphaOrganizationMembers: GQL.QueryAlphaOrganizationMembersArgs, alphaOrganizationInviteLink: GQL.QueryAlphaOrganizationInviteLinkArgs, alphaOrganizationPublicInvite: GQL.QueryAlphaOrganizationPublicInviteArgs, superAccount: GQL.QuerySuperAccountArgs, alphaChatTextSearch: GQL.QueryAlphaChatTextSearchArgs, betaDialogTextSearch: GQL.QueryBetaDialogTextSearchArgs, conversationDraft: GQL.QueryConversationDraftArgs, alphaDraftMessage: GQL.QueryAlphaDraftMessageArgs, messages: GQL.QueryMessagesArgs, alphaChannelsList: GQL.QueryAlphaChannelsListArgs, alphaChannelMembers: GQL.QueryAlphaChannelMembersArgs, alphaChannels: GQL.QueryAlphaChannelsArgs, alphaChannelInviteInfo: GQL.QueryAlphaChannelInviteInfoArgs, alphaChannelInviteLink: GQL.QueryAlphaChannelInviteLinkArgs, chatState: GQL.QueryChatStateArgs, conversationState: GQL.QueryConversationStateArgs, conference: GQL.QueryConferenceArgs, organization: GQL.QueryOrganizationArgs, organizationProfile: GQL.QueryOrganizationProfileArgs, alphaOrganizations: GQL.QueryAlphaOrganizationsArgs, alphaOrganizationByPrefix: GQL.QueryAlphaOrganizationByPrefixArgs, alphaComunityPrefixSearch: GQL.QueryAlphaComunityPrefixSearchArgs, users: GQL.QueryUsersArgs, user: GQL.QueryUserArgs, userSearch: GQL.QueryUserSearchArgs, alphaProfiles: GQL.QueryAlphaProfilesArgs, alphaGlobalSearch: GQL.QueryAlphaGlobalSearchArgs, room: GQL.QueryRoomArgs, roomSuper: GQL.QueryRoomSuperArgs, roomMessages: GQL.QueryRoomMessagesArgs, roomMembers: GQL.QueryRoomMembersArgs, betaRoomSearch: GQL.QueryBetaRoomSearchArgs, betaRoomInviteInfo: GQL.QueryBetaRoomInviteInfoArgs, betaRoomInviteLink: GQL.QueryBetaRoomInviteLinkArgs, alphaResolveShortName: GQL.QueryAlphaResolveShortNameArgs}>;
    SessionState?: ComplexTypedResolver<GQL.SessionState, GQLRoots.SessionStateRoot, {}, {}>;
    Subscription?: ComplexTypedSubscriptionResolver<GQL.Subscription, GQLRoots.SubscriptionRoot, {settingsWatch: GQLRoots.SettingsRoot, watchSettings: GQLRoots.SettingsRoot, alphaSubscribeChatOnline: GQLRoots.OnlineEventRoot, alphaSubscribeOnline: GQLRoots.OnlineEventRoot, chatUpdates: GQLRoots.ChatUpdateContainerRoot, conversationUpdates: GQLRoots.ConversationUpdateContainerRoot, dialogsUpdates: GQLRoots.DialogUpdateContainerRoot, alphaConferenceWatch: GQLRoots.ConferenceRoot, typings: GQLRoots.TypingEventRoot, conversationTypings: GQLRoots.TypingEventRoot, alphaSubscribeTypings: GQLRoots.TypingEventRoot, alphaSubscribeChatTypings: GQLRoots.TypingEventRoot}, {alphaSubscribeChatOnline: GQL.SubscriptionAlphaSubscribeChatOnlineArgs, alphaSubscribeOnline: GQL.SubscriptionAlphaSubscribeOnlineArgs, chatUpdates: GQL.SubscriptionChatUpdatesArgs, conversationUpdates: GQL.SubscriptionConversationUpdatesArgs, dialogsUpdates: GQL.SubscriptionDialogsUpdatesArgs, alphaConferenceWatch: GQL.SubscriptionAlphaConferenceWatchArgs, conversationTypings: GQL.SubscriptionConversationTypingsArgs, alphaSubscribeChatTypings: GQL.SubscriptionAlphaSubscribeChatTypingsArgs}>;
    TypingEvent?: ComplexTypedResolver<GQL.TypingEvent, GQLRoots.TypingEventRoot, {conversation: GQLRoots.ConversationRoot, user: GQLRoots.UserRoot}, {}>;
    User?: ComplexTypedResolver<GQL.User, GQLRoots.UserRoot, {channelsJoined: GQLRoots.ChannelConversationRoot[], photoRef: Nullable<GQLRoots.ImageRefRoot>, pictureRef: Nullable<GQLRoots.ImageRefRoot>, organizations: GQLRoots.OrganizationRoot[], primaryOrganization: Nullable<GQLRoots.OrganizationRoot>, alphaPrimaryOrganization: Nullable<GQLRoots.OrganizationRoot>}, {}>;
    UserEdge?: ComplexTypedResolver<GQL.UserEdge, GQLRoots.UserEdgeRoot, {node: GQLRoots.UserRoot}, {}>;
    UserConnection?: ComplexTypedResolver<GQL.UserConnection, GQLRoots.UserConnectionRoot, {edges: GQLRoots.UserEdgeRoot[], pageInfo: GQLRoots.PageInfoRoot}, {}>;
    GlobalSearchEntry?: UnionTypeResolver<GQLRoots.GlobalSearchEntryRoot, 'Organization' | 'User' | 'SharedRoom'>;
    Room?: UnionTypeResolver<GQLRoots.RoomRoot, 'PrivateRoom' | 'SharedRoom'>;
    PrivateRoom?: ComplexTypedResolver<GQL.PrivateRoom, GQLRoots.PrivateRoomRoot, {user: GQLRoots.UserRoot, settings: GQLRoots.RoomUserNotificaionSettingsRoot}, {}>;
    SharedRoom?: ComplexTypedResolver<GQL.SharedRoom, GQLRoots.SharedRoomRoot, {organization: Nullable<GQLRoots.OrganizationRoot>, members: GQLRoots.RoomMemberRoot[], requests: Nullable<GQLRoots.RoomMemberRoot[]>, settings: GQLRoots.RoomUserNotificaionSettingsRoot}, {}>;
    RoomSuper?: ComplexTypedResolver<GQL.RoomSuper, GQLRoots.RoomSuperRoot, {}, {}>;
    UserMention?: ComplexTypedResolver<GQL.UserMention, GQLRoots.UserMentionRoot, {user: GQLRoots.UserRoot}, {}>;
    SharedRoomMention?: ComplexTypedResolver<GQL.SharedRoomMention, GQLRoots.SharedRoomMentionRoot, {sharedRoom: GQLRoots.SharedRoomRoot}, {}>;
    Mention?: UnionTypeResolver<GQLRoots.MentionRoot, 'UserMention' | 'SharedRoomMention'>;
    RoomMessage?: ComplexTypedResolver<GQL.RoomMessage, GQLRoots.RoomMessageRoot, {fileMetadata: Nullable<GQLRoots.FileMetadataRoot>, sender: GQLRoots.UserRoot, serviceMetadata: Nullable<GQLRoots.ServiceMetadataRoot>, urlAugmentation: Nullable<GQLRoots.UrlAugmentationRoot>, reactions: GQLRoots.MessageReactionRoot[], replyMessages: Nullable<GQLRoots.RoomMessageRoot[]>, mentions: Nullable<GQLRoots.UserRoot[]>, alphaAttachments: GQLRoots.MessageAttachmentRoot[], alphaButtons: Nullable<GQLRoots.MessageButtonRoot[]>[], alphaMentions: Nullable<GQLRoots.MentionRoot[]>}, {}>;
    RoomMember?: ComplexTypedResolver<GQL.RoomMember, GQLRoots.RoomMemberRoot, {user: GQLRoots.UserRoot}, {}>;
    RoomUserNotificaionSettings?: ComplexTypedResolver<GQL.RoomUserNotificaionSettings, GQLRoots.RoomUserNotificaionSettingsRoot, {}, {}>;
    RoomConnectionEdge?: ComplexTypedResolver<GQL.RoomConnectionEdge, GQLRoots.RoomConnectionEdgeRoot, {node: GQLRoots.SharedRoomRoot}, {}>;
    RoomConnection?: ComplexTypedResolver<GQL.RoomConnection, GQLRoots.RoomConnectionRoot, {edges: GQLRoots.RoomConnectionEdgeRoot[], pageInfo: GQLRoots.PageInfoRoot}, {}>;
    RoomInvite?: ComplexTypedResolver<GQL.RoomInvite, GQLRoots.RoomInviteRoot, {room: GQLRoots.SharedRoomRoot, invitedByUser: GQLRoots.UserRoot}, {}>;
    ShortNameDestination?: UnionTypeResolver<GQLRoots.ShortNameDestinationRoot, 'User' | 'Organization'>;
}
