// THIS FILE IS AUTOGENERATED! DO NOT TRY TO EDIT!
import { ComplexTypedResolver, ComplexTypedSubscriptionResolver, UnionTypeResolver, Nullable, OptionalNullable } from './SchemaUtils';
import { GQLRoots } from './SchemaRoots';

export const GQL_SPEC_VERSION = '9934267c652f5112743c7e72f4a67189';

export namespace GQL {
    export interface UpdateConversationSettingsInput {
        mobileNotifications: Nullable<NotificationMessages>;
        mute: Nullable<boolean>;
    }
    export interface ConversationSettings {
        id: string;
        mobileNotifications: NotificationMessages;
        mute: boolean;
    }
    export interface Conversation {
        id: string;
        flexibleId: string;
        title: string;
        photos: string[];
        unreadCount: number;
        topMessage: Nullable<ConversationMessage>;
        settings: ConversationSettings;
    }
    export interface AnonymousConversation extends Conversation {
        id: string;
        flexibleId: string;
        title: string;
        photos: string[];
        unreadCount: number;
        topMessage: Nullable<ConversationMessage>;
        settings: ConversationSettings;
    }
    export interface SharedConversation extends Conversation {
        id: string;
        flexibleId: string;
        title: string;
        photos: string[];
        organizations: Organization[];
        unreadCount: number;
        topMessage: Nullable<ConversationMessage>;
        organization: Nullable<Organization>;
        settings: ConversationSettings;
    }
    export interface PrivateConversation extends Conversation {
        id: string;
        flexibleId: string;
        title: string;
        photos: string[];
        user: User;
        unreadCount: number;
        topMessage: Nullable<ConversationMessage>;
        blocked: boolean;
        settings: ConversationSettings;
    }
    export interface GroupConversation extends Conversation {
        id: string;
        flexibleId: string;
        title: string;
        photos: string[];
        members: User[];
        unreadCount: number;
        topMessage: Nullable<ConversationMessage>;
        membersCount: number;
        settings: ConversationSettings;
        photo: Nullable<string>;
        photoRef: Nullable<ImageRef>;
        description: Nullable<string>;
        longDescription: Nullable<string>;
        pinnedMessage: Nullable<ConversationMessage>;
        membersOnline: number;
        myRole: Nullable<string>;
    }
    export interface InviteServiceMetadata {
        users: Nullable<User[]>;
        invitedBy: User;
    }
    export interface KickServiceMetadata {
        user: User;
        kickedBy: User;
    }
    export interface TitleChangeServiceMetadata {
        title: string;
    }
    export interface PhotoChangeServiceMetadata {
        photo: Nullable<string>;
        photoRef: Nullable<ImageRef>;
    }
    export interface PostRespondServiceMetadata {
        post: RoomMessage;
        postRoom: Room;
        responder: User;
        respondType: string;
    }
    export type UrlAugmentationExtra = User | Organization | ChannelConversation;
    export interface UrlAugmentation {
        url: string;
        title: Nullable<string>;
        date: Nullable<string>;
        subtitle: Nullable<string>;
        description: Nullable<string>;
        photo: Nullable<ImageRef>;
        imageInfo: Nullable<FileMetadata>;
        imageURL: Nullable<string>;
        iconRef: Nullable<ImageRef>;
        iconInfo: Nullable<FileMetadata>;
        hostname: Nullable<string>;
        type: Nullable<string>;
        extra: Nullable<UrlAugmentationExtra>;
    }
    export type ServiceMetadata = InviteServiceMetadata | KickServiceMetadata | TitleChangeServiceMetadata | PhotoChangeServiceMetadata | PostRespondServiceMetadata;
    export interface ConversationMessage {
        id: string;
        message: Nullable<string>;
        file: Nullable<string>;
        fileMetadata: Nullable<FileMetadata>;
        filePreview: Nullable<string>;
        sender: User;
        date: Date;
        repeatKey: Nullable<string>;
        isService: boolean;
        serviceMetadata: Nullable<ServiceMetadata>;
        urlAugmentation: Nullable<UrlAugmentation>;
        edited: boolean;
        reactions: MessageReaction[];
        replyMessages: Nullable<ConversationMessage[]>;
        plainText: Nullable<string>;
        mentions: Nullable<User[]>;
        alphaAttachments: MessageAttachment[];
        alphaButtons: Nullable<MessageButton[]>[];
        alphaType: MessageType;
        alphaTitle: Nullable<string>;
        postType: Nullable<string>;
        alphaMentions: Nullable<Mention[]>;
    }
    export interface FileMetadata {
        name: string;
        mimeType: Nullable<string>;
        size: number;
        isImage: boolean;
        imageWidth: Nullable<number>;
        imageHeight: Nullable<number>;
        imageFormat: Nullable<string>;
    }
    export interface StickerPack {
        name: string;
        stickers: Nullable<Sticker[]>;
    }
    export interface Sticker {
        aliases: string[];
        uuid: string;
        meta: FileMetadata;
    }
    export interface ConversationEventSimpleBatch {
        events: ConversationEvent[];
    }
    export interface ConversationEvent {
        seq: number;
    }
    export interface ConversationEventMessage extends ConversationEvent {
        seq: number;
        message: ConversationMessage;
    }
    export interface ConversationEventEditMessage extends ConversationEvent {
        seq: number;
        message: ConversationMessage;
    }
    export interface ConversationEventDelete extends ConversationEvent {
        seq: number;
        messageId: string;
    }
    export interface ConversationEventNewMembers extends ConversationEvent {
        seq: number;
        users: Nullable<User[]>;
        invitedBy: User;
    }
    export interface ConversationEventKick extends ConversationEvent {
        seq: number;
        user: User;
        kickedBy: User;
    }
    export interface ConversationEventTitle extends ConversationEvent {
        seq: number;
        title: string;
    }
    export interface ConversationEventUpdate extends ConversationEvent {
        seq: number;
        chat: Conversation;
    }
    export interface ConversationEventUpdateRole extends ConversationEvent {
        seq: number;
        user: User;
        newRole: string;
    }
    export interface ConversationState {
        seq: number;
        messages: ConversationMessage[];
    }
    export interface ConversationConnection {
        conversations: Conversation[];
        counter: NotificationCounter;
        seq: number;
        next: Nullable<string>;
    }
    export interface NotificationCounter {
        id: string;
        unreadCount: number;
    }
    export interface ChatReadResult {
        conversation: Conversation;
        counter: NotificationCounter;
    }
    export type ComposeSearchResult = User | Organization;
    export interface GroupConversationMember {
        user: User;
        role: string;
    }
    export interface GroupConversationInvite {
        userId: string;
        role: string;
    }
    export interface GroupChatUpdateResponse {
        chat: Conversation;
        chatEventMessage: Nullable<ConversationEventMessage>;
        chatEvent: Nullable<ConversationEvent>;
    }
    export interface ConversationUpdateResponse {
        chat: Conversation;
        curSeq: number;
    }
    export interface ConversationBlockedUser {
        user: User;
        blockedBy: User;
    }
    export interface UpdateGroupInput {
        title: Nullable<string>;
        photoRef: Nullable<ImageRefInput>;
        description: Nullable<string>;
        longDescription: Nullable<string>;
        socialImageRef: Nullable<ImageRefInput>;
    }
    export interface Profile {
        id: string;
        firstName: Nullable<string>;
        lastName: Nullable<string>;
        photoRef: Nullable<ImageRef>;
        phone: Nullable<string>;
        email: Nullable<string>;
        website: Nullable<string>;
        about: Nullable<string>;
        location: Nullable<string>;
        linkedin: Nullable<string>;
        twitter: Nullable<string>;
        alphaLinkedin: Nullable<string>;
        alphaTwitter: Nullable<string>;
        alphaJoinedAt: Nullable<string>;
        alphaInvitedBy: Nullable<User>;
        alphaRole: Nullable<string>;
        alphaLocations: Nullable<string[]>;
        primaryOrganization: Nullable<Organization>;
        alphaPrimaryOrganizationId: Nullable<string>;
        alphaPrimaryOrganization: Nullable<Organization>;
        shortname: Nullable<string>;
    }
    export interface ProfileInput {
        firstName: Nullable<string>;
        lastName: Nullable<string>;
        photoRef: Nullable<ImageRefInput>;
        phone: Nullable<string>;
        email: Nullable<string>;
        website: Nullable<string>;
        about: Nullable<string>;
        location: Nullable<string>;
        linkedin: Nullable<string>;
        twitter: Nullable<string>;
        primaryOrganization: Nullable<string>;
    }
    export interface UpdateProfileInput {
        firstName: Nullable<string>;
        lastName: Nullable<string>;
        photoRef: Nullable<ImageRefInput>;
        phone: Nullable<string>;
        email: Nullable<string>;
        website: Nullable<string>;
        about: Nullable<string>;
        location: Nullable<string>;
        linkedin: Nullable<string>;
        twitter: Nullable<string>;
        primaryOrganization: Nullable<string>;
        alphaRole: Nullable<string>;
        alphaLocations: Nullable<string[]>;
        alphaLinkedin: Nullable<string>;
        alphaTwitter: Nullable<string>;
        alphaPrimaryOrganizationId: Nullable<string>;
    }
    export interface CreateProfileInput {
        firstName: string;
        lastName: Nullable<string>;
        photoRef: Nullable<ImageRefInput>;
        phone: Nullable<string>;
        email: Nullable<string>;
        about: Nullable<string>;
        location: Nullable<string>;
        website: Nullable<string>;
        linkedin: Nullable<string>;
        twitter: Nullable<string>;
        primaryOrganization: Nullable<string>;
    }
    export interface AlphaSignupData {
        user: Nullable<User>;
        organization: Nullable<Organization>;
    }
    export interface Invite {
        id: string;
        key: string;
        ttl: Nullable<string>;
    }
    export interface InviteInfo {
        id: string;
        key: string;
        orgId: string;
        title: string;
        photo: Nullable<string>;
        photoRef: Nullable<ImageRef>;
        joined: boolean;
        creator: Nullable<User>;
        forEmail: Nullable<string>;
        forName: Nullable<string>;
        description: Nullable<string>;
        membersCount: Nullable<number>;
        organization: Nullable<Organization>;
    }
    export interface AppInvite {
        inviter: User;
    }
    export interface AppInviteInfo {
        inviter: User;
    }
    export interface InviteHistotyInfo {
        acceptedBy: Nullable<User>;
        forEmail: string;
        isGlobal: boolean;
    }
    export type ResolveInviteEntry = InviteInfo | AppInvite | RoomInvite;
    export interface Reaction {
        user: User;
        reaction: string;
    }
    export interface Message {
        id: string;
        date: Date;
        sender: User;
        edited: boolean;
        text: Nullable<string>;
        quoted: Message[];
        alphaReactions: Reaction[];
    }
    export type DebugEmailType = 'WELCOME' | 'ACCOUNT_ACTIVATED' | 'ACCOUNT_DEACTIVATED' | 'MEMBER_REMOVED' | 'MEMBERSHIP_LEVEL_CHANGED' | 'INVITE' | 'MEMBER_JOINED' | 'SIGNUP_CODE' | 'SIGIN_CODE' | 'UNREAD_MESSAGE' | 'UNREAD_MESSAGES' | 'PUBLIC_ROOM_INVITE' | 'PRIVATE_ROOM_INVITE' | 'ROOM_INVITE_ACCEPTED';
    export interface DebugID {
        numberID: Nullable<number>;
        stringID: Nullable<string>;
        type: string;
    }
    export interface DebugUserPresence {
        user: User;
        lastSeen: Date;
        lastSeenStr: string;
        lastSeenTimeout: number;
        platform: Nullable<string>;
        active: Nullable<boolean>;
    }
    export interface OrganizationChatStats {
        org: Organization;
        chat: SharedRoom;
        messagesCount: number;
        lastMessageDate: string;
    }
    export interface DebugEventsState {
        state: Nullable<string>;
    }
    export interface DebugEvent {
        seq: number;
        key: string;
    }
    export type SuperNotificationType = 'ON_SIGN_UP' | 'ON_USER_PROFILE_CREATED' | 'ON_ORG_ACTIVATED_BY_ADMIN' | 'ON_ORG_ACTIVATED_VIA_INVITE' | 'ON_ORG_SUSPEND';
    export type DialogKind = 'PRIVATE' | 'INTERNAL' | 'PUBLIC' | 'GROUP';
    export interface Dialog {
        id: string;
        cid: string;
        fid: string;
        kind: DialogKind;
        isChannel: boolean;
        title: string;
        photo: string;
        unreadCount: number;
        topMessage: Nullable<Message>;
        betaTopMessage: Nullable<RoomMessage>;
        alphaTopMessage: Nullable<ModernMessage>;
        isMuted: boolean;
        haveMention: boolean;
    }
    export interface DialogsConnection {
        items: Dialog[];
        cursor: Nullable<string>;
    }
    export type EmailFrequency = 'NEVER' | 'MIN_15' | 'HOUR_1' | 'HOUR_24' | 'WEEK_1';
    export type NotificationMessages = 'ALL' | 'DIRECT' | 'NONE';
    export type NotificationsDelay = 'NONE' | 'MIN_1' | 'MIN_15';
    export interface UpdateSettingsInput {
        emailFrequency: Nullable<EmailFrequency>;
        desktopNotifications: Nullable<NotificationMessages>;
        mobileNotifications: Nullable<NotificationMessages>;
        mobileAlert: Nullable<boolean>;
        mobileIncludeText: Nullable<boolean>;
        mute: Nullable<boolean>;
        notificationsDelay: Nullable<NotificationsDelay>;
    }
    export interface Settings {
        id: string;
        primaryEmail: string;
        emailFrequency: EmailFrequency;
        desktopNotifications: NotificationMessages;
        mobileNotifications: NotificationMessages;
        mobileAlert: boolean;
        mobileIncludeText: boolean;
        mute: Nullable<boolean>;
        notificationsDelay: NotificationsDelay;
    }
    export type OrganizationMemberRole = 'OWNER' | 'ADMIN' | 'MEMBER';
    export interface OrganizationMember {
        email: string;
        role: OrganizationMemberRole;
    }
    export interface OrganizationIvitedMember extends OrganizationMember {
        email: string;
        role: OrganizationMemberRole;
        firstName: Nullable<string>;
        lastName: Nullable<string>;
        inviteId: string;
    }
    export interface OrganizationJoinedMember extends OrganizationMember {
        email: string;
        role: OrganizationMemberRole;
        user: User;
        joinedAt: Nullable<string>;
        showInContacts: boolean;
    }
    export interface OrganizationRequestedMember extends OrganizationMember {
        email: string;
        role: OrganizationMemberRole;
        user: User;
        joinedAt: Nullable<string>;
    }
    export interface InviteRequest {
        email: string;
        emailText: Nullable<string>;
        role: OrganizationMemberRole;
        firstName: Nullable<string>;
        lastName: Nullable<string>;
    }
    export type Platform = 'WEB' | 'IOS' | 'ANDROID';
    export interface OnlineEvent {
        user: User;
        type: string;
        timeout: number;
    }
    export interface ChatOnlineEvent {
        onlineMembers: number;
    }
    export type SuperAccountState = 'PENDING' | 'ACTIVATED' | 'SUSPENDED' | 'DELETED';
    export interface SuperAccount {
        id: string;
        orgId: string;
        title: string;
        name: string;
        state: SuperAccountState;
        members: User[];
        features: FeatureFlag[];
        alphaPublished: boolean;
        createdAt: Nullable<string>;
        createdBy: Nullable<User>;
    }
    export type SuperAdminRole = 'SUPER_ADMIN' | 'SOFTWARE_DEVELOPER' | 'EDITOR';
    export interface SuperAdmin {
        user: User;
        role: SuperAdminRole;
        email: Nullable<string>;
    }
    export interface Event {
        id: string;
        event: string;
        params: Nullable<string>;
        time: Nullable<Date>;
    }
    export type EventPlatform = 'Android' | 'iOS' | 'WEB';
    export interface ModernMessage {
        id: string;
        date: Date;
        sender: User;
        message: Nullable<string>;
        spans: MessageSpan[];
        fallback: string;
    }
    export interface ServiceMessage extends ModernMessage {
        id: string;
        date: Date;
        sender: User;
        message: Nullable<string>;
        spans: MessageSpan[];
        serviceMetadata: Nullable<ServiceMetadata>;
        fallback: string;
    }
    export interface GeneralMessage extends ModernMessage {
        id: string;
        date: Date;
        sender: User;
        edited: boolean;
        reactions: ModernMessageReaction[];
        message: Nullable<string>;
        spans: MessageSpan[];
        attachments: ModernMessageAttachment[];
        quotedMessages: ModernMessage[];
        commentsCount: number;
        fallback: string;
    }
    export interface Image {
        url: string;
        metadata: Nullable<FileMetadata>;
    }
    export interface ModernMessageAttachment {
        id: string;
        fallback: string;
    }
    export interface MessageRichAttachment extends ModernMessageAttachment {
        id: string;
        title: Nullable<string>;
        subTitle: Nullable<string>;
        titleLink: Nullable<string>;
        titleLinkHostname: Nullable<string>;
        text: Nullable<string>;
        icon: Nullable<Image>;
        image: Nullable<Image>;
        keyboard: Nullable<MessageKeyboard>;
        fallback: string;
    }
    export interface MessageAttachmentFile extends ModernMessageAttachment {
        id: string;
        fileId: string;
        fileMetadata: FileMetadata;
        filePreview: Nullable<string>;
        fallback: string;
    }
    export interface MessageAttachmentPost extends ModernMessageAttachment {
        id: string;
        post: FeedItem;
        fallback: string;
    }
    export interface FileAttachmentInput {
        fileId: string;
    }
    export interface MessageKeyboard {
        buttons: Nullable<ModernMessageButton[]>[];
    }
    export interface ModernMessageButton {
        id: string;
        title: string;
        style: ModernMessageButtonStyle;
        url: Nullable<string>;
    }
    export type ModernMessageButtonStyle = 'DEFAULT' | 'LIGHT';
    export interface MessageKeyboardInput {
        buttons: Nullable<ModernMessageButtonInput[]>[];
    }
    export interface ModernMessageButtonInput {
        id: string;
        title: string;
        style: ModernMessageButtonStyle;
    }
    export type MessageReactionType = 'LIKE' | 'THUMB_UP' | 'JOY' | 'SCREAM' | 'CRYING' | 'ANGRY';
    export interface ModernMessageReaction {
        user: User;
        reaction: MessageReactionType;
    }
    export interface MessageSpan {
        offset: number;
        length: number;
    }
    export interface MessageSpanUserMention extends MessageSpan {
        offset: number;
        length: number;
        user: User;
    }
    export interface MessageSpanMultiUserMention extends MessageSpan {
        offset: number;
        length: number;
        users: User[];
    }
    export interface MessageSpanRoomMention extends MessageSpan {
        offset: number;
        length: number;
        room: Room;
    }
    export interface MentionInput {
        chatId: Nullable<string>;
        userId: Nullable<string>;
        userIds: Nullable<string[]>;
        offset: number;
        length: number;
    }
    export interface MessageSpanLink extends MessageSpan {
        offset: number;
        length: number;
        url: string;
    }
    export interface MessageSpanBold extends MessageSpan {
        offset: number;
        length: number;
    }
    export interface MessageSpanItalic extends MessageSpan {
        offset: number;
        length: number;
    }
    export interface MessageSpanIrony extends MessageSpan {
        offset: number;
        length: number;
    }
    export interface MessageSpanInlineCode extends MessageSpan {
        offset: number;
        length: number;
    }
    export interface MessageSpanCodeBlock extends MessageSpan {
        offset: number;
        length: number;
    }
    export interface MessageSpanInsane extends MessageSpan {
        offset: number;
        length: number;
    }
    export interface MessageSpanLoud extends MessageSpan {
        offset: number;
        length: number;
    }
    export interface MessageSpanRotating extends MessageSpan {
        offset: number;
        length: number;
    }
    export interface MessageSpanDate extends MessageSpan {
        offset: number;
        length: number;
        date: Date;
    }
    export type MessageSpanType = 'Bold' | 'Italic' | 'Irony' | 'InlineCode' | 'CodeBlock' | 'Insane' | 'Loud' | 'Rotating';
    export interface MessageSpanInput {
        offset: number;
        length: number;
        type: MessageSpanType;
    }
    export interface PageInfo {
        hasNextPage: boolean;
        hasPreviousPage: boolean;
        itemsCount: number;
        pagesCount: number;
        currentPage: number;
        openEnded: boolean;
    }
    export type TaskStatus = 'IN_PROGRESS' | 'FAILED' | 'COMPLETED';
    export interface Task {
        id: string;
        status: TaskStatus;
        result: Nullable<string>;
    }
    export interface ImageCropInput {
        x: number;
        y: number;
        w: number;
        h: number;
    }
    export interface ImageCrop {
        x: number;
        y: number;
        w: number;
        h: number;
    }
    export interface ImageRef {
        uuid: string;
        crop: Nullable<ImageCrop>;
    }
    export interface ImageRefInput {
        uuid: string;
        crop: Nullable<ImageCropInput>;
    }
    export interface Range {
        from: Nullable<number>;
        to: Nullable<number>;
    }
    export interface RangeInput {
        from: Nullable<number>;
        to: Nullable<number>;
    }
    export interface AppStorageValue {
        id: string;
        key: string;
        value: Nullable<string>;
    }
    export interface AppStorageValueInput {
        key: string;
        value: Nullable<string>;
    }
    export interface AppProfile {
        id: string;
        name: string;
        photoRef: Nullable<ImageRef>;
        about: Nullable<string>;
        shortname: Nullable<string>;
        token: AppToken;
    }
    export interface AppProfileInput {
        name: Nullable<string>;
        shortname: Nullable<string>;
        photoRef: Nullable<ImageRefInput>;
        about: Nullable<string>;
    }
    export interface AppToken {
        salt: string;
    }
    export interface AppChat {
        chat: Room;
        webhook: string;
    }
    export interface ChannelConversation extends Conversation {
        id: string;
        flexibleId: string;
        title: string;
        photos: string[];
        members: User[];
        unreadCount: number;
        topMessage: Nullable<ConversationMessage>;
        settings: ConversationSettings;
        membersCount: number;
        memberRequestsCount: number;
        featured: boolean;
        hidden: boolean;
        description: Nullable<string>;
        longDescription: Nullable<string>;
        myStatus: ChannelMembershipStatus;
        organization: Nullable<Organization>;
        isRoot: boolean;
        photo: Nullable<string>;
        photoRef: Nullable<ImageRef>;
        socialImage: Nullable<string>;
        socialImageRef: Nullable<ImageRef>;
        pinnedMessage: Nullable<ConversationMessage>;
        membersOnline: number;
        myRole: Nullable<string>;
    }
    export type ChannelMembershipStatus = 'invited' | 'member' | 'requested' | 'none';
    export interface ChannelMemberOrg {
        organization: Organization;
        role: string;
        status: string;
    }
    export interface ChannelMember {
        user: User;
        role: string;
        status: string;
    }
    export interface ChannelInvite {
        channel: ChannelConversation;
        invitedByUser: User;
    }
    export interface ChannelOrgInvite {
        channel: ChannelConversation;
        invitedByOrg: Organization;
        invitedByUser: User;
    }
    export interface ChannelJoinRequestOrg {
        organization: Organization;
        user: User;
    }
    export interface ChannelConversationConnectionEdge {
        node: ChannelConversation;
        cursor: string;
    }
    export interface ChannelConversationConnection {
        edges: ChannelConversationConnectionEdge[];
        pageInfo: PageInfo;
    }
    export interface ChannelInviteRequest {
        email: string;
        emailText: Nullable<string>;
        firstName: Nullable<string>;
        lastName: Nullable<string>;
    }
    export interface ChatUpdateSingle {
        seq: number;
        state: string;
        update: ChatUpdate;
    }
    export interface ChatUpdateBatch {
        seq: number;
        state: string;
        fromSeq: number;
        updates: ChatUpdate[];
    }
    export type ChatUpdateContainer = ChatUpdateSingle | ChatUpdateBatch;
    export type ChatUpdate = ChatUpdated | ChatMessageReceived | ChatMessageUpdated | ChatMessageDeleted | ChatLostAccess;
    export interface ChatUpdated {
        chat: Room;
        by: User;
    }
    export interface ChatMessageReceived {
        message: ModernMessage;
        repeatKey: Nullable<string>;
    }
    export interface ChatMessageUpdated {
        message: ModernMessage;
    }
    export interface ChatMessageDeleted {
        message: ModernMessage;
    }
    export interface ChatUpdateState {
        state: Nullable<string>;
    }
    export interface ChatLostAccess {
        lostAccess: boolean;
    }
    export interface CommentUpdatesState {
        state: Nullable<string>;
    }
    export interface CommentUpdateSingle {
        seq: number;
        state: string;
        update: CommentUpdate;
    }
    export interface CommentUpdateBatch {
        seq: number;
        state: string;
        fromSeq: number;
        updates: CommentUpdate[];
    }
    export type CommentUpdate = CommentReceived | CommentUpdated;
    export interface CommentReceived {
        comment: CommentEntry;
    }
    export interface CommentUpdated {
        comment: CommentEntry;
    }
    export type CommentUpdateContainer = CommentUpdateSingle | CommentUpdateBatch;
    export interface CommentsPeer {
        id: string;
        state: CommentUpdatesState;
        count: number;
        comments: CommentEntry[];
    }
    export interface CommentEntry {
        id: string;
        deleted: boolean;
        comment: GeneralMessage;
        parentComment: Nullable<CommentEntry>;
        childComments: CommentEntry[];
    }
    export interface ConversationUpdateSingle {
        seq: number;
        state: string;
        update: ConversationUpdate;
    }
    export interface ConversationUpdateBatch {
        updates: ConversationUpdate[];
        fromSeq: number;
        seq: number;
        state: string;
    }
    export type ConversationUpdateContainer = ConversationUpdateSingle | ConversationUpdateBatch;
    export type ConversationUpdate = ConversationUpdated | ConversationMessageReceived | ConversationMessageUpdated | ConversationMessageDeleted | ConversationLostAccess;
    export interface ConversationUpdated {
        chat: Room;
        by: User;
    }
    export interface ConversationMessageReceived {
        message: ConversationMessage;
        betaMessage: RoomMessage;
    }
    export interface ConversationMessageUpdated {
        message: ConversationMessage;
        betaMessage: RoomMessage;
    }
    export interface ConversationMessageDeleted {
        message: ConversationMessage;
        betaMessage: RoomMessage;
    }
    export interface ConversationLostAccess {
        lostAccess: boolean;
    }
    export interface ConversationUpdateState {
        state: Nullable<string>;
    }
    export interface DialogUpdateSingle {
        seq: number;
        state: string;
        update: DialogUpdate;
    }
    export interface DialogUpdateBatch {
        updates: DialogUpdate[];
        fromSeq: number;
        seq: number;
        state: string;
    }
    export type DialogUpdateContainer = DialogUpdateSingle | DialogUpdateBatch;
    export type DialogUpdate = DialogMessageReceived | DialogMessageUpdated | DialogMessageDeleted | DialogMessageRead | DialogTitleUpdated | DialogDeleted | DialogPhotoUpdated | DialogMuteChanged | DialogMentionedChanged | DialogBump;
    export interface DialogMessageReceived {
        cid: string;
        message: ConversationMessage;
        betaMessage: RoomMessage;
        alphaMessage: ModernMessage;
        unread: number;
        globalUnread: number;
    }
    export interface DialogMessageUpdated {
        cid: string;
        message: ConversationMessage;
        betaMessage: RoomMessage;
        alphaMessage: ModernMessage;
    }
    export interface DialogMessageDeleted {
        cid: string;
        message: ConversationMessage;
        betaMessage: RoomMessage;
        prevMessage: Nullable<RoomMessage>;
        alphaPrevMessage: Nullable<ModernMessage>;
        alphaMessage: ModernMessage;
        unread: number;
        globalUnread: number;
    }
    export interface DialogMessageRead {
        cid: string;
        unread: number;
        globalUnread: number;
    }
    export interface DialogTitleUpdated {
        cid: string;
        title: string;
    }
    export interface DialogPhotoUpdated {
        cid: string;
        photo: Nullable<string>;
    }
    export interface DialogDeleted {
        cid: string;
        globalUnread: number;
    }
    export interface DialogBump {
        cid: string;
        globalUnread: number;
        unread: number;
        topMessage: Nullable<ModernMessage>;
    }
    export interface DialogMuteChanged {
        cid: string;
        mute: boolean;
        globalUnread: number;
    }
    export interface DialogMentionedChanged {
        cid: string;
        haveMention: boolean;
    }
    export interface DialogUpdateState {
        state: Nullable<string>;
    }
    export interface EnvVar {
        name: string;
        value: string;
    }
    export interface FeatureFlag {
        id: string;
        key: string;
        title: string;
    }
    export interface FeedItem {
        id: string;
        text: string;
        date: Date;
        alphaBy: User;
    }
    export interface ICEServer {
        urls: string[];
        username: Nullable<string>;
        credential: Nullable<string>;
    }
    export interface Conference {
        id: string;
        startTime: Nullable<Date>;
        peers: ConferencePeer[];
        iceServers: ICEServer[];
    }
    export interface ConferencePeer {
        id: string;
        user: User;
        connection: Nullable<ConferencePeerConnection>;
    }
    export interface ConferenceMedia {
        id: string;
        streams: MediaStream[];
        iceServers: ICEServer[];
    }
    export type MediaStreamState = 'WAIT_OFFER' | 'NEED_OFFER' | 'WAIT_ANSWER' | 'NEED_ANSWER' | 'READY';
    export interface MediaStream {
        id: string;
        state: MediaStreamState;
        sdp: Nullable<string>;
        ice: string[];
    }
    export type ConferencePeerConnectionState = 'WAIT_OFFER' | 'NEED_OFFER' | 'WAIT_ANSWER' | 'NEED_ANSWER' | 'READY';
    export interface ConferencePeerConnection {
        state: ConferencePeerConnectionState;
        sdp: Nullable<string>;
        ice: string[];
    }
    export interface ConferenceJoinResult {
        peerId: string;
        conference: Conference;
    }
    export interface MessageReaction {
        user: User;
        reaction: string;
    }
    export interface MessageAttachment {
        fileId: string;
        fileMetadata: Nullable<FileMetadata>;
        filePreview: Nullable<string>;
    }
    export type MessageButtonStyle = 'DEFAULT' | 'LIGHT';
    export interface MessageButton {
        title: string;
        style: MessageButtonStyle;
        id: string;
    }
    export interface MessageButtonInput {
        title: string;
        style: MessageButtonStyle;
        id: string;
    }
    export type MessageType = 'MESSAGE' | 'POST';
    export type PostMessageType = 'BLANK' | 'JOB_OPPORTUNITY' | 'OFFICE_HOURS' | 'REQUEST_FOR_STARTUPS';
    export interface Mutation {
        lifecheck: Nullable<string>;
        alphaSendMessage: ConversationEventMessage;
        alphaReadChat: ChatReadResult;
        alphaEditMessage: ConversationEventEditMessage;
        alphaSendIntro: ConversationEventMessage;
        alphaEditIntro: ConversationEventMessage;
        alphaDeleteMessageUrlAugmentation: ConversationEventMessage;
        alphaDeleteMessage: ConversationEventDelete;
        alphaChatSetReaction: string;
        alphaChatUnsetReaction: string;
        alphaGlobalRead: string;
        alphaBlockUser: string;
        alphaUnblockUser: string;
        alphaChatCreateGroup: Conversation;
        alphaChatUpdateGroup: ConversationUpdateResponse;
        alphaChatChangeGroupTitle: GroupChatUpdateResponse;
        alphaChatInviteToGroup: GroupChatUpdateResponse;
        alphaChatKickFromGroup: GroupChatUpdateResponse;
        alphaChatChangeRoleInGroup: GroupChatUpdateResponse;
        alphaChatCopyGroup: GroupChatUpdateResponse;
        alphaChatLeave: ConversationUpdateResponse;
        alphaUpdateConversationSettings: ConversationSettings;
        profileCreate: Profile;
        profileUpdate: Profile;
        createProfile: Profile;
        updateProfile: Profile;
        alphaCreateUserProfileAndOrganization: AlphaSignupData;
        alphaCreateInvite: Invite;
        alphaDeleteInvite: string;
        alphaJoinInvite: string;
        joinAppInvite: string;
        debugSendEmail: Nullable<boolean>;
        debugCreateTestUser: User;
        debugDeleteUrlInfoCache: Nullable<boolean>;
        debugDeleteUrlInfoCacheAll: Nullable<boolean>;
        debugSuperNotifications: boolean;
        debugCalcUsersMessagingStats: boolean;
        debugCalcUsersChatsStats: boolean;
        debugConvertOrgChatToNormal: boolean;
        debugDeleteEmptyOrgChats: boolean;
        debugFixCommentsVisibility: boolean;
        debugSetCommentVisibility: boolean;
        debugRemoveDeletedDialogs: boolean;
        debugReindexOrgs: boolean;
        settingsUpdate: Settings;
        updateSettings: Settings;
        betaOrganizationMemberRequestApprove: Organization;
        betaOrganizationMemberRemove: Organization;
        betaOrganizationMemberAdd: Organization;
        alphaOrganizationChangeMemberRole: string;
        alphaOrganizationInviteMembers: string;
        alphaOrganizationRefreshInviteLink: Invite;
        alphaOrganizationCreatePublicInvite: Invite;
        alphaOrganizationRemoveMember: string;
        alphaOrganizationDeletePublicInvite: string;
        presenceReportOnline: string;
        presenceReportOffline: string;
        alphaReportActive: string;
        superAccountAdd: SuperAccount;
        superAccountRename: SuperAccount;
        superAccountActivate: SuperAccount;
        superAccountSuspend: SuperAccount;
        superAccountPend: SuperAccount;
        superAccountMemberAdd: SuperAccount;
        superAccountMemberRemove: SuperAccount;
        superAccountChannelMemberAdd: string;
        superDeleteUser: boolean;
        superAdminAdd: string;
        superAdminRemove: string;
        alphaAlterPublished: Organization;
        betaFixCounter: boolean;
        betaFixCountersForAll: boolean;
        conversationDraftUpdate: string;
        alphaSaveDraftMessage: string;
        track: string;
        sendMessage: boolean;
        editMessage: boolean;
        pinMessage: boolean;
        unpinMessage: boolean;
        betaPinMessage: SharedRoom;
        betaUnpinMessage: SharedRoom;
        messageReactionAdd: boolean;
        messageReactionRemove: boolean;
        deleteChat: boolean;
        archiveChat: boolean;
        createApp: AppProfile;
        createSuperApp: AppProfile;
        refreshAppToken: AppProfile;
        updateAppProfile: AppProfile;
        deleteApp: boolean;
        addAppToChat: AppChat;
        userStorageSet: AppStorageValue[];
        alphaChannelCreate: Conversation;
        alphaChannelSetFeatured: Conversation;
        alphaChannelHideFromSearch: Conversation;
        alphaChannelInvite: ConversationUpdateResponse;
        alphaChannelJoin: ConversationUpdateResponse;
        alphaChannelRevokeInvite: string;
        alphaChannelCancelRequest: Nullable<string>;
        alphaChannelInviteMembers: string;
        alphaChannelJoinInvite: string;
        alphaChannelRenewInviteLink: string;
        addMessageComment: boolean;
        betaAddMessageComment: CommentEntry;
        editComment: boolean;
        deleteComment: boolean;
        deleteCommentAugmentation: boolean;
        commentReactionAdd: boolean;
        commentReactionRemove: boolean;
        setEnvVar: boolean;
        featureFlagAdd: FeatureFlag;
        superAccountFeatureAdd: SuperAccount;
        superAccountFeatureRemove: SuperAccount;
        alphaCreateFeedPost: FeedItem;
        conferenceJoin: ConferenceJoinResult;
        conferenceKeepAlive: Conference;
        conferenceLeave: Conference;
        mediaStreamOffer: ConferenceMedia;
        mediaStreamNegotiationNeeded: ConferenceMedia;
        mediaStreamAnswer: ConferenceMedia;
        mediaStreamCandidate: ConferenceMedia;
        mediaStreamFailed: ConferenceMedia;
        peerConnectionOffer: Conference;
        peerConnectionAnswer: Conference;
        peerConnectionCandidate: Conference;
        roomRead: boolean;
        betaMessageSend: boolean;
        betaMessageEdit: boolean;
        betaMessageDeleteAugmentation: boolean;
        betaMessageDelete: boolean;
        betaReactionSet: boolean;
        betaReactionRemove: boolean;
        betaIntroSend: boolean;
        betaIntroEdit: boolean;
        alphaSendPostMessage: ConversationEventMessage;
        alphaEditPostMessage: ConversationEventMessage;
        alphaRespondPostMessage: Nullable<boolean>;
        createOrganization: OrganizationProfile;
        updateOrganizationProfile: OrganizationProfile;
        deleteOrganization: boolean;
        registerWebPush: string;
        registerPush: string;
        typingSend: string;
        typingCancel: string;
        alphaSetTyping: string;
        betaRoomCreate: SharedRoom;
        betaRoomUpdate: Room;
        betaRoomMove: Room;
        betaRoomInvite: Room;
        betaRoomKick: Room;
        betaRoomLeave: Room;
        betaRoomChangeRole: Room;
        betaRoomJoin: Room;
        betaRoomDeclineJoinRequest: Room;
        betaRoomInviteLinkSendEmail: string;
        betaRoomInviteLinkJoin: Room;
        betaRoomInviteLinkRenew: string;
        betaRoomUpdateUserNotificationSettings: RoomUserNotificaionSettings;
        betaRoomAlterFeatured: RoomSuper;
        betaRoomAlterListed: RoomSuper;
        updateWelcomeMessage: boolean;
        alphaSetUserShortName: Nullable<string>;
        alphaSetOrgShortName: Nullable<string>;
    }
    export interface MutationAlphaSendMessageArgs {
        conversationId: string;
        message: OptionalNullable<string>;
        file: OptionalNullable<string>;
        repeatKey: OptionalNullable<string>;
        replyMessages: OptionalNullable<string[]>;
        mentions: OptionalNullable<string[]>;
    }
    export interface MutationAlphaReadChatArgs {
        conversationId: string;
        messageId: string;
    }
    export interface MutationAlphaEditMessageArgs {
        messageId: string;
        message: OptionalNullable<string>;
        file: OptionalNullable<string>;
        replyMessages: OptionalNullable<string[]>;
        mentions: OptionalNullable<string[]>;
    }
    export interface MutationAlphaSendIntroArgs {
        conversationId: string;
        userId: string;
        about: OptionalNullable<string>;
        message: OptionalNullable<string>;
        file: OptionalNullable<string>;
        repeatKey: OptionalNullable<string>;
    }
    export interface MutationAlphaEditIntroArgs {
        messageId: string;
        userId: string;
        about: OptionalNullable<string>;
        message: OptionalNullable<string>;
        file: OptionalNullable<string>;
    }
    export interface MutationAlphaDeleteMessageUrlAugmentationArgs {
        messageId: string;
    }
    export interface MutationAlphaDeleteMessageArgs {
        messageId: string;
    }
    export interface MutationAlphaChatSetReactionArgs {
        messageId: string;
        reaction: string;
    }
    export interface MutationAlphaChatUnsetReactionArgs {
        messageId: string;
        reaction: string;
    }
    export interface MutationAlphaGlobalReadArgs {
        toSeq: number;
    }
    export interface MutationAlphaBlockUserArgs {
        userId: string;
    }
    export interface MutationAlphaUnblockUserArgs {
        userId: string;
        conversationId: OptionalNullable<string>;
    }
    export interface MutationAlphaChatCreateGroupArgs {
        title: OptionalNullable<string>;
        photoRef: OptionalNullable<ImageRefInput>;
        members: string[];
        message: OptionalNullable<string>;
    }
    export interface MutationAlphaChatUpdateGroupArgs {
        conversationId: string;
        input: UpdateGroupInput;
    }
    export interface MutationAlphaChatChangeGroupTitleArgs {
        conversationId: string;
        title: string;
    }
    export interface MutationAlphaChatInviteToGroupArgs {
        conversationId: string;
        invites: GroupConversationInvite[];
    }
    export interface MutationAlphaChatKickFromGroupArgs {
        conversationId: string;
        userId: string;
    }
    export interface MutationAlphaChatChangeRoleInGroupArgs {
        conversationId: string;
        userId: string;
        newRole: string;
    }
    export interface MutationAlphaChatCopyGroupArgs {
        conversationId: string;
        title: OptionalNullable<string>;
        extraMembers: OptionalNullable<string[]>;
        message: string;
    }
    export interface MutationAlphaChatLeaveArgs {
        conversationId: string;
    }
    export interface MutationAlphaUpdateConversationSettingsArgs {
        settings: UpdateConversationSettingsInput;
        conversationId: string;
    }
    export interface MutationProfileCreateArgs {
        input: ProfileInput;
    }
    export interface MutationProfileUpdateArgs {
        input: ProfileInput;
        uid: OptionalNullable<string>;
    }
    export interface MutationCreateProfileArgs {
        input: CreateProfileInput;
    }
    export interface MutationUpdateProfileArgs {
        input: UpdateProfileInput;
        uid: OptionalNullable<string>;
    }
    export interface MutationAlphaCreateUserProfileAndOrganizationArgs {
        user: ProfileInput;
        organization: CreateOrganizationInput;
    }
    export interface MutationAlphaDeleteInviteArgs {
        id: string;
    }
    export interface MutationAlphaJoinInviteArgs {
        key: string;
        isNewUser: OptionalNullable<boolean>;
    }
    export interface MutationJoinAppInviteArgs {
        key: string;
        isNewUser: OptionalNullable<boolean>;
    }
    export interface MutationDebugSendEmailArgs {
        type: DebugEmailType;
    }
    export interface MutationDebugCreateTestUserArgs {
        key: string;
        name: string;
    }
    export interface MutationDebugDeleteUrlInfoCacheArgs {
        url: string;
    }
    export interface MutationDebugSuperNotificationsArgs {
        type: SuperNotificationType;
    }
    export interface MutationDebugConvertOrgChatToNormalArgs {
        orgId: string;
    }
    export interface MutationDebugSetCommentVisibilityArgs {
        commentId: string;
        visible: boolean;
    }
    export interface MutationSettingsUpdateArgs {
        settings: OptionalNullable<UpdateSettingsInput>;
    }
    export interface MutationUpdateSettingsArgs {
        settings: OptionalNullable<UpdateSettingsInput>;
    }
    export interface MutationBetaOrganizationMemberRequestApproveArgs {
        userId: string;
        organizationId: string;
    }
    export interface MutationBetaOrganizationMemberRemoveArgs {
        userId: string;
        organizationId: string;
    }
    export interface MutationBetaOrganizationMemberAddArgs {
        userId: OptionalNullable<string>;
        userIds: OptionalNullable<string[]>;
        organizationId: string;
    }
    export interface MutationAlphaOrganizationChangeMemberRoleArgs {
        memberId: string;
        newRole: OrganizationMemberRole;
        organizationId: string;
    }
    export interface MutationAlphaOrganizationInviteMembersArgs {
        inviteRequests: InviteRequest[];
        organizationId: OptionalNullable<string>;
    }
    export interface MutationAlphaOrganizationRefreshInviteLinkArgs {
        expirationDays: OptionalNullable<number>;
        organizationId: OptionalNullable<string>;
    }
    export interface MutationAlphaOrganizationCreatePublicInviteArgs {
        expirationDays: OptionalNullable<number>;
        organizationId: OptionalNullable<string>;
    }
    export interface MutationAlphaOrganizationRemoveMemberArgs {
        memberId: string;
        organizationId: string;
    }
    export interface MutationAlphaOrganizationDeletePublicInviteArgs {
        organizationId: OptionalNullable<string>;
    }
    export interface MutationPresenceReportOnlineArgs {
        timeout: number;
        platform: OptionalNullable<string>;
        active: OptionalNullable<boolean>;
    }
    export interface MutationPresenceReportOfflineArgs {
        platform: OptionalNullable<Platform>;
    }
    export interface MutationAlphaReportActiveArgs {
        timeout: number;
        platform: OptionalNullable<Platform>;
    }
    export interface MutationSuperAccountAddArgs {
        title: string;
    }
    export interface MutationSuperAccountRenameArgs {
        id: string;
        title: string;
    }
    export interface MutationSuperAccountActivateArgs {
        id: string;
    }
    export interface MutationSuperAccountSuspendArgs {
        id: string;
    }
    export interface MutationSuperAccountPendArgs {
        id: string;
    }
    export interface MutationSuperAccountMemberAddArgs {
        id: string;
        userId: string;
    }
    export interface MutationSuperAccountMemberRemoveArgs {
        id: string;
        userId: string;
    }
    export interface MutationSuperAccountChannelMemberAddArgs {
        id: string;
        userId: string;
    }
    export interface MutationSuperDeleteUserArgs {
        id: string;
    }
    export interface MutationSuperAdminAddArgs {
        userId: string;
        role: SuperAdminRole;
    }
    export interface MutationSuperAdminRemoveArgs {
        userId: string;
    }
    export interface MutationAlphaAlterPublishedArgs {
        id: string;
        published: boolean;
    }
    export interface MutationBetaFixCounterArgs {
        uid: string;
    }
    export interface MutationConversationDraftUpdateArgs {
        conversationId: string;
        message: OptionalNullable<string>;
    }
    export interface MutationAlphaSaveDraftMessageArgs {
        conversationId: string;
        message: OptionalNullable<string>;
    }
    export interface MutationTrackArgs {
        did: string;
        events: Event[];
        platform: OptionalNullable<EventPlatform>;
        isProd: OptionalNullable<boolean>;
    }
    export interface MutationSendMessageArgs {
        chatId: string;
        message: OptionalNullable<string>;
        replyMessages: OptionalNullable<string[]>;
        mentions: OptionalNullable<MentionInput[]>;
        fileAttachments: OptionalNullable<FileAttachmentInput[]>;
        spans: OptionalNullable<MessageSpanInput[]>;
        repeatKey: OptionalNullable<string>;
    }
    export interface MutationEditMessageArgs {
        messageId: string;
        message: OptionalNullable<string>;
        replyMessages: OptionalNullable<string[]>;
        mentions: OptionalNullable<MentionInput[]>;
        fileAttachments: OptionalNullable<FileAttachmentInput[]>;
        spans: OptionalNullable<MessageSpanInput[]>;
    }
    export interface MutationPinMessageArgs {
        chatId: string;
        messageId: string;
    }
    export interface MutationUnpinMessageArgs {
        chatId: string;
    }
    export interface MutationBetaPinMessageArgs {
        chatId: string;
        messageId: string;
    }
    export interface MutationBetaUnpinMessageArgs {
        chatId: string;
    }
    export interface MutationMessageReactionAddArgs {
        messageId: string;
        reaction: MessageReactionType;
    }
    export interface MutationMessageReactionRemoveArgs {
        messageId: string;
        reaction: MessageReactionType;
    }
    export interface MutationDeleteChatArgs {
        chatId: string;
    }
    export interface MutationArchiveChatArgs {
        chatId: string;
    }
    export interface MutationCreateAppArgs {
        name: string;
        photoRef: OptionalNullable<ImageRefInput>;
        about: OptionalNullable<string>;
        shortname: OptionalNullable<string>;
    }
    export interface MutationCreateSuperAppArgs {
        name: string;
        photoRef: OptionalNullable<ImageRefInput>;
        about: OptionalNullable<string>;
        shortname: OptionalNullable<string>;
    }
    export interface MutationRefreshAppTokenArgs {
        appId: string;
    }
    export interface MutationUpdateAppProfileArgs {
        appId: string;
        input: AppProfileInput;
    }
    export interface MutationDeleteAppArgs {
        appId: string;
    }
    export interface MutationAddAppToChatArgs {
        appId: string;
        chatId: string;
    }
    export interface MutationUserStorageSetArgs {
        namespace: string;
        data: AppStorageValueInput[];
    }
    export interface MutationAlphaChannelCreateArgs {
        title: string;
        photoRef: OptionalNullable<ImageRefInput>;
        message: OptionalNullable<string>;
        description: OptionalNullable<string>;
        oid: OptionalNullable<string>;
    }
    export interface MutationAlphaChannelSetFeaturedArgs {
        channelId: string;
        featured: boolean;
    }
    export interface MutationAlphaChannelHideFromSearchArgs {
        channelId: string;
        hidden: boolean;
    }
    export interface MutationAlphaChannelInviteArgs {
        channelId: string;
        userId: string;
    }
    export interface MutationAlphaChannelJoinArgs {
        channelId: string;
    }
    export interface MutationAlphaChannelRevokeInviteArgs {
        channelId: string;
        userId: string;
    }
    export interface MutationAlphaChannelCancelRequestArgs {
        channelId: string;
    }
    export interface MutationAlphaChannelInviteMembersArgs {
        channelId: string;
        inviteRequests: ChannelInviteRequest[];
    }
    export interface MutationAlphaChannelJoinInviteArgs {
        invite: string;
        isNewUser: OptionalNullable<boolean>;
    }
    export interface MutationAlphaChannelRenewInviteLinkArgs {
        channelId: string;
    }
    export interface MutationAddMessageCommentArgs {
        messageId: string;
        message: OptionalNullable<string>;
        replyComment: OptionalNullable<string>;
        mentions: OptionalNullable<MentionInput[]>;
        fileAttachments: OptionalNullable<FileAttachmentInput[]>;
        spans: OptionalNullable<MessageSpanInput[]>;
    }
    export interface MutationBetaAddMessageCommentArgs {
        messageId: string;
        message: OptionalNullable<string>;
        replyComment: OptionalNullable<string>;
        mentions: OptionalNullable<MentionInput[]>;
        fileAttachments: OptionalNullable<FileAttachmentInput[]>;
        spans: OptionalNullable<MessageSpanInput[]>;
    }
    export interface MutationEditCommentArgs {
        id: string;
        message: OptionalNullable<string>;
        mentions: OptionalNullable<MentionInput[]>;
        fileAttachments: OptionalNullable<FileAttachmentInput[]>;
        spans: OptionalNullable<MessageSpanInput[]>;
    }
    export interface MutationDeleteCommentArgs {
        id: string;
    }
    export interface MutationDeleteCommentAugmentationArgs {
        id: string;
    }
    export interface MutationCommentReactionAddArgs {
        commentId: string;
        reaction: MessageReactionType;
    }
    export interface MutationCommentReactionRemoveArgs {
        commentId: string;
        reaction: MessageReactionType;
    }
    export interface MutationSetEnvVarArgs {
        name: string;
        value: string;
    }
    export interface MutationFeatureFlagAddArgs {
        key: string;
        title: string;
    }
    export interface MutationSuperAccountFeatureAddArgs {
        id: string;
        featureId: string;
    }
    export interface MutationSuperAccountFeatureRemoveArgs {
        id: string;
        featureId: string;
    }
    export interface MutationAlphaCreateFeedPostArgs {
        message: string;
    }
    export interface MutationConferenceJoinArgs {
        id: string;
    }
    export interface MutationConferenceKeepAliveArgs {
        id: string;
        peerId: string;
    }
    export interface MutationConferenceLeaveArgs {
        id: string;
        peerId: string;
    }
    export interface MutationMediaStreamOfferArgs {
        id: string;
        peerId: string;
        offer: string;
    }
    export interface MutationMediaStreamNegotiationNeededArgs {
        id: string;
        peerId: string;
    }
    export interface MutationMediaStreamAnswerArgs {
        id: string;
        peerId: string;
        answer: string;
    }
    export interface MutationMediaStreamCandidateArgs {
        id: string;
        peerId: string;
        candidate: string;
    }
    export interface MutationMediaStreamFailedArgs {
        id: string;
        peerId: string;
    }
    export interface MutationPeerConnectionOfferArgs {
        id: string;
        ownPeerId: string;
        peerId: string;
        offer: string;
    }
    export interface MutationPeerConnectionAnswerArgs {
        id: string;
        ownPeerId: string;
        peerId: string;
        answer: string;
    }
    export interface MutationPeerConnectionCandidateArgs {
        id: string;
        ownPeerId: string;
        peerId: string;
        candidate: string;
    }
    export interface MutationRoomReadArgs {
        id: string;
        mid: string;
    }
    export interface MutationBetaMessageSendArgs {
        message: OptionalNullable<string>;
        file: OptionalNullable<string>;
        repeatKey: OptionalNullable<string>;
        replyMessages: OptionalNullable<string[]>;
        mentions: OptionalNullable<string[]>;
        room: string;
    }
    export interface MutationBetaMessageEditArgs {
        mid: string;
        message: OptionalNullable<string>;
        file: OptionalNullable<string>;
        replyMessages: OptionalNullable<string[]>;
        mentions: OptionalNullable<string[]>;
    }
    export interface MutationBetaMessageDeleteAugmentationArgs {
        mid: string;
    }
    export interface MutationBetaMessageDeleteArgs {
        mid: OptionalNullable<string>;
        mids: OptionalNullable<string[]>;
    }
    export interface MutationBetaReactionSetArgs {
        mid: string;
        reaction: string;
    }
    export interface MutationBetaReactionRemoveArgs {
        mid: string;
        reaction: string;
    }
    export interface MutationBetaIntroSendArgs {
        room: string;
        uid: string;
        about: OptionalNullable<string>;
        message: OptionalNullable<string>;
        file: OptionalNullable<string>;
        repeatKey: OptionalNullable<string>;
    }
    export interface MutationBetaIntroEditArgs {
        mid: string;
        uid: string;
        about: OptionalNullable<string>;
        message: OptionalNullable<string>;
        file: OptionalNullable<string>;
    }
    export interface MutationAlphaSendPostMessageArgs {
        conversationId: string;
        title: string;
        text: string;
        attachments: OptionalNullable<string[]>;
        postType: PostMessageType;
        repeatKey: OptionalNullable<string>;
    }
    export interface MutationAlphaEditPostMessageArgs {
        messageId: string;
        title: string;
        text: string;
        attachments: OptionalNullable<string[]>;
        postType: PostMessageType;
    }
    export interface MutationAlphaRespondPostMessageArgs {
        messageId: string;
        buttonId: string;
    }
    export interface MutationCreateOrganizationArgs {
        input: CreateOrganizationInput;
    }
    export interface MutationUpdateOrganizationProfileArgs {
        input: UpdateOrganizationProfileInput;
        id: OptionalNullable<string>;
    }
    export interface MutationDeleteOrganizationArgs {
        id: string;
    }
    export interface MutationRegisterWebPushArgs {
        endpoint: string;
    }
    export interface MutationRegisterPushArgs {
        endpoint: string;
        type: PushType;
    }
    export interface MutationTypingSendArgs {
        conversationId: string;
        type: TypingType;
    }
    export interface MutationTypingCancelArgs {
        conversationId: string;
    }
    export interface MutationAlphaSetTypingArgs {
        conversationId: string;
        type: OptionalNullable<string>;
    }
    export interface MutationBetaRoomCreateArgs {
        kind: SharedRoomKind;
        title: OptionalNullable<string>;
        description: OptionalNullable<string>;
        photoRef: OptionalNullable<ImageRefInput>;
        members: string[];
        message: OptionalNullable<string>;
        listed: OptionalNullable<boolean>;
        organizationId: OptionalNullable<string>;
        channel: OptionalNullable<boolean>;
    }
    export interface MutationBetaRoomUpdateArgs {
        roomId: string;
        input: RoomUpdateInput;
    }
    export interface MutationBetaRoomMoveArgs {
        roomId: string;
        toOrg: string;
    }
    export interface MutationBetaRoomInviteArgs {
        roomId: string;
        invites: RoomInviteInput[];
    }
    export interface MutationBetaRoomKickArgs {
        roomId: string;
        userId: string;
    }
    export interface MutationBetaRoomLeaveArgs {
        roomId: string;
    }
    export interface MutationBetaRoomChangeRoleArgs {
        roomId: string;
        userId: string;
        newRole: RoomMemberRole;
    }
    export interface MutationBetaRoomJoinArgs {
        roomId: string;
    }
    export interface MutationBetaRoomDeclineJoinRequestArgs {
        roomId: string;
        userId: string;
    }
    export interface MutationBetaRoomInviteLinkSendEmailArgs {
        roomId: string;
        inviteRequests: RoomInviteEmailRequest[];
    }
    export interface MutationBetaRoomInviteLinkJoinArgs {
        invite: string;
        isNewUser: OptionalNullable<boolean>;
    }
    export interface MutationBetaRoomInviteLinkRenewArgs {
        roomId: string;
    }
    export interface MutationBetaRoomUpdateUserNotificationSettingsArgs {
        settings: RoomUserNotificaionSettingsInput;
        roomId: string;
    }
    export interface MutationBetaRoomAlterFeaturedArgs {
        roomId: string;
        featured: boolean;
    }
    export interface MutationBetaRoomAlterListedArgs {
        roomId: string;
        listed: boolean;
    }
    export interface MutationUpdateWelcomeMessageArgs {
        roomId: string;
        welcomeMessageIsOn: boolean;
        welcomeMessageSender: OptionalNullable<string>;
        welcomeMessageText: OptionalNullable<string>;
    }
    export interface MutationAlphaSetUserShortNameArgs {
        shortname: string;
    }
    export interface MutationAlphaSetOrgShortNameArgs {
        id: string;
        shortname: string;
    }
    export interface OrganizationContact {
        name: string;
        photo: Nullable<string>;
        photoRef: Nullable<ImageRef>;
        position: Nullable<string>;
        email: Nullable<string>;
        phone: Nullable<string>;
        link: Nullable<string>;
        twitter: Nullable<string>;
    }
    export interface Organization {
        id: string;
        isMine: boolean;
        name: string;
        photo: Nullable<string>;
        website: Nullable<string>;
        websiteTitle: Nullable<string>;
        about: Nullable<string>;
        twitter: Nullable<string>;
        facebook: Nullable<string>;
        linkedin: Nullable<string>;
        location: Nullable<string>;
        betaIsOwner: boolean;
        betaIsAdmin: boolean;
        betaIsPrimary: boolean;
        superAccountId: string;
        alphaIsOwner: boolean;
        alphaOrganizationMembers: OrganizationJoinedMember[];
        alphaOrganizationAdminMembers: OrganizationJoinedMember[];
        alphaOrganizationMemberRequests: OrganizationRequestedMember[];
        alphaFeatured: boolean;
        alphaIsCommunity: boolean;
        betaPublicRooms: SharedRoom[];
        status: string;
        membersCount: number;
        shortname: Nullable<string>;
    }
    export interface OrganizationAlphaOrganizationMembersArgs {
        first: OptionalNullable<number>;
        after: OptionalNullable<string>;
    }
    export interface OrganizationAlphaOrganizationAdminMembersArgs {
        first: OptionalNullable<number>;
        after: OptionalNullable<string>;
    }
    export interface OrganizationProfile {
        id: string;
        name: string;
        photoRef: Nullable<ImageRef>;
        website: Nullable<string>;
        websiteTitle: Nullable<string>;
        about: Nullable<string>;
        twitter: Nullable<string>;
        facebook: Nullable<string>;
        linkedin: Nullable<string>;
        contacts: OrganizationContact[];
        location: Nullable<string>;
        alphaPublished: boolean;
        alphaEditorial: boolean;
        alphaFeatured: boolean;
        alphaIsCommunity: boolean;
        shortname: Nullable<string>;
    }
    export interface CreateOrganizationInput {
        id: Nullable<string>;
        name: string;
        website: Nullable<string>;
        personal: boolean;
        photoRef: Nullable<ImageRefInput>;
        about: Nullable<string>;
        isCommunity: Nullable<boolean>;
    }
    export interface UpdateOrganizationProfileInput {
        name: Nullable<string>;
        photoRef: Nullable<ImageRefInput>;
        website: Nullable<string>;
        websiteTitle: Nullable<string>;
        about: Nullable<string>;
        twitter: Nullable<string>;
        facebook: Nullable<string>;
        linkedin: Nullable<string>;
        location: Nullable<string>;
        contacts: Nullable<ContactPersonInput[]>;
        alphaPublished: Nullable<boolean>;
        alphaEditorial: Nullable<boolean>;
        alphaFeatured: Nullable<boolean>;
    }
    export interface ContactPersonInput {
        name: string;
        photoRef: Nullable<ImageRefInput>;
        position: Nullable<string>;
        email: Nullable<string>;
        phone: Nullable<string>;
        link: Nullable<string>;
        twitter: Nullable<string>;
    }
    export interface OrganizationsEdge {
        node: Organization;
        cursor: string;
    }
    export interface OrganizationsConnection {
        edges: OrganizationsEdge[];
        pageInfo: PageInfo;
    }
    export interface Permissions {
        roles: string[];
    }
    export interface ProfilePrefill {
        firstName: Nullable<string>;
        lastName: Nullable<string>;
        picture: Nullable<string>;
    }
    export interface PushSettings {
        webPushKey: Nullable<string>;
    }
    export type PushType = 'WEB_PUSH' | 'IOS' | 'ANDROID' | 'SAFARI';
    export interface Query {
        lifecheck: Nullable<string>;
        alphaNotificationCounter: NotificationCounter;
        alphaChat: Conversation;
        alphaLoadMessages: ConversationState;
        alphaChatsSearchForCompose: ComposeSearchResult[];
        alphaChatSearch: Nullable<Conversation>;
        alphaGroupConversationMembers: GroupConversationMember[];
        myProfile: Nullable<Profile>;
        alphaInvites: Nullable<Invite[]>;
        alphaInviteInfo: Nullable<InviteInfo>;
        appInvite: string;
        appInviteInfo: Nullable<AppInvite>;
        alphaAppInvite: string;
        alphaAppInviteInfo: Nullable<AppInviteInfo>;
        alphaInvitesHistory: Nullable<InviteHistotyInfo[]>;
        alphaResolveInvite: Nullable<ResolveInviteEntry>;
        debugParseID: DebugID;
        debugCrashQuery: string;
        debugUrlInfo: Nullable<UrlAugmentation>;
        userPresence: DebugUserPresence[];
        debugValidateMessages: string;
        organizationChatsStats: OrganizationChatStats[];
        debugEventsState: DebugEventsState;
        alphaChats: ConversationConnection;
        dialogs: DialogsConnection;
        settings: Settings;
        alphaOrganizationMembers: OrganizationMember[];
        alphaOrganizationInviteLink: Nullable<Invite>;
        alphaOrganizationPublicInvite: Nullable<Invite>;
        superAccounts: SuperAccount[];
        superAccount: SuperAccount;
        superAdmins: SuperAdmin[];
        alphaChatTextSearch: Conversation[];
        betaDialogTextSearch: Dialog[];
        conversationDraft: Nullable<string>;
        alphaDraftMessage: Nullable<string>;
        messages: ModernMessage[];
        message: Nullable<ModernMessage>;
        myApps: AppProfile[];
        userStorage: AppStorageValue[];
        alphaChannelsList: ConversationConnection;
        alphaChannelMembers: ChannelMember[];
        alphaChannelsFeatured: ChannelConversation[];
        alphaChannels: ChannelConversationConnection;
        alphaChannelInviteInfo: Nullable<ChannelInvite>;
        alphaChannelInviteLink: string;
        chatState: ChatUpdateState;
        messageComments: CommentsPeer;
        conversationState: ConversationUpdateState;
        dialogsState: DialogUpdateState;
        envVars: Nullable<EnvVar[]>;
        envVar: Nullable<EnvVar>;
        featureFlags: FeatureFlag[];
        alphaHomeFeed: FeedItem[];
        conference: Conference;
        conferenceMedia: ConferenceMedia;
        myOrganization: Nullable<Organization>;
        myOrganizations: Organization[];
        organization: Organization;
        myOrganizationProfile: OrganizationProfile;
        organizationProfile: OrganizationProfile;
        alphaOrganizations: OrganizationsConnection;
        alphaOrganizationByPrefix: Nullable<Organization>;
        alphaComunityPrefixSearch: OrganizationsConnection;
        myPermissions: Permissions;
        users: User[];
        myProfilePrefill: Nullable<ProfilePrefill>;
        pushSettings: PushSettings;
        sessionState: SessionState;
        me: Nullable<User>;
        user: User;
        userSearch: UserConnection;
        alphaProfiles: UserConnection;
        alphaGlobalSearch: GlobalSearchEntry[];
        featuredGroups: Nullable<SharedRoom[]>;
        featuredCommunities: Nullable<Organization[]>;
        room: Nullable<Room>;
        roomSuper: Nullable<RoomSuper>;
        roomMessages: RoomMessage[];
        roomMembers: RoomMember[];
        roomMember: Nullable<RoomMember>;
        betaRoomSearch: RoomConnection;
        betaRoomInviteInfo: Nullable<RoomInvite>;
        betaRoomInviteLink: string;
        betaAvailableRooms: SharedRoom[];
        betaUserRooms: SharedRoom[];
        betaUserAvailableRooms: SharedRoom[];
        alphaResolveShortName: Nullable<ShortNameDestination>;
    }
    export interface QueryAlphaChatArgs {
        conversationId: OptionalNullable<string>;
        shortName: OptionalNullable<string>;
    }
    export interface QueryAlphaLoadMessagesArgs {
        conversationId: string;
        first: OptionalNullable<number>;
        before: OptionalNullable<string>;
        after: OptionalNullable<string>;
    }
    export interface QueryAlphaChatsSearchForComposeArgs {
        query: OptionalNullable<string>;
        organizations: OptionalNullable<boolean>;
        limit: OptionalNullable<number>;
    }
    export interface QueryAlphaChatSearchArgs {
        members: string[];
    }
    export interface QueryAlphaGroupConversationMembersArgs {
        conversationId: string;
    }
    export interface QueryAlphaInviteInfoArgs {
        key: string;
    }
    export interface QueryAppInviteInfoArgs {
        key: string;
    }
    export interface QueryAlphaAppInviteInfoArgs {
        key: string;
    }
    export interface QueryAlphaResolveInviteArgs {
        key: string;
    }
    export interface QueryDebugParseIDArgs {
        id: string;
    }
    export interface QueryDebugUrlInfoArgs {
        url: string;
    }
    export interface QueryUserPresenceArgs {
        uid: string;
        lastSeenFiveMinute: OptionalNullable<boolean>;
    }
    export interface QueryAlphaChatsArgs {
        first: number;
        after: OptionalNullable<string>;
    }
    export interface QueryDialogsArgs {
        first: number;
        after: OptionalNullable<string>;
    }
    export interface QueryAlphaOrganizationMembersArgs {
        orgId: string;
        first: OptionalNullable<number>;
        after: OptionalNullable<string>;
    }
    export interface QueryAlphaOrganizationInviteLinkArgs {
        organizationId: OptionalNullable<string>;
    }
    export interface QueryAlphaOrganizationPublicInviteArgs {
        organizationId: OptionalNullable<string>;
    }
    export interface QuerySuperAccountArgs {
        id: string;
        viaOrgId: OptionalNullable<boolean>;
    }
    export interface QueryAlphaChatTextSearchArgs {
        query: string;
    }
    export interface QueryBetaDialogTextSearchArgs {
        query: string;
    }
    export interface QueryConversationDraftArgs {
        conversationId: string;
    }
    export interface QueryAlphaDraftMessageArgs {
        conversationId: string;
    }
    export interface QueryMessagesArgs {
        chatId: string;
        first: number;
        before: OptionalNullable<string>;
    }
    export interface QueryMessageArgs {
        messageId: string;
    }
    export interface QueryUserStorageArgs {
        namespace: string;
        keys: string[];
    }
    export interface QueryAlphaChannelsListArgs {
        first: number;
        after: OptionalNullable<string>;
    }
    export interface QueryAlphaChannelMembersArgs {
        channelId: string;
    }
    export interface QueryAlphaChannelsArgs {
        query: OptionalNullable<string>;
        first: number;
        after: OptionalNullable<string>;
        page: OptionalNullable<number>;
        sort: OptionalNullable<string>;
    }
    export interface QueryAlphaChannelInviteInfoArgs {
        uuid: string;
    }
    export interface QueryAlphaChannelInviteLinkArgs {
        channelId: string;
    }
    export interface QueryChatStateArgs {
        chatId: string;
    }
    export interface QueryMessageCommentsArgs {
        messageId: string;
    }
    export interface QueryConversationStateArgs {
        id: string;
    }
    export interface QueryEnvVarArgs {
        name: string;
    }
    export interface QueryConferenceArgs {
        id: string;
    }
    export interface QueryConferenceMediaArgs {
        id: string;
        peerId: string;
    }
    export interface QueryOrganizationArgs {
        id: string;
    }
    export interface QueryOrganizationProfileArgs {
        id: string;
    }
    export interface QueryAlphaOrganizationsArgs {
        query: OptionalNullable<string>;
        all: OptionalNullable<boolean>;
        prefix: OptionalNullable<string>;
        sort: OptionalNullable<string>;
        first: number;
        after: OptionalNullable<string>;
        page: OptionalNullable<number>;
    }
    export interface QueryAlphaOrganizationByPrefixArgs {
        query: OptionalNullable<string>;
    }
    export interface QueryAlphaComunityPrefixSearchArgs {
        query: OptionalNullable<string>;
        sort: OptionalNullable<string>;
        first: number;
        after: OptionalNullable<string>;
        page: OptionalNullable<number>;
    }
    export interface QueryUsersArgs {
        query: string;
    }
    export interface QueryUserArgs {
        id: string;
    }
    export interface QueryUserSearchArgs {
        query: OptionalNullable<string>;
        first: number;
        after: OptionalNullable<string>;
        page: OptionalNullable<number>;
        sort: OptionalNullable<string>;
    }
    export interface QueryAlphaProfilesArgs {
        query: OptionalNullable<string>;
        first: number;
        after: OptionalNullable<string>;
        page: OptionalNullable<number>;
        sort: OptionalNullable<string>;
    }
    export interface QueryAlphaGlobalSearchArgs {
        query: string;
    }
    export interface QueryRoomArgs {
        id: string;
    }
    export interface QueryRoomSuperArgs {
        id: string;
    }
    export interface QueryRoomMessagesArgs {
        roomId: string;
        first: OptionalNullable<number>;
        before: OptionalNullable<string>;
    }
    export interface QueryRoomMembersArgs {
        roomId: string;
        first: OptionalNullable<number>;
        after: OptionalNullable<string>;
    }
    export interface QueryRoomMemberArgs {
        roomId: string;
        memberId: string;
    }
    export interface QueryBetaRoomSearchArgs {
        query: OptionalNullable<string>;
        first: number;
        after: OptionalNullable<string>;
        page: OptionalNullable<number>;
        sort: OptionalNullable<string>;
    }
    export interface QueryBetaRoomInviteInfoArgs {
        invite: string;
    }
    export interface QueryBetaRoomInviteLinkArgs {
        roomId: string;
    }
    export interface QueryBetaUserRoomsArgs {
        limit: OptionalNullable<number>;
        after: OptionalNullable<string>;
    }
    export interface QueryBetaUserAvailableRoomsArgs {
        limit: OptionalNullable<number>;
        after: OptionalNullable<string>;
    }
    export interface QueryAlphaResolveShortNameArgs {
        shortname: string;
    }
    export interface SessionState {
        isLoggedIn: boolean;
        isProfileCreated: boolean;
        isActivated: boolean;
        isAccountExists: boolean;
        isCompleted: boolean;
        isBlocked: boolean;
        isAccountPicked: boolean;
        isAccountActivated: boolean;
    }
    export interface Subscription {
        lifecheck: Nullable<string>;
        debugEvents: DebugEvent;
        settingsWatch: Settings;
        watchSettings: Settings;
        alphaSubscribeChatOnline: OnlineEvent;
        alphaSubscribeOnline: OnlineEvent;
        chatOnlinesCount: ChatOnlineEvent;
        chatUpdates: ChatUpdateContainer;
        commentUpdates: Nullable<CommentUpdateContainer>;
        conversationUpdates: ConversationUpdateContainer;
        dialogsUpdates: DialogUpdateContainer;
        alphaConferenceWatch: Conference;
        alphaConferenceMediaWatch: ConferenceMedia;
        typings: TypingEvent;
        conversationTypings: TypingEvent;
        alphaSubscribeTypings: TypingEvent;
        alphaSubscribeChatTypings: TypingEvent;
    }
    export interface SubscriptionDebugEventsArgs {
        fromState: OptionalNullable<string>;
        eventsCount: number;
        randomDelays: boolean;
        seed: string;
    }
    export interface SubscriptionAlphaSubscribeChatOnlineArgs {
        conversations: string[];
    }
    export interface SubscriptionAlphaSubscribeOnlineArgs {
        users: string[];
    }
    export interface SubscriptionChatOnlinesCountArgs {
        chatId: string;
    }
    export interface SubscriptionChatUpdatesArgs {
        chatId: string;
        fromState: OptionalNullable<string>;
    }
    export interface SubscriptionCommentUpdatesArgs {
        peerId: string;
        fromState: OptionalNullable<string>;
    }
    export interface SubscriptionConversationUpdatesArgs {
        conversationId: string;
        fromState: OptionalNullable<string>;
    }
    export interface SubscriptionDialogsUpdatesArgs {
        fromState: OptionalNullable<string>;
    }
    export interface SubscriptionAlphaConferenceWatchArgs {
        id: string;
    }
    export interface SubscriptionAlphaConferenceMediaWatchArgs {
        id: string;
        peerId: string;
    }
    export interface SubscriptionConversationTypingsArgs {
        conversationId: string;
    }
    export interface SubscriptionAlphaSubscribeChatTypingsArgs {
        conversationId: string;
    }
    export interface TypingEvent {
        conversation: Conversation;
        chat: Room;
        user: User;
        type: TypingType;
        cancel: boolean;
    }
    export type TypingType = 'TEXT' | 'PHOTO' | 'FILE';
    export interface User {
        id: string;
        isYou: boolean;
        isBot: boolean;
        name: string;
        firstName: string;
        lastName: Nullable<string>;
        photo: Nullable<string>;
        phone: Nullable<string>;
        email: Nullable<string>;
        website: Nullable<string>;
        about: Nullable<string>;
        location: Nullable<string>;
        linkedin: Nullable<string>;
        twitter: Nullable<string>;
        channelsJoined: ChannelConversation[];
        photoRef: Nullable<ImageRef>;
        picture: Nullable<string>;
        pictureRef: Nullable<ImageRef>;
        alphaRole: Nullable<string>;
        alphaLinkedin: Nullable<string>;
        alphaTwitter: Nullable<string>;
        alphaLocations: Nullable<string[]>;
        online: boolean;
        active: boolean;
        lastSeen: Nullable<string>;
        organizations: Organization[];
        primaryOrganization: Nullable<Organization>;
        alphaPrimaryOrganization: Nullable<Organization>;
        shortname: Nullable<string>;
    }
    export interface UserEdge {
        node: User;
        cursor: string;
    }
    export interface UserConnection {
        edges: UserEdge[];
        pageInfo: PageInfo;
    }
    export type GlobalSearchEntry = Organization | User | SharedRoom;
    export type Room = PrivateRoom | SharedRoom;
    export interface PrivateRoom {
        id: string;
        user: User;
        settings: RoomUserNotificaionSettings;
        pinnedMessage: Nullable<ModernMessage>;
    }
    export type SharedRoomKind = 'INTERNAL' | 'PUBLIC' | 'GROUP';
    export type SharedRoomMembershipStatus = 'MEMBER' | 'REQUESTED' | 'LEFT' | 'KICKED' | 'NONE';
    export type RoomMemberRole = 'OWNER' | 'ADMIN' | 'MEMBER';
    export interface WelcomeMessage {
        isOn: boolean;
        sender: Nullable<User>;
        message: Nullable<string>;
    }
    export interface SharedRoom {
        id: string;
        kind: SharedRoomKind;
        isChannel: boolean;
        title: string;
        photo: string;
        socialImage: Nullable<string>;
        description: Nullable<string>;
        pinnedMessage: Nullable<ModernMessage>;
        welcomeMessage: Nullable<WelcomeMessage>;
        organization: Nullable<Organization>;
        membersCount: Nullable<number>;
        members: RoomMember[];
        requests: Nullable<RoomMember[]>;
        membership: SharedRoomMembershipStatus;
        role: RoomMemberRole;
        settings: RoomUserNotificaionSettings;
        canEdit: boolean;
        canSendMessage: boolean;
        archived: boolean;
    }
    export interface SharedRoomMembersArgs {
        first: OptionalNullable<number>;
        after: OptionalNullable<string>;
    }
    export interface RoomSuper {
        id: string;
        featured: boolean;
        listed: boolean;
    }
    export interface RoomUpdateInput {
        title: Nullable<string>;
        photoRef: Nullable<ImageRefInput>;
        description: Nullable<string>;
        socialImageRef: Nullable<ImageRefInput>;
        kind: Nullable<SharedRoomKind>;
    }
    export interface UserMention {
        user: User;
    }
    export interface SharedRoomMention {
        sharedRoom: SharedRoom;
    }
    export type Mention = UserMention | SharedRoomMention;
    export interface RoomMessage {
        id: string;
        message: Nullable<string>;
        file: Nullable<string>;
        fileMetadata: Nullable<FileMetadata>;
        filePreview: Nullable<string>;
        sender: User;
        date: Date;
        repeatKey: Nullable<string>;
        isService: boolean;
        serviceMetadata: Nullable<ServiceMetadata>;
        urlAugmentation: Nullable<UrlAugmentation>;
        edited: boolean;
        reactions: MessageReaction[];
        replyMessages: Nullable<RoomMessage[]>;
        plainText: Nullable<string>;
        mentions: Nullable<User[]>;
        alphaAttachments: MessageAttachment[];
        alphaButtons: Nullable<MessageButton[]>[];
        alphaType: MessageType;
        alphaTitle: Nullable<string>;
        alphaPostType: Nullable<PostMessageType>;
        alphaMentions: Nullable<Mention[]>;
    }
    export interface RoomMember {
        user: User;
        role: RoomMemberRole;
        membership: SharedRoomMembershipStatus;
        invitedBy: User;
        canKick: boolean;
    }
    export interface RoomUserNotificaionSettings {
        id: string;
        mute: Nullable<boolean>;
    }
    export interface RoomUserNotificaionSettingsInput {
        mute: Nullable<boolean>;
    }
    export interface RoomInviteInput {
        userId: string;
        role: RoomMemberRole;
    }
    export interface RoomInviteEmailRequest {
        email: string;
        emailText: Nullable<string>;
        firstName: Nullable<string>;
        lastName: Nullable<string>;
    }
    export interface RoomConnectionEdge {
        node: SharedRoom;
        cursor: string;
    }
    export interface RoomConnection {
        edges: RoomConnectionEdge[];
        pageInfo: PageInfo;
    }
    export interface RoomInvite {
        id: string;
        room: SharedRoom;
        invitedByUser: User;
    }
    export type ShortNameDestination = User | Organization;
}

export interface GQLResolver {
    ConversationSettings?: ComplexTypedResolver<GQL.ConversationSettings, GQLRoots.ConversationSettingsRoot, {}, {}>;
    AnonymousConversation?: ComplexTypedResolver<GQL.AnonymousConversation, GQLRoots.AnonymousConversationRoot, {topMessage: Nullable<GQLRoots.ConversationMessageRoot>, settings: GQLRoots.ConversationSettingsRoot}, {}>;
    SharedConversation?: ComplexTypedResolver<GQL.SharedConversation, GQLRoots.SharedConversationRoot, {organizations: GQLRoots.OrganizationRoot[], topMessage: Nullable<GQLRoots.ConversationMessageRoot>, organization: Nullable<GQLRoots.OrganizationRoot>, settings: GQLRoots.ConversationSettingsRoot}, {}>;
    PrivateConversation?: ComplexTypedResolver<GQL.PrivateConversation, GQLRoots.PrivateConversationRoot, {user: GQLRoots.UserRoot, topMessage: Nullable<GQLRoots.ConversationMessageRoot>, settings: GQLRoots.ConversationSettingsRoot}, {}>;
    GroupConversation?: ComplexTypedResolver<GQL.GroupConversation, GQLRoots.GroupConversationRoot, {members: GQLRoots.UserRoot[], topMessage: Nullable<GQLRoots.ConversationMessageRoot>, settings: GQLRoots.ConversationSettingsRoot, photoRef: Nullable<GQLRoots.ImageRefRoot>, pinnedMessage: Nullable<GQLRoots.ConversationMessageRoot>}, {}>;
    InviteServiceMetadata?: ComplexTypedResolver<GQL.InviteServiceMetadata, GQLRoots.InviteServiceMetadataRoot, {users: Nullable<GQLRoots.UserRoot[]>, invitedBy: GQLRoots.UserRoot}, {}>;
    KickServiceMetadata?: ComplexTypedResolver<GQL.KickServiceMetadata, GQLRoots.KickServiceMetadataRoot, {user: GQLRoots.UserRoot, kickedBy: GQLRoots.UserRoot}, {}>;
    TitleChangeServiceMetadata?: ComplexTypedResolver<GQL.TitleChangeServiceMetadata, GQLRoots.TitleChangeServiceMetadataRoot, {}, {}>;
    PhotoChangeServiceMetadata?: ComplexTypedResolver<GQL.PhotoChangeServiceMetadata, GQLRoots.PhotoChangeServiceMetadataRoot, {photoRef: Nullable<GQLRoots.ImageRefRoot>}, {}>;
    PostRespondServiceMetadata?: ComplexTypedResolver<GQL.PostRespondServiceMetadata, GQLRoots.PostRespondServiceMetadataRoot, {post: GQLRoots.RoomMessageRoot, postRoom: GQLRoots.RoomRoot, responder: GQLRoots.UserRoot}, {}>;
    UrlAugmentationExtra?: UnionTypeResolver<GQLRoots.UrlAugmentationExtraRoot, 'User' | 'Organization' | 'ChannelConversation'>;
    UrlAugmentation?: ComplexTypedResolver<GQL.UrlAugmentation, GQLRoots.UrlAugmentationRoot, {photo: Nullable<GQLRoots.ImageRefRoot>, imageInfo: Nullable<GQLRoots.FileMetadataRoot>, iconRef: Nullable<GQLRoots.ImageRefRoot>, iconInfo: Nullable<GQLRoots.FileMetadataRoot>, extra: Nullable<GQLRoots.UrlAugmentationExtraRoot>}, {}>;
    ServiceMetadata?: UnionTypeResolver<GQLRoots.ServiceMetadataRoot, 'InviteServiceMetadata' | 'KickServiceMetadata' | 'TitleChangeServiceMetadata' | 'PhotoChangeServiceMetadata' | 'PostRespondServiceMetadata'>;
    ConversationMessage?: ComplexTypedResolver<GQL.ConversationMessage, GQLRoots.ConversationMessageRoot, {fileMetadata: Nullable<GQLRoots.FileMetadataRoot>, sender: GQLRoots.UserRoot, serviceMetadata: Nullable<GQLRoots.ServiceMetadataRoot>, urlAugmentation: Nullable<GQLRoots.UrlAugmentationRoot>, reactions: GQLRoots.MessageReactionRoot[], replyMessages: Nullable<GQLRoots.ConversationMessageRoot[]>, mentions: Nullable<GQLRoots.UserRoot[]>, alphaAttachments: GQLRoots.MessageAttachmentRoot[], alphaButtons: Nullable<GQLRoots.MessageButtonRoot[]>[], alphaMentions: Nullable<GQLRoots.MentionRoot[]>}, {}>;
    FileMetadata?: ComplexTypedResolver<GQL.FileMetadata, GQLRoots.FileMetadataRoot, {}, {}>;
    StickerPack?: ComplexTypedResolver<GQL.StickerPack, GQLRoots.StickerPackRoot, {stickers: Nullable<GQLRoots.StickerRoot[]>}, {}>;
    Sticker?: ComplexTypedResolver<GQL.Sticker, GQLRoots.StickerRoot, {meta: GQLRoots.FileMetadataRoot}, {}>;
    ConversationEventSimpleBatch?: ComplexTypedResolver<GQL.ConversationEventSimpleBatch, GQLRoots.ConversationEventSimpleBatchRoot, {events: GQLRoots.ConversationEventRoot[]}, {}>;
    ConversationEventMessage?: ComplexTypedResolver<GQL.ConversationEventMessage, GQLRoots.ConversationEventMessageRoot, {message: GQLRoots.ConversationMessageRoot}, {}>;
    ConversationEventEditMessage?: ComplexTypedResolver<GQL.ConversationEventEditMessage, GQLRoots.ConversationEventEditMessageRoot, {message: GQLRoots.ConversationMessageRoot}, {}>;
    ConversationEventDelete?: ComplexTypedResolver<GQL.ConversationEventDelete, GQLRoots.ConversationEventDeleteRoot, {}, {}>;
    ConversationEventNewMembers?: ComplexTypedResolver<GQL.ConversationEventNewMembers, GQLRoots.ConversationEventNewMembersRoot, {users: Nullable<GQLRoots.UserRoot[]>, invitedBy: GQLRoots.UserRoot}, {}>;
    ConversationEventKick?: ComplexTypedResolver<GQL.ConversationEventKick, GQLRoots.ConversationEventKickRoot, {user: GQLRoots.UserRoot, kickedBy: GQLRoots.UserRoot}, {}>;
    ConversationEventTitle?: ComplexTypedResolver<GQL.ConversationEventTitle, GQLRoots.ConversationEventTitleRoot, {}, {}>;
    ConversationEventUpdate?: ComplexTypedResolver<GQL.ConversationEventUpdate, GQLRoots.ConversationEventUpdateRoot, {chat: GQLRoots.ConversationRoot}, {}>;
    ConversationEventUpdateRole?: ComplexTypedResolver<GQL.ConversationEventUpdateRole, GQLRoots.ConversationEventUpdateRoleRoot, {user: GQLRoots.UserRoot}, {}>;
    ConversationState?: ComplexTypedResolver<GQL.ConversationState, GQLRoots.ConversationStateRoot, {messages: GQLRoots.ConversationMessageRoot[]}, {}>;
    ConversationConnection?: ComplexTypedResolver<GQL.ConversationConnection, GQLRoots.ConversationConnectionRoot, {conversations: GQLRoots.ConversationRoot[], counter: GQLRoots.NotificationCounterRoot}, {}>;
    NotificationCounter?: ComplexTypedResolver<GQL.NotificationCounter, GQLRoots.NotificationCounterRoot, {}, {}>;
    ChatReadResult?: ComplexTypedResolver<GQL.ChatReadResult, GQLRoots.ChatReadResultRoot, {conversation: GQLRoots.ConversationRoot, counter: GQLRoots.NotificationCounterRoot}, {}>;
    ComposeSearchResult?: UnionTypeResolver<GQLRoots.ComposeSearchResultRoot, 'User' | 'Organization'>;
    GroupConversationMember?: ComplexTypedResolver<GQL.GroupConversationMember, GQLRoots.GroupConversationMemberRoot, {user: GQLRoots.UserRoot}, {}>;
    GroupChatUpdateResponse?: ComplexTypedResolver<GQL.GroupChatUpdateResponse, GQLRoots.GroupChatUpdateResponseRoot, {chat: GQLRoots.ConversationRoot, chatEventMessage: Nullable<GQLRoots.ConversationEventMessageRoot>, chatEvent: Nullable<GQLRoots.ConversationEventRoot>}, {}>;
    ConversationUpdateResponse?: ComplexTypedResolver<GQL.ConversationUpdateResponse, GQLRoots.ConversationUpdateResponseRoot, {chat: GQLRoots.ConversationRoot}, {}>;
    ConversationBlockedUser?: ComplexTypedResolver<GQL.ConversationBlockedUser, GQLRoots.ConversationBlockedUserRoot, {user: GQLRoots.UserRoot, blockedBy: GQLRoots.UserRoot}, {}>;
    Profile?: ComplexTypedResolver<GQL.Profile, GQLRoots.ProfileRoot, {photoRef: Nullable<GQLRoots.ImageRefRoot>, alphaInvitedBy: Nullable<GQLRoots.UserRoot>, primaryOrganization: Nullable<GQLRoots.OrganizationRoot>, alphaPrimaryOrganization: Nullable<GQLRoots.OrganizationRoot>}, {}>;
    AlphaSignupData?: ComplexTypedResolver<GQL.AlphaSignupData, GQLRoots.AlphaSignupDataRoot, {user: Nullable<GQLRoots.UserRoot>, organization: Nullable<GQLRoots.OrganizationRoot>}, {}>;
    Invite?: ComplexTypedResolver<GQL.Invite, GQLRoots.InviteRoot, {}, {}>;
    InviteInfo?: ComplexTypedResolver<GQL.InviteInfo, GQLRoots.InviteInfoRoot, {photoRef: Nullable<GQLRoots.ImageRefRoot>, creator: Nullable<GQLRoots.UserRoot>, organization: Nullable<GQLRoots.OrganizationRoot>}, {}>;
    AppInvite?: ComplexTypedResolver<GQL.AppInvite, GQLRoots.AppInviteRoot, {inviter: GQLRoots.UserRoot}, {}>;
    AppInviteInfo?: ComplexTypedResolver<GQL.AppInviteInfo, GQLRoots.AppInviteInfoRoot, {inviter: GQLRoots.UserRoot}, {}>;
    InviteHistotyInfo?: ComplexTypedResolver<GQL.InviteHistotyInfo, GQLRoots.InviteHistotyInfoRoot, {acceptedBy: Nullable<GQLRoots.UserRoot>}, {}>;
    ResolveInviteEntry?: UnionTypeResolver<GQLRoots.ResolveInviteEntryRoot, 'InviteInfo' | 'AppInvite' | 'RoomInvite'>;
    Reaction?: ComplexTypedResolver<GQL.Reaction, GQLRoots.ReactionRoot, {user: GQLRoots.UserRoot}, {}>;
    Message?: ComplexTypedResolver<GQL.Message, GQLRoots.MessageRoot, {sender: GQLRoots.UserRoot, quoted: GQLRoots.MessageRoot[], alphaReactions: GQLRoots.ReactionRoot[]}, {}>;
    DebugID?: ComplexTypedResolver<GQL.DebugID, GQLRoots.DebugIDRoot, {}, {}>;
    DebugUserPresence?: ComplexTypedResolver<GQL.DebugUserPresence, GQLRoots.DebugUserPresenceRoot, {user: GQLRoots.UserRoot}, {}>;
    OrganizationChatStats?: ComplexTypedResolver<GQL.OrganizationChatStats, GQLRoots.OrganizationChatStatsRoot, {org: GQLRoots.OrganizationRoot, chat: GQLRoots.SharedRoomRoot}, {}>;
    DebugEventsState?: ComplexTypedResolver<GQL.DebugEventsState, GQLRoots.DebugEventsStateRoot, {}, {}>;
    DebugEvent?: ComplexTypedResolver<GQL.DebugEvent, GQLRoots.DebugEventRoot, {}, {}>;
    Dialog?: ComplexTypedResolver<GQL.Dialog, GQLRoots.DialogRoot, {topMessage: Nullable<GQLRoots.MessageRoot>, betaTopMessage: Nullable<GQLRoots.RoomMessageRoot>, alphaTopMessage: Nullable<GQLRoots.ModernMessageRoot>}, {}>;
    DialogsConnection?: ComplexTypedResolver<GQL.DialogsConnection, GQLRoots.DialogsConnectionRoot, {items: GQLRoots.DialogRoot[]}, {}>;
    Settings?: ComplexTypedResolver<GQL.Settings, GQLRoots.SettingsRoot, {}, {}>;
    OrganizationIvitedMember?: ComplexTypedResolver<GQL.OrganizationIvitedMember, GQLRoots.OrganizationIvitedMemberRoot, {}, {}>;
    OrganizationJoinedMember?: ComplexTypedResolver<GQL.OrganizationJoinedMember, GQLRoots.OrganizationJoinedMemberRoot, {user: GQLRoots.UserRoot}, {}>;
    OrganizationRequestedMember?: ComplexTypedResolver<GQL.OrganizationRequestedMember, GQLRoots.OrganizationRequestedMemberRoot, {user: GQLRoots.UserRoot}, {}>;
    OnlineEvent?: ComplexTypedResolver<GQL.OnlineEvent, GQLRoots.OnlineEventRoot, {user: GQLRoots.UserRoot}, {}>;
    ChatOnlineEvent?: ComplexTypedResolver<GQL.ChatOnlineEvent, GQLRoots.ChatOnlineEventRoot, {}, {}>;
    SuperAccount?: ComplexTypedResolver<GQL.SuperAccount, GQLRoots.SuperAccountRoot, {members: GQLRoots.UserRoot[], features: GQLRoots.FeatureFlagRoot[], createdBy: Nullable<GQLRoots.UserRoot>}, {}>;
    SuperAdmin?: ComplexTypedResolver<GQL.SuperAdmin, GQLRoots.SuperAdminRoot, {user: GQLRoots.UserRoot}, {}>;
    ServiceMessage?: ComplexTypedResolver<GQL.ServiceMessage, GQLRoots.ServiceMessageRoot, {sender: GQLRoots.UserRoot, spans: GQLRoots.MessageSpanRoot[], serviceMetadata: Nullable<GQLRoots.ServiceMetadataRoot>}, {}>;
    GeneralMessage?: ComplexTypedResolver<GQL.GeneralMessage, GQLRoots.GeneralMessageRoot, {sender: GQLRoots.UserRoot, reactions: GQLRoots.ModernMessageReactionRoot[], spans: GQLRoots.MessageSpanRoot[], attachments: GQLRoots.ModernMessageAttachmentRoot[], quotedMessages: GQLRoots.ModernMessageRoot[]}, {}>;
    Image?: ComplexTypedResolver<GQL.Image, GQLRoots.ImageRoot, {metadata: Nullable<GQLRoots.FileMetadataRoot>}, {}>;
    MessageRichAttachment?: ComplexTypedResolver<GQL.MessageRichAttachment, GQLRoots.MessageRichAttachmentRoot, {icon: Nullable<GQLRoots.ImageRoot>, image: Nullable<GQLRoots.ImageRoot>, keyboard: Nullable<GQLRoots.MessageKeyboardRoot>}, {}>;
    MessageAttachmentFile?: ComplexTypedResolver<GQL.MessageAttachmentFile, GQLRoots.MessageAttachmentFileRoot, {fileMetadata: GQLRoots.FileMetadataRoot}, {}>;
    MessageAttachmentPost?: ComplexTypedResolver<GQL.MessageAttachmentPost, GQLRoots.MessageAttachmentPostRoot, {post: GQLRoots.FeedItemRoot}, {}>;
    MessageKeyboard?: ComplexTypedResolver<GQL.MessageKeyboard, GQLRoots.MessageKeyboardRoot, {buttons: Nullable<GQLRoots.ModernMessageButtonRoot[]>[]}, {}>;
    ModernMessageButton?: ComplexTypedResolver<GQL.ModernMessageButton, GQLRoots.ModernMessageButtonRoot, {}, {}>;
    ModernMessageReaction?: ComplexTypedResolver<GQL.ModernMessageReaction, GQLRoots.ModernMessageReactionRoot, {user: GQLRoots.UserRoot}, {}>;
    MessageSpanUserMention?: ComplexTypedResolver<GQL.MessageSpanUserMention, GQLRoots.MessageSpanUserMentionRoot, {user: GQLRoots.UserRoot}, {}>;
    MessageSpanMultiUserMention?: ComplexTypedResolver<GQL.MessageSpanMultiUserMention, GQLRoots.MessageSpanMultiUserMentionRoot, {users: GQLRoots.UserRoot[]}, {}>;
    MessageSpanRoomMention?: ComplexTypedResolver<GQL.MessageSpanRoomMention, GQLRoots.MessageSpanRoomMentionRoot, {room: GQLRoots.RoomRoot}, {}>;
    MessageSpanLink?: ComplexTypedResolver<GQL.MessageSpanLink, GQLRoots.MessageSpanLinkRoot, {}, {}>;
    MessageSpanBold?: ComplexTypedResolver<GQL.MessageSpanBold, GQLRoots.MessageSpanBoldRoot, {}, {}>;
    MessageSpanItalic?: ComplexTypedResolver<GQL.MessageSpanItalic, GQLRoots.MessageSpanItalicRoot, {}, {}>;
    MessageSpanIrony?: ComplexTypedResolver<GQL.MessageSpanIrony, GQLRoots.MessageSpanIronyRoot, {}, {}>;
    MessageSpanInlineCode?: ComplexTypedResolver<GQL.MessageSpanInlineCode, GQLRoots.MessageSpanInlineCodeRoot, {}, {}>;
    MessageSpanCodeBlock?: ComplexTypedResolver<GQL.MessageSpanCodeBlock, GQLRoots.MessageSpanCodeBlockRoot, {}, {}>;
    MessageSpanInsane?: ComplexTypedResolver<GQL.MessageSpanInsane, GQLRoots.MessageSpanInsaneRoot, {}, {}>;
    MessageSpanLoud?: ComplexTypedResolver<GQL.MessageSpanLoud, GQLRoots.MessageSpanLoudRoot, {}, {}>;
    MessageSpanRotating?: ComplexTypedResolver<GQL.MessageSpanRotating, GQLRoots.MessageSpanRotatingRoot, {}, {}>;
    MessageSpanDate?: ComplexTypedResolver<GQL.MessageSpanDate, GQLRoots.MessageSpanDateRoot, {}, {}>;
    PageInfo?: ComplexTypedResolver<GQL.PageInfo, GQLRoots.PageInfoRoot, {}, {}>;
    Task?: ComplexTypedResolver<GQL.Task, GQLRoots.TaskRoot, {}, {}>;
    ImageCrop?: ComplexTypedResolver<GQL.ImageCrop, GQLRoots.ImageCropRoot, {}, {}>;
    ImageRef?: ComplexTypedResolver<GQL.ImageRef, GQLRoots.ImageRefRoot, {crop: Nullable<GQLRoots.ImageCropRoot>}, {}>;
    Range?: ComplexTypedResolver<GQL.Range, GQLRoots.RangeRoot, {}, {}>;
    AppStorageValue?: ComplexTypedResolver<GQL.AppStorageValue, GQLRoots.AppStorageValueRoot, {}, {}>;
    AppProfile?: ComplexTypedResolver<GQL.AppProfile, GQLRoots.AppProfileRoot, {photoRef: Nullable<GQLRoots.ImageRefRoot>, token: GQLRoots.AppTokenRoot}, {}>;
    AppToken?: ComplexTypedResolver<GQL.AppToken, GQLRoots.AppTokenRoot, {}, {}>;
    AppChat?: ComplexTypedResolver<GQL.AppChat, GQLRoots.AppChatRoot, {chat: GQLRoots.RoomRoot}, {}>;
    ChannelConversation?: ComplexTypedResolver<GQL.ChannelConversation, GQLRoots.ChannelConversationRoot, {members: GQLRoots.UserRoot[], topMessage: Nullable<GQLRoots.ConversationMessageRoot>, settings: GQLRoots.ConversationSettingsRoot, organization: Nullable<GQLRoots.OrganizationRoot>, photoRef: Nullable<GQLRoots.ImageRefRoot>, socialImageRef: Nullable<GQLRoots.ImageRefRoot>, pinnedMessage: Nullable<GQLRoots.ConversationMessageRoot>}, {}>;
    ChannelMemberOrg?: ComplexTypedResolver<GQL.ChannelMemberOrg, GQLRoots.ChannelMemberOrgRoot, {organization: GQLRoots.OrganizationRoot}, {}>;
    ChannelMember?: ComplexTypedResolver<GQL.ChannelMember, GQLRoots.ChannelMemberRoot, {user: GQLRoots.UserRoot}, {}>;
    ChannelInvite?: ComplexTypedResolver<GQL.ChannelInvite, GQLRoots.ChannelInviteRoot, {channel: GQLRoots.ChannelConversationRoot, invitedByUser: GQLRoots.UserRoot}, {}>;
    ChannelOrgInvite?: ComplexTypedResolver<GQL.ChannelOrgInvite, GQLRoots.ChannelOrgInviteRoot, {channel: GQLRoots.ChannelConversationRoot, invitedByOrg: GQLRoots.OrganizationRoot, invitedByUser: GQLRoots.UserRoot}, {}>;
    ChannelJoinRequestOrg?: ComplexTypedResolver<GQL.ChannelJoinRequestOrg, GQLRoots.ChannelJoinRequestOrgRoot, {organization: GQLRoots.OrganizationRoot, user: GQLRoots.UserRoot}, {}>;
    ChannelConversationConnectionEdge?: ComplexTypedResolver<GQL.ChannelConversationConnectionEdge, GQLRoots.ChannelConversationConnectionEdgeRoot, {node: GQLRoots.ChannelConversationRoot}, {}>;
    ChannelConversationConnection?: ComplexTypedResolver<GQL.ChannelConversationConnection, GQLRoots.ChannelConversationConnectionRoot, {edges: GQLRoots.ChannelConversationConnectionEdgeRoot[], pageInfo: GQLRoots.PageInfoRoot}, {}>;
    ChatUpdateSingle?: ComplexTypedResolver<GQL.ChatUpdateSingle, GQLRoots.ChatUpdateSingleRoot, {update: GQLRoots.ChatUpdateRoot}, {}>;
    ChatUpdateBatch?: ComplexTypedResolver<GQL.ChatUpdateBatch, GQLRoots.ChatUpdateBatchRoot, {updates: GQLRoots.ChatUpdateRoot[]}, {}>;
    ChatUpdateContainer?: UnionTypeResolver<GQLRoots.ChatUpdateContainerRoot, 'ChatUpdateSingle' | 'ChatUpdateBatch'>;
    ChatUpdate?: UnionTypeResolver<GQLRoots.ChatUpdateRoot, 'ChatUpdated' | 'ChatMessageReceived' | 'ChatMessageUpdated' | 'ChatMessageDeleted' | 'ChatLostAccess'>;
    ChatUpdated?: ComplexTypedResolver<GQL.ChatUpdated, GQLRoots.ChatUpdatedRoot, {chat: GQLRoots.RoomRoot, by: GQLRoots.UserRoot}, {}>;
    ChatMessageReceived?: ComplexTypedResolver<GQL.ChatMessageReceived, GQLRoots.ChatMessageReceivedRoot, {message: GQLRoots.ModernMessageRoot}, {}>;
    ChatMessageUpdated?: ComplexTypedResolver<GQL.ChatMessageUpdated, GQLRoots.ChatMessageUpdatedRoot, {message: GQLRoots.ModernMessageRoot}, {}>;
    ChatMessageDeleted?: ComplexTypedResolver<GQL.ChatMessageDeleted, GQLRoots.ChatMessageDeletedRoot, {message: GQLRoots.ModernMessageRoot}, {}>;
    ChatUpdateState?: ComplexTypedResolver<GQL.ChatUpdateState, GQLRoots.ChatUpdateStateRoot, {}, {}>;
    ChatLostAccess?: ComplexTypedResolver<GQL.ChatLostAccess, GQLRoots.ChatLostAccessRoot, {}, {}>;
    CommentUpdatesState?: ComplexTypedResolver<GQL.CommentUpdatesState, GQLRoots.CommentUpdatesStateRoot, {}, {}>;
    CommentUpdateSingle?: ComplexTypedResolver<GQL.CommentUpdateSingle, GQLRoots.CommentUpdateSingleRoot, {update: GQLRoots.CommentUpdateRoot}, {}>;
    CommentUpdateBatch?: ComplexTypedResolver<GQL.CommentUpdateBatch, GQLRoots.CommentUpdateBatchRoot, {updates: GQLRoots.CommentUpdateRoot[]}, {}>;
    CommentUpdate?: UnionTypeResolver<GQLRoots.CommentUpdateRoot, 'CommentReceived' | 'CommentUpdated'>;
    CommentReceived?: ComplexTypedResolver<GQL.CommentReceived, GQLRoots.CommentReceivedRoot, {comment: GQLRoots.CommentEntryRoot}, {}>;
    CommentUpdated?: ComplexTypedResolver<GQL.CommentUpdated, GQLRoots.CommentUpdatedRoot, {comment: GQLRoots.CommentEntryRoot}, {}>;
    CommentUpdateContainer?: UnionTypeResolver<GQLRoots.CommentUpdateContainerRoot, 'CommentUpdateSingle' | 'CommentUpdateBatch'>;
    CommentsPeer?: ComplexTypedResolver<GQL.CommentsPeer, GQLRoots.CommentsPeerRoot, {state: GQLRoots.CommentUpdatesStateRoot, comments: GQLRoots.CommentEntryRoot[]}, {}>;
    CommentEntry?: ComplexTypedResolver<GQL.CommentEntry, GQLRoots.CommentEntryRoot, {comment: GQLRoots.GeneralMessageRoot, parentComment: Nullable<GQLRoots.CommentEntryRoot>, childComments: GQLRoots.CommentEntryRoot[]}, {}>;
    ConversationUpdateSingle?: ComplexTypedResolver<GQL.ConversationUpdateSingle, GQLRoots.ConversationUpdateSingleRoot, {update: GQLRoots.ConversationUpdateRoot}, {}>;
    ConversationUpdateBatch?: ComplexTypedResolver<GQL.ConversationUpdateBatch, GQLRoots.ConversationUpdateBatchRoot, {updates: GQLRoots.ConversationUpdateRoot[]}, {}>;
    ConversationUpdateContainer?: UnionTypeResolver<GQLRoots.ConversationUpdateContainerRoot, 'ConversationUpdateSingle' | 'ConversationUpdateBatch'>;
    ConversationUpdate?: UnionTypeResolver<GQLRoots.ConversationUpdateRoot, 'ConversationUpdated' | 'ConversationMessageReceived' | 'ConversationMessageUpdated' | 'ConversationMessageDeleted' | 'ConversationLostAccess'>;
    ConversationUpdated?: ComplexTypedResolver<GQL.ConversationUpdated, GQLRoots.ConversationUpdatedRoot, {chat: GQLRoots.RoomRoot, by: GQLRoots.UserRoot}, {}>;
    ConversationMessageReceived?: ComplexTypedResolver<GQL.ConversationMessageReceived, GQLRoots.ConversationMessageReceivedRoot, {message: GQLRoots.ConversationMessageRoot, betaMessage: GQLRoots.RoomMessageRoot}, {}>;
    ConversationMessageUpdated?: ComplexTypedResolver<GQL.ConversationMessageUpdated, GQLRoots.ConversationMessageUpdatedRoot, {message: GQLRoots.ConversationMessageRoot, betaMessage: GQLRoots.RoomMessageRoot}, {}>;
    ConversationMessageDeleted?: ComplexTypedResolver<GQL.ConversationMessageDeleted, GQLRoots.ConversationMessageDeletedRoot, {message: GQLRoots.ConversationMessageRoot, betaMessage: GQLRoots.RoomMessageRoot}, {}>;
    ConversationLostAccess?: ComplexTypedResolver<GQL.ConversationLostAccess, GQLRoots.ConversationLostAccessRoot, {}, {}>;
    ConversationUpdateState?: ComplexTypedResolver<GQL.ConversationUpdateState, GQLRoots.ConversationUpdateStateRoot, {}, {}>;
    DialogUpdateSingle?: ComplexTypedResolver<GQL.DialogUpdateSingle, GQLRoots.DialogUpdateSingleRoot, {update: GQLRoots.DialogUpdateRoot}, {}>;
    DialogUpdateBatch?: ComplexTypedResolver<GQL.DialogUpdateBatch, GQLRoots.DialogUpdateBatchRoot, {updates: GQLRoots.DialogUpdateRoot[]}, {}>;
    DialogUpdateContainer?: UnionTypeResolver<GQLRoots.DialogUpdateContainerRoot, 'DialogUpdateSingle' | 'DialogUpdateBatch'>;
    DialogUpdate?: UnionTypeResolver<GQLRoots.DialogUpdateRoot, 'DialogMessageReceived' | 'DialogMessageUpdated' | 'DialogMessageDeleted' | 'DialogMessageRead' | 'DialogTitleUpdated' | 'DialogDeleted' | 'DialogPhotoUpdated' | 'DialogMuteChanged' | 'DialogMentionedChanged' | 'DialogBump'>;
    DialogMessageReceived?: ComplexTypedResolver<GQL.DialogMessageReceived, GQLRoots.DialogMessageReceivedRoot, {message: GQLRoots.ConversationMessageRoot, betaMessage: GQLRoots.RoomMessageRoot, alphaMessage: GQLRoots.ModernMessageRoot}, {}>;
    DialogMessageUpdated?: ComplexTypedResolver<GQL.DialogMessageUpdated, GQLRoots.DialogMessageUpdatedRoot, {message: GQLRoots.ConversationMessageRoot, betaMessage: GQLRoots.RoomMessageRoot, alphaMessage: GQLRoots.ModernMessageRoot}, {}>;
    DialogMessageDeleted?: ComplexTypedResolver<GQL.DialogMessageDeleted, GQLRoots.DialogMessageDeletedRoot, {message: GQLRoots.ConversationMessageRoot, betaMessage: GQLRoots.RoomMessageRoot, prevMessage: Nullable<GQLRoots.RoomMessageRoot>, alphaPrevMessage: Nullable<GQLRoots.ModernMessageRoot>, alphaMessage: GQLRoots.ModernMessageRoot}, {}>;
    DialogMessageRead?: ComplexTypedResolver<GQL.DialogMessageRead, GQLRoots.DialogMessageReadRoot, {}, {}>;
    DialogTitleUpdated?: ComplexTypedResolver<GQL.DialogTitleUpdated, GQLRoots.DialogTitleUpdatedRoot, {}, {}>;
    DialogPhotoUpdated?: ComplexTypedResolver<GQL.DialogPhotoUpdated, GQLRoots.DialogPhotoUpdatedRoot, {}, {}>;
    DialogDeleted?: ComplexTypedResolver<GQL.DialogDeleted, GQLRoots.DialogDeletedRoot, {}, {}>;
    DialogBump?: ComplexTypedResolver<GQL.DialogBump, GQLRoots.DialogBumpRoot, {topMessage: Nullable<GQLRoots.ModernMessageRoot>}, {}>;
    DialogMuteChanged?: ComplexTypedResolver<GQL.DialogMuteChanged, GQLRoots.DialogMuteChangedRoot, {}, {}>;
    DialogMentionedChanged?: ComplexTypedResolver<GQL.DialogMentionedChanged, GQLRoots.DialogMentionedChangedRoot, {}, {}>;
    DialogUpdateState?: ComplexTypedResolver<GQL.DialogUpdateState, GQLRoots.DialogUpdateStateRoot, {}, {}>;
    EnvVar?: ComplexTypedResolver<GQL.EnvVar, GQLRoots.EnvVarRoot, {}, {}>;
    FeatureFlag?: ComplexTypedResolver<GQL.FeatureFlag, GQLRoots.FeatureFlagRoot, {}, {}>;
    FeedItem?: ComplexTypedResolver<GQL.FeedItem, GQLRoots.FeedItemRoot, {alphaBy: GQLRoots.UserRoot}, {}>;
    ICEServer?: ComplexTypedResolver<GQL.ICEServer, GQLRoots.ICEServerRoot, {}, {}>;
    Conference?: ComplexTypedResolver<GQL.Conference, GQLRoots.ConferenceRoot, {peers: GQLRoots.ConferencePeerRoot[], iceServers: GQLRoots.ICEServerRoot[]}, {}>;
    ConferencePeer?: ComplexTypedResolver<GQL.ConferencePeer, GQLRoots.ConferencePeerRoot, {user: GQLRoots.UserRoot, connection: Nullable<GQLRoots.ConferencePeerConnectionRoot>}, {}>;
    ConferenceMedia?: ComplexTypedResolver<GQL.ConferenceMedia, GQLRoots.ConferenceMediaRoot, {streams: GQLRoots.MediaStreamRoot[], iceServers: GQLRoots.ICEServerRoot[]}, {}>;
    MediaStream?: ComplexTypedResolver<GQL.MediaStream, GQLRoots.MediaStreamRoot, {}, {}>;
    ConferencePeerConnection?: ComplexTypedResolver<GQL.ConferencePeerConnection, GQLRoots.ConferencePeerConnectionRoot, {}, {}>;
    ConferenceJoinResult?: ComplexTypedResolver<GQL.ConferenceJoinResult, GQLRoots.ConferenceJoinResultRoot, {conference: GQLRoots.ConferenceRoot}, {}>;
    MessageReaction?: ComplexTypedResolver<GQL.MessageReaction, GQLRoots.MessageReactionRoot, {user: GQLRoots.UserRoot}, {}>;
    MessageAttachment?: ComplexTypedResolver<GQL.MessageAttachment, GQLRoots.MessageAttachmentRoot, {fileMetadata: Nullable<GQLRoots.FileMetadataRoot>}, {}>;
    MessageButton?: ComplexTypedResolver<GQL.MessageButton, GQLRoots.MessageButtonRoot, {}, {}>;
    Mutation?: ComplexTypedResolver<GQL.Mutation, GQLRoots.MutationRoot, {alphaSendMessage: GQLRoots.ConversationEventMessageRoot, alphaReadChat: GQLRoots.ChatReadResultRoot, alphaEditMessage: GQLRoots.ConversationEventEditMessageRoot, alphaSendIntro: GQLRoots.ConversationEventMessageRoot, alphaEditIntro: GQLRoots.ConversationEventMessageRoot, alphaDeleteMessageUrlAugmentation: GQLRoots.ConversationEventMessageRoot, alphaDeleteMessage: GQLRoots.ConversationEventDeleteRoot, alphaChatCreateGroup: GQLRoots.ConversationRoot, alphaChatUpdateGroup: GQLRoots.ConversationUpdateResponseRoot, alphaChatChangeGroupTitle: GQLRoots.GroupChatUpdateResponseRoot, alphaChatInviteToGroup: GQLRoots.GroupChatUpdateResponseRoot, alphaChatKickFromGroup: GQLRoots.GroupChatUpdateResponseRoot, alphaChatChangeRoleInGroup: GQLRoots.GroupChatUpdateResponseRoot, alphaChatCopyGroup: GQLRoots.GroupChatUpdateResponseRoot, alphaChatLeave: GQLRoots.ConversationUpdateResponseRoot, alphaUpdateConversationSettings: GQLRoots.ConversationSettingsRoot, profileCreate: GQLRoots.ProfileRoot, profileUpdate: GQLRoots.ProfileRoot, createProfile: GQLRoots.ProfileRoot, updateProfile: GQLRoots.ProfileRoot, alphaCreateUserProfileAndOrganization: GQLRoots.AlphaSignupDataRoot, alphaCreateInvite: GQLRoots.InviteRoot, debugCreateTestUser: GQLRoots.UserRoot, settingsUpdate: GQLRoots.SettingsRoot, updateSettings: GQLRoots.SettingsRoot, betaOrganizationMemberRequestApprove: GQLRoots.OrganizationRoot, betaOrganizationMemberRemove: GQLRoots.OrganizationRoot, betaOrganizationMemberAdd: GQLRoots.OrganizationRoot, alphaOrganizationRefreshInviteLink: GQLRoots.InviteRoot, alphaOrganizationCreatePublicInvite: GQLRoots.InviteRoot, superAccountAdd: GQLRoots.SuperAccountRoot, superAccountRename: GQLRoots.SuperAccountRoot, superAccountActivate: GQLRoots.SuperAccountRoot, superAccountSuspend: GQLRoots.SuperAccountRoot, superAccountPend: GQLRoots.SuperAccountRoot, superAccountMemberAdd: GQLRoots.SuperAccountRoot, superAccountMemberRemove: GQLRoots.SuperAccountRoot, alphaAlterPublished: GQLRoots.OrganizationRoot, betaPinMessage: GQLRoots.SharedRoomRoot, betaUnpinMessage: GQLRoots.SharedRoomRoot, createApp: GQLRoots.AppProfileRoot, createSuperApp: GQLRoots.AppProfileRoot, refreshAppToken: GQLRoots.AppProfileRoot, updateAppProfile: GQLRoots.AppProfileRoot, addAppToChat: GQLRoots.AppChatRoot, userStorageSet: GQLRoots.AppStorageValueRoot[], alphaChannelCreate: GQLRoots.ConversationRoot, alphaChannelSetFeatured: GQLRoots.ConversationRoot, alphaChannelHideFromSearch: GQLRoots.ConversationRoot, alphaChannelInvite: GQLRoots.ConversationUpdateResponseRoot, alphaChannelJoin: GQLRoots.ConversationUpdateResponseRoot, betaAddMessageComment: GQLRoots.CommentEntryRoot, featureFlagAdd: GQLRoots.FeatureFlagRoot, superAccountFeatureAdd: GQLRoots.SuperAccountRoot, superAccountFeatureRemove: GQLRoots.SuperAccountRoot, alphaCreateFeedPost: GQLRoots.FeedItemRoot, conferenceJoin: GQLRoots.ConferenceJoinResultRoot, conferenceKeepAlive: GQLRoots.ConferenceRoot, conferenceLeave: GQLRoots.ConferenceRoot, mediaStreamOffer: GQLRoots.ConferenceMediaRoot, mediaStreamNegotiationNeeded: GQLRoots.ConferenceMediaRoot, mediaStreamAnswer: GQLRoots.ConferenceMediaRoot, mediaStreamCandidate: GQLRoots.ConferenceMediaRoot, mediaStreamFailed: GQLRoots.ConferenceMediaRoot, peerConnectionOffer: GQLRoots.ConferenceRoot, peerConnectionAnswer: GQLRoots.ConferenceRoot, peerConnectionCandidate: GQLRoots.ConferenceRoot, alphaSendPostMessage: GQLRoots.ConversationEventMessageRoot, alphaEditPostMessage: GQLRoots.ConversationEventMessageRoot, createOrganization: GQLRoots.OrganizationProfileRoot, updateOrganizationProfile: GQLRoots.OrganizationProfileRoot, betaRoomCreate: GQLRoots.SharedRoomRoot, betaRoomUpdate: GQLRoots.RoomRoot, betaRoomMove: GQLRoots.RoomRoot, betaRoomInvite: GQLRoots.RoomRoot, betaRoomKick: GQLRoots.RoomRoot, betaRoomLeave: GQLRoots.RoomRoot, betaRoomChangeRole: GQLRoots.RoomRoot, betaRoomJoin: GQLRoots.RoomRoot, betaRoomDeclineJoinRequest: GQLRoots.RoomRoot, betaRoomInviteLinkJoin: GQLRoots.RoomRoot, betaRoomUpdateUserNotificationSettings: GQLRoots.RoomUserNotificaionSettingsRoot, betaRoomAlterFeatured: GQLRoots.RoomSuperRoot, betaRoomAlterListed: GQLRoots.RoomSuperRoot}, {alphaSendMessage: GQL.MutationAlphaSendMessageArgs, alphaReadChat: GQL.MutationAlphaReadChatArgs, alphaEditMessage: GQL.MutationAlphaEditMessageArgs, alphaSendIntro: GQL.MutationAlphaSendIntroArgs, alphaEditIntro: GQL.MutationAlphaEditIntroArgs, alphaDeleteMessageUrlAugmentation: GQL.MutationAlphaDeleteMessageUrlAugmentationArgs, alphaDeleteMessage: GQL.MutationAlphaDeleteMessageArgs, alphaChatSetReaction: GQL.MutationAlphaChatSetReactionArgs, alphaChatUnsetReaction: GQL.MutationAlphaChatUnsetReactionArgs, alphaGlobalRead: GQL.MutationAlphaGlobalReadArgs, alphaBlockUser: GQL.MutationAlphaBlockUserArgs, alphaUnblockUser: GQL.MutationAlphaUnblockUserArgs, alphaChatCreateGroup: GQL.MutationAlphaChatCreateGroupArgs, alphaChatUpdateGroup: GQL.MutationAlphaChatUpdateGroupArgs, alphaChatChangeGroupTitle: GQL.MutationAlphaChatChangeGroupTitleArgs, alphaChatInviteToGroup: GQL.MutationAlphaChatInviteToGroupArgs, alphaChatKickFromGroup: GQL.MutationAlphaChatKickFromGroupArgs, alphaChatChangeRoleInGroup: GQL.MutationAlphaChatChangeRoleInGroupArgs, alphaChatCopyGroup: GQL.MutationAlphaChatCopyGroupArgs, alphaChatLeave: GQL.MutationAlphaChatLeaveArgs, alphaUpdateConversationSettings: GQL.MutationAlphaUpdateConversationSettingsArgs, profileCreate: GQL.MutationProfileCreateArgs, profileUpdate: GQL.MutationProfileUpdateArgs, createProfile: GQL.MutationCreateProfileArgs, updateProfile: GQL.MutationUpdateProfileArgs, alphaCreateUserProfileAndOrganization: GQL.MutationAlphaCreateUserProfileAndOrganizationArgs, alphaDeleteInvite: GQL.MutationAlphaDeleteInviteArgs, alphaJoinInvite: GQL.MutationAlphaJoinInviteArgs, joinAppInvite: GQL.MutationJoinAppInviteArgs, debugSendEmail: GQL.MutationDebugSendEmailArgs, debugCreateTestUser: GQL.MutationDebugCreateTestUserArgs, debugDeleteUrlInfoCache: GQL.MutationDebugDeleteUrlInfoCacheArgs, debugSuperNotifications: GQL.MutationDebugSuperNotificationsArgs, debugConvertOrgChatToNormal: GQL.MutationDebugConvertOrgChatToNormalArgs, debugSetCommentVisibility: GQL.MutationDebugSetCommentVisibilityArgs, settingsUpdate: GQL.MutationSettingsUpdateArgs, updateSettings: GQL.MutationUpdateSettingsArgs, betaOrganizationMemberRequestApprove: GQL.MutationBetaOrganizationMemberRequestApproveArgs, betaOrganizationMemberRemove: GQL.MutationBetaOrganizationMemberRemoveArgs, betaOrganizationMemberAdd: GQL.MutationBetaOrganizationMemberAddArgs, alphaOrganizationChangeMemberRole: GQL.MutationAlphaOrganizationChangeMemberRoleArgs, alphaOrganizationInviteMembers: GQL.MutationAlphaOrganizationInviteMembersArgs, alphaOrganizationRefreshInviteLink: GQL.MutationAlphaOrganizationRefreshInviteLinkArgs, alphaOrganizationCreatePublicInvite: GQL.MutationAlphaOrganizationCreatePublicInviteArgs, alphaOrganizationRemoveMember: GQL.MutationAlphaOrganizationRemoveMemberArgs, alphaOrganizationDeletePublicInvite: GQL.MutationAlphaOrganizationDeletePublicInviteArgs, presenceReportOnline: GQL.MutationPresenceReportOnlineArgs, presenceReportOffline: GQL.MutationPresenceReportOfflineArgs, alphaReportActive: GQL.MutationAlphaReportActiveArgs, superAccountAdd: GQL.MutationSuperAccountAddArgs, superAccountRename: GQL.MutationSuperAccountRenameArgs, superAccountActivate: GQL.MutationSuperAccountActivateArgs, superAccountSuspend: GQL.MutationSuperAccountSuspendArgs, superAccountPend: GQL.MutationSuperAccountPendArgs, superAccountMemberAdd: GQL.MutationSuperAccountMemberAddArgs, superAccountMemberRemove: GQL.MutationSuperAccountMemberRemoveArgs, superAccountChannelMemberAdd: GQL.MutationSuperAccountChannelMemberAddArgs, superDeleteUser: GQL.MutationSuperDeleteUserArgs, superAdminAdd: GQL.MutationSuperAdminAddArgs, superAdminRemove: GQL.MutationSuperAdminRemoveArgs, alphaAlterPublished: GQL.MutationAlphaAlterPublishedArgs, betaFixCounter: GQL.MutationBetaFixCounterArgs, conversationDraftUpdate: GQL.MutationConversationDraftUpdateArgs, alphaSaveDraftMessage: GQL.MutationAlphaSaveDraftMessageArgs, track: GQL.MutationTrackArgs, sendMessage: GQL.MutationSendMessageArgs, editMessage: GQL.MutationEditMessageArgs, pinMessage: GQL.MutationPinMessageArgs, unpinMessage: GQL.MutationUnpinMessageArgs, betaPinMessage: GQL.MutationBetaPinMessageArgs, betaUnpinMessage: GQL.MutationBetaUnpinMessageArgs, messageReactionAdd: GQL.MutationMessageReactionAddArgs, messageReactionRemove: GQL.MutationMessageReactionRemoveArgs, deleteChat: GQL.MutationDeleteChatArgs, archiveChat: GQL.MutationArchiveChatArgs, createApp: GQL.MutationCreateAppArgs, createSuperApp: GQL.MutationCreateSuperAppArgs, refreshAppToken: GQL.MutationRefreshAppTokenArgs, updateAppProfile: GQL.MutationUpdateAppProfileArgs, deleteApp: GQL.MutationDeleteAppArgs, addAppToChat: GQL.MutationAddAppToChatArgs, userStorageSet: GQL.MutationUserStorageSetArgs, alphaChannelCreate: GQL.MutationAlphaChannelCreateArgs, alphaChannelSetFeatured: GQL.MutationAlphaChannelSetFeaturedArgs, alphaChannelHideFromSearch: GQL.MutationAlphaChannelHideFromSearchArgs, alphaChannelInvite: GQL.MutationAlphaChannelInviteArgs, alphaChannelJoin: GQL.MutationAlphaChannelJoinArgs, alphaChannelRevokeInvite: GQL.MutationAlphaChannelRevokeInviteArgs, alphaChannelCancelRequest: GQL.MutationAlphaChannelCancelRequestArgs, alphaChannelInviteMembers: GQL.MutationAlphaChannelInviteMembersArgs, alphaChannelJoinInvite: GQL.MutationAlphaChannelJoinInviteArgs, alphaChannelRenewInviteLink: GQL.MutationAlphaChannelRenewInviteLinkArgs, addMessageComment: GQL.MutationAddMessageCommentArgs, betaAddMessageComment: GQL.MutationBetaAddMessageCommentArgs, editComment: GQL.MutationEditCommentArgs, deleteComment: GQL.MutationDeleteCommentArgs, deleteCommentAugmentation: GQL.MutationDeleteCommentAugmentationArgs, commentReactionAdd: GQL.MutationCommentReactionAddArgs, commentReactionRemove: GQL.MutationCommentReactionRemoveArgs, setEnvVar: GQL.MutationSetEnvVarArgs, featureFlagAdd: GQL.MutationFeatureFlagAddArgs, superAccountFeatureAdd: GQL.MutationSuperAccountFeatureAddArgs, superAccountFeatureRemove: GQL.MutationSuperAccountFeatureRemoveArgs, alphaCreateFeedPost: GQL.MutationAlphaCreateFeedPostArgs, conferenceJoin: GQL.MutationConferenceJoinArgs, conferenceKeepAlive: GQL.MutationConferenceKeepAliveArgs, conferenceLeave: GQL.MutationConferenceLeaveArgs, mediaStreamOffer: GQL.MutationMediaStreamOfferArgs, mediaStreamNegotiationNeeded: GQL.MutationMediaStreamNegotiationNeededArgs, mediaStreamAnswer: GQL.MutationMediaStreamAnswerArgs, mediaStreamCandidate: GQL.MutationMediaStreamCandidateArgs, mediaStreamFailed: GQL.MutationMediaStreamFailedArgs, peerConnectionOffer: GQL.MutationPeerConnectionOfferArgs, peerConnectionAnswer: GQL.MutationPeerConnectionAnswerArgs, peerConnectionCandidate: GQL.MutationPeerConnectionCandidateArgs, roomRead: GQL.MutationRoomReadArgs, betaMessageSend: GQL.MutationBetaMessageSendArgs, betaMessageEdit: GQL.MutationBetaMessageEditArgs, betaMessageDeleteAugmentation: GQL.MutationBetaMessageDeleteAugmentationArgs, betaMessageDelete: GQL.MutationBetaMessageDeleteArgs, betaReactionSet: GQL.MutationBetaReactionSetArgs, betaReactionRemove: GQL.MutationBetaReactionRemoveArgs, betaIntroSend: GQL.MutationBetaIntroSendArgs, betaIntroEdit: GQL.MutationBetaIntroEditArgs, alphaSendPostMessage: GQL.MutationAlphaSendPostMessageArgs, alphaEditPostMessage: GQL.MutationAlphaEditPostMessageArgs, alphaRespondPostMessage: GQL.MutationAlphaRespondPostMessageArgs, createOrganization: GQL.MutationCreateOrganizationArgs, updateOrganizationProfile: GQL.MutationUpdateOrganizationProfileArgs, deleteOrganization: GQL.MutationDeleteOrganizationArgs, registerWebPush: GQL.MutationRegisterWebPushArgs, registerPush: GQL.MutationRegisterPushArgs, typingSend: GQL.MutationTypingSendArgs, typingCancel: GQL.MutationTypingCancelArgs, alphaSetTyping: GQL.MutationAlphaSetTypingArgs, betaRoomCreate: GQL.MutationBetaRoomCreateArgs, betaRoomUpdate: GQL.MutationBetaRoomUpdateArgs, betaRoomMove: GQL.MutationBetaRoomMoveArgs, betaRoomInvite: GQL.MutationBetaRoomInviteArgs, betaRoomKick: GQL.MutationBetaRoomKickArgs, betaRoomLeave: GQL.MutationBetaRoomLeaveArgs, betaRoomChangeRole: GQL.MutationBetaRoomChangeRoleArgs, betaRoomJoin: GQL.MutationBetaRoomJoinArgs, betaRoomDeclineJoinRequest: GQL.MutationBetaRoomDeclineJoinRequestArgs, betaRoomInviteLinkSendEmail: GQL.MutationBetaRoomInviteLinkSendEmailArgs, betaRoomInviteLinkJoin: GQL.MutationBetaRoomInviteLinkJoinArgs, betaRoomInviteLinkRenew: GQL.MutationBetaRoomInviteLinkRenewArgs, betaRoomUpdateUserNotificationSettings: GQL.MutationBetaRoomUpdateUserNotificationSettingsArgs, betaRoomAlterFeatured: GQL.MutationBetaRoomAlterFeaturedArgs, betaRoomAlterListed: GQL.MutationBetaRoomAlterListedArgs, updateWelcomeMessage: GQL.MutationUpdateWelcomeMessageArgs, alphaSetUserShortName: GQL.MutationAlphaSetUserShortNameArgs, alphaSetOrgShortName: GQL.MutationAlphaSetOrgShortNameArgs}>;
    OrganizationContact?: ComplexTypedResolver<GQL.OrganizationContact, GQLRoots.OrganizationContactRoot, {photoRef: Nullable<GQLRoots.ImageRefRoot>}, {}>;
    Organization?: ComplexTypedResolver<GQL.Organization, GQLRoots.OrganizationRoot, {alphaOrganizationMembers: GQLRoots.OrganizationJoinedMemberRoot[], alphaOrganizationAdminMembers: GQLRoots.OrganizationJoinedMemberRoot[], alphaOrganizationMemberRequests: GQLRoots.OrganizationRequestedMemberRoot[], betaPublicRooms: GQLRoots.SharedRoomRoot[]}, {alphaOrganizationMembers: GQL.OrganizationAlphaOrganizationMembersArgs, alphaOrganizationAdminMembers: GQL.OrganizationAlphaOrganizationAdminMembersArgs}>;
    OrganizationProfile?: ComplexTypedResolver<GQL.OrganizationProfile, GQLRoots.OrganizationProfileRoot, {photoRef: Nullable<GQLRoots.ImageRefRoot>, contacts: GQLRoots.OrganizationContactRoot[]}, {}>;
    OrganizationsEdge?: ComplexTypedResolver<GQL.OrganizationsEdge, GQLRoots.OrganizationsEdgeRoot, {node: GQLRoots.OrganizationRoot}, {}>;
    OrganizationsConnection?: ComplexTypedResolver<GQL.OrganizationsConnection, GQLRoots.OrganizationsConnectionRoot, {edges: GQLRoots.OrganizationsEdgeRoot[], pageInfo: GQLRoots.PageInfoRoot}, {}>;
    Permissions?: ComplexTypedResolver<GQL.Permissions, GQLRoots.PermissionsRoot, {}, {}>;
    ProfilePrefill?: ComplexTypedResolver<GQL.ProfilePrefill, GQLRoots.ProfilePrefillRoot, {}, {}>;
    PushSettings?: ComplexTypedResolver<GQL.PushSettings, GQLRoots.PushSettingsRoot, {}, {}>;
    Query?: ComplexTypedResolver<GQL.Query, GQLRoots.QueryRoot, {alphaNotificationCounter: GQLRoots.NotificationCounterRoot, alphaChat: GQLRoots.ConversationRoot, alphaLoadMessages: GQLRoots.ConversationStateRoot, alphaChatsSearchForCompose: GQLRoots.ComposeSearchResultRoot[], alphaChatSearch: Nullable<GQLRoots.ConversationRoot>, alphaGroupConversationMembers: GQLRoots.GroupConversationMemberRoot[], myProfile: Nullable<GQLRoots.ProfileRoot>, alphaInvites: Nullable<GQLRoots.InviteRoot[]>, alphaInviteInfo: Nullable<GQLRoots.InviteInfoRoot>, appInviteInfo: Nullable<GQLRoots.AppInviteRoot>, alphaAppInviteInfo: Nullable<GQLRoots.AppInviteInfoRoot>, alphaInvitesHistory: Nullable<GQLRoots.InviteHistotyInfoRoot[]>, alphaResolveInvite: Nullable<GQLRoots.ResolveInviteEntryRoot>, debugParseID: GQLRoots.DebugIDRoot, debugUrlInfo: Nullable<GQLRoots.UrlAugmentationRoot>, userPresence: GQLRoots.DebugUserPresenceRoot[], organizationChatsStats: GQLRoots.OrganizationChatStatsRoot[], debugEventsState: GQLRoots.DebugEventsStateRoot, alphaChats: GQLRoots.ConversationConnectionRoot, dialogs: GQLRoots.DialogsConnectionRoot, settings: GQLRoots.SettingsRoot, alphaOrganizationMembers: GQLRoots.OrganizationMemberRoot[], alphaOrganizationInviteLink: Nullable<GQLRoots.InviteRoot>, alphaOrganizationPublicInvite: Nullable<GQLRoots.InviteRoot>, superAccounts: GQLRoots.SuperAccountRoot[], superAccount: GQLRoots.SuperAccountRoot, superAdmins: GQLRoots.SuperAdminRoot[], alphaChatTextSearch: GQLRoots.ConversationRoot[], betaDialogTextSearch: GQLRoots.DialogRoot[], messages: GQLRoots.ModernMessageRoot[], message: Nullable<GQLRoots.ModernMessageRoot>, myApps: GQLRoots.AppProfileRoot[], userStorage: GQLRoots.AppStorageValueRoot[], alphaChannelsList: GQLRoots.ConversationConnectionRoot, alphaChannelMembers: GQLRoots.ChannelMemberRoot[], alphaChannelsFeatured: GQLRoots.ChannelConversationRoot[], alphaChannels: GQLRoots.ChannelConversationConnectionRoot, alphaChannelInviteInfo: Nullable<GQLRoots.ChannelInviteRoot>, chatState: GQLRoots.ChatUpdateStateRoot, messageComments: GQLRoots.CommentsPeerRoot, conversationState: GQLRoots.ConversationUpdateStateRoot, dialogsState: GQLRoots.DialogUpdateStateRoot, envVars: Nullable<GQLRoots.EnvVarRoot[]>, envVar: Nullable<GQLRoots.EnvVarRoot>, featureFlags: GQLRoots.FeatureFlagRoot[], alphaHomeFeed: GQLRoots.FeedItemRoot[], conference: GQLRoots.ConferenceRoot, conferenceMedia: GQLRoots.ConferenceMediaRoot, myOrganization: Nullable<GQLRoots.OrganizationRoot>, myOrganizations: GQLRoots.OrganizationRoot[], organization: GQLRoots.OrganizationRoot, myOrganizationProfile: GQLRoots.OrganizationProfileRoot, organizationProfile: GQLRoots.OrganizationProfileRoot, alphaOrganizations: GQLRoots.OrganizationsConnectionRoot, alphaOrganizationByPrefix: Nullable<GQLRoots.OrganizationRoot>, alphaComunityPrefixSearch: GQLRoots.OrganizationsConnectionRoot, myPermissions: GQLRoots.PermissionsRoot, users: GQLRoots.UserRoot[], myProfilePrefill: Nullable<GQLRoots.ProfilePrefillRoot>, pushSettings: GQLRoots.PushSettingsRoot, sessionState: GQLRoots.SessionStateRoot, me: Nullable<GQLRoots.UserRoot>, user: GQLRoots.UserRoot, userSearch: GQLRoots.UserConnectionRoot, alphaProfiles: GQLRoots.UserConnectionRoot, alphaGlobalSearch: GQLRoots.GlobalSearchEntryRoot[], featuredGroups: Nullable<GQLRoots.SharedRoomRoot[]>, featuredCommunities: Nullable<GQLRoots.OrganizationRoot[]>, room: Nullable<GQLRoots.RoomRoot>, roomSuper: Nullable<GQLRoots.RoomSuperRoot>, roomMessages: GQLRoots.RoomMessageRoot[], roomMembers: GQLRoots.RoomMemberRoot[], roomMember: Nullable<GQLRoots.RoomMemberRoot>, betaRoomSearch: GQLRoots.RoomConnectionRoot, betaRoomInviteInfo: Nullable<GQLRoots.RoomInviteRoot>, betaAvailableRooms: GQLRoots.SharedRoomRoot[], betaUserRooms: GQLRoots.SharedRoomRoot[], betaUserAvailableRooms: GQLRoots.SharedRoomRoot[], alphaResolveShortName: Nullable<GQLRoots.ShortNameDestinationRoot>}, {alphaChat: GQL.QueryAlphaChatArgs, alphaLoadMessages: GQL.QueryAlphaLoadMessagesArgs, alphaChatsSearchForCompose: GQL.QueryAlphaChatsSearchForComposeArgs, alphaChatSearch: GQL.QueryAlphaChatSearchArgs, alphaGroupConversationMembers: GQL.QueryAlphaGroupConversationMembersArgs, alphaInviteInfo: GQL.QueryAlphaInviteInfoArgs, appInviteInfo: GQL.QueryAppInviteInfoArgs, alphaAppInviteInfo: GQL.QueryAlphaAppInviteInfoArgs, alphaResolveInvite: GQL.QueryAlphaResolveInviteArgs, debugParseID: GQL.QueryDebugParseIDArgs, debugUrlInfo: GQL.QueryDebugUrlInfoArgs, userPresence: GQL.QueryUserPresenceArgs, alphaChats: GQL.QueryAlphaChatsArgs, dialogs: GQL.QueryDialogsArgs, alphaOrganizationMembers: GQL.QueryAlphaOrganizationMembersArgs, alphaOrganizationInviteLink: GQL.QueryAlphaOrganizationInviteLinkArgs, alphaOrganizationPublicInvite: GQL.QueryAlphaOrganizationPublicInviteArgs, superAccount: GQL.QuerySuperAccountArgs, alphaChatTextSearch: GQL.QueryAlphaChatTextSearchArgs, betaDialogTextSearch: GQL.QueryBetaDialogTextSearchArgs, conversationDraft: GQL.QueryConversationDraftArgs, alphaDraftMessage: GQL.QueryAlphaDraftMessageArgs, messages: GQL.QueryMessagesArgs, message: GQL.QueryMessageArgs, userStorage: GQL.QueryUserStorageArgs, alphaChannelsList: GQL.QueryAlphaChannelsListArgs, alphaChannelMembers: GQL.QueryAlphaChannelMembersArgs, alphaChannels: GQL.QueryAlphaChannelsArgs, alphaChannelInviteInfo: GQL.QueryAlphaChannelInviteInfoArgs, alphaChannelInviteLink: GQL.QueryAlphaChannelInviteLinkArgs, chatState: GQL.QueryChatStateArgs, messageComments: GQL.QueryMessageCommentsArgs, conversationState: GQL.QueryConversationStateArgs, envVar: GQL.QueryEnvVarArgs, conference: GQL.QueryConferenceArgs, conferenceMedia: GQL.QueryConferenceMediaArgs, organization: GQL.QueryOrganizationArgs, organizationProfile: GQL.QueryOrganizationProfileArgs, alphaOrganizations: GQL.QueryAlphaOrganizationsArgs, alphaOrganizationByPrefix: GQL.QueryAlphaOrganizationByPrefixArgs, alphaComunityPrefixSearch: GQL.QueryAlphaComunityPrefixSearchArgs, users: GQL.QueryUsersArgs, user: GQL.QueryUserArgs, userSearch: GQL.QueryUserSearchArgs, alphaProfiles: GQL.QueryAlphaProfilesArgs, alphaGlobalSearch: GQL.QueryAlphaGlobalSearchArgs, room: GQL.QueryRoomArgs, roomSuper: GQL.QueryRoomSuperArgs, roomMessages: GQL.QueryRoomMessagesArgs, roomMembers: GQL.QueryRoomMembersArgs, roomMember: GQL.QueryRoomMemberArgs, betaRoomSearch: GQL.QueryBetaRoomSearchArgs, betaRoomInviteInfo: GQL.QueryBetaRoomInviteInfoArgs, betaRoomInviteLink: GQL.QueryBetaRoomInviteLinkArgs, betaUserRooms: GQL.QueryBetaUserRoomsArgs, betaUserAvailableRooms: GQL.QueryBetaUserAvailableRoomsArgs, alphaResolveShortName: GQL.QueryAlphaResolveShortNameArgs}>;
    SessionState?: ComplexTypedResolver<GQL.SessionState, GQLRoots.SessionStateRoot, {}, {}>;
    Subscription?: ComplexTypedSubscriptionResolver<GQL.Subscription, GQLRoots.SubscriptionRoot, {debugEvents: GQLRoots.DebugEventRoot, settingsWatch: GQLRoots.SettingsRoot, watchSettings: GQLRoots.SettingsRoot, alphaSubscribeChatOnline: GQLRoots.OnlineEventRoot, alphaSubscribeOnline: GQLRoots.OnlineEventRoot, chatOnlinesCount: GQLRoots.ChatOnlineEventRoot, chatUpdates: GQLRoots.ChatUpdateContainerRoot, commentUpdates: Nullable<GQLRoots.CommentUpdateContainerRoot>, conversationUpdates: GQLRoots.ConversationUpdateContainerRoot, dialogsUpdates: GQLRoots.DialogUpdateContainerRoot, alphaConferenceWatch: GQLRoots.ConferenceRoot, alphaConferenceMediaWatch: GQLRoots.ConferenceMediaRoot, typings: GQLRoots.TypingEventRoot, conversationTypings: GQLRoots.TypingEventRoot, alphaSubscribeTypings: GQLRoots.TypingEventRoot, alphaSubscribeChatTypings: GQLRoots.TypingEventRoot}, {debugEvents: GQL.SubscriptionDebugEventsArgs, alphaSubscribeChatOnline: GQL.SubscriptionAlphaSubscribeChatOnlineArgs, alphaSubscribeOnline: GQL.SubscriptionAlphaSubscribeOnlineArgs, chatOnlinesCount: GQL.SubscriptionChatOnlinesCountArgs, chatUpdates: GQL.SubscriptionChatUpdatesArgs, commentUpdates: GQL.SubscriptionCommentUpdatesArgs, conversationUpdates: GQL.SubscriptionConversationUpdatesArgs, dialogsUpdates: GQL.SubscriptionDialogsUpdatesArgs, alphaConferenceWatch: GQL.SubscriptionAlphaConferenceWatchArgs, alphaConferenceMediaWatch: GQL.SubscriptionAlphaConferenceMediaWatchArgs, conversationTypings: GQL.SubscriptionConversationTypingsArgs, alphaSubscribeChatTypings: GQL.SubscriptionAlphaSubscribeChatTypingsArgs}>;
    TypingEvent?: ComplexTypedResolver<GQL.TypingEvent, GQLRoots.TypingEventRoot, {conversation: GQLRoots.ConversationRoot, chat: GQLRoots.RoomRoot, user: GQLRoots.UserRoot}, {}>;
    User?: ComplexTypedResolver<GQL.User, GQLRoots.UserRoot, {channelsJoined: GQLRoots.ChannelConversationRoot[], photoRef: Nullable<GQLRoots.ImageRefRoot>, pictureRef: Nullable<GQLRoots.ImageRefRoot>, organizations: GQLRoots.OrganizationRoot[], primaryOrganization: Nullable<GQLRoots.OrganizationRoot>, alphaPrimaryOrganization: Nullable<GQLRoots.OrganizationRoot>}, {}>;
    UserEdge?: ComplexTypedResolver<GQL.UserEdge, GQLRoots.UserEdgeRoot, {node: GQLRoots.UserRoot}, {}>;
    UserConnection?: ComplexTypedResolver<GQL.UserConnection, GQLRoots.UserConnectionRoot, {edges: GQLRoots.UserEdgeRoot[], pageInfo: GQLRoots.PageInfoRoot}, {}>;
    GlobalSearchEntry?: UnionTypeResolver<GQLRoots.GlobalSearchEntryRoot, 'Organization' | 'User' | 'SharedRoom'>;
    Room?: UnionTypeResolver<GQLRoots.RoomRoot, 'PrivateRoom' | 'SharedRoom'>;
    PrivateRoom?: ComplexTypedResolver<GQL.PrivateRoom, GQLRoots.PrivateRoomRoot, {user: GQLRoots.UserRoot, settings: GQLRoots.RoomUserNotificaionSettingsRoot, pinnedMessage: Nullable<GQLRoots.ModernMessageRoot>}, {}>;
    WelcomeMessage?: ComplexTypedResolver<GQL.WelcomeMessage, GQLRoots.WelcomeMessageRoot, {sender: Nullable<GQLRoots.UserRoot>}, {}>;
    SharedRoom?: ComplexTypedResolver<GQL.SharedRoom, GQLRoots.SharedRoomRoot, {pinnedMessage: Nullable<GQLRoots.ModernMessageRoot>, welcomeMessage: Nullable<GQLRoots.WelcomeMessageRoot>, organization: Nullable<GQLRoots.OrganizationRoot>, members: GQLRoots.RoomMemberRoot[], requests: Nullable<GQLRoots.RoomMemberRoot[]>, settings: GQLRoots.RoomUserNotificaionSettingsRoot}, {members: GQL.SharedRoomMembersArgs}>;
    RoomSuper?: ComplexTypedResolver<GQL.RoomSuper, GQLRoots.RoomSuperRoot, {}, {}>;
    UserMention?: ComplexTypedResolver<GQL.UserMention, GQLRoots.UserMentionRoot, {user: GQLRoots.UserRoot}, {}>;
    SharedRoomMention?: ComplexTypedResolver<GQL.SharedRoomMention, GQLRoots.SharedRoomMentionRoot, {sharedRoom: GQLRoots.SharedRoomRoot}, {}>;
    Mention?: UnionTypeResolver<GQLRoots.MentionRoot, 'UserMention' | 'SharedRoomMention'>;
    RoomMessage?: ComplexTypedResolver<GQL.RoomMessage, GQLRoots.RoomMessageRoot, {fileMetadata: Nullable<GQLRoots.FileMetadataRoot>, sender: GQLRoots.UserRoot, serviceMetadata: Nullable<GQLRoots.ServiceMetadataRoot>, urlAugmentation: Nullable<GQLRoots.UrlAugmentationRoot>, reactions: GQLRoots.MessageReactionRoot[], replyMessages: Nullable<GQLRoots.RoomMessageRoot[]>, mentions: Nullable<GQLRoots.UserRoot[]>, alphaAttachments: GQLRoots.MessageAttachmentRoot[], alphaButtons: Nullable<GQLRoots.MessageButtonRoot[]>[], alphaMentions: Nullable<GQLRoots.MentionRoot[]>}, {}>;
    RoomMember?: ComplexTypedResolver<GQL.RoomMember, GQLRoots.RoomMemberRoot, {user: GQLRoots.UserRoot, invitedBy: GQLRoots.UserRoot}, {}>;
    RoomUserNotificaionSettings?: ComplexTypedResolver<GQL.RoomUserNotificaionSettings, GQLRoots.RoomUserNotificaionSettingsRoot, {}, {}>;
    RoomConnectionEdge?: ComplexTypedResolver<GQL.RoomConnectionEdge, GQLRoots.RoomConnectionEdgeRoot, {node: GQLRoots.SharedRoomRoot}, {}>;
    RoomConnection?: ComplexTypedResolver<GQL.RoomConnection, GQLRoots.RoomConnectionRoot, {edges: GQLRoots.RoomConnectionEdgeRoot[], pageInfo: GQLRoots.PageInfoRoot}, {}>;
    RoomInvite?: ComplexTypedResolver<GQL.RoomInvite, GQLRoots.RoomInviteRoot, {room: GQLRoots.SharedRoomRoot, invitedByUser: GQLRoots.UserRoot}, {}>;
    ShortNameDestination?: UnionTypeResolver<GQLRoots.ShortNameDestinationRoot, 'User' | 'Organization'>;
}
