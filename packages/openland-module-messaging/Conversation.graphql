type ConversationUpdateSingle {
    seq: Int!
    state: String!
    update: ConversationUpdate!
}

type ConversationUpdateBatch {
    updates: [ConversationUpdate!]!
    fromSeq: Int!
    seq: Int!
    state: String!
}

union ConversationUpdateContainer = ConversationUpdateSingle | ConversationUpdateBatch

union ConversationUpdate = ConversationMessageReceived | ConversationMessageUpdated | ConversationMessageDeleted 

type ConversationMessageReceived {
    message: ConversationMessage!
}

type ConversationMessageUpdated {
    message: ConversationMessage!
}

type ConversationMessageDeleted {
    message: ConversationMessage!
}

extend type Subscription {
    alphaChatSubscribe2(conversationId: ID!, fromState: String): ConversationUpdateContainer!
}