type MessageReaction {
    user: User!,
    reaction: String!
}

type MessageAttachment {
    fileId: String!
    fileMetadata: FileMetadata
    filePreview: String
}

enum MessageButtonStyle {
    DEFAULT,
    LIGHT
}

type MessageButton {
    title: String!
    style: MessageButtonStyle!
    id: ID!
}

input MessageButtonInput {
    title: String!
    style: MessageButtonStyle!
    id: ID!
}

enum MessageType {
    MESSAGE,
    POST
}

enum PostMessageType {
    BLANK,
    JOB_OPPORTUNITY,
    OFFICE_HOURS,
    REQUEST_FOR_STARTUPS
}

extend type Mutation {
    roomRead(id: ID!, mid: ID!): Boolean!

    betaMessageSend(message: String, file: String, repeatKey: String, replyMessages: [ID!], mentions: [ID!], room: ID!): Boolean!
    betaMessageEdit(mid: ID!, message: String, file: String, replyMessages: [ID!], mentions: [ID!]): Boolean!
    betaMessageDeleteAugmentation(mid: ID!): Boolean!
    betaMessageDelete(mid: ID, mids: [ID!]): Boolean!
    betaReactionSet(mid: ID!, reaction: String!): Boolean!
    betaReactionRemove(mid: ID!, reaction: String!): Boolean!
}