type ConversationSettings {
    id: ID!
    mobileNotifications: NotificationMessages!
    mute: Boolean!    
}

interface Conversation {
    id: ID!
    flexibleId: ID!
    title: String!
    unreadCount: Int!
    topMessage: ConversationMessage
    settings: ConversationSettings!
}

type ChannelConversation implements Conversation {
    id: ID!
    flexibleId: ID!
    title: String!
    members: [User!]!
    unreadCount: Int!
    topMessage: ConversationMessage
    settings: ConversationSettings!
}

type SharedConversation implements Conversation {
    id: ID!
    flexibleId: ID!
    title: String!
    organizations: [Organization!]!
    unreadCount: Int!
    topMessage: ConversationMessage
    organization: Organization
    settings: ConversationSettings!
}

type PrivateConversation implements Conversation {
    id: ID!
    flexibleId: ID!
    title: String!
    user: User!
    unreadCount: Int!
    topMessage: ConversationMessage
    blocked: Boolean!
    settings: ConversationSettings!
}

type GroupConversation implements Conversation {
    id: ID!
    flexibleId: ID!
    title: String!
    members: [User!]!
    unreadCount: Int!
    topMessage: ConversationMessage
    membersCount: Int!
    settings: ConversationSettings!

    photo: String
    photoRef: ImageRef
    description: String
    longDescription: String
    pinnedMessage: ConversationMessage

    membersOnline: Int!
    myRole: String
}

#
# Messaging Contents
#

union ServiceMetadata =
    | InviteServiceMetadata
    | KickServiceMetadata
    | TitleChangeServiceMetadata
    | PhotoChangeServiceMetadata
    | PostRespondServiceMetadata
    | VoiceChatStartedServiceMetadata
    | VoiceChatEndedServiceMetadata
    | CallStartedServiceMetadata


type InviteServiceMetadata {
    users: [User!]
    invitedBy: User!
}

type KickServiceMetadata {
    user: User!
    kickedBy: User!
}

type TitleChangeServiceMetadata {
    title: String!
}

type PhotoChangeServiceMetadata {
    photo: String
    photoRef: ImageRef
}

type PostRespondServiceMetadata {
    postRoom: Room!
    responder: User!
    respondType: ID!
}

# Graphql dousn't allow to define empty types
# so in such cases we return single field with speed of light ¯\_(ツ)_/¯

type VoiceChatStartedServiceMetadata {
    speedOfLight: Int
}

type VoiceChatEndedServiceMetadata {
    duration: Int!
    membersCount: Int!
    lastMember: User
}

type CallStartedServiceMetadata {
    speedOfLight: Int!
}

union UrlAugmentationExtra = User | Organization | ChannelConversation

type UrlAugmentation {
    url: String!
    title: String
    date: String
    subtitle: String
    description: String
    photo: ImageRef
    imageInfo: FileMetadata
    imageURL: String
    iconRef: ImageRef
    iconInfo: FileMetadata
    hostname: String
    type: String
    extra: UrlAugmentationExtra @disabled
}

type ConversationMessage {
    id: ID!
    message: String
    file: String
    fileMetadata: FileMetadata
    filePreview: String
    sender: User!
    date: Date!
    repeatKey: String
    isService: Boolean!
    serviceMetadata: ServiceMetadata
    urlAugmentation: UrlAugmentation
    edited: Boolean!
    reactions: [MessageReaction!]!
    replyMessages: [ConversationMessage!]
    plainText: String
    mentions: [User!]

    alphaAttachments: [MessageAttachment!]!
    alphaButtons: [[MessageButton!]]!
    alphaType: MessageType!
    alphaTitle: String
    postType: String
}

type FileMetadata {
    name: String!
    mimeType: String
    size: Int!
    isImage: Boolean!
    imageWidth: Int
    imageHeight: Int
    imageFormat: String
}

type VideoMetadata {
    duration: Int!
}

type NotificationCounter {
    id: ID!
    unreadCount: Int!
}

extend type Query {
    alphaNotificationCounter: NotificationCounter!
}