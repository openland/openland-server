union Room = PrivateRoom | SharedRoom

type PrivateRoom {
    id: ID!
    user: User!
    settings: RoomUserNotificaionSettings!
    pinnedMessage: ModernMessage
}

enum SharedRoomKind {
    INTERNAL
    PUBLIC
    GROUP
}

enum SharedRoomMembershipStatus {
    MEMBER
    REQUESTED
    LEFT
    KICKED
    NONE
}

enum RoomMemberRole {
    OWNER
    ADMIN
    MEMBER
}

type WelcomeMessage {
    isOn: Boolean!
    sender: User
    message: String
}

type SharedRoom {
    id: ID!
    kind: SharedRoomKind!
    isChannel: Boolean!
    title: String!
    photo: String!
    socialImage: String
    description: String
    pinnedMessage: ModernMessage
    welcomeMessage: WelcomeMessage
    
    organization: Organization
  
    membersCount: Int
    members(first: Int, after: ID): [RoomMember!]!
    requests: [RoomMember!]

    membership: SharedRoomMembershipStatus!
    role: RoomMemberRole!

    settings: RoomUserNotificaionSettings!
    canEdit: Boolean!
    canSendMessage: Boolean!
    archived: Boolean!
}

type RoomSuper {
    id: ID!
    featured: Boolean!
    listed: Boolean!
}

input RoomUpdateInput {
    title: String
    photoRef: ImageRefInput
    description: String
    socialImageRef: ImageRefInput
    kind: SharedRoomKind
}

type UserMention {
    user: User!
}

type SharedRoomMention {
    sharedRoom: SharedRoom!
}

union Mention = UserMention | SharedRoomMention

type RoomMessage {
    id: ID!
    message: String
    file: String
    fileMetadata: FileMetadata
    filePreview: String
    sender: User!
    date: Date!
    repeatKey: String
    isService: Boolean!
    serviceMetadata: ServiceMetadata
    urlAugmentation: UrlAugmentation
    edited: Boolean!
    reactions: [MessageReaction!]!
    replyMessages: [RoomMessage!]
    plainText: String
    mentions: [User!]

    alphaAttachments: [MessageAttachment!]!
    alphaButtons: [[MessageButton!]]!
    alphaType: MessageType!
    alphaTitle: String
    alphaPostType: PostMessageType
    alphaMentions: [Mention!]
}

type RoomMember {
    user: User!
    role: RoomMemberRole!
    membership: SharedRoomMembershipStatus!
    invitedBy: User!
    canKick: Boolean!
}

type RoomUserNotificaionSettings {
    id: ID!
    mute: Boolean
}

input RoomUserNotificaionSettingsInput {
    mute: Boolean
}

input RoomInviteInput {
    userId: ID!
    role: RoomMemberRole!
}

input RoomInviteEmailRequest {
    email: String!,
    emailText: String,
    firstName: String,
    lastName: String
}

type RoomConnectionEdge {
    node: SharedRoom!
    cursor: String!
}

type RoomConnection {
    edges: [RoomConnectionEdge!]!
    pageInfo: PageInfo!
}

extend type Query {
    room(id: ID!): Room
    roomSuper(id: ID!): RoomSuper
    roomMessages(roomId: ID!, first: Int, before: ID): [RoomMessage!]!
    roomMembers(roomId: ID!, first: Int, after: ID): [RoomMember!]!
    roomMember(roomId: ID!, memberId: ID!): RoomMember
    betaRoomSearch(
        query: String,
        first: Int!,
        after: String,
        page: Int,
        sort: String
    ): RoomConnection!
    betaRoomInviteInfo(invite: String!): RoomInvite
    betaRoomInviteLink(roomId: ID!): String!
    betaAvailableRooms: [SharedRoom!]!
    betaUserRooms(limit: Int, after: ID): [SharedRoom!]!
    betaUserAvailableRooms(limit: Int, after: ID): [SharedRoom!]!
    
}

type RoomInvite {
    id: ID!
    room: SharedRoom!
    invitedByUser: User!
}

extend type Mutation {
    # Room mgmt
    betaRoomCreate(kind: SharedRoomKind!, title: String, description: String, photoRef: ImageRefInput, members: [ID!]!, message: String, listed: Boolean, organizationId: ID, channel: Boolean): SharedRoom!
    betaRoomUpdate(roomId: ID!, input: RoomUpdateInput!): Room!
    betaRoomMove(roomId: ID!, toOrg: ID!): Room!
    
    # Members mgmt
    betaRoomInvite(roomId: ID!, invites: [RoomInviteInput!]!): Room!
    betaRoomKick(roomId: ID!, userId: ID!): Room!
    betaRoomLeave(roomId: ID!): Room!
    betaRoomChangeRole(roomId: ID!, userId: ID!, newRole: RoomMemberRole!): Room!
    betaRoomJoin(roomId: ID!): Room!
    betaRoomDeclineJoinRequest(roomId: ID!, userId: ID!): Room!

    # Invite links
    betaRoomInviteLinkSendEmail(roomId: ID!, inviteRequests: [RoomInviteEmailRequest!]!): String!
    betaRoomInviteLinkJoin(invite: String!, isNewUser: Boolean): Room!
    betaRoomInviteLinkRenew(roomId: ID!): String!

    # User settings
    betaRoomUpdateUserNotificationSettings(settings: RoomUserNotificaionSettingsInput!, roomId: ID!): RoomUserNotificaionSettings!
    
    # Admin tools
    betaRoomAlterFeatured(roomId: ID!, featured: Boolean!): RoomSuper!
    betaRoomAlterListed(roomId: ID!, listed: Boolean!): RoomSuper!

    updateWelcomeMessage(roomId: ID!, welcomeMessageIsOn: Boolean!, welcomeMessageSender: ID, welcomeMessageText: String): Boolean!
}