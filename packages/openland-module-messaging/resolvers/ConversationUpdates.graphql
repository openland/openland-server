#
# DEPRECATED
#

type ConversationUpdateSingle {
    seq: Int!
    state: String!
    update: ConversationUpdate!
}

type ConversationUpdateBatch {
    updates: [ConversationUpdate!]!
    fromSeq: Int!
    seq: Int!
    state: String!
}

union ConversationUpdateContainer = ConversationUpdateSingle | ConversationUpdateBatch

union ConversationUpdate = ConversationUpdated | ConversationMessageReceived | ConversationMessageUpdated | ConversationMessageDeleted | ConversationLostAccess

type ConversationUpdated {
    chat: Room!
    by: User!
}

type ConversationMessageReceived {
    message: ConversationMessage!
    betaMessage: RoomMessage!
}

type ConversationMessageUpdated {
    message: ConversationMessage!
    betaMessage: RoomMessage!
}

type ConversationMessageDeleted {
    message: ConversationMessage!
    betaMessage: RoomMessage!
}

type ConversationLostAccess {
    lostAccess: Boolean!
}

type ConversationUpdateState {
    state: String
}

extend type Query {
    conversationState(id: ID!): ConversationUpdateState!
}

extend type Subscription {
    conversationUpdates(conversationId: ID!, fromState: String): ConversationUpdateContainer!
}