interface BaseMessage {
    #
    #   State
    #
    id: ID!
    date: Date!
    sender: User!

    #
    #   Content
    #
    message: String
    spans: [MessageSpan!]!
    fallback: String!
}

type ServiceMessage implements Message  {
    #
    #   State
    #
    id: ID!
    date: Date!
    sender: User!

    #
    #   Content
    #
    message: String
    spans: [MessageSpan!]!
    serviceMetadata: ServiceMetadata
    fallback: String!
}

type Message implements Message {
    #
    #   State
    #
    id: ID!
    date: Date!
    sender: User!
    edited: Boolean!
    reactions: [MessageReaction!]!

    #
    #   Content
    #
    message: String
    spans: [MessageSpan!]!
    attachments: [MessageAttachment!]!
    quotedMessages: [Message!]!
    fallback: String!
}

extend type Mutation {
    sendMessage(room: ID!, message: String, repeatKey: String, forwardMessages: [ID!], spans: [MessageSpanInput!], attachments: [MessageAttachmentInput!]): Boolean!
}

#
#   Attachments
#

interface MessageAttachment {
    id: ID!
    fallback: String!
}

type MessageRichAttachment implements MessageAttachment {
    id: ID!
    title: String
    titleLink: String
    text: String
    icon: String
    image: String
    keyboard: MessageKeyboard
    fallback: String!
}

type MessageAttachmentFile implements MessageAttachment {
    id: ID!
    fileId: String!
    fileMetadata: FileMetadata!
    filePreview: String
    fallback: String!
}

type MessageAttachmentPost implements MessageAttachment {
    id: ID!
    post: FeedItem!
    fallback: String!
}

union MessageAttachmentInput = MessageRichAttachmentInput | MessageAttachmentFileInput | MessageAttachmentPostInput

input MessageRichAttachmentInput {
    title: String
    titleLink: String
    text: String
    icon: String
    image: String
    keyboard: MessageKeyboardInput
    fallback: String
}

type MessageAttachmentFileInput {
    fileId: String!
    fallback: String
}

type MessageAttachmentPostInput {
    postId: ID!
    fallback: String
}

#
#   Keyboard
#
type MessageKeyboard {
    buttons: [[MessageButton!]]!
}

type MessageButton {
    id: ID!
    title: String!
    style: MessageButtonStyle!
}

enum MessageButtonStyle {
    DEFAULT,
    LIGHT
}

input MessageKeyboardInput {
    buttons: [[MessageButton!]]!
}

input MessageButtonInput {
    id: ID!
    title: String!
    style: MessageButtonStyle!
}

#
#   Reactions
#

enum MessageReactionType {
    LIKE,
    THUMB_UP,
    JOY,
    SCREAM,
    ANGRY
}

type MessageReaction {
    user: User!,
    reaction: MessageReactionType!
}

#
#   Rich text
#

interface MessageSpan {
    offset: Int!
    length: Int!
}

type MessageSpanUserMention implements MessageSpan {
    offset: Int!
    length: Int!
    user: User!
}

type MessageSpanRoomMention implements MessageSpan {
    offset: Int!
    length: Int!
    room: Room!
}

union MessageSpanInput = MessageSpanUserMentionInput | MessageSpanRoomMentionInput

input MessageSpanUserMentionInput {
    offset: Int!
    length: Int!
    userId: ID!
}

input MessageSpanRoomMentionInput {
    offset: Int!
    length: Int!
    roomId: ID!
}