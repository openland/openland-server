union Message = ServiceMessage | UserMessage

type ServiceMessage  {
    #
    #   State
    #
    id: ID!
    date: Date!

    #
    #   Content
    #
    message: String
    parts: [MessagePart!]
    fallback: String!
    serviceMetadata: ServiceMetadata
}

type UserMessage {
    #
    #   State
    #
    id: ID!
    date: Date!
    sender: User!
    edited: Boolean!
    reactions: [MessageReaction!]

    #
    #   Content
    #
    message: String
    attachments: [MessageAttachment!]
    quotedMessages: [Message!]
    parts: [MessagePart!]
    fallback: String!
}

extend type Mutation {
    sendMessage(room: ID!, message: String, repeatKey: String, forwardMessages: [ID!], parts: [MessagePartInput!], attachments: [MessageAttachmentInput!]): Boolean!
}

#
#   Attachments
#

union MessageAttachment = MessageRichAttachment | MessageAttachmentFile | MessageAttachmentPost

type MessageRichAttachment {
    fallback: String!
    title: String!
    titleLink: String!
    text: String!
    icon: String!
    image: String!
    keyboard: MessageKeyboard!
}

type MessageAttachmentFile {
    fileId: String!
    fileMetadata: FileMetadata!
    filePreview: String
}

type MessageAttachmentPost {
    post: FeedItem!
}

union MessageAttachmentInput = MessageRichAttachmentInput | MessageAttachmentFileInput | MessageAttachmentPostInput

input MessageRichAttachmentInput {
    fallback: String
    title: String
    titleLink: String
    text: String
    icon: String
    image: String
    keyboard: MessageKeyboardInput
}

type MessageAttachmentFileInput {
    fileId: String!
}

type MessageAttachmentPostInput {
    postId: ID!
}

#
#   Keyboard
#
type MessageKeyboard {
    buttons: [[MessageButton!]]
}

type MessageButton {
    title: String!
    style: MessageButtonStyle!
    id: ID!
}

enum MessageButtonStyle {
    DEFAULT,
    LIGHT
}

input MessageKeyboardInput {
    buttons: [[MessageButton!]]
}

input MessageButtonInput {
    title: String!
    style: MessageButtonStyle!
    id: ID!
}

#
#   Reactions
#

enum MessageReactionType {
    LIKE,
    THUMB_UP,
    JOY,
    SCREAM,
    ANGRY
}

type MessageReaction {
    user: User!,
    reaction: MessageReactionType!
}

#
#   Rich text
#

union MessagePart = MessagePartMention | MessagePartRoomMention

type MessagePartUserMention {
    offset: Int!
    length: Int!
    user: User!
}

type MessagePartRoomMention {
    offset: Int!
    length: Int!
    room: Room!
}

union MessagePartInput = MessagePartUserMentionInput | MessagePartRoomMentionInput

input MessagePartUserMentionInput {
    offset: Int!
    length: Int!
    userId: ID!
}

input MessagePartRoomMentionInput {
    offset: Int!
    length: Int!
    roomId: ID!
}