union MessageSource = MessageSourceChat | MessageSourceComment

type MessageSourceChat {
    chat: Room!
}

type MessageSourceComment {
    peer: CommentsPeer!
}

interface ModernMessage {
    #
    #   State
    #
    id: ID!
    seq: Int
    date: Date!
    sender: User!
    senderBadge: UserBadge
    source: MessageSource
    hidden: Boolean!

    #
    #   Content
    #
    message: String
    spans: [MessageSpan!]!
    fallback: String!
}

type ServiceMessage implements ModernMessage  {
    #
    #   State
    #
    id: ID!
    seq: Int
    date: Date!
    sender: User!
    senderBadge: UserBadge
    isMentioned: Boolean!
    source: MessageSource
    hidden: Boolean!

    #
    #   Content
    #
    message: String
    spans: [MessageSpan!]!
    serviceMetadata: ServiceMetadata
    fallback: String!

    #
    #   Overrides
    #
    overrideAvatar: ImageRef
    overrideName: String
}

type GeneralMessage implements ModernMessage {
    #
    #   State
    #
    id: ID!
    seq: Int
    date: Date!
    sender: User!
    senderBadge: UserBadge
    edited: Boolean!
    reactions: [ModernMessageReaction!]!
    reactionCounters: [ReactionCounter!]!
    isMentioned: Boolean!
    source: MessageSource
    hidden: Boolean!

    #
    #   Content
    #
    message: String
    spans: [MessageSpan!]!
    attachments: [ModernMessageAttachment!]!
    quotedMessages: [ModernMessage!]!
    commentsCount: Int!
    fallback: String!

    #
    #   Overrides
    #
    overrideAvatar: ImageRef
    overrideName: String
}

type StickerMessage implements ModernMessage {
    #
    #   State
    #
    id: ID!
    seq: Int
    date: Date!
    sender: User!
    senderBadge: UserBadge
    source: MessageSource
    hidden: Boolean!

    #
    #   Content
    #
    message: String
    spans: [MessageSpan!]!
    reactions: [ModernMessageReaction!]!
    reactionCounters: [ReactionCounter!]!
    fallback: String!
    quotedMessages: [ModernMessage!]!
    commentsCount: Int!
    sticker: Sticker!

    #
    #   Overrides
    #
    overrideAvatar: ImageRef
    overrideName: String
}

type GammaMessagesBatch {
    messages: [ModernMessage!]!
    haveMoreForward: Boolean
    haveMoreBackward: Boolean
}

type ModernMessagesBatch {
    messages: [ModernMessage!]!
    haveMoreForward: Boolean!
    haveMoreBackward: Boolean!
}

enum SharedMediaType {
    LINK,
    IMAGE,
    DOCUMENT,
    VIDEO
}

type SharedMediaCounters {
    links: Int!
    images: Int!
    documents: Int!
    videos: Int!
}

type SharedMediaMessageEdge {
    node: MessageWithChat!
    cursor: String!
    index: Int!
}

type SharedMediaConnection {
    edges: [SharedMediaMessageEdge!]!
    pageInfo: PageInfo!
}

type CommonChatsWithUserResponse {
    items: [SharedRoom!]!
    cursor: String
    count: Int!
}

extend type Query {
    messages(chatId: ID!, first: Int!, before: ID): [ModernMessage!]!
    gammaMessages(chatId: ID!, first: Int!, before: ID, after: ID, around: ID): GammaMessagesBatch
    modernMessages(chatId: ID!, first: Int!, before: Int, after: Int): ModernMessagesBatch!
    message(messageId: ID!): ModernMessage
    lastReadedMessage(chatId: ID!): ModernMessage
    chatSharedMedia(chatId: ID!, mediaTypes: [SharedMediaType!]!, first: Int!, after: ID, before: ID, around: ID): SharedMediaConnection!
    chatSharedMediaCounters(chatId: ID!): SharedMediaCounters!
    haveAccessToChat(chatId: ID!): Boolean!
    commonChatsWithUser(uid: ID!, first: Int!, after: ID): CommonChatsWithUserResponse!
}

extend type Mutation {
    sendMessage(
        chatId: ID!,
        message: String,
        replyMessages: [ID!],
        mentions: [MentionInput!],
        fileAttachments: [FileAttachmentInput!],
        spans: [MessageSpanInput!],
        repeatKey: String
    ): Boolean!
    sendSticker(chatId: ID!, stickerId: ID!, replyMessages: [ID!], repeatKey: String): Boolean!
    sendDonation(chatId: ID, userId: ID, amount: Int!, message: String, repeatKey: String): Boolean!
    editMessage(
        messageId: ID!,
        message: String,
        replyMessages: [ID!],
        mentions: [MentionInput!],
        fileAttachments: [FileAttachmentInput!],
        spans: [MessageSpanInput!]
    ): Boolean!

    pinMessage(chatId: ID!, messageId: ID!): Boolean!
    unpinMessage(chatId: ID!): Boolean!

    betaPinMessage(chatId: ID!, messageId: ID!): SharedRoom!
    betaUnpinMessage(chatId: ID!): SharedRoom!

    gammaPinMessage(chatId: ID!, messageId: ID!): Room!
    gammaUnpinMessage(chatId: ID!): Room!

    messageReactionAdd(messageId: ID!, reaction: MessageReactionType!): Boolean!
    messageDonationReactionAdd(messageId: ID!): Boolean!
    messageReactionRemove(messageId: ID!, reaction: MessageReactionType!): Boolean!

    deleteChat(chatId: ID!): Boolean!
    archiveChat(chatId: ID!): Boolean!
}

#
#   Attachments
#

type ImageFallback {
    photo: String!
    text: String!
}

type Image {
    url: String!
    metadata: FileMetadata
}

interface ModernMessageAttachment {
    id: ID!
    fallback: String!
}

type MessageRichAttachment implements ModernMessageAttachment {
    id: ID!
    title: String
    subTitle: String
    titleLink: String
    titleLinkHostname: String
    text: String
    icon: Image
    image: Image
    imagePreview: String
    imageFallback: ImageFallback
    socialImage: Image
    socialImagePreview: String
    keyboard: MessageKeyboard
    featuredIcon: Boolean # used for featured orgs link augmentation
    fallback: String!
}

type MessageAttachmentFile implements ModernMessageAttachment {
    id: ID!
    fileId: String!
    fileMetadata: FileMetadata!
    filePreview: String
    previewFileId: String
    previewFileMetadata: FileMetadata
    videoMetadata: VideoMetadata
    fallback: String!
}

type MessageAttachmentPost implements ModernMessageAttachment {
    id: ID!
    post: FeedItem!
    fallback: String!
}

type MessageAttachmentPurchase implements ModernMessageAttachment {
    id: ID!
    fallback: String!
    purchase: Purchase!
}

input VideoMetadataInput {
    duration: Int!
}

input FileAttachmentInput {
    fileId: String!
    previewFileId: String
    videoMetadata: VideoMetadataInput
}

#
#   Keyboard
#

type MessageKeyboard {
    buttons: [[ModernMessageButton!]]!
}

type ModernMessageButton {
    id: ID!
    title: String!
    style: ModernMessageButtonStyle!
    url: String
}

enum ModernMessageButtonStyle {
    DEFAULT,
    LIGHT,
    PAY
}

input MessageKeyboardInput {
    buttons: [[ModernMessageButtonInput!]]!
}

input ModernMessageButtonInput {
    id: ID!
    title: String!
    style: ModernMessageButtonStyle!
}

#
#   Reactions
#

enum MessageReactionType {
    LIKE,
    THUMB_UP,
    JOY,
    SCREAM,
    CRYING,
    ANGRY,
    DONATE
}

type ModernMessageReaction {
    user: User!,
    reaction: MessageReactionType!
}

type ReactionCounter {
    reaction: MessageReactionType!
    count: Int!
    setByMe: Boolean!
}

#
#   Rich text
#

interface MessageSpan {
    offset: Int!
    length: Int!
}

type MessageSpanUserMention implements MessageSpan {
    offset: Int!
    length: Int!
    user: User!
}

type MessageSpanMultiUserMention implements MessageSpan {
    offset: Int!
    length: Int!
    users: [User!]!
}

type MessageSpanRoomMention implements MessageSpan {
    offset: Int!
    length: Int!
    room: Room!
}

type MessageSpanOrganizationMention implements MessageSpan {
    offset: Int!
    length: Int!
    organization: Organization!
}

union MentionPeer = SharedRoom | Organization | User

input MentionInput {
    chatId: ID
    userId: ID
    userIds: [ID!]
    orgId: ID
    all: Boolean
    offset: Int!
    length: Int!
}

#
#   Markdown
#

type MessageSpanLink implements MessageSpan {
    offset: Int!
    length: Int!
    url: String!
}

type MessageSpanBold implements MessageSpan {
    offset: Int!
    length: Int!
}

type MessageSpanItalic implements MessageSpan {
    offset: Int!
    length: Int!
}

type MessageSpanIrony implements MessageSpan {
    offset: Int!
    length: Int!
}

type MessageSpanInlineCode implements MessageSpan {
    offset: Int!
    length: Int!
}

type MessageSpanCodeBlock implements MessageSpan {
    offset: Int!
    length: Int!
}

type MessageSpanInsane implements MessageSpan {
    offset: Int!
    length: Int!
}

type MessageSpanLoud implements MessageSpan {
    offset: Int!
    length: Int!
}

type MessageSpanRotating implements MessageSpan {
    offset: Int!
    length: Int!
}

type MessageSpanDate implements MessageSpan {
    offset: Int!
    length: Int!
    date: Date!
}

type MessageSpanAllMention implements MessageSpan {
    offset: Int!
    length: Int!
}

type MessageSpanHashTag implements MessageSpan {
    offset: Int!
    length: Int!
    tag: String!
}

enum MessageSpanType {
    Bold,
    Italic,
    Irony,
    InlineCode,
    CodeBlock,
    Insane,
    Loud,
    Rotating,
    Link,
}

input MessageSpanInput {
    offset: Int!
    length: Int!
    type: MessageSpanType!
    url: String
}
