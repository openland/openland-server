interface ModernMessage {
    #
    #   State
    #
    id: ID!
    date: Date!
    sender: User!

    #
    #   Content
    #
    message: String
    spans: [MessageSpan!]!
    fallback: String!
}

type ServiceMessage implements ModernMessage  {
    #
    #   State
    #
    id: ID!
    date: Date!
    sender: User!

    #
    #   Content
    #
    message: String
    spans: [MessageSpan!]!
    serviceMetadata: ServiceMetadata
    fallback: String!
}

type GeneralMessage implements ModernMessage {
    #
    #   State
    #
    id: ID!
    date: Date!
    sender: User!
    edited: Boolean!
    reactions: [ModernMessageReaction!]!

    #
    #   Content
    #
    message: String
    spans: [MessageSpan!]!
    attachments: [ModernMessageAttachment!]!
    quotedMessages: [ModernMessage!]!
    commentsCount: Int!
    fallback: String!
}

extend type Query {
    messages(chatId: ID!, first: Int!, before: ID): [ModernMessage!]!
    message(messageId: ID!): ModernMessage
}

extend type Mutation {
    sendMessage(chatId: ID!, message: String, replyMessages: [ID!], mentions: [MentionInput!], fileAttachments: [FileAttachmentInput!], spans: [MessageSpanInput!], repeatKey: String): Boolean!
    editMessage(messageId: ID!, message: String, replyMessages: [ID!], mentions: [MentionInput!], fileAttachments: [FileAttachmentInput!], spans: [MessageSpanInput!]): Boolean!

    pinMessage(chatId: ID!, messageId: ID!): Boolean!
    unpinMessage(chatId: ID!): Boolean!

    betaPinMessage(chatId: ID!, messageId: ID!): SharedRoom!
    betaUnpinMessage(chatId: ID!): SharedRoom!

    messageReactionAdd(messageId: ID!, reaction: MessageReactionType!): Boolean!
    messageReactionRemove(messageId: ID!, reaction: MessageReactionType!): Boolean!

    deleteChat(chatId: ID!): Boolean!
    archiveChat(chatId: ID!): Boolean!
}

#
#   Attachments
#

type Image {
    url: String!
    metadata: FileMetadata
}

interface ModernMessageAttachment {
    id: ID!
    fallback: String!
}

type MessageRichAttachment implements ModernMessageAttachment {
    id: ID!
    title: String
    subTitle: String
    titleLink: String
    titleLinkHostname: String
    text: String
    icon: Image
    image: Image
    keyboard: MessageKeyboard
    fallback: String!
}

type MessageAttachmentFile implements ModernMessageAttachment {
    id: ID!
    fileId: String!
    fileMetadata: FileMetadata!
    filePreview: String
    fallback: String!
}

type MessageAttachmentPost implements ModernMessageAttachment {
    id: ID!
    post: FeedItem!
    fallback: String!
}

input FileAttachmentInput {
    fileId: String!
}

#
#   Keyboard
#

type MessageKeyboard {
    buttons: [[ModernMessageButton!]]!
}

type ModernMessageButton {
    id: ID!
    title: String!
    style: ModernMessageButtonStyle!
    url: String
}

enum ModernMessageButtonStyle {
    DEFAULT,
    LIGHT
}

input MessageKeyboardInput {
    buttons: [[ModernMessageButtonInput!]]!
}

input ModernMessageButtonInput {
    id: ID!
    title: String!
    style: ModernMessageButtonStyle!
}

#
#   Reactions
#

enum MessageReactionType {
    LIKE,
    THUMB_UP,
    JOY,
    SCREAM,
    CRYING,
    ANGRY
}

type ModernMessageReaction {
    user: User!,
    reaction: MessageReactionType!
}

#
#   Rich text
#

interface MessageSpan {
    offset: Int!
    length: Int!
}

type MessageSpanUserMention implements MessageSpan {
    offset: Int!
    length: Int!
    user: User!
}

type MessageSpanMultiUserMention implements MessageSpan {
    offset: Int!
    length: Int!
    users: [User!]!
}

type MessageSpanRoomMention implements MessageSpan {
    offset: Int!
    length: Int!
    room: Room!
}

input MentionInput {
    chatId: ID
    userId: ID
    userIds: [ID!]
    offset: Int!
    length: Int!
}

type MessageSpanLink implements MessageSpan {
    offset: Int!
    length: Int!
    url: String!
}

#
#   Markdown
#

type MessageSpanBold implements MessageSpan {
    offset: Int!
    length: Int!
}

type MessageSpanItalic implements MessageSpan {
    offset: Int!
    length: Int!
}

type MessageSpanIrony implements MessageSpan {
    offset: Int!
    length: Int!
}

type MessageSpanInlineCode implements MessageSpan {
    offset: Int!
    length: Int!
}

type MessageSpanCodeBlock implements MessageSpan {
    offset: Int!
    length: Int!
}

enum MessageSpanType {
    Bold,
    Italic,
    Irony,
    InlineCode,
    CodeBlock
}

input MessageSpanInput {
    offset: Int!
    length: Int!
    type: MessageSpanType!
}