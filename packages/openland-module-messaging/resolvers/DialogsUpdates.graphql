type DialogUpdateSingle {
    seq: Int!
    state: String!
    update: DialogUpdate!
}

type DialogUpdateBatch {
    updates: [DialogUpdate!]!
    fromSeq: Int!
    seq: Int!
    state: String!
}

union DialogUpdateContainer = DialogUpdateSingle | DialogUpdateBatch

union DialogUpdate = DialogMessageReceived | DialogMessageUpdated | DialogMessageDeleted | DialogMessageRead | DialogTitleUpdated | DialogDeleted

type DialogMessageReceived {
    cid: ID!
    message: ConversationMessage!
    unread: Int!
    globalUnread: Int!
}

type DialogMessageUpdated {
    message: ConversationMessage!
}

type DialogMessageDeleted {
    message: ConversationMessage!
    unread: Int!
    globalUnread: Int!
}

type DialogMessageRead {
    cid: ID!
    unread: Int!
    globalUnread: Int!
}

type DialogTitleUpdated {
    cid: ID!
    title: String!
}

type DialogPhotoUpdated {
    cid: ID!
    photoRef: ImageRef
}

type DialogDeleted {
    cid: ID!
    globalUnread: Int!
}

extend type Subscription {
    dialogsUpdates(fromState: String): DialogUpdateContainer!
}
