
type TextMatchmakingQuestion {
    id: ID!
    title: String!
    subtitle: String!
}

type MultiselectMatchmakingQuestion {
    id: ID!
    title: String!
    subtitle: String!
    tags: [String!]!
}

union MatchmakingQuestion = TextMatchmakingQuestion | MultiselectMatchmakingQuestion

type TextMatchmakingAnswer {
    question: TextMatchmakingQuestion!
    answer: String!
}

type MultiselectMatchmakingAnswer {
    question: MultiselectMatchmakingQuestion!
    tags: [String!]!
}

union MatchmakingAnswer = TextMatchmakingAnswer | MultiselectMatchmakingAnswer

type MatchmakingProfile {
    user: User!
    answers: [MatchmakingAnswer!]!
    chatCreated: Boolean!
}

type MatchmakingRoom {
    enabled: Boolean!
    questions: [MatchmakingQuestion!]
    profiles: [MatchmakingProfile!]
    myProfile: MatchmakingProfile
}

enum MatchmakingQuestionType {
    Text,
    Multiselect
}

input MatchmakingQuestionInput {
    id: ID
    type: MatchmakingQuestionType!
    title: String!
    subtitle: String
    tags: [String!]
}

input MatchmakingRoomInput {
    enabled: Boolean
    questions: [MatchmakingQuestionInput!]
}

input MatchmakingAnswerInput {
    questionId: ID!
    text: String
    tags: [String!]
}

input MatchmakingProfileFillInput {
    answers: [MatchmakingAnswerInput!]!
}

extend type Query {
    matchmakingRoom(peerId: ID!): MatchmakingRoom
    matchmakingProfile(peerId: ID!, uid: ID!): MatchmakingProfile
}

extend type Mutation {
    matchmakingRoomSave(peerId: ID!, input: MatchmakingRoomInput!): MatchmakingRoom!
    matchmakingProfileFill(peerId: ID!, input: MatchmakingProfileFillInput!): MatchmakingProfile!
    matchmakingConnect(peerId: ID!, uid: ID!): Boolean!
}