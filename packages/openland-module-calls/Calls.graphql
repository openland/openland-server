type ICEServer {
    urls: [String!]!
    username: String
    credential: String
}

enum ConferenceStrategy {
    MASH,
    STREAM
}

type Conference {
    id: ID!
    startTime: Date
    peers: [ConferencePeer!]!
    iceServers: [ICEServer!]!
    strategy: ConferenceStrategy!
}

type ConferencePeer {
    id: ID!
    user: User!
    connection: ConferencePeerConnection # Deprecated
}

type ConferenceMedia {
    id: ID!
    streams: [MediaStream!]!
    iceServers: [ICEServer!]!
}

enum MediaStreamState {
    WAIT_OFFER
    NEED_OFFER
    WAIT_ANSWER
    NEED_ANSWER
    READY
}

enum MediaStreamIceTransportPolicy {
    all
    relay
}

type MediaStreamSettings {
    videoIn: Boolean!
    videoOut: Boolean!
    audioIn: Boolean!
    audioOut: Boolean!
    iceTransportPolicy: MediaStreamIceTransportPolicy
}

type MediaStream {
    id: ID!
    peerId: ID
    state: MediaStreamState!
    seq: Int!
    sdp: String
    ice: [String!]!
    settings: MediaStreamSettings!
}

# Deprecated
enum ConferencePeerConnectionState {
    WAIT_OFFER
    NEED_OFFER
    WAIT_ANSWER
    NEED_ANSWER
    READY
}

# Deprecated
type ConferencePeerConnection {
    state: ConferencePeerConnectionState!
    sdp: String
    ice: [String!]!
}

type ConferenceJoinResult {
    peerId: ID!
    conference: Conference!
}

extend type Query {
    conference(id: ID!): Conference!
    conferenceMedia(id: ID!, peerId: ID!): ConferenceMedia!
}

extend type Mutation {
    conferenceJoin(id: ID!, strategy: ConferenceStrategy): ConferenceJoinResult!
    conferenceKeepAlive(id: ID!, peerId: ID!): Conference!
    conferenceLeave(id: ID!, peerId: ID!): Conference!

    mediaStreamOffer(id: ID!, peerId: ID!, offer: String!, seq: Int): ConferenceMedia!
    mediaStreamNegotiationNeeded(id: ID!, peerId: ID!, seq: Int): ConferenceMedia!
    mediaStreamAnswer(id: ID!, peerId: ID!, answer: String!, seq: Int): ConferenceMedia!
    mediaStreamCandidate(id: ID!, peerId: ID!, candidate: String!): ConferenceMedia!
    mediaStreamFailed(id: ID!, peerId: ID!): ConferenceMedia!

    # deprecated
    peerConnectionOffer(id: ID!, ownPeerId: ID!, peerId: ID!, offer: String!): Conference!
    peerConnectionAnswer(id: ID!, ownPeerId: ID!, peerId: ID!, answer: String!): Conference!
    peerConnectionCandidate(id: ID!, ownPeerId: ID!, peerId: ID!, candidate: String!): Conference!
}

extend type Subscription {
    alphaConferenceWatch(id: ID!): Conference!
    alphaConferenceMediaWatch(id: ID!, peerId: ID!): ConferenceMedia!
}