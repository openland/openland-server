type Conference {
  id: ID!
  startTime: Date
  peers: [ConferencePeer!]!
  room: Room
}

type ConferencePeer {
  id: ID!
  user: User!
}

#
# Media Streams
#

type ICEServer {
  urls: [String!]!
  username: String
  credential: String
}

type ConferenceMedia {
  id: ID!
  streams: [MediaStream!]!
  iceServers: [ICEServer!]!
  localMedia: LocalMediaState!
}

enum MediaStreamState {
  WAIT_OFFER
  NEED_OFFER
  WAIT_ANSWER
  NEED_ANSWER
  READY
}

enum IceTransportPolicy {
    ALL, RELAY, NONE
}
enum VideoSource {
    CAMERA, SCREEN
}
enum MediaKind {
    AUDIO, VIDEO
}

type MediaSender {
    kind: MediaKind!
    videoSource: VideoSource
    codecParams: String
}

type MediaReceiver {
    peerId: ID
    kind: MediaKind!
    videoSource: VideoSource
}

type MediaStream {
  id: ID!

  # Negotiation state
  seq: Int!
  state: MediaStreamState!
  sdp: String
  
  # ICE Candidates
  ice: [String!]!
  iceTransportPolicy: IceTransportPolicy!

  # Tracks
  receivers: [MediaReceiver!]!
  senders: [MediaSender!]!
}

#
# Conference Membership
#

type ConferenceJoinResult {
  peerId: ID!
  conference: Conference!
}

input ConferenceJoinInput {
    media: LocalMediaInput!
}

extend type Mutation {
  conferenceJoin(id: ID!, input: ConferenceJoinInput, kind: ConferenceKind): ConferenceJoinResult!
  conferenceKeepAlive(id: ID!, peerId: ID!): Conference!
  conferenceLeave(id: ID!, peerId: ID!): Conference!
}

#
# Local Media
#

input LocalMediaInput {
    supportsVideo: Boolean!
    supportsAudio: Boolean!
    wantSendVideo: Boolean!
    wantSendAudio: Boolean!
    wantSendScreencast: Boolean!
}

type LocalMediaState {
    sendVideo: Boolean!
    sendAudio: Boolean!
    sendScreencast: Boolean!
}

extend type Query {
  conference(id: ID!): Conference!
  conferenceMedia(id: ID!, peerId: ID!): ConferenceMedia!
}

extend type Mutation {
  conferenceRequestLocalMediaChange(id: ID!, media: LocalMediaInput!): Conference!

  mediaStreamOffer(id: ID!, peerId: ID!, offer: String!, seq: Int): ConferenceMedia!
  mediaStreamAnswer(id: ID!, peerId: ID!, answer: String!, seq: Int): ConferenceMedia!
  mediaStreamCandidate(id: ID!, peerId: ID!, candidate: String!): ConferenceMedia!
}

extend type Subscription {
  conferenceWatch(id: ID!): Conference!
  conferenceMediaWatch(id: ID!, peerId: ID!): ConferenceMedia!
}