// THIS FILE IS AUTOGENERATED! DO NOT TRY TO EDIT!
import { FEntity } from 'foundation-orm/FEntity';
import { FNamespace } from 'foundation-orm/FNamespace';
import { FEntityFactory } from 'foundation-orm/FEntityFactory';
import { FConnection } from 'foundation-orm/FConnection';
import { FContext } from 'foundation-orm/FContext';

export interface OnlineShape {
    lastSeen: number;
}

export class Online extends FEntity {
    get uid() { return this._value.uid; }
    get lastSeen() {
        return this._value.lastSeen;
    }
    set lastSeen(value: number) {
        this._checkIsWritable();
        if (value ===  this._value.lastSeen) { return; }
        this._value.lastSeen = value;
        this.markDirty();
    }
}

export class OnlineFactory extends FEntityFactory<Online, OnlineShape> {
    constructor(connection: FConnection) {
        super(connection, new FNamespace('entity', 'online'));
    }
    async findById(uid: number) {
        return await this._findById([uid]);
    }
    createOrUpdate(uid: number, shape: OnlineShape) {
        return this._create([uid], shape);
    }
    protected _createEntity(context: FContext, namespace: FNamespace, id: (string | number)[], value: any) {
        return new Online(context, namespace, id, value);
    }
}
export interface PresenceShape {
    lastSeen: number;
    lastSeenTimeout: number;
    platform: string;
}

export class Presence extends FEntity {
    get uid() { return this._value.uid; }
    get tid() { return this._value.tid; }
    get lastSeen() {
        return this._value.lastSeen;
    }
    set lastSeen(value: number) {
        this._checkIsWritable();
        if (value ===  this._value.lastSeen) { return; }
        this._value.lastSeen = value;
        this.markDirty();
    }
    get lastSeenTimeout() {
        return this._value.lastSeenTimeout;
    }
    set lastSeenTimeout(value: number) {
        this._checkIsWritable();
        if (value ===  this._value.lastSeenTimeout) { return; }
        this._value.lastSeenTimeout = value;
        this.markDirty();
    }
    get platform() {
        return this._value.platform;
    }
    set platform(value: string) {
        this._checkIsWritable();
        if (value ===  this._value.platform) { return; }
        this._value.platform = value;
        this.markDirty();
    }
}

export class PresenceFactory extends FEntityFactory<Presence, PresenceShape> {
    constructor(connection: FConnection) {
        super(connection, new FNamespace('entity', 'presence'));
    }
    async findById(uid: number, tid: number) {
        return await this._findById([uid, tid]);
    }
    async watch(uid: number, tid: number) {
        return this.connection.fdb.getAndWatch([...this.namespace.namespace, uid, tid]);
    }
    createOrUpdate(uid: number, tid: number, shape: PresenceShape) {
        return this._create([uid, tid], shape);
    }
    protected _createEntity(context: FContext, namespace: FNamespace, id: (string | number)[], value: any) {
        return new Presence(context, namespace, id, value);
    }
}
export interface CounterShape {
    value: number;
}

export class Counter extends FEntity {
    get name() { return this._value.name; }
    get value() {
        return this._value.value;
    }
    set value(value: number) {
        this._checkIsWritable();
        if (value ===  this._value.value) { return; }
        this._value.value = value;
        this.markDirty();
    }
}

export class CounterFactory extends FEntityFactory<Counter, CounterShape> {
    constructor(connection: FConnection) {
        super(connection, new FNamespace('entity', 'counter'));
    }
    async findById(name: string) {
        return await this._findById([name]);
    }
    createOrUpdate(name: string, shape: CounterShape) {
        return this._create([name], shape);
    }
    protected _createEntity(context: FContext, namespace: FNamespace, id: (string | number)[], value: any) {
        return new Counter(context, namespace, id, value);
    }
}

export class AllEntities {
    Online: OnlineFactory;
    Presence: PresenceFactory;
    Counter: CounterFactory;

    constructor(connection: FConnection) {
        this.Online = new OnlineFactory(connection);
        this.Presence = new PresenceFactory(connection);
        this.Counter = new CounterFactory(connection);
    }
}
