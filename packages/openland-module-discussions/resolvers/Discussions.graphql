type Discussion {
    id: ID!
    author: User
    title: String!
    content: [Paragraph!]!

    hub: Hub
    createdAt: Date!
    updatedAt: Date
    deletedAt: Date
}

union Paragraph = TextParagraph | ImageParagraph

type TextParagraph {
    text: String!
    spans: [MessageSpan!]!
}

type ImageParagraph {
    image: ImageRef!
}

input DiscussionInput {
    hub: ID
    title: String
    content: [DiscussionContentInput!]
}

enum DiscussionContentType {
    Text,
    Image
}

input DiscussionContentInput {
    type: DiscussionContentType!
    text: String
    spans: [MessageSpanInput!]
    image: ImageRefInput
}

type DiscussionConnection {
    items: [Discussion!]!
    cursor: String
}

extend type Query {
    discussion(id: ID!): Discussion
    discussions(hubs: [ID!]!, first: Int!, after: String): DiscussionConnection!
    discussionMyDrafts(first: Int!, after: String): DiscussionConnection!
}

extend type Mutation {
    discussionCreate(input: DiscussionInput!, isDraft: Boolean!): Discussion!
    discussionDraftPublish(draftId: ID!): Discussion!
    discussionUpdate(id: ID!, input: DiscussionInput!): Discussion!
    discussionsDropAll: Boolean!
}