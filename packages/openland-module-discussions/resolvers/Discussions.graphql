type Discussion {
    id: ID!
    author: User
    title: String!
    content: [Paragraph!]!
    draft: DiscussionDraft
    canEdit: Boolean!

    hub: Hub
    createdAt: Date!
    updatedAt: Date
    deletedAt: Date
}

type DiscussionDraft {
    id: ID!
    author: User
    title: String!
    content: [Paragraph!]!
    publishedCopy: Discussion

    hub: Hub
    createdAt: Date!
    updatedAt: Date
    deletedAt: Date
}

union Paragraph =
    | TextParagraph
    | ImageParagraph
    | H1Paragraph
    | H2Paragraph

type TextParagraph {
    text: String!
    spans: [MessageSpan!]!
}

type ImageParagraph {
    url: String!
    image: ImageRef!
    fileMetadata: FileMetadata!
}

type H1Paragraph {
    text: String!
}

type H2Paragraph {
    text: String!
}

input DiscussionInput {
    hub: ID
    title: String
    content: [DiscussionContentInput!]
}

enum DiscussionContentType {
    Text,
    Image,
    H1,
    H2
}

input DiscussionContentInput {
    type: DiscussionContentType!
    text: String
    spans: [MessageSpanInput!]
    image: ImageRefInput
}

type DiscussionConnection {
    items: [Discussion!]!
    cursor: String
}

type DiscussionDraftConnection {
    items: [DiscussionDraft!]!
    cursor: String
}

extend type Query {
    discussion(id: ID!): Discussion
    discussionDraft(id: ID!): DiscussionDraft
    discussions(hubs: [ID!], first: Int!, after: String): DiscussionConnection!
    discussionMyDrafts(first: Int!, after: String): DiscussionDraftConnection!
}

extend type Mutation {
    discussionCreate(input: DiscussionInput!): DiscussionDraft!
    discussionUpdate(id: ID!, input: DiscussionInput!): DiscussionDraft!
    discussionDraftPublish(draftId: ID!): Discussion!
    discussionsDropAll: Boolean!
}