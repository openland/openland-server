type Post {
    id: ID!
    author: User
    title: String!
    content: [Paragraph!]!
    draft: PostDraft
    canEdit: Boolean!

    channel: Channel
    createdAt: Date!
    updatedAt: Date
    deletedAt: Date
}

type PostDraft {
    id: ID!
    author: User
    title: String!
    content: [Paragraph!]!
    publishedCopy: Post

    channel: Channel
    createdAt: Date!
    updatedAt: Date
    deletedAt: Date
}

interface PostSpan {
    offset: Int!
    length: Int!
}

type PostSpanBold implements PostSpan {
    offset: Int!
    length: Int!
}

type PostSpanItalic implements PostSpan {
    offset: Int!
    length: Int!
}

type PostSpanIrony implements PostSpan {
    offset: Int!
    length: Int!
}

type PostSpanLink implements PostSpan {
    offset: Int!
    length: Int!
    url: String!
}

enum PostSpanType {
    Bold,
    Italic,
    Irony,
    Link
}

input PostSpanInput {
    offset: Int!
    length: Int!
    type: PostSpanType!
    url: String
}

union Paragraph =
    | TextParagraph
    | ImageParagraph
    | H1Paragraph
    | H2Paragraph

type TextParagraph {
    text: String!
    spans: [PostSpan!]!
}

type ImageParagraph {
    url: String!
    image: ImageRef!
    fileMetadata: FileMetadata!
}

type H1Paragraph {
    text: String!
}

type H2Paragraph {
    text: String!
}

input PostInput {
    hub: ID
    title: String
    content: [PostContentInput!]
}

enum PostContentType {
    Text,
    Image,
    H1,
    H2
}

input PostContentInput {
    type: PostContentType!
    text: String
    spans: [PostSpanInput!]
    image: ImageRefInput
}

type PostConnection {
    items: [Post!]!
    cursor: String
}

type PostDraftConnection {
    items: [PostDraft!]!
    cursor: String
}

extend type Query {
    post(id: ID!): Post
    postDraft(id: ID!): PostDraft
    posts(hubs: [ID!], first: Int!, after: String): PostConnection!
    postMyDrafts(first: Int!, after: String): PostDraftConnection!
}

extend type Mutation {
    postDraftCreate(input: PostInput!): PostDraft!
    postDraftUpdate(id: ID!, input: PostInput!): PostDraft!
    postDraftPublish(id: ID!): Post!
    postsDropAll: Boolean!
}