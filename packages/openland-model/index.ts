// THIS FILE IS AUTOGENERATED! DO NOT TRY TO EDIT!
import { SEntity } from 'foundation-orm/SEntity';
import { SNamespace } from 'foundation-orm/SNamespace';
import { SEntityFactory } from 'foundation-orm/SEntityFactory';
import { SConnection } from 'foundation-orm/SConnection';
import { SContext } from 'foundation-orm/SContext';

export interface OnlineShape {
    lastSeen: number;
}

export class Online extends SEntity {
    get uid() { return this._value.uid; }
    get lastSeen() {
        return this._value.lastSeen;
    }
    set lastSeen(value: number) {
        this._checkIsWritable();
        if (value ===  this._value.lastSeen) { return; }
        this._value.lastSeen = value;
        this._markDirty();
    }
}

export class OnlineFactory extends SEntityFactory<Online> {
    constructor(connection: SConnection) {
        super(connection, new SNamespace('online'));
    }
    async findById(uid: number) {
        return await this._findById([uid]);
    }
    protected _createEntity(context: SContext, namespace: SNamespace, id: (string | number)[], value: any) {
        return new Online(context, namespace, id, value);
    }
}
export interface PresenceShape {
    lastSeen: number;
    lastSeenTimeout: number;
    platform: string;
}

export class Presence extends SEntity {
    get uid() { return this._value.uid; }
    get tid() { return this._value.tid; }
    get lastSeen() {
        return this._value.lastSeen;
    }
    set lastSeen(value: number) {
        this._checkIsWritable();
        if (value ===  this._value.lastSeen) { return; }
        this._value.lastSeen = value;
        this._markDirty();
    }
    get lastSeenTimeout() {
        return this._value.lastSeenTimeout;
    }
    set lastSeenTimeout(value: number) {
        this._checkIsWritable();
        if (value ===  this._value.lastSeenTimeout) { return; }
        this._value.lastSeenTimeout = value;
        this._markDirty();
    }
    get platform() {
        return this._value.platform;
    }
    set platform(value: string) {
        this._checkIsWritable();
        if (value ===  this._value.platform) { return; }
        this._value.platform = value;
        this._markDirty();
    }
}

export class PresenceFactory extends SEntityFactory<Presence> {
    constructor(connection: SConnection) {
        super(connection, new SNamespace('presence'));
    }
    async findById(uid: number, tid: string) {
        return await this._findById([uid, tid]);
    }
    protected _createEntity(context: SContext, namespace: SNamespace, id: (string | number)[], value: any) {
        return new Presence(context, namespace, id, value);
    }
}
