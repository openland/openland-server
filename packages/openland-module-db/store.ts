// THIS FILE IS AUTOGENERATED! DO NOT TRY TO EDIT!
// @ts-ignore
import { Context } from '@openland/context';
// @ts-ignore
import { Subspace } from '@openland/foundationdb';
// @ts-ignore
import { EntityStore } from '@openland/foundationdb-entity';
// @ts-ignore
import { AtomicIntegerFactory, AtomicBooleanFactory } from '@openland/foundationdb-entity';

export class UserCounterFactory extends AtomicIntegerFactory {

    static async create(store: EntityStore) {
        let directory = await store.resolveAtomicDirectory('userCounter');
        return new UserCounterFactory(store, directory);
    }

    private constructor(store: EntityStore, subspace: Subspace) {
        super(store, subspace);
    }

    byId(uid: number) {
        return this._findById([uid]);
    }

    get(ctx: Context, uid: number) {
        return this._get(ctx, [uid]);
    }

    set(ctx: Context, uid: number, value: number) {
        return this._set(ctx, [uid], value);
    }

    add(ctx: Context, uid: number, value: number) {
        return this._add(ctx, [uid], value);
    }

    increment(ctx: Context, uid: number) {
        return this._increment(ctx, [uid]);
    }

    decrement(ctx: Context, uid: number) {
        return this._decrement(ctx, [uid]);
    }
}

export class UserMessagesSentCounterFactory extends AtomicIntegerFactory {

    static async create(store: EntityStore) {
        let directory = await store.resolveAtomicDirectory('userMessagesSentCounter');
        return new UserMessagesSentCounterFactory(store, directory);
    }

    private constructor(store: EntityStore, subspace: Subspace) {
        super(store, subspace);
    }

    byId(uid: number) {
        return this._findById([uid]);
    }

    get(ctx: Context, uid: number) {
        return this._get(ctx, [uid]);
    }

    set(ctx: Context, uid: number, value: number) {
        return this._set(ctx, [uid], value);
    }

    add(ctx: Context, uid: number, value: number) {
        return this._add(ctx, [uid], value);
    }

    increment(ctx: Context, uid: number) {
        return this._increment(ctx, [uid]);
    }

    decrement(ctx: Context, uid: number) {
        return this._decrement(ctx, [uid]);
    }
}

export class UserMessagesReceivedCounterFactory extends AtomicIntegerFactory {

    static async create(store: EntityStore) {
        let directory = await store.resolveAtomicDirectory('userMessagesReceivedCounter');
        return new UserMessagesReceivedCounterFactory(store, directory);
    }

    private constructor(store: EntityStore, subspace: Subspace) {
        super(store, subspace);
    }

    byId(uid: number) {
        return this._findById([uid]);
    }

    get(ctx: Context, uid: number) {
        return this._get(ctx, [uid]);
    }

    set(ctx: Context, uid: number, value: number) {
        return this._set(ctx, [uid], value);
    }

    add(ctx: Context, uid: number, value: number) {
        return this._add(ctx, [uid], value);
    }

    increment(ctx: Context, uid: number) {
        return this._increment(ctx, [uid]);
    }

    decrement(ctx: Context, uid: number) {
        return this._decrement(ctx, [uid]);
    }
}

export class UserMessagesChatsCounterFactory extends AtomicIntegerFactory {

    static async create(store: EntityStore) {
        let directory = await store.resolveAtomicDirectory('userMessagesChatsCounter');
        return new UserMessagesChatsCounterFactory(store, directory);
    }

    private constructor(store: EntityStore, subspace: Subspace) {
        super(store, subspace);
    }

    byId(uid: number) {
        return this._findById([uid]);
    }

    get(ctx: Context, uid: number) {
        return this._get(ctx, [uid]);
    }

    set(ctx: Context, uid: number, value: number) {
        return this._set(ctx, [uid], value);
    }

    add(ctx: Context, uid: number, value: number) {
        return this._add(ctx, [uid], value);
    }

    increment(ctx: Context, uid: number) {
        return this._increment(ctx, [uid]);
    }

    decrement(ctx: Context, uid: number) {
        return this._decrement(ctx, [uid]);
    }
}

export class UserMessagesDirectChatsCounterFactory extends AtomicIntegerFactory {

    static async create(store: EntityStore) {
        let directory = await store.resolveAtomicDirectory('userMessagesDirectChatsCounter');
        return new UserMessagesDirectChatsCounterFactory(store, directory);
    }

    private constructor(store: EntityStore, subspace: Subspace) {
        super(store, subspace);
    }

    byId(uid: number) {
        return this._findById([uid]);
    }

    get(ctx: Context, uid: number) {
        return this._get(ctx, [uid]);
    }

    set(ctx: Context, uid: number, value: number) {
        return this._set(ctx, [uid], value);
    }

    add(ctx: Context, uid: number, value: number) {
        return this._add(ctx, [uid], value);
    }

    increment(ctx: Context, uid: number) {
        return this._increment(ctx, [uid]);
    }

    decrement(ctx: Context, uid: number) {
        return this._decrement(ctx, [uid]);
    }
}

export class UserDialogCounterFactory extends AtomicIntegerFactory {

    static async create(store: EntityStore) {
        let directory = await store.resolveAtomicDirectory('userDialogCounter');
        return new UserDialogCounterFactory(store, directory);
    }

    private constructor(store: EntityStore, subspace: Subspace) {
        super(store, subspace);
    }

    byId(uid: number, cid: number) {
        return this._findById([uid, cid]);
    }

    get(ctx: Context, uid: number, cid: number) {
        return this._get(ctx, [uid, cid]);
    }

    set(ctx: Context, uid: number, cid: number, value: number) {
        return this._set(ctx, [uid, cid], value);
    }

    add(ctx: Context, uid: number, cid: number, value: number) {
        return this._add(ctx, [uid, cid], value);
    }

    increment(ctx: Context, uid: number, cid: number) {
        return this._increment(ctx, [uid, cid]);
    }

    decrement(ctx: Context, uid: number, cid: number) {
        return this._decrement(ctx, [uid, cid]);
    }
}

export class UserDialogHaveMentionFactory extends AtomicBooleanFactory {

    static async create(store: EntityStore) {
        let directory = await store.resolveAtomicDirectory('userDialogHaveMention');
        return new UserDialogHaveMentionFactory(store, directory);
    }

    private constructor(store: EntityStore, subspace: Subspace) {
        super(store, subspace);
    }

    byId(uid: number, cid: number) {
        return this._findById([uid, cid]);
    }

    get(ctx: Context, uid: number, cid: number) {
        return this._get(ctx, [uid, cid]);
    }

    set(ctx: Context, uid: number, cid: number, value: boolean) {
        return this._set(ctx, [uid, cid], value);
    }

    invert(ctx: Context, uid: number, cid: number) {
        return this._invert(ctx, [uid, cid]);
    }
}

export class NotificationCenterCounterFactory extends AtomicIntegerFactory {

    static async create(store: EntityStore) {
        let directory = await store.resolveAtomicDirectory('notificationCenterCounter');
        return new NotificationCenterCounterFactory(store, directory);
    }

    private constructor(store: EntityStore, subspace: Subspace) {
        super(store, subspace);
    }

    byId(ncid: number) {
        return this._findById([ncid]);
    }

    get(ctx: Context, ncid: number) {
        return this._get(ctx, [ncid]);
    }

    set(ctx: Context, ncid: number, value: number) {
        return this._set(ctx, [ncid], value);
    }

    add(ctx: Context, ncid: number, value: number) {
        return this._add(ctx, [ncid], value);
    }

    increment(ctx: Context, ncid: number) {
        return this._increment(ctx, [ncid]);
    }

    decrement(ctx: Context, ncid: number) {
        return this._decrement(ctx, [ncid]);
    }
}
