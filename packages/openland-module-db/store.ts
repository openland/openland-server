// THIS FILE IS AUTOGENERATED! DO NOT TRY TO EDIT!
// @ts-ignore
import { Context } from '@openland/context';
// @ts-ignore
import { Subspace, Watch, RangeOptions } from '@openland/foundationdb';
// @ts-ignore
import { EntityStorage, BaseStore, codecs as c } from '@openland/foundationdb-entity';
// @ts-ignore
import { AtomicIntegerFactory, AtomicBooleanFactory } from '@openland/foundationdb-entity';
// @ts-ignore
import { Entity, EntityFactory, EntityDescriptor, SecondaryIndexDescriptor, ShapeWithMetadata, PrimaryKeyDescriptor, FieldDescriptor, StreamProps } from '@openland/foundationdb-entity';

export class UserCounterFactory extends AtomicIntegerFactory {

    static async open(storage: EntityStorage) {
        let directory = await storage.resolveAtomicDirectory('userCounter');
        return new UserCounterFactory(storage, directory);
    }

    private constructor(storage: EntityStorage, subspace: Subspace) {
        super(storage, subspace);
    }

    byId(uid: number) {
        return this._findById([uid]);
    }

    get(ctx: Context, uid: number) {
        return this._get(ctx, [uid]);
    }

    set(ctx: Context, uid: number, value: number) {
        return this._set(ctx, [uid], value);
    }

    add(ctx: Context, uid: number, value: number) {
        return this._add(ctx, [uid], value);
    }

    increment(ctx: Context, uid: number) {
        return this._increment(ctx, [uid]);
    }

    decrement(ctx: Context, uid: number) {
        return this._decrement(ctx, [uid]);
    }
}

export class UserMessagesSentCounterFactory extends AtomicIntegerFactory {

    static async open(storage: EntityStorage) {
        let directory = await storage.resolveAtomicDirectory('userMessagesSentCounter');
        return new UserMessagesSentCounterFactory(storage, directory);
    }

    private constructor(storage: EntityStorage, subspace: Subspace) {
        super(storage, subspace);
    }

    byId(uid: number) {
        return this._findById([uid]);
    }

    get(ctx: Context, uid: number) {
        return this._get(ctx, [uid]);
    }

    set(ctx: Context, uid: number, value: number) {
        return this._set(ctx, [uid], value);
    }

    add(ctx: Context, uid: number, value: number) {
        return this._add(ctx, [uid], value);
    }

    increment(ctx: Context, uid: number) {
        return this._increment(ctx, [uid]);
    }

    decrement(ctx: Context, uid: number) {
        return this._decrement(ctx, [uid]);
    }
}

export class UserMessagesSentInDirectChatTotalCounterFactory extends AtomicIntegerFactory {

    static async open(storage: EntityStorage) {
        let directory = await storage.resolveAtomicDirectory('userMessagesSentInDirectChatTotalCounter');
        return new UserMessagesSentInDirectChatTotalCounterFactory(storage, directory);
    }

    private constructor(storage: EntityStorage, subspace: Subspace) {
        super(storage, subspace);
    }

    byId(uid: number) {
        return this._findById([uid]);
    }

    get(ctx: Context, uid: number) {
        return this._get(ctx, [uid]);
    }

    set(ctx: Context, uid: number, value: number) {
        return this._set(ctx, [uid], value);
    }

    add(ctx: Context, uid: number, value: number) {
        return this._add(ctx, [uid], value);
    }

    increment(ctx: Context, uid: number) {
        return this._increment(ctx, [uid]);
    }

    decrement(ctx: Context, uid: number) {
        return this._decrement(ctx, [uid]);
    }
}

export class UserMessagesReceivedCounterFactory extends AtomicIntegerFactory {

    static async open(storage: EntityStorage) {
        let directory = await storage.resolveAtomicDirectory('userMessagesReceivedCounter');
        return new UserMessagesReceivedCounterFactory(storage, directory);
    }

    private constructor(storage: EntityStorage, subspace: Subspace) {
        super(storage, subspace);
    }

    byId(uid: number) {
        return this._findById([uid]);
    }

    get(ctx: Context, uid: number) {
        return this._get(ctx, [uid]);
    }

    set(ctx: Context, uid: number, value: number) {
        return this._set(ctx, [uid], value);
    }

    add(ctx: Context, uid: number, value: number) {
        return this._add(ctx, [uid], value);
    }

    increment(ctx: Context, uid: number) {
        return this._increment(ctx, [uid]);
    }

    decrement(ctx: Context, uid: number) {
        return this._decrement(ctx, [uid]);
    }
}

export class UserMessagesChatsCounterFactory extends AtomicIntegerFactory {

    static async open(storage: EntityStorage) {
        let directory = await storage.resolveAtomicDirectory('userMessagesChatsCounter');
        return new UserMessagesChatsCounterFactory(storage, directory);
    }

    private constructor(storage: EntityStorage, subspace: Subspace) {
        super(storage, subspace);
    }

    byId(uid: number) {
        return this._findById([uid]);
    }

    get(ctx: Context, uid: number) {
        return this._get(ctx, [uid]);
    }

    set(ctx: Context, uid: number, value: number) {
        return this._set(ctx, [uid], value);
    }

    add(ctx: Context, uid: number, value: number) {
        return this._add(ctx, [uid], value);
    }

    increment(ctx: Context, uid: number) {
        return this._increment(ctx, [uid]);
    }

    decrement(ctx: Context, uid: number) {
        return this._decrement(ctx, [uid]);
    }
}

export class UserMessagesDirectChatsCounterFactory extends AtomicIntegerFactory {

    static async open(storage: EntityStorage) {
        let directory = await storage.resolveAtomicDirectory('userMessagesDirectChatsCounter');
        return new UserMessagesDirectChatsCounterFactory(storage, directory);
    }

    private constructor(storage: EntityStorage, subspace: Subspace) {
        super(storage, subspace);
    }

    byId(uid: number) {
        return this._findById([uid]);
    }

    get(ctx: Context, uid: number) {
        return this._get(ctx, [uid]);
    }

    set(ctx: Context, uid: number, value: number) {
        return this._set(ctx, [uid], value);
    }

    add(ctx: Context, uid: number, value: number) {
        return this._add(ctx, [uid], value);
    }

    increment(ctx: Context, uid: number) {
        return this._increment(ctx, [uid]);
    }

    decrement(ctx: Context, uid: number) {
        return this._decrement(ctx, [uid]);
    }
}

export class UserSuccessfulInvitesCounterFactory extends AtomicIntegerFactory {

    static async open(storage: EntityStorage) {
        let directory = await storage.resolveAtomicDirectory('userSuccessfulInvitesCounter');
        return new UserSuccessfulInvitesCounterFactory(storage, directory);
    }

    private constructor(storage: EntityStorage, subspace: Subspace) {
        super(storage, subspace);
    }

    byId(uid: number) {
        return this._findById([uid]);
    }

    get(ctx: Context, uid: number) {
        return this._get(ctx, [uid]);
    }

    set(ctx: Context, uid: number, value: number) {
        return this._set(ctx, [uid], value);
    }

    add(ctx: Context, uid: number, value: number) {
        return this._add(ctx, [uid], value);
    }

    increment(ctx: Context, uid: number) {
        return this._increment(ctx, [uid]);
    }

    decrement(ctx: Context, uid: number) {
        return this._decrement(ctx, [uid]);
    }
}

export class UserDialogCounterFactory extends AtomicIntegerFactory {

    static async open(storage: EntityStorage) {
        let directory = await storage.resolveAtomicDirectory('userDialogCounter');
        return new UserDialogCounterFactory(storage, directory);
    }

    private constructor(storage: EntityStorage, subspace: Subspace) {
        super(storage, subspace);
    }

    byId(uid: number, cid: number) {
        return this._findById([uid, cid]);
    }

    get(ctx: Context, uid: number, cid: number) {
        return this._get(ctx, [uid, cid]);
    }

    set(ctx: Context, uid: number, cid: number, value: number) {
        return this._set(ctx, [uid, cid], value);
    }

    add(ctx: Context, uid: number, cid: number, value: number) {
        return this._add(ctx, [uid, cid], value);
    }

    increment(ctx: Context, uid: number, cid: number) {
        return this._increment(ctx, [uid, cid]);
    }

    decrement(ctx: Context, uid: number, cid: number) {
        return this._decrement(ctx, [uid, cid]);
    }
}

export class UserDialogHaveMentionFactory extends AtomicBooleanFactory {

    static async open(storage: EntityStorage) {
        let directory = await storage.resolveAtomicDirectory('userDialogHaveMention');
        return new UserDialogHaveMentionFactory(storage, directory);
    }

    private constructor(storage: EntityStorage, subspace: Subspace) {
        super(storage, subspace);
    }

    byId(uid: number, cid: number) {
        return this._findById([uid, cid]);
    }

    get(ctx: Context, uid: number, cid: number) {
        return this._get(ctx, [uid, cid]);
    }

    set(ctx: Context, uid: number, cid: number, value: boolean) {
        return this._set(ctx, [uid, cid], value);
    }

    invert(ctx: Context, uid: number, cid: number) {
        return this._invert(ctx, [uid, cid]);
    }
}

export class NotificationCenterCounterFactory extends AtomicIntegerFactory {

    static async open(storage: EntityStorage) {
        let directory = await storage.resolveAtomicDirectory('notificationCenterCounter');
        return new NotificationCenterCounterFactory(storage, directory);
    }

    private constructor(storage: EntityStorage, subspace: Subspace) {
        super(storage, subspace);
    }

    byId(ncid: number) {
        return this._findById([ncid]);
    }

    get(ctx: Context, ncid: number) {
        return this._get(ctx, [ncid]);
    }

    set(ctx: Context, ncid: number, value: number) {
        return this._set(ctx, [ncid], value);
    }

    add(ctx: Context, ncid: number, value: number) {
        return this._add(ctx, [ncid], value);
    }

    increment(ctx: Context, ncid: number) {
        return this._increment(ctx, [ncid]);
    }

    decrement(ctx: Context, ncid: number) {
        return this._decrement(ctx, [ncid]);
    }
}

export class UserAudienceCounterFactory extends AtomicIntegerFactory {

    static async open(storage: EntityStorage) {
        let directory = await storage.resolveAtomicDirectory('userAudienceCounter');
        return new UserAudienceCounterFactory(storage, directory);
    }

    private constructor(storage: EntityStorage, subspace: Subspace) {
        super(storage, subspace);
    }

    byId(uid: number) {
        return this._findById([uid]);
    }

    get(ctx: Context, uid: number) {
        return this._get(ctx, [uid]);
    }

    set(ctx: Context, uid: number, value: number) {
        return this._set(ctx, [uid], value);
    }

    add(ctx: Context, uid: number, value: number) {
        return this._add(ctx, [uid], value);
    }

    increment(ctx: Context, uid: number) {
        return this._increment(ctx, [uid]);
    }

    decrement(ctx: Context, uid: number) {
        return this._decrement(ctx, [uid]);
    }
}

export class UserMessagesSentInDirectChatCounterFactory extends AtomicIntegerFactory {

    static async open(storage: EntityStorage) {
        let directory = await storage.resolveAtomicDirectory('userMessagesSentInDirectChatCounter');
        return new UserMessagesSentInDirectChatCounterFactory(storage, directory);
    }

    private constructor(storage: EntityStorage, subspace: Subspace) {
        super(storage, subspace);
    }

    byId(uid: number, cid: number) {
        return this._findById([uid, cid]);
    }

    get(ctx: Context, uid: number, cid: number) {
        return this._get(ctx, [uid, cid]);
    }

    set(ctx: Context, uid: number, cid: number, value: number) {
        return this._set(ctx, [uid, cid], value);
    }

    add(ctx: Context, uid: number, cid: number, value: number) {
        return this._add(ctx, [uid, cid], value);
    }

    increment(ctx: Context, uid: number, cid: number) {
        return this._increment(ctx, [uid, cid]);
    }

    decrement(ctx: Context, uid: number, cid: number) {
        return this._decrement(ctx, [uid, cid]);
    }
}

export class User2WayDirectChatsCounterFactory extends AtomicIntegerFactory {

    static async open(storage: EntityStorage) {
        let directory = await storage.resolveAtomicDirectory('user2WayDirectChatsCounter');
        return new User2WayDirectChatsCounterFactory(storage, directory);
    }

    private constructor(storage: EntityStorage, subspace: Subspace) {
        super(storage, subspace);
    }

    byId(uid: number) {
        return this._findById([uid]);
    }

    get(ctx: Context, uid: number) {
        return this._get(ctx, [uid]);
    }

    set(ctx: Context, uid: number, value: number) {
        return this._set(ctx, [uid], value);
    }

    add(ctx: Context, uid: number, value: number) {
        return this._add(ctx, [uid], value);
    }

    increment(ctx: Context, uid: number) {
        return this._increment(ctx, [uid]);
    }

    decrement(ctx: Context, uid: number) {
        return this._decrement(ctx, [uid]);
    }
}

export class GlobalStatisticsCountersFactory extends AtomicIntegerFactory {

    static async open(storage: EntityStorage) {
        let directory = await storage.resolveAtomicDirectory('globalStatisticsCounters');
        return new GlobalStatisticsCountersFactory(storage, directory);
    }

    private constructor(storage: EntityStorage, subspace: Subspace) {
        super(storage, subspace);
    }

    byId(name: string) {
        return this._findById([name]);
    }

    get(ctx: Context, name: string) {
        return this._get(ctx, [name]);
    }

    set(ctx: Context, name: string, value: number) {
        return this._set(ctx, [name], value);
    }

    add(ctx: Context, name: string, value: number) {
        return this._add(ctx, [name], value);
    }

    increment(ctx: Context, name: string) {
        return this._increment(ctx, [name]);
    }

    decrement(ctx: Context, name: string) {
        return this._decrement(ctx, [name]);
    }
}

export interface EnvironmentShape {
    production: number;
    comment: string;
}

export interface EnvironmentCreateShape {
    comment: string;
}

export class Environment extends Entity<EnvironmentShape> {
    get production(): number { return this._rawValue.production; }
    get comment(): string { return this._rawValue.comment; }
    set comment(value: string) {
        let normalized = this.descriptor.codec.fields.comment.normalize(value);
        if (this._rawValue.comment !== normalized) {
            this._rawValue.comment = normalized;
            this._updatedValues.comment = normalized;
            this.invalidate();
        }
    }
}

export class EnvironmentFactory extends EntityFactory<EnvironmentShape, Environment> {

    static async open(storage: EntityStorage) {
        let subspace = await storage.resolveEntityDirectory('environment');
        let secondaryIndexes: SecondaryIndexDescriptor[] = [];
        let primaryKeys: PrimaryKeyDescriptor[] = [];
        primaryKeys.push({ name: 'production', type: 'integer' });
        let fields: FieldDescriptor[] = [];
        fields.push({ name: 'comment', type: { type: 'string' }, secure: false });
        let codec = c.struct({
            production: c.integer,
            comment: c.string,
        });
        let descriptor: EntityDescriptor<EnvironmentShape> = {
            name: 'Environment',
            storageKey: 'environment',
            subspace, codec, secondaryIndexes, storage, primaryKeys, fields
        };
        return new EnvironmentFactory(descriptor);
    }

    private constructor(descriptor: EntityDescriptor<EnvironmentShape>) {
        super(descriptor);
    }

    create(ctx: Context, production: number, src: EnvironmentCreateShape): Promise<Environment> {
        return this._create(ctx, [production], this.descriptor.codec.normalize({ production, ...src }));
    }

    findById(ctx: Context, production: number): Promise<Environment | null> {
        return this._findById(ctx, [production]);
    }

    watch(ctx: Context, production: number): Watch {
        return this._watch(ctx, [production]);
    }

    protected _createEntityInstance(ctx: Context, value: ShapeWithMetadata<EnvironmentShape>): Environment {
        return new Environment([value.production], value, this.descriptor, this._flush, ctx);
    }
}

export interface EnvironmentVariableShape {
    name: string;
    value: string;
}

export interface EnvironmentVariableCreateShape {
    value: string;
}

export class EnvironmentVariable extends Entity<EnvironmentVariableShape> {
    get name(): string { return this._rawValue.name; }
    get value(): string { return this._rawValue.value; }
    set value(value: string) {
        let normalized = this.descriptor.codec.fields.value.normalize(value);
        if (this._rawValue.value !== normalized) {
            this._rawValue.value = normalized;
            this._updatedValues.value = normalized;
            this.invalidate();
        }
    }
}

export class EnvironmentVariableFactory extends EntityFactory<EnvironmentVariableShape, EnvironmentVariable> {

    static async open(storage: EntityStorage) {
        let subspace = await storage.resolveEntityDirectory('environmentVariable');
        let secondaryIndexes: SecondaryIndexDescriptor[] = [];
        let primaryKeys: PrimaryKeyDescriptor[] = [];
        primaryKeys.push({ name: 'name', type: 'string' });
        let fields: FieldDescriptor[] = [];
        fields.push({ name: 'value', type: { type: 'string' }, secure: false });
        let codec = c.struct({
            name: c.string,
            value: c.string,
        });
        let descriptor: EntityDescriptor<EnvironmentVariableShape> = {
            name: 'EnvironmentVariable',
            storageKey: 'environmentVariable',
            subspace, codec, secondaryIndexes, storage, primaryKeys, fields
        };
        return new EnvironmentVariableFactory(descriptor);
    }

    private constructor(descriptor: EntityDescriptor<EnvironmentVariableShape>) {
        super(descriptor);
    }

    create(ctx: Context, name: string, src: EnvironmentVariableCreateShape): Promise<EnvironmentVariable> {
        return this._create(ctx, [name], this.descriptor.codec.normalize({ name, ...src }));
    }

    findById(ctx: Context, name: string): Promise<EnvironmentVariable | null> {
        return this._findById(ctx, [name]);
    }

    watch(ctx: Context, name: string): Watch {
        return this._watch(ctx, [name]);
    }

    protected _createEntityInstance(ctx: Context, value: ShapeWithMetadata<EnvironmentVariableShape>): EnvironmentVariable {
        return new EnvironmentVariable([value.name], value, this.descriptor, this._flush, ctx);
    }
}

export interface OnlineShape {
    uid: number;
    lastSeen: number;
    activeExpires: number | null;
    active: boolean | null;
}

export interface OnlineCreateShape {
    lastSeen: number;
    activeExpires: number | null;
    active: boolean | null;
}

export class Online extends Entity<OnlineShape> {
    get uid(): number { return this._rawValue.uid; }
    get lastSeen(): number { return this._rawValue.lastSeen; }
    set lastSeen(value: number) {
        let normalized = this.descriptor.codec.fields.lastSeen.normalize(value);
        if (this._rawValue.lastSeen !== normalized) {
            this._rawValue.lastSeen = normalized;
            this._updatedValues.lastSeen = normalized;
            this.invalidate();
        }
    }
    get activeExpires(): number | null { return this._rawValue.activeExpires; }
    set activeExpires(value: number | null) {
        let normalized = this.descriptor.codec.fields.activeExpires.normalize(value);
        if (this._rawValue.activeExpires !== normalized) {
            this._rawValue.activeExpires = normalized;
            this._updatedValues.activeExpires = normalized;
            this.invalidate();
        }
    }
    get active(): boolean | null { return this._rawValue.active; }
    set active(value: boolean | null) {
        let normalized = this.descriptor.codec.fields.active.normalize(value);
        if (this._rawValue.active !== normalized) {
            this._rawValue.active = normalized;
            this._updatedValues.active = normalized;
            this.invalidate();
        }
    }
}

export class OnlineFactory extends EntityFactory<OnlineShape, Online> {

    static async open(storage: EntityStorage) {
        let subspace = await storage.resolveEntityDirectory('online');
        let secondaryIndexes: SecondaryIndexDescriptor[] = [];
        let primaryKeys: PrimaryKeyDescriptor[] = [];
        primaryKeys.push({ name: 'uid', type: 'integer' });
        let fields: FieldDescriptor[] = [];
        fields.push({ name: 'lastSeen', type: { type: 'integer' }, secure: false });
        fields.push({ name: 'activeExpires', type: { type: 'optional', inner: { type: 'integer' } }, secure: false });
        fields.push({ name: 'active', type: { type: 'optional', inner: { type: 'boolean' } }, secure: false });
        let codec = c.struct({
            uid: c.integer,
            lastSeen: c.integer,
            activeExpires: c.optional(c.integer),
            active: c.optional(c.boolean),
        });
        let descriptor: EntityDescriptor<OnlineShape> = {
            name: 'Online',
            storageKey: 'online',
            subspace, codec, secondaryIndexes, storage, primaryKeys, fields
        };
        return new OnlineFactory(descriptor);
    }

    private constructor(descriptor: EntityDescriptor<OnlineShape>) {
        super(descriptor);
    }

    create(ctx: Context, uid: number, src: OnlineCreateShape): Promise<Online> {
        return this._create(ctx, [uid], this.descriptor.codec.normalize({ uid, ...src }));
    }

    findById(ctx: Context, uid: number): Promise<Online | null> {
        return this._findById(ctx, [uid]);
    }

    watch(ctx: Context, uid: number): Watch {
        return this._watch(ctx, [uid]);
    }

    protected _createEntityInstance(ctx: Context, value: ShapeWithMetadata<OnlineShape>): Online {
        return new Online([value.uid], value, this.descriptor, this._flush, ctx);
    }
}

export interface PresenceShape {
    uid: number;
    tid: string;
    lastSeen: number;
    lastSeenTimeout: number;
    platform: string;
    active: boolean | null;
}

export interface PresenceCreateShape {
    lastSeen: number;
    lastSeenTimeout: number;
    platform: string;
    active: boolean | null;
}

export class Presence extends Entity<PresenceShape> {
    get uid(): number { return this._rawValue.uid; }
    get tid(): string { return this._rawValue.tid; }
    get lastSeen(): number { return this._rawValue.lastSeen; }
    set lastSeen(value: number) {
        let normalized = this.descriptor.codec.fields.lastSeen.normalize(value);
        if (this._rawValue.lastSeen !== normalized) {
            this._rawValue.lastSeen = normalized;
            this._updatedValues.lastSeen = normalized;
            this.invalidate();
        }
    }
    get lastSeenTimeout(): number { return this._rawValue.lastSeenTimeout; }
    set lastSeenTimeout(value: number) {
        let normalized = this.descriptor.codec.fields.lastSeenTimeout.normalize(value);
        if (this._rawValue.lastSeenTimeout !== normalized) {
            this._rawValue.lastSeenTimeout = normalized;
            this._updatedValues.lastSeenTimeout = normalized;
            this.invalidate();
        }
    }
    get platform(): string { return this._rawValue.platform; }
    set platform(value: string) {
        let normalized = this.descriptor.codec.fields.platform.normalize(value);
        if (this._rawValue.platform !== normalized) {
            this._rawValue.platform = normalized;
            this._updatedValues.platform = normalized;
            this.invalidate();
        }
    }
    get active(): boolean | null { return this._rawValue.active; }
    set active(value: boolean | null) {
        let normalized = this.descriptor.codec.fields.active.normalize(value);
        if (this._rawValue.active !== normalized) {
            this._rawValue.active = normalized;
            this._updatedValues.active = normalized;
            this.invalidate();
        }
    }
}

export class PresenceFactory extends EntityFactory<PresenceShape, Presence> {

    static async open(storage: EntityStorage) {
        let subspace = await storage.resolveEntityDirectory('presence');
        let secondaryIndexes: SecondaryIndexDescriptor[] = [];
        secondaryIndexes.push({ name: 'user', storageKey: 'user', type: { type: 'range', fields: [{ name: 'uid', type: 'integer' }, { name: 'lastSeen', type: 'integer' }] }, subspace: await storage.resolveEntityIndexDirectory('presence', 'user'), condition: undefined });
        let primaryKeys: PrimaryKeyDescriptor[] = [];
        primaryKeys.push({ name: 'uid', type: 'integer' });
        primaryKeys.push({ name: 'tid', type: 'string' });
        let fields: FieldDescriptor[] = [];
        fields.push({ name: 'lastSeen', type: { type: 'integer' }, secure: false });
        fields.push({ name: 'lastSeenTimeout', type: { type: 'integer' }, secure: false });
        fields.push({ name: 'platform', type: { type: 'string' }, secure: false });
        fields.push({ name: 'active', type: { type: 'optional', inner: { type: 'boolean' } }, secure: false });
        let codec = c.struct({
            uid: c.integer,
            tid: c.string,
            lastSeen: c.integer,
            lastSeenTimeout: c.integer,
            platform: c.string,
            active: c.optional(c.boolean),
        });
        let descriptor: EntityDescriptor<PresenceShape> = {
            name: 'Presence',
            storageKey: 'presence',
            subspace, codec, secondaryIndexes, storage, primaryKeys, fields
        };
        return new PresenceFactory(descriptor);
    }

    private constructor(descriptor: EntityDescriptor<PresenceShape>) {
        super(descriptor);
    }

    readonly user = Object.freeze({
        findAll: async (ctx: Context, uid: number) => {
            return (await this._query(ctx, this.descriptor.secondaryIndexes[0], [uid])).items;
        },
        query: (ctx: Context, uid: number, opts?: RangeOptions<number>) => {
            return this._query(ctx, this.descriptor.secondaryIndexes[0], [uid], { limit: opts && opts.limit, reverse: opts && opts.reverse, after: opts && opts.after ? [opts.after] : undefined});
        },
        stream: (uid: number, opts?: StreamProps) => {
            return this._createStream(this.descriptor.secondaryIndexes[0], [uid], opts);
        },
        liveStream: (ctx: Context, uid: number, opts?: StreamProps) => {
            return this._createLiveStream(ctx, this.descriptor.secondaryIndexes[0], [uid], opts);
        }
    });

    create(ctx: Context, uid: number, tid: string, src: PresenceCreateShape): Promise<Presence> {
        return this._create(ctx, [uid, tid], this.descriptor.codec.normalize({ uid, tid, ...src }));
    }

    findById(ctx: Context, uid: number, tid: string): Promise<Presence | null> {
        return this._findById(ctx, [uid, tid]);
    }

    watch(ctx: Context, uid: number, tid: string): Watch {
        return this._watch(ctx, [uid, tid]);
    }

    protected _createEntityInstance(ctx: Context, value: ShapeWithMetadata<PresenceShape>): Presence {
        return new Presence([value.uid, value.tid], value, this.descriptor, this._flush, ctx);
    }
}

export interface Store extends BaseStore {
    readonly UserCounter: UserCounterFactory;
    readonly UserMessagesSentCounter: UserMessagesSentCounterFactory;
    readonly UserMessagesSentInDirectChatTotalCounter: UserMessagesSentInDirectChatTotalCounterFactory;
    readonly UserMessagesReceivedCounter: UserMessagesReceivedCounterFactory;
    readonly UserMessagesChatsCounter: UserMessagesChatsCounterFactory;
    readonly UserMessagesDirectChatsCounter: UserMessagesDirectChatsCounterFactory;
    readonly UserSuccessfulInvitesCounter: UserSuccessfulInvitesCounterFactory;
    readonly UserDialogCounter: UserDialogCounterFactory;
    readonly UserDialogHaveMention: UserDialogHaveMentionFactory;
    readonly NotificationCenterCounter: NotificationCenterCounterFactory;
    readonly UserAudienceCounter: UserAudienceCounterFactory;
    readonly UserMessagesSentInDirectChatCounter: UserMessagesSentInDirectChatCounterFactory;
    readonly User2WayDirectChatsCounter: User2WayDirectChatsCounterFactory;
    readonly GlobalStatisticsCounters: GlobalStatisticsCountersFactory;
    readonly Environment: EnvironmentFactory;
    readonly EnvironmentVariable: EnvironmentVariableFactory;
    readonly Online: OnlineFactory;
    readonly Presence: PresenceFactory;
}

export async function openStore(storage: EntityStorage): Promise<Store> {
    let UserCounterPromise = UserCounterFactory.open(storage);
    let UserMessagesSentCounterPromise = UserMessagesSentCounterFactory.open(storage);
    let UserMessagesSentInDirectChatTotalCounterPromise = UserMessagesSentInDirectChatTotalCounterFactory.open(storage);
    let UserMessagesReceivedCounterPromise = UserMessagesReceivedCounterFactory.open(storage);
    let UserMessagesChatsCounterPromise = UserMessagesChatsCounterFactory.open(storage);
    let UserMessagesDirectChatsCounterPromise = UserMessagesDirectChatsCounterFactory.open(storage);
    let UserSuccessfulInvitesCounterPromise = UserSuccessfulInvitesCounterFactory.open(storage);
    let UserDialogCounterPromise = UserDialogCounterFactory.open(storage);
    let UserDialogHaveMentionPromise = UserDialogHaveMentionFactory.open(storage);
    let NotificationCenterCounterPromise = NotificationCenterCounterFactory.open(storage);
    let UserAudienceCounterPromise = UserAudienceCounterFactory.open(storage);
    let UserMessagesSentInDirectChatCounterPromise = UserMessagesSentInDirectChatCounterFactory.open(storage);
    let User2WayDirectChatsCounterPromise = User2WayDirectChatsCounterFactory.open(storage);
    let GlobalStatisticsCountersPromise = GlobalStatisticsCountersFactory.open(storage);
    let EnvironmentPromise = EnvironmentFactory.open(storage);
    let EnvironmentVariablePromise = EnvironmentVariableFactory.open(storage);
    let OnlinePromise = OnlineFactory.open(storage);
    let PresencePromise = PresenceFactory.open(storage);
    return {
        storage,
        UserCounter: await UserCounterPromise,
        UserMessagesSentCounter: await UserMessagesSentCounterPromise,
        UserMessagesSentInDirectChatTotalCounter: await UserMessagesSentInDirectChatTotalCounterPromise,
        UserMessagesReceivedCounter: await UserMessagesReceivedCounterPromise,
        UserMessagesChatsCounter: await UserMessagesChatsCounterPromise,
        UserMessagesDirectChatsCounter: await UserMessagesDirectChatsCounterPromise,
        UserSuccessfulInvitesCounter: await UserSuccessfulInvitesCounterPromise,
        UserDialogCounter: await UserDialogCounterPromise,
        UserDialogHaveMention: await UserDialogHaveMentionPromise,
        NotificationCenterCounter: await NotificationCenterCounterPromise,
        UserAudienceCounter: await UserAudienceCounterPromise,
        UserMessagesSentInDirectChatCounter: await UserMessagesSentInDirectChatCounterPromise,
        User2WayDirectChatsCounter: await User2WayDirectChatsCounterPromise,
        GlobalStatisticsCounters: await GlobalStatisticsCountersPromise,
        Environment: await EnvironmentPromise,
        EnvironmentVariable: await EnvironmentVariablePromise,
        Online: await OnlinePromise,
        Presence: await PresencePromise,
    };
}
