// THIS FILE IS AUTOGENERATED! DO NOT TRY TO EDIT!
import { FDBInstance } from 'foundation-orm/FDBInstance';
import { FEntity } from 'foundation-orm/FEntity';
import { FEntitySchema } from 'foundation-orm/FEntitySchema';
import { FEntityIndex } from 'foundation-orm/FEntityIndex';
import { FNamespace } from 'foundation-orm/FNamespace';
import { FEntityFactory } from 'foundation-orm/FEntityFactory';
import { FConnection } from 'foundation-orm/FConnection';
import { validators } from 'foundation-orm/utils/validators';
import { Context } from 'openland-utils/Context';
// @ts-ignore
import { json, jField, jNumber, jString, jBool, jVec, jEnum, jEnumString } from 'openland-utils/jsonSchema';

export interface EnvironmentShape {
    comment: string;
}

export class Environment extends FEntity {
    readonly entityName: 'Environment' = 'Environment';
    get production(): number { return this._value.production; }
    get comment(): string {
        return this._value.comment;
    }
    set comment(value: string) {
        this._checkIsWritable();
        if (value === this._value.comment) { return; }
        this._value.comment = value;
        this.markDirty();
    }
}

export class EnvironmentFactory extends FEntityFactory<Environment> {
    static schema: FEntitySchema = {
        name: 'Environment',
        editable: true,
        primaryKeys: [
            { name: 'production', type: 'number' },
        ],
        fields: [
            { name: 'comment', type: 'string' },
        ],
        indexes: [
        ],
    };

    private static validate(src: any) {
        validators.notNull('production', src.production);
        validators.isNumber('production', src.production);
        validators.notNull('comment', src.comment);
        validators.isString('comment', src.comment);
    }

    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'environment'),
            { enableVersioning: false, enableTimestamps: false, validator: EnvironmentFactory.validate, hasLiveStreams: false },
            [],
            'Environment'
        );
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'production': rawId[0] };
    }
    async findById(ctx: Context, production: number) {
        return await this._findById(ctx, [production]);
    }
    async create(ctx: Context, production: number, shape: EnvironmentShape) {
        return await this._create(ctx, [production], { production, ...shape });
    }
    watch(ctx: Context, production: number, cb: () => void) {
        return this._watch(ctx, [production], cb);
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new Environment(ctx, this.connection, this.namespace, this.directory, [value.production], value, this.options, isNew, this.indexes, 'Environment');
    }
}
export interface EnvironmentVariableShape {
    value: string;
}

export class EnvironmentVariable extends FEntity {
    readonly entityName: 'EnvironmentVariable' = 'EnvironmentVariable';
    get name(): string { return this._value.name; }
    get value(): string {
        return this._value.value;
    }
    set value(value: string) {
        this._checkIsWritable();
        if (value === this._value.value) { return; }
        this._value.value = value;
        this.markDirty();
    }
}

export class EnvironmentVariableFactory extends FEntityFactory<EnvironmentVariable> {
    static schema: FEntitySchema = {
        name: 'EnvironmentVariable',
        editable: true,
        primaryKeys: [
            { name: 'name', type: 'string' },
        ],
        fields: [
            { name: 'value', type: 'string' },
        ],
        indexes: [
        ],
    };

    private static validate(src: any) {
        validators.notNull('name', src.name);
        validators.isString('name', src.name);
        validators.notNull('value', src.value);
        validators.isString('value', src.value);
    }

    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'environmentVariable'),
            { enableVersioning: true, enableTimestamps: true, validator: EnvironmentVariableFactory.validate, hasLiveStreams: false },
            [],
            'EnvironmentVariable'
        );
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'name': rawId[0] };
    }
    async findById(ctx: Context, name: string) {
        return await this._findById(ctx, [name]);
    }
    async create(ctx: Context, name: string, shape: EnvironmentVariableShape) {
        return await this._create(ctx, [name], { name, ...shape });
    }
    watch(ctx: Context, name: string, cb: () => void) {
        return this._watch(ctx, [name], cb);
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new EnvironmentVariable(ctx, this.connection, this.namespace, this.directory, [value.name], value, this.options, isNew, this.indexes, 'EnvironmentVariable');
    }
}
export interface OnlineShape {
    lastSeen: number;
    activeExpires?: number| null;
    active?: boolean| null;
}

export class Online extends FEntity {
    readonly entityName: 'Online' = 'Online';
    get uid(): number { return this._value.uid; }
    get lastSeen(): number {
        return this._value.lastSeen;
    }
    set lastSeen(value: number) {
        this._checkIsWritable();
        if (value === this._value.lastSeen) { return; }
        this._value.lastSeen = value;
        this.markDirty();
    }
    get activeExpires(): number | null {
        let res = this._value.activeExpires;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set activeExpires(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.activeExpires) { return; }
        this._value.activeExpires = value;
        this.markDirty();
    }
    get active(): boolean | null {
        let res = this._value.active;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set active(value: boolean | null) {
        this._checkIsWritable();
        if (value === this._value.active) { return; }
        this._value.active = value;
        this.markDirty();
    }
}

export class OnlineFactory extends FEntityFactory<Online> {
    static schema: FEntitySchema = {
        name: 'Online',
        editable: false,
        primaryKeys: [
            { name: 'uid', type: 'number' },
        ],
        fields: [
            { name: 'lastSeen', type: 'number' },
            { name: 'activeExpires', type: 'number' },
            { name: 'active', type: 'boolean' },
        ],
        indexes: [
        ],
    };

    private static validate(src: any) {
        validators.notNull('uid', src.uid);
        validators.isNumber('uid', src.uid);
        validators.notNull('lastSeen', src.lastSeen);
        validators.isNumber('lastSeen', src.lastSeen);
        validators.isNumber('activeExpires', src.activeExpires);
        validators.isBoolean('active', src.active);
    }

    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'online'),
            { enableVersioning: false, enableTimestamps: false, validator: OnlineFactory.validate, hasLiveStreams: false },
            [],
            'Online'
        );
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'uid': rawId[0] };
    }
    async findById(ctx: Context, uid: number) {
        return await this._findById(ctx, [uid]);
    }
    async create(ctx: Context, uid: number, shape: OnlineShape) {
        return await this._create(ctx, [uid], { uid, ...shape });
    }
    watch(ctx: Context, uid: number, cb: () => void) {
        return this._watch(ctx, [uid], cb);
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new Online(ctx, this.connection, this.namespace, this.directory, [value.uid], value, this.options, isNew, this.indexes, 'Online');
    }
}
export interface PresenceShape {
    lastSeen: number;
    lastSeenTimeout: number;
    platform: string;
    active?: boolean| null;
}

export class Presence extends FEntity {
    readonly entityName: 'Presence' = 'Presence';
    get uid(): number { return this._value.uid; }
    get tid(): string { return this._value.tid; }
    get lastSeen(): number {
        return this._value.lastSeen;
    }
    set lastSeen(value: number) {
        this._checkIsWritable();
        if (value === this._value.lastSeen) { return; }
        this._value.lastSeen = value;
        this.markDirty();
    }
    get lastSeenTimeout(): number {
        return this._value.lastSeenTimeout;
    }
    set lastSeenTimeout(value: number) {
        this._checkIsWritable();
        if (value === this._value.lastSeenTimeout) { return; }
        this._value.lastSeenTimeout = value;
        this.markDirty();
    }
    get platform(): string {
        return this._value.platform;
    }
    set platform(value: string) {
        this._checkIsWritable();
        if (value === this._value.platform) { return; }
        this._value.platform = value;
        this.markDirty();
    }
    get active(): boolean | null {
        let res = this._value.active;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set active(value: boolean | null) {
        this._checkIsWritable();
        if (value === this._value.active) { return; }
        this._value.active = value;
        this.markDirty();
    }
}

export class PresenceFactory extends FEntityFactory<Presence> {
    static schema: FEntitySchema = {
        name: 'Presence',
        editable: false,
        primaryKeys: [
            { name: 'uid', type: 'number' },
            { name: 'tid', type: 'string' },
        ],
        fields: [
            { name: 'lastSeen', type: 'number' },
            { name: 'lastSeenTimeout', type: 'number' },
            { name: 'platform', type: 'string' },
            { name: 'active', type: 'boolean' },
        ],
        indexes: [
            { name: 'user', type: 'range', fields: ['uid', 'lastSeen'] },
        ],
    };

    private static validate(src: any) {
        validators.notNull('uid', src.uid);
        validators.isNumber('uid', src.uid);
        validators.notNull('tid', src.tid);
        validators.isString('tid', src.tid);
        validators.notNull('lastSeen', src.lastSeen);
        validators.isNumber('lastSeen', src.lastSeen);
        validators.notNull('lastSeenTimeout', src.lastSeenTimeout);
        validators.isNumber('lastSeenTimeout', src.lastSeenTimeout);
        validators.notNull('platform', src.platform);
        validators.isString('platform', src.platform);
        validators.isBoolean('active', src.active);
    }

    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'presence'),
            { enableVersioning: false, enableTimestamps: false, validator: PresenceFactory.validate, hasLiveStreams: false },
            [new FEntityIndex('user', ['uid', 'lastSeen'], false)],
            'Presence'
        );
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 2) { throw Error('Invalid key length!'); }
        return { 'uid': rawId[0], 'tid': rawId[1] };
    }
    async findById(ctx: Context, uid: number, tid: string) {
        return await this._findById(ctx, [uid, tid]);
    }
    async create(ctx: Context, uid: number, tid: string, shape: PresenceShape) {
        return await this._create(ctx, [uid, tid], { uid, tid, ...shape });
    }
    watch(ctx: Context, uid: number, tid: string, cb: () => void) {
        return this._watch(ctx, [uid, tid], cb);
    }
    async allFromUserAfter(ctx: Context, uid: number, after: number) {
        return await this._findRangeAllAfter(ctx, ['__indexes', 'user', uid], after);
    }
    async rangeFromUserAfter(ctx: Context, uid: number, after: number, limit: number, reversed?: boolean) {
        return await this._findRangeAfter(ctx, ['__indexes', 'user', uid], after, limit, reversed);
    }
    async rangeFromUser(ctx: Context, uid: number, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'user', uid], limit, reversed);
    }
    async rangeFromUserWithCursor(ctx: Context, uid: number, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'user', uid], limit, after, reversed);
    }
    async allFromUser(ctx: Context, uid: number) {
        return await this._findAll(ctx, ['__indexes', 'user', uid]);
    }
    createUserStream(ctx: Context, uid: number, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'presence', '__indexes', 'user', uid], limit, after); 
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new Presence(ctx, this.connection, this.namespace, this.directory, [value.uid, value.tid], value, this.options, isNew, this.indexes, 'Presence');
    }
}
export interface AuthTokenShape {
    salt: string;
    uid: number;
    lastIp: string;
    enabled?: boolean| null;
}

export class AuthToken extends FEntity {
    readonly entityName: 'AuthToken' = 'AuthToken';
    get uuid(): string { return this._value.uuid; }
    get salt(): string {
        return this._value.salt;
    }
    set salt(value: string) {
        this._checkIsWritable();
        if (value === this._value.salt) { return; }
        this._value.salt = value;
        this.markDirty();
    }
    get uid(): number {
        return this._value.uid;
    }
    set uid(value: number) {
        this._checkIsWritable();
        if (value === this._value.uid) { return; }
        this._value.uid = value;
        this.markDirty();
    }
    get lastIp(): string {
        return this._value.lastIp;
    }
    set lastIp(value: string) {
        this._checkIsWritable();
        if (value === this._value.lastIp) { return; }
        this._value.lastIp = value;
        this.markDirty();
    }
    get enabled(): boolean | null {
        let res = this._value.enabled;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set enabled(value: boolean | null) {
        this._checkIsWritable();
        if (value === this._value.enabled) { return; }
        this._value.enabled = value;
        this.markDirty();
    }
}

export class AuthTokenFactory extends FEntityFactory<AuthToken> {
    static schema: FEntitySchema = {
        name: 'AuthToken',
        editable: false,
        primaryKeys: [
            { name: 'uuid', type: 'string' },
        ],
        fields: [
            { name: 'salt', type: 'string' },
            { name: 'uid', type: 'number' },
            { name: 'lastIp', type: 'string' },
            { name: 'enabled', type: 'boolean' },
        ],
        indexes: [
            { name: 'salt', type: 'unique', fields: ['salt'], displayName: 'authTokenBySalt' },
            { name: 'user', type: 'range', fields: ['uid', 'uuid'] },
        ],
    };

    private static validate(src: any) {
        validators.notNull('uuid', src.uuid);
        validators.isString('uuid', src.uuid);
        validators.notNull('salt', src.salt);
        validators.isString('salt', src.salt);
        validators.notNull('uid', src.uid);
        validators.isNumber('uid', src.uid);
        validators.notNull('lastIp', src.lastIp);
        validators.isString('lastIp', src.lastIp);
        validators.isBoolean('enabled', src.enabled);
    }

    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'authToken'),
            { enableVersioning: true, enableTimestamps: true, validator: AuthTokenFactory.validate, hasLiveStreams: false },
            [new FEntityIndex('salt', ['salt'], true), new FEntityIndex('user', ['uid', 'uuid'], false, src => src.enabled !== false)],
            'AuthToken'
        );
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'uuid': rawId[0] };
    }
    async findById(ctx: Context, uuid: string) {
        return await this._findById(ctx, [uuid]);
    }
    async create(ctx: Context, uuid: string, shape: AuthTokenShape) {
        return await this._create(ctx, [uuid], { uuid, ...shape });
    }
    watch(ctx: Context, uuid: string, cb: () => void) {
        return this._watch(ctx, [uuid], cb);
    }
    async findFromSalt(ctx: Context, salt: string) {
        return await this._findFromIndex(ctx, ['__indexes', 'salt', salt]);
    }
    async rangeFromSalt(ctx: Context, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'salt'], limit, reversed);
    }
    async rangeFromSaltWithCursor(ctx: Context, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'salt'], limit, after, reversed);
    }
    async allFromSalt(ctx: Context, ) {
        return await this._findAll(ctx, ['__indexes', 'salt']);
    }
    createSaltStream(ctx: Context, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'authToken', '__indexes', 'salt'], limit, after); 
    }
    async allFromUserAfter(ctx: Context, uid: number, after: string) {
        return await this._findRangeAllAfter(ctx, ['__indexes', 'user', uid], after);
    }
    async rangeFromUserAfter(ctx: Context, uid: number, after: string, limit: number, reversed?: boolean) {
        return await this._findRangeAfter(ctx, ['__indexes', 'user', uid], after, limit, reversed);
    }
    async rangeFromUser(ctx: Context, uid: number, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'user', uid], limit, reversed);
    }
    async rangeFromUserWithCursor(ctx: Context, uid: number, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'user', uid], limit, after, reversed);
    }
    async allFromUser(ctx: Context, uid: number) {
        return await this._findAll(ctx, ['__indexes', 'user', uid]);
    }
    createUserStream(ctx: Context, uid: number, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'authToken', '__indexes', 'user', uid], limit, after); 
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new AuthToken(ctx, this.connection, this.namespace, this.directory, [value.uuid], value, this.options, isNew, this.indexes, 'AuthToken');
    }
}
export interface ServiceCacheShape {
    value?: string| null;
}

export class ServiceCache extends FEntity {
    readonly entityName: 'ServiceCache' = 'ServiceCache';
    get service(): string { return this._value.service; }
    get key(): string { return this._value.key; }
    get value(): string | null {
        let res = this._value.value;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set value(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.value) { return; }
        this._value.value = value;
        this.markDirty();
    }
}

export class ServiceCacheFactory extends FEntityFactory<ServiceCache> {
    static schema: FEntitySchema = {
        name: 'ServiceCache',
        editable: false,
        primaryKeys: [
            { name: 'service', type: 'string' },
            { name: 'key', type: 'string' },
        ],
        fields: [
            { name: 'value', type: 'string' },
        ],
        indexes: [
            { name: 'fromService', type: 'range', fields: ['service', 'key'] },
        ],
    };

    private static validate(src: any) {
        validators.notNull('service', src.service);
        validators.isString('service', src.service);
        validators.notNull('key', src.key);
        validators.isString('key', src.key);
        validators.isString('value', src.value);
    }

    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'serviceCache'),
            { enableVersioning: true, enableTimestamps: true, validator: ServiceCacheFactory.validate, hasLiveStreams: false },
            [new FEntityIndex('fromService', ['service', 'key'], false)],
            'ServiceCache'
        );
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 2) { throw Error('Invalid key length!'); }
        return { 'service': rawId[0], 'key': rawId[1] };
    }
    async findById(ctx: Context, service: string, key: string) {
        return await this._findById(ctx, [service, key]);
    }
    async create(ctx: Context, service: string, key: string, shape: ServiceCacheShape) {
        return await this._create(ctx, [service, key], { service, key, ...shape });
    }
    watch(ctx: Context, service: string, key: string, cb: () => void) {
        return this._watch(ctx, [service, key], cb);
    }
    async allFromFromServiceAfter(ctx: Context, service: string, after: string) {
        return await this._findRangeAllAfter(ctx, ['__indexes', 'fromService', service], after);
    }
    async rangeFromFromServiceAfter(ctx: Context, service: string, after: string, limit: number, reversed?: boolean) {
        return await this._findRangeAfter(ctx, ['__indexes', 'fromService', service], after, limit, reversed);
    }
    async rangeFromFromService(ctx: Context, service: string, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'fromService', service], limit, reversed);
    }
    async rangeFromFromServiceWithCursor(ctx: Context, service: string, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'fromService', service], limit, after, reversed);
    }
    async allFromFromService(ctx: Context, service: string) {
        return await this._findAll(ctx, ['__indexes', 'fromService', service]);
    }
    createFromServiceStream(ctx: Context, service: string, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'serviceCache', '__indexes', 'fromService', service], limit, after); 
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new ServiceCache(ctx, this.connection, this.namespace, this.directory, [value.service, value.key], value, this.options, isNew, this.indexes, 'ServiceCache');
    }
}
export interface LockShape {
    seed: string;
    timeout: number;
    version: number;
    minVersion: number;
}

export class Lock extends FEntity {
    readonly entityName: 'Lock' = 'Lock';
    get key(): string { return this._value.key; }
    get seed(): string {
        return this._value.seed;
    }
    set seed(value: string) {
        this._checkIsWritable();
        if (value === this._value.seed) { return; }
        this._value.seed = value;
        this.markDirty();
    }
    get timeout(): number {
        return this._value.timeout;
    }
    set timeout(value: number) {
        this._checkIsWritable();
        if (value === this._value.timeout) { return; }
        this._value.timeout = value;
        this.markDirty();
    }
    get version(): number {
        return this._value.version;
    }
    set version(value: number) {
        this._checkIsWritable();
        if (value === this._value.version) { return; }
        this._value.version = value;
        this.markDirty();
    }
    get minVersion(): number {
        return this._value.minVersion;
    }
    set minVersion(value: number) {
        this._checkIsWritable();
        if (value === this._value.minVersion) { return; }
        this._value.minVersion = value;
        this.markDirty();
    }
}

export class LockFactory extends FEntityFactory<Lock> {
    static schema: FEntitySchema = {
        name: 'Lock',
        editable: false,
        primaryKeys: [
            { name: 'key', type: 'string' },
        ],
        fields: [
            { name: 'seed', type: 'string' },
            { name: 'timeout', type: 'number' },
            { name: 'version', type: 'number' },
            { name: 'minVersion', type: 'number' },
        ],
        indexes: [
        ],
    };

    private static validate(src: any) {
        validators.notNull('key', src.key);
        validators.isString('key', src.key);
        validators.notNull('seed', src.seed);
        validators.isString('seed', src.seed);
        validators.notNull('timeout', src.timeout);
        validators.isNumber('timeout', src.timeout);
        validators.notNull('version', src.version);
        validators.isNumber('version', src.version);
        validators.notNull('minVersion', src.minVersion);
        validators.isNumber('minVersion', src.minVersion);
    }

    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'lock'),
            { enableVersioning: false, enableTimestamps: false, validator: LockFactory.validate, hasLiveStreams: false },
            [],
            'Lock'
        );
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'key': rawId[0] };
    }
    async findById(ctx: Context, key: string) {
        return await this._findById(ctx, [key]);
    }
    async create(ctx: Context, key: string, shape: LockShape) {
        return await this._create(ctx, [key], { key, ...shape });
    }
    watch(ctx: Context, key: string, cb: () => void) {
        return this._watch(ctx, [key], cb);
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new Lock(ctx, this.connection, this.namespace, this.directory, [value.key], value, this.options, isNew, this.indexes, 'Lock');
    }
}
export interface TaskShape {
    arguments: any;
    result?: any| null;
    taskStatus: 'pending' | 'executing' | 'failing' | 'failed' | 'completed';
    taskFailureCount?: number| null;
    taskFailureTime?: number| null;
    taskLockSeed?: string| null;
    taskLockTimeout?: number| null;
    taskFailureMessage?: string| null;
}

export class Task extends FEntity {
    readonly entityName: 'Task' = 'Task';
    get taskType(): string { return this._value.taskType; }
    get uid(): string { return this._value.uid; }
    get arguments(): any {
        return this._value.arguments;
    }
    set arguments(value: any) {
        this._checkIsWritable();
        if (value === this._value.arguments) { return; }
        this._value.arguments = value;
        this.markDirty();
    }
    get result(): any | null {
        let res = this._value.result;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set result(value: any | null) {
        this._checkIsWritable();
        if (value === this._value.result) { return; }
        this._value.result = value;
        this.markDirty();
    }
    get taskStatus(): 'pending' | 'executing' | 'failing' | 'failed' | 'completed' {
        return this._value.taskStatus;
    }
    set taskStatus(value: 'pending' | 'executing' | 'failing' | 'failed' | 'completed') {
        this._checkIsWritable();
        if (value === this._value.taskStatus) { return; }
        this._value.taskStatus = value;
        this.markDirty();
    }
    get taskFailureCount(): number | null {
        let res = this._value.taskFailureCount;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set taskFailureCount(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.taskFailureCount) { return; }
        this._value.taskFailureCount = value;
        this.markDirty();
    }
    get taskFailureTime(): number | null {
        let res = this._value.taskFailureTime;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set taskFailureTime(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.taskFailureTime) { return; }
        this._value.taskFailureTime = value;
        this.markDirty();
    }
    get taskLockSeed(): string | null {
        let res = this._value.taskLockSeed;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set taskLockSeed(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.taskLockSeed) { return; }
        this._value.taskLockSeed = value;
        this.markDirty();
    }
    get taskLockTimeout(): number | null {
        let res = this._value.taskLockTimeout;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set taskLockTimeout(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.taskLockTimeout) { return; }
        this._value.taskLockTimeout = value;
        this.markDirty();
    }
    get taskFailureMessage(): string | null {
        let res = this._value.taskFailureMessage;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set taskFailureMessage(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.taskFailureMessage) { return; }
        this._value.taskFailureMessage = value;
        this.markDirty();
    }
}

export class TaskFactory extends FEntityFactory<Task> {
    static schema: FEntitySchema = {
        name: 'Task',
        editable: false,
        primaryKeys: [
            { name: 'taskType', type: 'string' },
            { name: 'uid', type: 'string' },
        ],
        fields: [
            { name: 'arguments', type: 'json' },
            { name: 'result', type: 'json' },
            { name: 'taskStatus', type: 'enum', enumValues: ['pending', 'executing', 'failing', 'failed', 'completed'] },
            { name: 'taskFailureCount', type: 'number' },
            { name: 'taskFailureTime', type: 'number' },
            { name: 'taskLockSeed', type: 'string' },
            { name: 'taskLockTimeout', type: 'number' },
            { name: 'taskFailureMessage', type: 'string' },
        ],
        indexes: [
            { name: 'pending', type: 'range', fields: ['taskType', 'createdAt'], displayName: 'tasksPending' },
            { name: 'executing', type: 'range', fields: ['taskLockTimeout'], displayName: 'tasksExecuting' },
            { name: 'failing', type: 'range', fields: ['taskFailureTime'], displayName: 'tasksFailing' },
        ],
    };

    private static validate(src: any) {
        validators.notNull('taskType', src.taskType);
        validators.isString('taskType', src.taskType);
        validators.notNull('uid', src.uid);
        validators.isString('uid', src.uid);
        validators.notNull('arguments', src.arguments);
        validators.notNull('taskStatus', src.taskStatus);
        validators.isEnum('taskStatus', src.taskStatus, ['pending', 'executing', 'failing', 'failed', 'completed']);
        validators.isNumber('taskFailureCount', src.taskFailureCount);
        validators.isNumber('taskFailureTime', src.taskFailureTime);
        validators.isString('taskLockSeed', src.taskLockSeed);
        validators.isNumber('taskLockTimeout', src.taskLockTimeout);
        validators.isString('taskFailureMessage', src.taskFailureMessage);
    }

    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'task'),
            { enableVersioning: true, enableTimestamps: true, validator: TaskFactory.validate, hasLiveStreams: false },
            [new FEntityIndex('pending', ['taskType', 'createdAt'], false, (src) => src.taskStatus === 'pending'), new FEntityIndex('executing', ['taskLockTimeout'], false, (src) => src.taskStatus === 'executing'), new FEntityIndex('failing', ['taskFailureTime'], false, (src) => src.taskStatus === 'failing')],
            'Task'
        );
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 2) { throw Error('Invalid key length!'); }
        return { 'taskType': rawId[0], 'uid': rawId[1] };
    }
    async findById(ctx: Context, taskType: string, uid: string) {
        return await this._findById(ctx, [taskType, uid]);
    }
    async create(ctx: Context, taskType: string, uid: string, shape: TaskShape) {
        return await this._create(ctx, [taskType, uid], { taskType, uid, ...shape });
    }
    watch(ctx: Context, taskType: string, uid: string, cb: () => void) {
        return this._watch(ctx, [taskType, uid], cb);
    }
    async allFromPendingAfter(ctx: Context, taskType: string, after: number) {
        return await this._findRangeAllAfter(ctx, ['__indexes', 'pending', taskType], after);
    }
    async rangeFromPendingAfter(ctx: Context, taskType: string, after: number, limit: number, reversed?: boolean) {
        return await this._findRangeAfter(ctx, ['__indexes', 'pending', taskType], after, limit, reversed);
    }
    async rangeFromPending(ctx: Context, taskType: string, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'pending', taskType], limit, reversed);
    }
    async rangeFromPendingWithCursor(ctx: Context, taskType: string, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'pending', taskType], limit, after, reversed);
    }
    async allFromPending(ctx: Context, taskType: string) {
        return await this._findAll(ctx, ['__indexes', 'pending', taskType]);
    }
    createPendingStream(ctx: Context, taskType: string, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'task', '__indexes', 'pending', taskType], limit, after); 
    }
    async rangeFromExecuting(ctx: Context, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'executing'], limit, reversed);
    }
    async rangeFromExecutingWithCursor(ctx: Context, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'executing'], limit, after, reversed);
    }
    async allFromExecuting(ctx: Context, ) {
        return await this._findAll(ctx, ['__indexes', 'executing']);
    }
    createExecutingStream(ctx: Context, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'task', '__indexes', 'executing'], limit, after); 
    }
    async rangeFromFailing(ctx: Context, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'failing'], limit, reversed);
    }
    async rangeFromFailingWithCursor(ctx: Context, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'failing'], limit, after, reversed);
    }
    async allFromFailing(ctx: Context, ) {
        return await this._findAll(ctx, ['__indexes', 'failing']);
    }
    createFailingStream(ctx: Context, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'task', '__indexes', 'failing'], limit, after); 
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new Task(ctx, this.connection, this.namespace, this.directory, [value.taskType, value.uid], value, this.options, isNew, this.indexes, 'Task');
    }
}
export interface PushFirebaseShape {
    uid: number;
    tid: string;
    token: string;
    packageId: string;
    sandbox: boolean;
    enabled: boolean;
    failures?: number| null;
    failedFirstAt?: number| null;
    failedLastAt?: number| null;
    disabledAt?: number| null;
}

export class PushFirebase extends FEntity {
    readonly entityName: 'PushFirebase' = 'PushFirebase';
    get id(): string { return this._value.id; }
    get uid(): number {
        return this._value.uid;
    }
    set uid(value: number) {
        this._checkIsWritable();
        if (value === this._value.uid) { return; }
        this._value.uid = value;
        this.markDirty();
    }
    get tid(): string {
        return this._value.tid;
    }
    set tid(value: string) {
        this._checkIsWritable();
        if (value === this._value.tid) { return; }
        this._value.tid = value;
        this.markDirty();
    }
    get token(): string {
        return this._value.token;
    }
    set token(value: string) {
        this._checkIsWritable();
        if (value === this._value.token) { return; }
        this._value.token = value;
        this.markDirty();
    }
    get packageId(): string {
        return this._value.packageId;
    }
    set packageId(value: string) {
        this._checkIsWritable();
        if (value === this._value.packageId) { return; }
        this._value.packageId = value;
        this.markDirty();
    }
    get sandbox(): boolean {
        return this._value.sandbox;
    }
    set sandbox(value: boolean) {
        this._checkIsWritable();
        if (value === this._value.sandbox) { return; }
        this._value.sandbox = value;
        this.markDirty();
    }
    get enabled(): boolean {
        return this._value.enabled;
    }
    set enabled(value: boolean) {
        this._checkIsWritable();
        if (value === this._value.enabled) { return; }
        this._value.enabled = value;
        this.markDirty();
    }
    get failures(): number | null {
        let res = this._value.failures;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set failures(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.failures) { return; }
        this._value.failures = value;
        this.markDirty();
    }
    get failedFirstAt(): number | null {
        let res = this._value.failedFirstAt;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set failedFirstAt(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.failedFirstAt) { return; }
        this._value.failedFirstAt = value;
        this.markDirty();
    }
    get failedLastAt(): number | null {
        let res = this._value.failedLastAt;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set failedLastAt(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.failedLastAt) { return; }
        this._value.failedLastAt = value;
        this.markDirty();
    }
    get disabledAt(): number | null {
        let res = this._value.disabledAt;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set disabledAt(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.disabledAt) { return; }
        this._value.disabledAt = value;
        this.markDirty();
    }
}

export class PushFirebaseFactory extends FEntityFactory<PushFirebase> {
    static schema: FEntitySchema = {
        name: 'PushFirebase',
        editable: false,
        primaryKeys: [
            { name: 'id', type: 'string' },
        ],
        fields: [
            { name: 'uid', type: 'number' },
            { name: 'tid', type: 'string' },
            { name: 'token', type: 'string', secure: true },
            { name: 'packageId', type: 'string' },
            { name: 'sandbox', type: 'boolean' },
            { name: 'enabled', type: 'boolean' },
            { name: 'failures', type: 'number' },
            { name: 'failedFirstAt', type: 'number' },
            { name: 'failedLastAt', type: 'number' },
            { name: 'disabledAt', type: 'number' },
        ],
        indexes: [
            { name: 'user', type: 'range', fields: ['uid', 'id'] },
            { name: 'token', type: 'unique', fields: ['token'] },
        ],
    };

    private static validate(src: any) {
        validators.notNull('id', src.id);
        validators.isString('id', src.id);
        validators.notNull('uid', src.uid);
        validators.isNumber('uid', src.uid);
        validators.notNull('tid', src.tid);
        validators.isString('tid', src.tid);
        validators.notNull('token', src.token);
        validators.isString('token', src.token);
        validators.notNull('packageId', src.packageId);
        validators.isString('packageId', src.packageId);
        validators.notNull('sandbox', src.sandbox);
        validators.isBoolean('sandbox', src.sandbox);
        validators.notNull('enabled', src.enabled);
        validators.isBoolean('enabled', src.enabled);
        validators.isNumber('failures', src.failures);
        validators.isNumber('failedFirstAt', src.failedFirstAt);
        validators.isNumber('failedLastAt', src.failedLastAt);
        validators.isNumber('disabledAt', src.disabledAt);
    }

    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'pushFirebase'),
            { enableVersioning: true, enableTimestamps: true, validator: PushFirebaseFactory.validate, hasLiveStreams: false },
            [new FEntityIndex('user', ['uid', 'id'], false), new FEntityIndex('token', ['token'], true, src => src.enabled)],
            'PushFirebase'
        );
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'id': rawId[0] };
    }
    async findById(ctx: Context, id: string) {
        return await this._findById(ctx, [id]);
    }
    async create(ctx: Context, id: string, shape: PushFirebaseShape) {
        return await this._create(ctx, [id], { id, ...shape });
    }
    watch(ctx: Context, id: string, cb: () => void) {
        return this._watch(ctx, [id], cb);
    }
    async allFromUserAfter(ctx: Context, uid: number, after: string) {
        return await this._findRangeAllAfter(ctx, ['__indexes', 'user', uid], after);
    }
    async rangeFromUserAfter(ctx: Context, uid: number, after: string, limit: number, reversed?: boolean) {
        return await this._findRangeAfter(ctx, ['__indexes', 'user', uid], after, limit, reversed);
    }
    async rangeFromUser(ctx: Context, uid: number, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'user', uid], limit, reversed);
    }
    async rangeFromUserWithCursor(ctx: Context, uid: number, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'user', uid], limit, after, reversed);
    }
    async allFromUser(ctx: Context, uid: number) {
        return await this._findAll(ctx, ['__indexes', 'user', uid]);
    }
    createUserStream(ctx: Context, uid: number, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'pushFirebase', '__indexes', 'user', uid], limit, after); 
    }
    async findFromToken(ctx: Context, token: string) {
        return await this._findFromIndex(ctx, ['__indexes', 'token', token]);
    }
    async rangeFromToken(ctx: Context, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'token'], limit, reversed);
    }
    async rangeFromTokenWithCursor(ctx: Context, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'token'], limit, after, reversed);
    }
    async allFromToken(ctx: Context, ) {
        return await this._findAll(ctx, ['__indexes', 'token']);
    }
    createTokenStream(ctx: Context, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'pushFirebase', '__indexes', 'token'], limit, after); 
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new PushFirebase(ctx, this.connection, this.namespace, this.directory, [value.id], value, this.options, isNew, this.indexes, 'PushFirebase');
    }
}
export interface PushAppleShape {
    uid: number;
    tid: string;
    token: string;
    bundleId: string;
    sandbox: boolean;
    enabled: boolean;
    failures?: number| null;
    failedFirstAt?: number| null;
    failedLastAt?: number| null;
    disabledAt?: number| null;
}

export class PushApple extends FEntity {
    readonly entityName: 'PushApple' = 'PushApple';
    get id(): string { return this._value.id; }
    get uid(): number {
        return this._value.uid;
    }
    set uid(value: number) {
        this._checkIsWritable();
        if (value === this._value.uid) { return; }
        this._value.uid = value;
        this.markDirty();
    }
    get tid(): string {
        return this._value.tid;
    }
    set tid(value: string) {
        this._checkIsWritable();
        if (value === this._value.tid) { return; }
        this._value.tid = value;
        this.markDirty();
    }
    get token(): string {
        return this._value.token;
    }
    set token(value: string) {
        this._checkIsWritable();
        if (value === this._value.token) { return; }
        this._value.token = value;
        this.markDirty();
    }
    get bundleId(): string {
        return this._value.bundleId;
    }
    set bundleId(value: string) {
        this._checkIsWritable();
        if (value === this._value.bundleId) { return; }
        this._value.bundleId = value;
        this.markDirty();
    }
    get sandbox(): boolean {
        return this._value.sandbox;
    }
    set sandbox(value: boolean) {
        this._checkIsWritable();
        if (value === this._value.sandbox) { return; }
        this._value.sandbox = value;
        this.markDirty();
    }
    get enabled(): boolean {
        return this._value.enabled;
    }
    set enabled(value: boolean) {
        this._checkIsWritable();
        if (value === this._value.enabled) { return; }
        this._value.enabled = value;
        this.markDirty();
    }
    get failures(): number | null {
        let res = this._value.failures;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set failures(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.failures) { return; }
        this._value.failures = value;
        this.markDirty();
    }
    get failedFirstAt(): number | null {
        let res = this._value.failedFirstAt;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set failedFirstAt(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.failedFirstAt) { return; }
        this._value.failedFirstAt = value;
        this.markDirty();
    }
    get failedLastAt(): number | null {
        let res = this._value.failedLastAt;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set failedLastAt(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.failedLastAt) { return; }
        this._value.failedLastAt = value;
        this.markDirty();
    }
    get disabledAt(): number | null {
        let res = this._value.disabledAt;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set disabledAt(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.disabledAt) { return; }
        this._value.disabledAt = value;
        this.markDirty();
    }
}

export class PushAppleFactory extends FEntityFactory<PushApple> {
    static schema: FEntitySchema = {
        name: 'PushApple',
        editable: false,
        primaryKeys: [
            { name: 'id', type: 'string' },
        ],
        fields: [
            { name: 'uid', type: 'number' },
            { name: 'tid', type: 'string' },
            { name: 'token', type: 'string', secure: true },
            { name: 'bundleId', type: 'string' },
            { name: 'sandbox', type: 'boolean' },
            { name: 'enabled', type: 'boolean' },
            { name: 'failures', type: 'number' },
            { name: 'failedFirstAt', type: 'number' },
            { name: 'failedLastAt', type: 'number' },
            { name: 'disabledAt', type: 'number' },
        ],
        indexes: [
            { name: 'user', type: 'range', fields: ['uid', 'id'] },
            { name: 'token', type: 'unique', fields: ['token'] },
        ],
    };

    private static validate(src: any) {
        validators.notNull('id', src.id);
        validators.isString('id', src.id);
        validators.notNull('uid', src.uid);
        validators.isNumber('uid', src.uid);
        validators.notNull('tid', src.tid);
        validators.isString('tid', src.tid);
        validators.notNull('token', src.token);
        validators.isString('token', src.token);
        validators.notNull('bundleId', src.bundleId);
        validators.isString('bundleId', src.bundleId);
        validators.notNull('sandbox', src.sandbox);
        validators.isBoolean('sandbox', src.sandbox);
        validators.notNull('enabled', src.enabled);
        validators.isBoolean('enabled', src.enabled);
        validators.isNumber('failures', src.failures);
        validators.isNumber('failedFirstAt', src.failedFirstAt);
        validators.isNumber('failedLastAt', src.failedLastAt);
        validators.isNumber('disabledAt', src.disabledAt);
    }

    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'pushApple'),
            { enableVersioning: true, enableTimestamps: true, validator: PushAppleFactory.validate, hasLiveStreams: false },
            [new FEntityIndex('user', ['uid', 'id'], false), new FEntityIndex('token', ['token'], true, src => src.enabled)],
            'PushApple'
        );
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'id': rawId[0] };
    }
    async findById(ctx: Context, id: string) {
        return await this._findById(ctx, [id]);
    }
    async create(ctx: Context, id: string, shape: PushAppleShape) {
        return await this._create(ctx, [id], { id, ...shape });
    }
    watch(ctx: Context, id: string, cb: () => void) {
        return this._watch(ctx, [id], cb);
    }
    async allFromUserAfter(ctx: Context, uid: number, after: string) {
        return await this._findRangeAllAfter(ctx, ['__indexes', 'user', uid], after);
    }
    async rangeFromUserAfter(ctx: Context, uid: number, after: string, limit: number, reversed?: boolean) {
        return await this._findRangeAfter(ctx, ['__indexes', 'user', uid], after, limit, reversed);
    }
    async rangeFromUser(ctx: Context, uid: number, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'user', uid], limit, reversed);
    }
    async rangeFromUserWithCursor(ctx: Context, uid: number, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'user', uid], limit, after, reversed);
    }
    async allFromUser(ctx: Context, uid: number) {
        return await this._findAll(ctx, ['__indexes', 'user', uid]);
    }
    createUserStream(ctx: Context, uid: number, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'pushApple', '__indexes', 'user', uid], limit, after); 
    }
    async findFromToken(ctx: Context, token: string) {
        return await this._findFromIndex(ctx, ['__indexes', 'token', token]);
    }
    async rangeFromToken(ctx: Context, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'token'], limit, reversed);
    }
    async rangeFromTokenWithCursor(ctx: Context, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'token'], limit, after, reversed);
    }
    async allFromToken(ctx: Context, ) {
        return await this._findAll(ctx, ['__indexes', 'token']);
    }
    createTokenStream(ctx: Context, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'pushApple', '__indexes', 'token'], limit, after); 
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new PushApple(ctx, this.connection, this.namespace, this.directory, [value.id], value, this.options, isNew, this.indexes, 'PushApple');
    }
}
export interface PushWebShape {
    uid: number;
    tid: string;
    endpoint: string;
    enabled: boolean;
    failures?: number| null;
    failedFirstAt?: number| null;
    failedLastAt?: number| null;
    disabledAt?: number| null;
}

export class PushWeb extends FEntity {
    readonly entityName: 'PushWeb' = 'PushWeb';
    get id(): string { return this._value.id; }
    get uid(): number {
        return this._value.uid;
    }
    set uid(value: number) {
        this._checkIsWritable();
        if (value === this._value.uid) { return; }
        this._value.uid = value;
        this.markDirty();
    }
    get tid(): string {
        return this._value.tid;
    }
    set tid(value: string) {
        this._checkIsWritable();
        if (value === this._value.tid) { return; }
        this._value.tid = value;
        this.markDirty();
    }
    get endpoint(): string {
        return this._value.endpoint;
    }
    set endpoint(value: string) {
        this._checkIsWritable();
        if (value === this._value.endpoint) { return; }
        this._value.endpoint = value;
        this.markDirty();
    }
    get enabled(): boolean {
        return this._value.enabled;
    }
    set enabled(value: boolean) {
        this._checkIsWritable();
        if (value === this._value.enabled) { return; }
        this._value.enabled = value;
        this.markDirty();
    }
    get failures(): number | null {
        let res = this._value.failures;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set failures(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.failures) { return; }
        this._value.failures = value;
        this.markDirty();
    }
    get failedFirstAt(): number | null {
        let res = this._value.failedFirstAt;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set failedFirstAt(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.failedFirstAt) { return; }
        this._value.failedFirstAt = value;
        this.markDirty();
    }
    get failedLastAt(): number | null {
        let res = this._value.failedLastAt;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set failedLastAt(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.failedLastAt) { return; }
        this._value.failedLastAt = value;
        this.markDirty();
    }
    get disabledAt(): number | null {
        let res = this._value.disabledAt;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set disabledAt(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.disabledAt) { return; }
        this._value.disabledAt = value;
        this.markDirty();
    }
}

export class PushWebFactory extends FEntityFactory<PushWeb> {
    static schema: FEntitySchema = {
        name: 'PushWeb',
        editable: false,
        primaryKeys: [
            { name: 'id', type: 'string' },
        ],
        fields: [
            { name: 'uid', type: 'number' },
            { name: 'tid', type: 'string' },
            { name: 'endpoint', type: 'string', secure: true },
            { name: 'enabled', type: 'boolean' },
            { name: 'failures', type: 'number' },
            { name: 'failedFirstAt', type: 'number' },
            { name: 'failedLastAt', type: 'number' },
            { name: 'disabledAt', type: 'number' },
        ],
        indexes: [
            { name: 'user', type: 'range', fields: ['uid', 'id'] },
            { name: 'endpoint', type: 'unique', fields: ['endpoint'] },
        ],
    };

    private static validate(src: any) {
        validators.notNull('id', src.id);
        validators.isString('id', src.id);
        validators.notNull('uid', src.uid);
        validators.isNumber('uid', src.uid);
        validators.notNull('tid', src.tid);
        validators.isString('tid', src.tid);
        validators.notNull('endpoint', src.endpoint);
        validators.isString('endpoint', src.endpoint);
        validators.notNull('enabled', src.enabled);
        validators.isBoolean('enabled', src.enabled);
        validators.isNumber('failures', src.failures);
        validators.isNumber('failedFirstAt', src.failedFirstAt);
        validators.isNumber('failedLastAt', src.failedLastAt);
        validators.isNumber('disabledAt', src.disabledAt);
    }

    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'pushWeb'),
            { enableVersioning: true, enableTimestamps: true, validator: PushWebFactory.validate, hasLiveStreams: false },
            [new FEntityIndex('user', ['uid', 'id'], false), new FEntityIndex('endpoint', ['endpoint'], true, src => src.enabled)],
            'PushWeb'
        );
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'id': rawId[0] };
    }
    async findById(ctx: Context, id: string) {
        return await this._findById(ctx, [id]);
    }
    async create(ctx: Context, id: string, shape: PushWebShape) {
        return await this._create(ctx, [id], { id, ...shape });
    }
    watch(ctx: Context, id: string, cb: () => void) {
        return this._watch(ctx, [id], cb);
    }
    async allFromUserAfter(ctx: Context, uid: number, after: string) {
        return await this._findRangeAllAfter(ctx, ['__indexes', 'user', uid], after);
    }
    async rangeFromUserAfter(ctx: Context, uid: number, after: string, limit: number, reversed?: boolean) {
        return await this._findRangeAfter(ctx, ['__indexes', 'user', uid], after, limit, reversed);
    }
    async rangeFromUser(ctx: Context, uid: number, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'user', uid], limit, reversed);
    }
    async rangeFromUserWithCursor(ctx: Context, uid: number, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'user', uid], limit, after, reversed);
    }
    async allFromUser(ctx: Context, uid: number) {
        return await this._findAll(ctx, ['__indexes', 'user', uid]);
    }
    createUserStream(ctx: Context, uid: number, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'pushWeb', '__indexes', 'user', uid], limit, after); 
    }
    async findFromEndpoint(ctx: Context, endpoint: string) {
        return await this._findFromIndex(ctx, ['__indexes', 'endpoint', endpoint]);
    }
    async rangeFromEndpoint(ctx: Context, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'endpoint'], limit, reversed);
    }
    async rangeFromEndpointWithCursor(ctx: Context, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'endpoint'], limit, after, reversed);
    }
    async allFromEndpoint(ctx: Context, ) {
        return await this._findAll(ctx, ['__indexes', 'endpoint']);
    }
    createEndpointStream(ctx: Context, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'pushWeb', '__indexes', 'endpoint'], limit, after); 
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new PushWeb(ctx, this.connection, this.namespace, this.directory, [value.id], value, this.options, isNew, this.indexes, 'PushWeb');
    }
}
export interface PushSafariShape {
    uid: number;
    tid: string;
    token: string;
    bundleId: string;
    enabled: boolean;
    failures?: number| null;
    failedFirstAt?: number| null;
    failedLastAt?: number| null;
    disabledAt?: number| null;
}

export class PushSafari extends FEntity {
    readonly entityName: 'PushSafari' = 'PushSafari';
    get id(): string { return this._value.id; }
    get uid(): number {
        return this._value.uid;
    }
    set uid(value: number) {
        this._checkIsWritable();
        if (value === this._value.uid) { return; }
        this._value.uid = value;
        this.markDirty();
    }
    get tid(): string {
        return this._value.tid;
    }
    set tid(value: string) {
        this._checkIsWritable();
        if (value === this._value.tid) { return; }
        this._value.tid = value;
        this.markDirty();
    }
    get token(): string {
        return this._value.token;
    }
    set token(value: string) {
        this._checkIsWritable();
        if (value === this._value.token) { return; }
        this._value.token = value;
        this.markDirty();
    }
    get bundleId(): string {
        return this._value.bundleId;
    }
    set bundleId(value: string) {
        this._checkIsWritable();
        if (value === this._value.bundleId) { return; }
        this._value.bundleId = value;
        this.markDirty();
    }
    get enabled(): boolean {
        return this._value.enabled;
    }
    set enabled(value: boolean) {
        this._checkIsWritable();
        if (value === this._value.enabled) { return; }
        this._value.enabled = value;
        this.markDirty();
    }
    get failures(): number | null {
        let res = this._value.failures;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set failures(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.failures) { return; }
        this._value.failures = value;
        this.markDirty();
    }
    get failedFirstAt(): number | null {
        let res = this._value.failedFirstAt;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set failedFirstAt(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.failedFirstAt) { return; }
        this._value.failedFirstAt = value;
        this.markDirty();
    }
    get failedLastAt(): number | null {
        let res = this._value.failedLastAt;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set failedLastAt(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.failedLastAt) { return; }
        this._value.failedLastAt = value;
        this.markDirty();
    }
    get disabledAt(): number | null {
        let res = this._value.disabledAt;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set disabledAt(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.disabledAt) { return; }
        this._value.disabledAt = value;
        this.markDirty();
    }
}

export class PushSafariFactory extends FEntityFactory<PushSafari> {
    static schema: FEntitySchema = {
        name: 'PushSafari',
        editable: false,
        primaryKeys: [
            { name: 'id', type: 'string' },
        ],
        fields: [
            { name: 'uid', type: 'number' },
            { name: 'tid', type: 'string' },
            { name: 'token', type: 'string', secure: true },
            { name: 'bundleId', type: 'string' },
            { name: 'enabled', type: 'boolean' },
            { name: 'failures', type: 'number' },
            { name: 'failedFirstAt', type: 'number' },
            { name: 'failedLastAt', type: 'number' },
            { name: 'disabledAt', type: 'number' },
        ],
        indexes: [
            { name: 'user', type: 'range', fields: ['uid', 'id'] },
            { name: 'token', type: 'unique', fields: ['token'] },
        ],
    };

    private static validate(src: any) {
        validators.notNull('id', src.id);
        validators.isString('id', src.id);
        validators.notNull('uid', src.uid);
        validators.isNumber('uid', src.uid);
        validators.notNull('tid', src.tid);
        validators.isString('tid', src.tid);
        validators.notNull('token', src.token);
        validators.isString('token', src.token);
        validators.notNull('bundleId', src.bundleId);
        validators.isString('bundleId', src.bundleId);
        validators.notNull('enabled', src.enabled);
        validators.isBoolean('enabled', src.enabled);
        validators.isNumber('failures', src.failures);
        validators.isNumber('failedFirstAt', src.failedFirstAt);
        validators.isNumber('failedLastAt', src.failedLastAt);
        validators.isNumber('disabledAt', src.disabledAt);
    }

    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'pushSafari'),
            { enableVersioning: true, enableTimestamps: true, validator: PushSafariFactory.validate, hasLiveStreams: false },
            [new FEntityIndex('user', ['uid', 'id'], false), new FEntityIndex('token', ['token'], true, src => src.enabled)],
            'PushSafari'
        );
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'id': rawId[0] };
    }
    async findById(ctx: Context, id: string) {
        return await this._findById(ctx, [id]);
    }
    async create(ctx: Context, id: string, shape: PushSafariShape) {
        return await this._create(ctx, [id], { id, ...shape });
    }
    watch(ctx: Context, id: string, cb: () => void) {
        return this._watch(ctx, [id], cb);
    }
    async allFromUserAfter(ctx: Context, uid: number, after: string) {
        return await this._findRangeAllAfter(ctx, ['__indexes', 'user', uid], after);
    }
    async rangeFromUserAfter(ctx: Context, uid: number, after: string, limit: number, reversed?: boolean) {
        return await this._findRangeAfter(ctx, ['__indexes', 'user', uid], after, limit, reversed);
    }
    async rangeFromUser(ctx: Context, uid: number, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'user', uid], limit, reversed);
    }
    async rangeFromUserWithCursor(ctx: Context, uid: number, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'user', uid], limit, after, reversed);
    }
    async allFromUser(ctx: Context, uid: number) {
        return await this._findAll(ctx, ['__indexes', 'user', uid]);
    }
    createUserStream(ctx: Context, uid: number, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'pushSafari', '__indexes', 'user', uid], limit, after); 
    }
    async findFromToken(ctx: Context, token: string) {
        return await this._findFromIndex(ctx, ['__indexes', 'token', token]);
    }
    async rangeFromToken(ctx: Context, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'token'], limit, reversed);
    }
    async rangeFromTokenWithCursor(ctx: Context, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'token'], limit, after, reversed);
    }
    async allFromToken(ctx: Context, ) {
        return await this._findAll(ctx, ['__indexes', 'token']);
    }
    createTokenStream(ctx: Context, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'pushSafari', '__indexes', 'token'], limit, after); 
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new PushSafari(ctx, this.connection, this.namespace, this.directory, [value.id], value, this.options, isNew, this.indexes, 'PushSafari');
    }
}
export interface UserProfilePrefilShape {
    firstName?: string| null;
    lastName?: string| null;
    picture?: string| null;
}

export class UserProfilePrefil extends FEntity {
    readonly entityName: 'UserProfilePrefil' = 'UserProfilePrefil';
    get id(): number { return this._value.id; }
    get firstName(): string | null {
        let res = this._value.firstName;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set firstName(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.firstName) { return; }
        this._value.firstName = value;
        this.markDirty();
    }
    get lastName(): string | null {
        let res = this._value.lastName;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set lastName(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.lastName) { return; }
        this._value.lastName = value;
        this.markDirty();
    }
    get picture(): string | null {
        let res = this._value.picture;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set picture(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.picture) { return; }
        this._value.picture = value;
        this.markDirty();
    }
}

export class UserProfilePrefilFactory extends FEntityFactory<UserProfilePrefil> {
    static schema: FEntitySchema = {
        name: 'UserProfilePrefil',
        editable: false,
        primaryKeys: [
            { name: 'id', type: 'number' },
        ],
        fields: [
            { name: 'firstName', type: 'string' },
            { name: 'lastName', type: 'string' },
            { name: 'picture', type: 'string' },
        ],
        indexes: [
        ],
    };

    private static validate(src: any) {
        validators.notNull('id', src.id);
        validators.isNumber('id', src.id);
        validators.isString('firstName', src.firstName);
        validators.isString('lastName', src.lastName);
        validators.isString('picture', src.picture);
    }

    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'userProfilePrefil'),
            { enableVersioning: true, enableTimestamps: true, validator: UserProfilePrefilFactory.validate, hasLiveStreams: false },
            [],
            'UserProfilePrefil'
        );
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'id': rawId[0] };
    }
    async findById(ctx: Context, id: number) {
        return await this._findById(ctx, [id]);
    }
    async create(ctx: Context, id: number, shape: UserProfilePrefilShape) {
        return await this._create(ctx, [id], { id, ...shape });
    }
    watch(ctx: Context, id: number, cb: () => void) {
        return this._watch(ctx, [id], cb);
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new UserProfilePrefil(ctx, this.connection, this.namespace, this.directory, [value.id], value, this.options, isNew, this.indexes, 'UserProfilePrefil');
    }
}
export interface UserShape {
    authId: string;
    email: string;
    isBot: boolean;
    invitedBy?: number| null;
    botOwner?: number| null;
    isSuperBot?: boolean| null;
    status: 'pending' | 'activated' | 'suspended' | 'deleted';
}

export class User extends FEntity {
    readonly entityName: 'User' = 'User';
    get id(): number { return this._value.id; }
    get authId(): string {
        return this._value.authId;
    }
    set authId(value: string) {
        this._checkIsWritable();
        if (value === this._value.authId) { return; }
        this._value.authId = value;
        this.markDirty();
    }
    get email(): string {
        return this._value.email;
    }
    set email(value: string) {
        this._checkIsWritable();
        if (value === this._value.email) { return; }
        this._value.email = value;
        this.markDirty();
    }
    get isBot(): boolean {
        return this._value.isBot;
    }
    set isBot(value: boolean) {
        this._checkIsWritable();
        if (value === this._value.isBot) { return; }
        this._value.isBot = value;
        this.markDirty();
    }
    get invitedBy(): number | null {
        let res = this._value.invitedBy;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set invitedBy(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.invitedBy) { return; }
        this._value.invitedBy = value;
        this.markDirty();
    }
    get botOwner(): number | null {
        let res = this._value.botOwner;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set botOwner(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.botOwner) { return; }
        this._value.botOwner = value;
        this.markDirty();
    }
    get isSuperBot(): boolean | null {
        let res = this._value.isSuperBot;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set isSuperBot(value: boolean | null) {
        this._checkIsWritable();
        if (value === this._value.isSuperBot) { return; }
        this._value.isSuperBot = value;
        this.markDirty();
    }
    get status(): 'pending' | 'activated' | 'suspended' | 'deleted' {
        return this._value.status;
    }
    set status(value: 'pending' | 'activated' | 'suspended' | 'deleted') {
        this._checkIsWritable();
        if (value === this._value.status) { return; }
        this._value.status = value;
        this.markDirty();
    }
}

export class UserFactory extends FEntityFactory<User> {
    static schema: FEntitySchema = {
        name: 'User',
        editable: false,
        primaryKeys: [
            { name: 'id', type: 'number' },
        ],
        fields: [
            { name: 'authId', type: 'string' },
            { name: 'email', type: 'string' },
            { name: 'isBot', type: 'boolean' },
            { name: 'invitedBy', type: 'number' },
            { name: 'botOwner', type: 'number' },
            { name: 'isSuperBot', type: 'boolean' },
            { name: 'status', type: 'enum', enumValues: ['pending', 'activated', 'suspended', 'deleted'] },
        ],
        indexes: [
            { name: 'authId', type: 'unique', fields: ['authId'] },
            { name: 'email', type: 'unique', fields: ['email'] },
            { name: 'owner', type: 'range', fields: ['botOwner', 'id'] },
            { name: 'superBots', type: 'range', fields: [] },
        ],
    };

    private static validate(src: any) {
        validators.notNull('id', src.id);
        validators.isNumber('id', src.id);
        validators.notNull('authId', src.authId);
        validators.isString('authId', src.authId);
        validators.notNull('email', src.email);
        validators.isString('email', src.email);
        validators.notNull('isBot', src.isBot);
        validators.isBoolean('isBot', src.isBot);
        validators.isNumber('invitedBy', src.invitedBy);
        validators.isNumber('botOwner', src.botOwner);
        validators.isBoolean('isSuperBot', src.isSuperBot);
        validators.notNull('status', src.status);
        validators.isEnum('status', src.status, ['pending', 'activated', 'suspended', 'deleted']);
    }

    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'user'),
            { enableVersioning: false, enableTimestamps: false, validator: UserFactory.validate, hasLiveStreams: false },
            [new FEntityIndex('authId', ['authId'], true, src => src.status !== 'deleted'), new FEntityIndex('email', ['email'], true, src => src.status !== 'deleted'), new FEntityIndex('owner', ['botOwner', 'id'], false, src => src.botOwner), new FEntityIndex('superBots', [], false, src => src.isBot === true && src.isSuperBot)],
            'User'
        );
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'id': rawId[0] };
    }
    async findById(ctx: Context, id: number) {
        return await this._findById(ctx, [id]);
    }
    async create(ctx: Context, id: number, shape: UserShape) {
        return await this._create(ctx, [id], { id, ...shape });
    }
    watch(ctx: Context, id: number, cb: () => void) {
        return this._watch(ctx, [id], cb);
    }
    async findFromAuthId(ctx: Context, authId: string) {
        return await this._findFromIndex(ctx, ['__indexes', 'authId', authId]);
    }
    async rangeFromAuthId(ctx: Context, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'authId'], limit, reversed);
    }
    async rangeFromAuthIdWithCursor(ctx: Context, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'authId'], limit, after, reversed);
    }
    async allFromAuthId(ctx: Context, ) {
        return await this._findAll(ctx, ['__indexes', 'authId']);
    }
    createAuthIdStream(ctx: Context, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'user', '__indexes', 'authId'], limit, after); 
    }
    async findFromEmail(ctx: Context, email: string) {
        return await this._findFromIndex(ctx, ['__indexes', 'email', email]);
    }
    async rangeFromEmail(ctx: Context, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'email'], limit, reversed);
    }
    async rangeFromEmailWithCursor(ctx: Context, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'email'], limit, after, reversed);
    }
    async allFromEmail(ctx: Context, ) {
        return await this._findAll(ctx, ['__indexes', 'email']);
    }
    createEmailStream(ctx: Context, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'user', '__indexes', 'email'], limit, after); 
    }
    async allFromOwnerAfter(ctx: Context, botOwner: number, after: number) {
        return await this._findRangeAllAfter(ctx, ['__indexes', 'owner', botOwner], after);
    }
    async rangeFromOwnerAfter(ctx: Context, botOwner: number, after: number, limit: number, reversed?: boolean) {
        return await this._findRangeAfter(ctx, ['__indexes', 'owner', botOwner], after, limit, reversed);
    }
    async rangeFromOwner(ctx: Context, botOwner: number, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'owner', botOwner], limit, reversed);
    }
    async rangeFromOwnerWithCursor(ctx: Context, botOwner: number, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'owner', botOwner], limit, after, reversed);
    }
    async allFromOwner(ctx: Context, botOwner: number) {
        return await this._findAll(ctx, ['__indexes', 'owner', botOwner]);
    }
    createOwnerStream(ctx: Context, botOwner: number, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'user', '__indexes', 'owner', botOwner], limit, after); 
    }
    async rangeFromSuperBots(ctx: Context, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'superBots'], limit, reversed);
    }
    async rangeFromSuperBotsWithCursor(ctx: Context, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'superBots'], limit, after, reversed);
    }
    async allFromSuperBots(ctx: Context, ) {
        return await this._findAll(ctx, ['__indexes', 'superBots']);
    }
    createSuperBotsStream(ctx: Context, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'user', '__indexes', 'superBots'], limit, after); 
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new User(ctx, this.connection, this.namespace, this.directory, [value.id], value, this.options, isNew, this.indexes, 'User');
    }
}
export interface UserProfileShape {
    firstName: string;
    lastName?: string| null;
    phone?: string| null;
    about?: string| null;
    website?: string| null;
    location?: string| null;
    email?: string| null;
    picture?: any| null;
    linkedin?: string| null;
    twitter?: string| null;
    locations?: any| null;
    primaryOrganization?: number| null;
    role?: string| null;
}

export class UserProfile extends FEntity {
    readonly entityName: 'UserProfile' = 'UserProfile';
    get id(): number { return this._value.id; }
    get firstName(): string {
        return this._value.firstName;
    }
    set firstName(value: string) {
        this._checkIsWritable();
        if (value === this._value.firstName) { return; }
        this._value.firstName = value;
        this.markDirty();
    }
    get lastName(): string | null {
        let res = this._value.lastName;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set lastName(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.lastName) { return; }
        this._value.lastName = value;
        this.markDirty();
    }
    get phone(): string | null {
        let res = this._value.phone;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set phone(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.phone) { return; }
        this._value.phone = value;
        this.markDirty();
    }
    get about(): string | null {
        let res = this._value.about;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set about(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.about) { return; }
        this._value.about = value;
        this.markDirty();
    }
    get website(): string | null {
        let res = this._value.website;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set website(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.website) { return; }
        this._value.website = value;
        this.markDirty();
    }
    get location(): string | null {
        let res = this._value.location;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set location(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.location) { return; }
        this._value.location = value;
        this.markDirty();
    }
    get email(): string | null {
        let res = this._value.email;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set email(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.email) { return; }
        this._value.email = value;
        this.markDirty();
    }
    get picture(): any | null {
        let res = this._value.picture;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set picture(value: any | null) {
        this._checkIsWritable();
        if (value === this._value.picture) { return; }
        this._value.picture = value;
        this.markDirty();
    }
    get linkedin(): string | null {
        let res = this._value.linkedin;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set linkedin(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.linkedin) { return; }
        this._value.linkedin = value;
        this.markDirty();
    }
    get twitter(): string | null {
        let res = this._value.twitter;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set twitter(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.twitter) { return; }
        this._value.twitter = value;
        this.markDirty();
    }
    get locations(): any | null {
        let res = this._value.locations;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set locations(value: any | null) {
        this._checkIsWritable();
        if (value === this._value.locations) { return; }
        this._value.locations = value;
        this.markDirty();
    }
    get primaryOrganization(): number | null {
        let res = this._value.primaryOrganization;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set primaryOrganization(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.primaryOrganization) { return; }
        this._value.primaryOrganization = value;
        this.markDirty();
    }
    get role(): string | null {
        let res = this._value.role;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set role(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.role) { return; }
        this._value.role = value;
        this.markDirty();
    }
}

export class UserProfileFactory extends FEntityFactory<UserProfile> {
    static schema: FEntitySchema = {
        name: 'UserProfile',
        editable: false,
        primaryKeys: [
            { name: 'id', type: 'number' },
        ],
        fields: [
            { name: 'firstName', type: 'string' },
            { name: 'lastName', type: 'string' },
            { name: 'phone', type: 'string' },
            { name: 'about', type: 'string' },
            { name: 'website', type: 'string' },
            { name: 'location', type: 'string' },
            { name: 'email', type: 'string' },
            { name: 'picture', type: 'json' },
            { name: 'linkedin', type: 'string' },
            { name: 'twitter', type: 'string' },
            { name: 'locations', type: 'json' },
            { name: 'primaryOrganization', type: 'number' },
            { name: 'role', type: 'string' },
        ],
        indexes: [
            { name: 'byUpdatedAt', type: 'range', fields: ['updatedAt'] },
        ],
    };

    private static validate(src: any) {
        validators.notNull('id', src.id);
        validators.isNumber('id', src.id);
        validators.notNull('firstName', src.firstName);
        validators.isString('firstName', src.firstName);
        validators.isString('lastName', src.lastName);
        validators.isString('phone', src.phone);
        validators.isString('about', src.about);
        validators.isString('website', src.website);
        validators.isString('location', src.location);
        validators.isString('email', src.email);
        validators.isString('linkedin', src.linkedin);
        validators.isString('twitter', src.twitter);
        validators.isNumber('primaryOrganization', src.primaryOrganization);
        validators.isString('role', src.role);
    }

    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'userProfile'),
            { enableVersioning: true, enableTimestamps: true, validator: UserProfileFactory.validate, hasLiveStreams: false },
            [new FEntityIndex('byUpdatedAt', ['updatedAt'], false)],
            'UserProfile'
        );
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'id': rawId[0] };
    }
    async findById(ctx: Context, id: number) {
        return await this._findById(ctx, [id]);
    }
    async create(ctx: Context, id: number, shape: UserProfileShape) {
        return await this._create(ctx, [id], { id, ...shape });
    }
    watch(ctx: Context, id: number, cb: () => void) {
        return this._watch(ctx, [id], cb);
    }
    async rangeFromByUpdatedAt(ctx: Context, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'byUpdatedAt'], limit, reversed);
    }
    async rangeFromByUpdatedAtWithCursor(ctx: Context, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'byUpdatedAt'], limit, after, reversed);
    }
    async allFromByUpdatedAt(ctx: Context, ) {
        return await this._findAll(ctx, ['__indexes', 'byUpdatedAt']);
    }
    createByUpdatedAtStream(ctx: Context, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'userProfile', '__indexes', 'byUpdatedAt'], limit, after); 
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new UserProfile(ctx, this.connection, this.namespace, this.directory, [value.id], value, this.options, isNew, this.indexes, 'UserProfile');
    }
}
export interface UserIndexingQueueShape {
}

export class UserIndexingQueue extends FEntity {
    readonly entityName: 'UserIndexingQueue' = 'UserIndexingQueue';
    get id(): number { return this._value.id; }
}

export class UserIndexingQueueFactory extends FEntityFactory<UserIndexingQueue> {
    static schema: FEntitySchema = {
        name: 'UserIndexingQueue',
        editable: false,
        primaryKeys: [
            { name: 'id', type: 'number' },
        ],
        fields: [
        ],
        indexes: [
            { name: 'updated', type: 'range', fields: ['updatedAt'] },
        ],
    };

    private static validate(src: any) {
        validators.notNull('id', src.id);
        validators.isNumber('id', src.id);
    }

    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'userIndexingQueue'),
            { enableVersioning: true, enableTimestamps: true, validator: UserIndexingQueueFactory.validate, hasLiveStreams: false },
            [new FEntityIndex('updated', ['updatedAt'], false)],
            'UserIndexingQueue'
        );
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'id': rawId[0] };
    }
    async findById(ctx: Context, id: number) {
        return await this._findById(ctx, [id]);
    }
    async create(ctx: Context, id: number, shape: UserIndexingQueueShape) {
        return await this._create(ctx, [id], { id, ...shape });
    }
    watch(ctx: Context, id: number, cb: () => void) {
        return this._watch(ctx, [id], cb);
    }
    async rangeFromUpdated(ctx: Context, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'updated'], limit, reversed);
    }
    async rangeFromUpdatedWithCursor(ctx: Context, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'updated'], limit, after, reversed);
    }
    async allFromUpdated(ctx: Context, ) {
        return await this._findAll(ctx, ['__indexes', 'updated']);
    }
    createUpdatedStream(ctx: Context, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'userIndexingQueue', '__indexes', 'updated'], limit, after); 
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new UserIndexingQueue(ctx, this.connection, this.namespace, this.directory, [value.id], value, this.options, isNew, this.indexes, 'UserIndexingQueue');
    }
}
export interface OrganizationShape {
    ownerId: number;
    status: 'pending' | 'activated' | 'suspended' | 'deleted';
    kind: 'organization' | 'community';
    editorial: boolean;
}

export class Organization extends FEntity {
    readonly entityName: 'Organization' = 'Organization';
    get id(): number { return this._value.id; }
    get ownerId(): number {
        return this._value.ownerId;
    }
    set ownerId(value: number) {
        this._checkIsWritable();
        if (value === this._value.ownerId) { return; }
        this._value.ownerId = value;
        this.markDirty();
    }
    get status(): 'pending' | 'activated' | 'suspended' | 'deleted' {
        return this._value.status;
    }
    set status(value: 'pending' | 'activated' | 'suspended' | 'deleted') {
        this._checkIsWritable();
        if (value === this._value.status) { return; }
        this._value.status = value;
        this.markDirty();
    }
    get kind(): 'organization' | 'community' {
        return this._value.kind;
    }
    set kind(value: 'organization' | 'community') {
        this._checkIsWritable();
        if (value === this._value.kind) { return; }
        this._value.kind = value;
        this.markDirty();
    }
    get editorial(): boolean {
        return this._value.editorial;
    }
    set editorial(value: boolean) {
        this._checkIsWritable();
        if (value === this._value.editorial) { return; }
        this._value.editorial = value;
        this.markDirty();
    }
}

export class OrganizationFactory extends FEntityFactory<Organization> {
    static schema: FEntitySchema = {
        name: 'Organization',
        editable: false,
        primaryKeys: [
            { name: 'id', type: 'number' },
        ],
        fields: [
            { name: 'ownerId', type: 'number' },
            { name: 'status', type: 'enum', enumValues: ['pending', 'activated', 'suspended', 'deleted'] },
            { name: 'kind', type: 'enum', enumValues: ['organization', 'community'] },
            { name: 'editorial', type: 'boolean' },
        ],
        indexes: [
            { name: 'community', type: 'range', fields: [] },
        ],
    };

    private static validate(src: any) {
        validators.notNull('id', src.id);
        validators.isNumber('id', src.id);
        validators.notNull('ownerId', src.ownerId);
        validators.isNumber('ownerId', src.ownerId);
        validators.notNull('status', src.status);
        validators.isEnum('status', src.status, ['pending', 'activated', 'suspended', 'deleted']);
        validators.notNull('kind', src.kind);
        validators.isEnum('kind', src.kind, ['organization', 'community']);
        validators.notNull('editorial', src.editorial);
        validators.isBoolean('editorial', src.editorial);
    }

    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'organization'),
            { enableVersioning: true, enableTimestamps: true, validator: OrganizationFactory.validate, hasLiveStreams: false },
            [new FEntityIndex('community', [], false, (src) => src.kind === 'community' && src.status === 'activated')],
            'Organization'
        );
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'id': rawId[0] };
    }
    async findById(ctx: Context, id: number) {
        return await this._findById(ctx, [id]);
    }
    async create(ctx: Context, id: number, shape: OrganizationShape) {
        return await this._create(ctx, [id], { id, ...shape });
    }
    watch(ctx: Context, id: number, cb: () => void) {
        return this._watch(ctx, [id], cb);
    }
    async rangeFromCommunity(ctx: Context, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'community'], limit, reversed);
    }
    async rangeFromCommunityWithCursor(ctx: Context, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'community'], limit, after, reversed);
    }
    async allFromCommunity(ctx: Context, ) {
        return await this._findAll(ctx, ['__indexes', 'community']);
    }
    createCommunityStream(ctx: Context, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'organization', '__indexes', 'community'], limit, after); 
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new Organization(ctx, this.connection, this.namespace, this.directory, [value.id], value, this.options, isNew, this.indexes, 'Organization');
    }
}
export interface OrganizationProfileShape {
    name: string;
    photo?: { uuid: string, crop: { x: number, y: number, w: number, h: number, } | null, }| null;
    about?: string| null;
    twitter?: string| null;
    facebook?: string| null;
    linkedin?: string| null;
    website?: string| null;
}

export class OrganizationProfile extends FEntity {
    readonly entityName: 'OrganizationProfile' = 'OrganizationProfile';
    get id(): number { return this._value.id; }
    get name(): string {
        return this._value.name;
    }
    set name(value: string) {
        this._checkIsWritable();
        if (value === this._value.name) { return; }
        this._value.name = value;
        this.markDirty();
    }
    get photo(): { uuid: string, crop: { x: number, y: number, w: number, h: number, } | null, } | null {
        let res = this._value.photo;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set photo(value: { uuid: string, crop: { x: number, y: number, w: number, h: number, } | null, } | null) {
        this._checkIsWritable();
        if (value === this._value.photo) { return; }
        this._value.photo = value;
        this.markDirty();
    }
    get about(): string | null {
        let res = this._value.about;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set about(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.about) { return; }
        this._value.about = value;
        this.markDirty();
    }
    get twitter(): string | null {
        let res = this._value.twitter;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set twitter(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.twitter) { return; }
        this._value.twitter = value;
        this.markDirty();
    }
    get facebook(): string | null {
        let res = this._value.facebook;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set facebook(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.facebook) { return; }
        this._value.facebook = value;
        this.markDirty();
    }
    get linkedin(): string | null {
        let res = this._value.linkedin;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set linkedin(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.linkedin) { return; }
        this._value.linkedin = value;
        this.markDirty();
    }
    get website(): string | null {
        let res = this._value.website;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set website(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.website) { return; }
        this._value.website = value;
        this.markDirty();
    }
}

export class OrganizationProfileFactory extends FEntityFactory<OrganizationProfile> {
    static schema: FEntitySchema = {
        name: 'OrganizationProfile',
        editable: false,
        primaryKeys: [
            { name: 'id', type: 'number' },
        ],
        fields: [
            { name: 'name', type: 'string' },
            { name: 'photo', type: 'json' },
            { name: 'about', type: 'string' },
            { name: 'twitter', type: 'string' },
            { name: 'facebook', type: 'string' },
            { name: 'linkedin', type: 'string' },
            { name: 'website', type: 'string' },
        ],
        indexes: [
        ],
    };

    private static validate(src: any) {
        validators.notNull('id', src.id);
        validators.isNumber('id', src.id);
        validators.notNull('name', src.name);
        validators.isString('name', src.name);
        validators.isJson('photo', src.photo, json(() => {
            jField('uuid', jString());
            jField('crop', json(() => {
            jField('x', jNumber());
            jField('y', jNumber());
            jField('w', jNumber());
            jField('h', jNumber());
        }), true);
        }));
        validators.isString('about', src.about);
        validators.isString('twitter', src.twitter);
        validators.isString('facebook', src.facebook);
        validators.isString('linkedin', src.linkedin);
        validators.isString('website', src.website);
    }

    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'organizationProfile'),
            { enableVersioning: true, enableTimestamps: true, validator: OrganizationProfileFactory.validate, hasLiveStreams: false },
            [],
            'OrganizationProfile'
        );
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'id': rawId[0] };
    }
    async findById(ctx: Context, id: number) {
        return await this._findById(ctx, [id]);
    }
    async create(ctx: Context, id: number, shape: OrganizationProfileShape) {
        return await this._create(ctx, [id], { id, ...shape });
    }
    watch(ctx: Context, id: number, cb: () => void) {
        return this._watch(ctx, [id], cb);
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new OrganizationProfile(ctx, this.connection, this.namespace, this.directory, [value.id], value, this.options, isNew, this.indexes, 'OrganizationProfile');
    }
}
export interface OrganizationEditorialShape {
    listed: boolean;
    featured: boolean;
}

export class OrganizationEditorial extends FEntity {
    readonly entityName: 'OrganizationEditorial' = 'OrganizationEditorial';
    get id(): number { return this._value.id; }
    get listed(): boolean {
        return this._value.listed;
    }
    set listed(value: boolean) {
        this._checkIsWritable();
        if (value === this._value.listed) { return; }
        this._value.listed = value;
        this.markDirty();
    }
    get featured(): boolean {
        return this._value.featured;
    }
    set featured(value: boolean) {
        this._checkIsWritable();
        if (value === this._value.featured) { return; }
        this._value.featured = value;
        this.markDirty();
    }
}

export class OrganizationEditorialFactory extends FEntityFactory<OrganizationEditorial> {
    static schema: FEntitySchema = {
        name: 'OrganizationEditorial',
        editable: false,
        primaryKeys: [
            { name: 'id', type: 'number' },
        ],
        fields: [
            { name: 'listed', type: 'boolean' },
            { name: 'featured', type: 'boolean' },
        ],
        indexes: [
        ],
    };

    private static validate(src: any) {
        validators.notNull('id', src.id);
        validators.isNumber('id', src.id);
        validators.notNull('listed', src.listed);
        validators.isBoolean('listed', src.listed);
        validators.notNull('featured', src.featured);
        validators.isBoolean('featured', src.featured);
    }

    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'organizationEditorial'),
            { enableVersioning: true, enableTimestamps: true, validator: OrganizationEditorialFactory.validate, hasLiveStreams: false },
            [],
            'OrganizationEditorial'
        );
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'id': rawId[0] };
    }
    async findById(ctx: Context, id: number) {
        return await this._findById(ctx, [id]);
    }
    async create(ctx: Context, id: number, shape: OrganizationEditorialShape) {
        return await this._create(ctx, [id], { id, ...shape });
    }
    watch(ctx: Context, id: number, cb: () => void) {
        return this._watch(ctx, [id], cb);
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new OrganizationEditorial(ctx, this.connection, this.namespace, this.directory, [value.id], value, this.options, isNew, this.indexes, 'OrganizationEditorial');
    }
}
export interface OrganizationIndexingQueueShape {
}

export class OrganizationIndexingQueue extends FEntity {
    readonly entityName: 'OrganizationIndexingQueue' = 'OrganizationIndexingQueue';
    get id(): number { return this._value.id; }
}

export class OrganizationIndexingQueueFactory extends FEntityFactory<OrganizationIndexingQueue> {
    static schema: FEntitySchema = {
        name: 'OrganizationIndexingQueue',
        editable: false,
        primaryKeys: [
            { name: 'id', type: 'number' },
        ],
        fields: [
        ],
        indexes: [
            { name: 'updated', type: 'range', fields: ['updatedAt'] },
        ],
    };

    private static validate(src: any) {
        validators.notNull('id', src.id);
        validators.isNumber('id', src.id);
    }

    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'organizationIndexingQueue'),
            { enableVersioning: true, enableTimestamps: true, validator: OrganizationIndexingQueueFactory.validate, hasLiveStreams: false },
            [new FEntityIndex('updated', ['updatedAt'], false)],
            'OrganizationIndexingQueue'
        );
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'id': rawId[0] };
    }
    async findById(ctx: Context, id: number) {
        return await this._findById(ctx, [id]);
    }
    async create(ctx: Context, id: number, shape: OrganizationIndexingQueueShape) {
        return await this._create(ctx, [id], { id, ...shape });
    }
    watch(ctx: Context, id: number, cb: () => void) {
        return this._watch(ctx, [id], cb);
    }
    async rangeFromUpdated(ctx: Context, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'updated'], limit, reversed);
    }
    async rangeFromUpdatedWithCursor(ctx: Context, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'updated'], limit, after, reversed);
    }
    async allFromUpdated(ctx: Context, ) {
        return await this._findAll(ctx, ['__indexes', 'updated']);
    }
    createUpdatedStream(ctx: Context, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'organizationIndexingQueue', '__indexes', 'updated'], limit, after); 
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new OrganizationIndexingQueue(ctx, this.connection, this.namespace, this.directory, [value.id], value, this.options, isNew, this.indexes, 'OrganizationIndexingQueue');
    }
}
export interface OrganizationMemberShape {
    invitedBy?: number| null;
    role: 'admin' | 'member';
    status: 'requested' | 'joined' | 'left';
}

export class OrganizationMember extends FEntity {
    readonly entityName: 'OrganizationMember' = 'OrganizationMember';
    get oid(): number { return this._value.oid; }
    get uid(): number { return this._value.uid; }
    get invitedBy(): number | null {
        let res = this._value.invitedBy;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set invitedBy(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.invitedBy) { return; }
        this._value.invitedBy = value;
        this.markDirty();
    }
    get role(): 'admin' | 'member' {
        return this._value.role;
    }
    set role(value: 'admin' | 'member') {
        this._checkIsWritable();
        if (value === this._value.role) { return; }
        this._value.role = value;
        this.markDirty();
    }
    get status(): 'requested' | 'joined' | 'left' {
        return this._value.status;
    }
    set status(value: 'requested' | 'joined' | 'left') {
        this._checkIsWritable();
        if (value === this._value.status) { return; }
        this._value.status = value;
        this.markDirty();
    }
}

export class OrganizationMemberFactory extends FEntityFactory<OrganizationMember> {
    static schema: FEntitySchema = {
        name: 'OrganizationMember',
        editable: false,
        primaryKeys: [
            { name: 'oid', type: 'number' },
            { name: 'uid', type: 'number' },
        ],
        fields: [
            { name: 'invitedBy', type: 'number' },
            { name: 'role', type: 'enum', enumValues: ['admin', 'member'] },
            { name: 'status', type: 'enum', enumValues: ['requested', 'joined', 'left'] },
        ],
        indexes: [
            { name: 'ids', type: 'unique', fields: ['oid', 'uid'] },
            { name: 'organization', type: 'range', fields: ['status', 'oid', 'uid'], displayName: 'usersFromOrganization' },
            { name: 'user', type: 'range', fields: ['status', 'uid', 'oid'], displayName: 'organizationsFromUser' },
        ],
    };

    private static validate(src: any) {
        validators.notNull('oid', src.oid);
        validators.isNumber('oid', src.oid);
        validators.notNull('uid', src.uid);
        validators.isNumber('uid', src.uid);
        validators.isNumber('invitedBy', src.invitedBy);
        validators.notNull('role', src.role);
        validators.isEnum('role', src.role, ['admin', 'member']);
        validators.notNull('status', src.status);
        validators.isEnum('status', src.status, ['requested', 'joined', 'left']);
    }

    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'organizationMember'),
            { enableVersioning: true, enableTimestamps: true, validator: OrganizationMemberFactory.validate, hasLiveStreams: false },
            [new FEntityIndex('ids', ['oid', 'uid'], true), new FEntityIndex('organization', ['status', 'oid', 'uid'], false), new FEntityIndex('user', ['status', 'uid', 'oid'], false)],
            'OrganizationMember'
        );
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 2) { throw Error('Invalid key length!'); }
        return { 'oid': rawId[0], 'uid': rawId[1] };
    }
    async findById(ctx: Context, oid: number, uid: number) {
        return await this._findById(ctx, [oid, uid]);
    }
    async create(ctx: Context, oid: number, uid: number, shape: OrganizationMemberShape) {
        return await this._create(ctx, [oid, uid], { oid, uid, ...shape });
    }
    watch(ctx: Context, oid: number, uid: number, cb: () => void) {
        return this._watch(ctx, [oid, uid], cb);
    }
    async findFromIds(ctx: Context, oid: number, uid: number) {
        return await this._findFromIndex(ctx, ['__indexes', 'ids', oid, uid]);
    }
    async allFromIdsAfter(ctx: Context, oid: number, after: number) {
        return await this._findRangeAllAfter(ctx, ['__indexes', 'ids', oid], after);
    }
    async rangeFromIdsAfter(ctx: Context, oid: number, after: number, limit: number, reversed?: boolean) {
        return await this._findRangeAfter(ctx, ['__indexes', 'ids', oid], after, limit, reversed);
    }
    async rangeFromIds(ctx: Context, oid: number, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'ids', oid], limit, reversed);
    }
    async rangeFromIdsWithCursor(ctx: Context, oid: number, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'ids', oid], limit, after, reversed);
    }
    async allFromIds(ctx: Context, oid: number) {
        return await this._findAll(ctx, ['__indexes', 'ids', oid]);
    }
    createIdsStream(ctx: Context, oid: number, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'organizationMember', '__indexes', 'ids', oid], limit, after); 
    }
    async allFromOrganizationAfter(ctx: Context, status: 'requested' | 'joined' | 'left', oid: number, after: number) {
        return await this._findRangeAllAfter(ctx, ['__indexes', 'organization', status, oid], after);
    }
    async rangeFromOrganizationAfter(ctx: Context, status: 'requested' | 'joined' | 'left', oid: number, after: number, limit: number, reversed?: boolean) {
        return await this._findRangeAfter(ctx, ['__indexes', 'organization', status, oid], after, limit, reversed);
    }
    async rangeFromOrganization(ctx: Context, status: 'requested' | 'joined' | 'left', oid: number, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'organization', status, oid], limit, reversed);
    }
    async rangeFromOrganizationWithCursor(ctx: Context, status: 'requested' | 'joined' | 'left', oid: number, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'organization', status, oid], limit, after, reversed);
    }
    async allFromOrganization(ctx: Context, status: 'requested' | 'joined' | 'left', oid: number) {
        return await this._findAll(ctx, ['__indexes', 'organization', status, oid]);
    }
    createOrganizationStream(ctx: Context, status: 'requested' | 'joined' | 'left', oid: number, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'organizationMember', '__indexes', 'organization', status, oid], limit, after); 
    }
    async allFromUserAfter(ctx: Context, status: 'requested' | 'joined' | 'left', uid: number, after: number) {
        return await this._findRangeAllAfter(ctx, ['__indexes', 'user', status, uid], after);
    }
    async rangeFromUserAfter(ctx: Context, status: 'requested' | 'joined' | 'left', uid: number, after: number, limit: number, reversed?: boolean) {
        return await this._findRangeAfter(ctx, ['__indexes', 'user', status, uid], after, limit, reversed);
    }
    async rangeFromUser(ctx: Context, status: 'requested' | 'joined' | 'left', uid: number, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'user', status, uid], limit, reversed);
    }
    async rangeFromUserWithCursor(ctx: Context, status: 'requested' | 'joined' | 'left', uid: number, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'user', status, uid], limit, after, reversed);
    }
    async allFromUser(ctx: Context, status: 'requested' | 'joined' | 'left', uid: number) {
        return await this._findAll(ctx, ['__indexes', 'user', status, uid]);
    }
    createUserStream(ctx: Context, status: 'requested' | 'joined' | 'left', uid: number, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'organizationMember', '__indexes', 'user', status, uid], limit, after); 
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new OrganizationMember(ctx, this.connection, this.namespace, this.directory, [value.oid, value.uid], value, this.options, isNew, this.indexes, 'OrganizationMember');
    }
}
export interface FeatureFlagShape {
    title: string;
}

export class FeatureFlag extends FEntity {
    readonly entityName: 'FeatureFlag' = 'FeatureFlag';
    get key(): string { return this._value.key; }
    get title(): string {
        return this._value.title;
    }
    set title(value: string) {
        this._checkIsWritable();
        if (value === this._value.title) { return; }
        this._value.title = value;
        this.markDirty();
    }
}

export class FeatureFlagFactory extends FEntityFactory<FeatureFlag> {
    static schema: FEntitySchema = {
        name: 'FeatureFlag',
        editable: false,
        primaryKeys: [
            { name: 'key', type: 'string' },
        ],
        fields: [
            { name: 'title', type: 'string' },
        ],
        indexes: [
        ],
    };

    private static validate(src: any) {
        validators.notNull('key', src.key);
        validators.isString('key', src.key);
        validators.notNull('title', src.title);
        validators.isString('title', src.title);
    }

    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'featureFlag'),
            { enableVersioning: true, enableTimestamps: true, validator: FeatureFlagFactory.validate, hasLiveStreams: false },
            [],
            'FeatureFlag'
        );
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'key': rawId[0] };
    }
    async findById(ctx: Context, key: string) {
        return await this._findById(ctx, [key]);
    }
    async create(ctx: Context, key: string, shape: FeatureFlagShape) {
        return await this._create(ctx, [key], { key, ...shape });
    }
    watch(ctx: Context, key: string, cb: () => void) {
        return this._watch(ctx, [key], cb);
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new FeatureFlag(ctx, this.connection, this.namespace, this.directory, [value.key], value, this.options, isNew, this.indexes, 'FeatureFlag');
    }
}
export interface OrganizationFeaturesShape {
    featureKey: string;
    organizationId: number;
    enabled: boolean;
}

export class OrganizationFeatures extends FEntity {
    readonly entityName: 'OrganizationFeatures' = 'OrganizationFeatures';
    get id(): string { return this._value.id; }
    get featureKey(): string {
        return this._value.featureKey;
    }
    set featureKey(value: string) {
        this._checkIsWritable();
        if (value === this._value.featureKey) { return; }
        this._value.featureKey = value;
        this.markDirty();
    }
    get organizationId(): number {
        return this._value.organizationId;
    }
    set organizationId(value: number) {
        this._checkIsWritable();
        if (value === this._value.organizationId) { return; }
        this._value.organizationId = value;
        this.markDirty();
    }
    get enabled(): boolean {
        return this._value.enabled;
    }
    set enabled(value: boolean) {
        this._checkIsWritable();
        if (value === this._value.enabled) { return; }
        this._value.enabled = value;
        this.markDirty();
    }
}

export class OrganizationFeaturesFactory extends FEntityFactory<OrganizationFeatures> {
    static schema: FEntitySchema = {
        name: 'OrganizationFeatures',
        editable: false,
        primaryKeys: [
            { name: 'id', type: 'string' },
        ],
        fields: [
            { name: 'featureKey', type: 'string' },
            { name: 'organizationId', type: 'number' },
            { name: 'enabled', type: 'boolean' },
        ],
        indexes: [
            { name: 'organization', type: 'unique', fields: ['organizationId', 'featureKey'] },
        ],
    };

    private static validate(src: any) {
        validators.notNull('id', src.id);
        validators.isString('id', src.id);
        validators.notNull('featureKey', src.featureKey);
        validators.isString('featureKey', src.featureKey);
        validators.notNull('organizationId', src.organizationId);
        validators.isNumber('organizationId', src.organizationId);
        validators.notNull('enabled', src.enabled);
        validators.isBoolean('enabled', src.enabled);
    }

    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'organizationFeatures'),
            { enableVersioning: true, enableTimestamps: true, validator: OrganizationFeaturesFactory.validate, hasLiveStreams: false },
            [new FEntityIndex('organization', ['organizationId', 'featureKey'], true)],
            'OrganizationFeatures'
        );
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'id': rawId[0] };
    }
    async findById(ctx: Context, id: string) {
        return await this._findById(ctx, [id]);
    }
    async create(ctx: Context, id: string, shape: OrganizationFeaturesShape) {
        return await this._create(ctx, [id], { id, ...shape });
    }
    watch(ctx: Context, id: string, cb: () => void) {
        return this._watch(ctx, [id], cb);
    }
    async findFromOrganization(ctx: Context, organizationId: number, featureKey: string) {
        return await this._findFromIndex(ctx, ['__indexes', 'organization', organizationId, featureKey]);
    }
    async allFromOrganizationAfter(ctx: Context, organizationId: number, after: string) {
        return await this._findRangeAllAfter(ctx, ['__indexes', 'organization', organizationId], after);
    }
    async rangeFromOrganizationAfter(ctx: Context, organizationId: number, after: string, limit: number, reversed?: boolean) {
        return await this._findRangeAfter(ctx, ['__indexes', 'organization', organizationId], after, limit, reversed);
    }
    async rangeFromOrganization(ctx: Context, organizationId: number, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'organization', organizationId], limit, reversed);
    }
    async rangeFromOrganizationWithCursor(ctx: Context, organizationId: number, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'organization', organizationId], limit, after, reversed);
    }
    async allFromOrganization(ctx: Context, organizationId: number) {
        return await this._findAll(ctx, ['__indexes', 'organization', organizationId]);
    }
    createOrganizationStream(ctx: Context, organizationId: number, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'organizationFeatures', '__indexes', 'organization', organizationId], limit, after); 
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new OrganizationFeatures(ctx, this.connection, this.namespace, this.directory, [value.id], value, this.options, isNew, this.indexes, 'OrganizationFeatures');
    }
}
export interface ReaderStateShape {
    cursor: string;
    version?: number| null;
}

export class ReaderState extends FEntity {
    readonly entityName: 'ReaderState' = 'ReaderState';
    get id(): string { return this._value.id; }
    get cursor(): string {
        return this._value.cursor;
    }
    set cursor(value: string) {
        this._checkIsWritable();
        if (value === this._value.cursor) { return; }
        this._value.cursor = value;
        this.markDirty();
    }
    get version(): number | null {
        let res = this._value.version;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set version(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.version) { return; }
        this._value.version = value;
        this.markDirty();
    }
}

export class ReaderStateFactory extends FEntityFactory<ReaderState> {
    static schema: FEntitySchema = {
        name: 'ReaderState',
        editable: false,
        primaryKeys: [
            { name: 'id', type: 'string' },
        ],
        fields: [
            { name: 'cursor', type: 'string' },
            { name: 'version', type: 'number' },
        ],
        indexes: [
        ],
    };

    private static validate(src: any) {
        validators.notNull('id', src.id);
        validators.isString('id', src.id);
        validators.notNull('cursor', src.cursor);
        validators.isString('cursor', src.cursor);
        validators.isNumber('version', src.version);
    }

    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'readerState'),
            { enableVersioning: true, enableTimestamps: true, validator: ReaderStateFactory.validate, hasLiveStreams: false },
            [],
            'ReaderState'
        );
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'id': rawId[0] };
    }
    async findById(ctx: Context, id: string) {
        return await this._findById(ctx, [id]);
    }
    async create(ctx: Context, id: string, shape: ReaderStateShape) {
        return await this._create(ctx, [id], { id, ...shape });
    }
    watch(ctx: Context, id: string, cb: () => void) {
        return this._watch(ctx, [id], cb);
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new ReaderState(ctx, this.connection, this.namespace, this.directory, [value.id], value, this.options, isNew, this.indexes, 'ReaderState');
    }
}
export interface SuperAdminShape {
    role: string;
    enabled: boolean;
}

export class SuperAdmin extends FEntity {
    readonly entityName: 'SuperAdmin' = 'SuperAdmin';
    get id(): number { return this._value.id; }
    get role(): string {
        return this._value.role;
    }
    set role(value: string) {
        this._checkIsWritable();
        if (value === this._value.role) { return; }
        this._value.role = value;
        this.markDirty();
    }
    get enabled(): boolean {
        return this._value.enabled;
    }
    set enabled(value: boolean) {
        this._checkIsWritable();
        if (value === this._value.enabled) { return; }
        this._value.enabled = value;
        this.markDirty();
    }
}

export class SuperAdminFactory extends FEntityFactory<SuperAdmin> {
    static schema: FEntitySchema = {
        name: 'SuperAdmin',
        editable: false,
        primaryKeys: [
            { name: 'id', type: 'number' },
        ],
        fields: [
            { name: 'role', type: 'string' },
            { name: 'enabled', type: 'boolean' },
        ],
        indexes: [
        ],
    };

    private static validate(src: any) {
        validators.notNull('id', src.id);
        validators.isNumber('id', src.id);
        validators.notNull('role', src.role);
        validators.isString('role', src.role);
        validators.notNull('enabled', src.enabled);
        validators.isBoolean('enabled', src.enabled);
    }

    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'superAdmin'),
            { enableVersioning: false, enableTimestamps: false, validator: SuperAdminFactory.validate, hasLiveStreams: false },
            [],
            'SuperAdmin'
        );
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'id': rawId[0] };
    }
    async findById(ctx: Context, id: number) {
        return await this._findById(ctx, [id]);
    }
    async create(ctx: Context, id: number, shape: SuperAdminShape) {
        return await this._create(ctx, [id], { id, ...shape });
    }
    watch(ctx: Context, id: number, cb: () => void) {
        return this._watch(ctx, [id], cb);
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new SuperAdmin(ctx, this.connection, this.namespace, this.directory, [value.id], value, this.options, isNew, this.indexes, 'SuperAdmin');
    }
}
export interface UserSettingsShape {
    emailFrequency: '1hour' | '15min' | 'never' | '24hour' | '1week';
    desktopNotifications: 'all' | 'direct' | 'none';
    mobileNotifications: 'all' | 'direct' | 'none';
    mobileAlert?: boolean| null;
    mobileIncludeText?: boolean| null;
    notificationsDelay?: 'none' | '1min' | '15min'| null;
}

export class UserSettings extends FEntity {
    readonly entityName: 'UserSettings' = 'UserSettings';
    get id(): number { return this._value.id; }
    get emailFrequency(): '1hour' | '15min' | 'never' | '24hour' | '1week' {
        return this._value.emailFrequency;
    }
    set emailFrequency(value: '1hour' | '15min' | 'never' | '24hour' | '1week') {
        this._checkIsWritable();
        if (value === this._value.emailFrequency) { return; }
        this._value.emailFrequency = value;
        this.markDirty();
    }
    get desktopNotifications(): 'all' | 'direct' | 'none' {
        return this._value.desktopNotifications;
    }
    set desktopNotifications(value: 'all' | 'direct' | 'none') {
        this._checkIsWritable();
        if (value === this._value.desktopNotifications) { return; }
        this._value.desktopNotifications = value;
        this.markDirty();
    }
    get mobileNotifications(): 'all' | 'direct' | 'none' {
        return this._value.mobileNotifications;
    }
    set mobileNotifications(value: 'all' | 'direct' | 'none') {
        this._checkIsWritable();
        if (value === this._value.mobileNotifications) { return; }
        this._value.mobileNotifications = value;
        this.markDirty();
    }
    get mobileAlert(): boolean | null {
        let res = this._value.mobileAlert;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set mobileAlert(value: boolean | null) {
        this._checkIsWritable();
        if (value === this._value.mobileAlert) { return; }
        this._value.mobileAlert = value;
        this.markDirty();
    }
    get mobileIncludeText(): boolean | null {
        let res = this._value.mobileIncludeText;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set mobileIncludeText(value: boolean | null) {
        this._checkIsWritable();
        if (value === this._value.mobileIncludeText) { return; }
        this._value.mobileIncludeText = value;
        this.markDirty();
    }
    get notificationsDelay(): 'none' | '1min' | '15min' | null {
        let res = this._value.notificationsDelay;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set notificationsDelay(value: 'none' | '1min' | '15min' | null) {
        this._checkIsWritable();
        if (value === this._value.notificationsDelay) { return; }
        this._value.notificationsDelay = value;
        this.markDirty();
    }
}

export class UserSettingsFactory extends FEntityFactory<UserSettings> {
    static schema: FEntitySchema = {
        name: 'UserSettings',
        editable: false,
        primaryKeys: [
            { name: 'id', type: 'number' },
        ],
        fields: [
            { name: 'emailFrequency', type: 'enum', enumValues: ['1hour', '15min', 'never', '24hour', '1week'] },
            { name: 'desktopNotifications', type: 'enum', enumValues: ['all', 'direct', 'none'] },
            { name: 'mobileNotifications', type: 'enum', enumValues: ['all', 'direct', 'none'] },
            { name: 'mobileAlert', type: 'boolean' },
            { name: 'mobileIncludeText', type: 'boolean' },
            { name: 'notificationsDelay', type: 'enum', enumValues: ['none', '1min', '15min'] },
        ],
        indexes: [
        ],
    };

    private static validate(src: any) {
        validators.notNull('id', src.id);
        validators.isNumber('id', src.id);
        validators.notNull('emailFrequency', src.emailFrequency);
        validators.isEnum('emailFrequency', src.emailFrequency, ['1hour', '15min', 'never', '24hour', '1week']);
        validators.notNull('desktopNotifications', src.desktopNotifications);
        validators.isEnum('desktopNotifications', src.desktopNotifications, ['all', 'direct', 'none']);
        validators.notNull('mobileNotifications', src.mobileNotifications);
        validators.isEnum('mobileNotifications', src.mobileNotifications, ['all', 'direct', 'none']);
        validators.isBoolean('mobileAlert', src.mobileAlert);
        validators.isBoolean('mobileIncludeText', src.mobileIncludeText);
        validators.isEnum('notificationsDelay', src.notificationsDelay, ['none', '1min', '15min']);
    }

    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'userSettings'),
            { enableVersioning: true, enableTimestamps: true, validator: UserSettingsFactory.validate, hasLiveStreams: false },
            [],
            'UserSettings'
        );
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'id': rawId[0] };
    }
    async findById(ctx: Context, id: number) {
        return await this._findById(ctx, [id]);
    }
    async create(ctx: Context, id: number, shape: UserSettingsShape) {
        return await this._create(ctx, [id], { id, ...shape });
    }
    watch(ctx: Context, id: number, cb: () => void) {
        return this._watch(ctx, [id], cb);
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new UserSettings(ctx, this.connection, this.namespace, this.directory, [value.id], value, this.options, isNew, this.indexes, 'UserSettings');
    }
}
export interface ShortnameReservationShape {
    ownerType: 'org' | 'user';
    ownerId: number;
    enabled: boolean;
}

export class ShortnameReservation extends FEntity {
    readonly entityName: 'ShortnameReservation' = 'ShortnameReservation';
    get shortname(): string { return this._value.shortname; }
    get ownerType(): 'org' | 'user' {
        return this._value.ownerType;
    }
    set ownerType(value: 'org' | 'user') {
        this._checkIsWritable();
        if (value === this._value.ownerType) { return; }
        this._value.ownerType = value;
        this.markDirty();
    }
    get ownerId(): number {
        return this._value.ownerId;
    }
    set ownerId(value: number) {
        this._checkIsWritable();
        if (value === this._value.ownerId) { return; }
        this._value.ownerId = value;
        this.markDirty();
    }
    get enabled(): boolean {
        return this._value.enabled;
    }
    set enabled(value: boolean) {
        this._checkIsWritable();
        if (value === this._value.enabled) { return; }
        this._value.enabled = value;
        this.markDirty();
    }
}

export class ShortnameReservationFactory extends FEntityFactory<ShortnameReservation> {
    static schema: FEntitySchema = {
        name: 'ShortnameReservation',
        editable: false,
        primaryKeys: [
            { name: 'shortname', type: 'string' },
        ],
        fields: [
            { name: 'ownerType', type: 'enum', enumValues: ['org', 'user'] },
            { name: 'ownerId', type: 'number' },
            { name: 'enabled', type: 'boolean' },
        ],
        indexes: [
            { name: 'user', type: 'unique', fields: ['ownerId'] },
            { name: 'org', type: 'unique', fields: ['ownerId'] },
        ],
    };

    private static validate(src: any) {
        validators.notNull('shortname', src.shortname);
        validators.isString('shortname', src.shortname);
        validators.notNull('ownerType', src.ownerType);
        validators.isEnum('ownerType', src.ownerType, ['org', 'user']);
        validators.notNull('ownerId', src.ownerId);
        validators.isNumber('ownerId', src.ownerId);
        validators.notNull('enabled', src.enabled);
        validators.isBoolean('enabled', src.enabled);
    }

    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'shortnameReservation'),
            { enableVersioning: true, enableTimestamps: true, validator: ShortnameReservationFactory.validate, hasLiveStreams: false },
            [new FEntityIndex('user', ['ownerId'], true, (src) => src.ownerType === 'user' && src.enabled), new FEntityIndex('org', ['ownerId'], true, (src) => src.ownerType === 'org' && src.enabled)],
            'ShortnameReservation'
        );
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'shortname': rawId[0] };
    }
    async findById(ctx: Context, shortname: string) {
        return await this._findById(ctx, [shortname]);
    }
    async create(ctx: Context, shortname: string, shape: ShortnameReservationShape) {
        return await this._create(ctx, [shortname], { shortname, ...shape });
    }
    watch(ctx: Context, shortname: string, cb: () => void) {
        return this._watch(ctx, [shortname], cb);
    }
    async findFromUser(ctx: Context, ownerId: number) {
        return await this._findFromIndex(ctx, ['__indexes', 'user', ownerId]);
    }
    async rangeFromUser(ctx: Context, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'user'], limit, reversed);
    }
    async rangeFromUserWithCursor(ctx: Context, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'user'], limit, after, reversed);
    }
    async allFromUser(ctx: Context, ) {
        return await this._findAll(ctx, ['__indexes', 'user']);
    }
    createUserStream(ctx: Context, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'shortnameReservation', '__indexes', 'user'], limit, after); 
    }
    async findFromOrg(ctx: Context, ownerId: number) {
        return await this._findFromIndex(ctx, ['__indexes', 'org', ownerId]);
    }
    async rangeFromOrg(ctx: Context, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'org'], limit, reversed);
    }
    async rangeFromOrgWithCursor(ctx: Context, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'org'], limit, after, reversed);
    }
    async allFromOrg(ctx: Context, ) {
        return await this._findAll(ctx, ['__indexes', 'org']);
    }
    createOrgStream(ctx: Context, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'shortnameReservation', '__indexes', 'org'], limit, after); 
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new ShortnameReservation(ctx, this.connection, this.namespace, this.directory, [value.shortname], value, this.options, isNew, this.indexes, 'ShortnameReservation');
    }
}
export interface AuthCodeSessionShape {
    code: string;
    expires: number;
    email: string;
    tokenId?: string| null;
    enabled: boolean;
}

export class AuthCodeSession extends FEntity {
    readonly entityName: 'AuthCodeSession' = 'AuthCodeSession';
    get uid(): string { return this._value.uid; }
    get code(): string {
        return this._value.code;
    }
    set code(value: string) {
        this._checkIsWritable();
        if (value === this._value.code) { return; }
        this._value.code = value;
        this.markDirty();
    }
    get expires(): number {
        return this._value.expires;
    }
    set expires(value: number) {
        this._checkIsWritable();
        if (value === this._value.expires) { return; }
        this._value.expires = value;
        this.markDirty();
    }
    get email(): string {
        return this._value.email;
    }
    set email(value: string) {
        this._checkIsWritable();
        if (value === this._value.email) { return; }
        this._value.email = value;
        this.markDirty();
    }
    get tokenId(): string | null {
        let res = this._value.tokenId;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set tokenId(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.tokenId) { return; }
        this._value.tokenId = value;
        this.markDirty();
    }
    get enabled(): boolean {
        return this._value.enabled;
    }
    set enabled(value: boolean) {
        this._checkIsWritable();
        if (value === this._value.enabled) { return; }
        this._value.enabled = value;
        this.markDirty();
    }
}

export class AuthCodeSessionFactory extends FEntityFactory<AuthCodeSession> {
    static schema: FEntitySchema = {
        name: 'AuthCodeSession',
        editable: false,
        primaryKeys: [
            { name: 'uid', type: 'string' },
        ],
        fields: [
            { name: 'code', type: 'string', secure: true },
            { name: 'expires', type: 'number' },
            { name: 'email', type: 'string' },
            { name: 'tokenId', type: 'string', secure: true },
            { name: 'enabled', type: 'boolean' },
        ],
        indexes: [
        ],
    };

    private static validate(src: any) {
        validators.notNull('uid', src.uid);
        validators.isString('uid', src.uid);
        validators.notNull('code', src.code);
        validators.isString('code', src.code);
        validators.notNull('expires', src.expires);
        validators.isNumber('expires', src.expires);
        validators.notNull('email', src.email);
        validators.isString('email', src.email);
        validators.isString('tokenId', src.tokenId);
        validators.notNull('enabled', src.enabled);
        validators.isBoolean('enabled', src.enabled);
    }

    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'authCodeSession'),
            { enableVersioning: true, enableTimestamps: true, validator: AuthCodeSessionFactory.validate, hasLiveStreams: false },
            [],
            'AuthCodeSession'
        );
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'uid': rawId[0] };
    }
    async findById(ctx: Context, uid: string) {
        return await this._findById(ctx, [uid]);
    }
    async create(ctx: Context, uid: string, shape: AuthCodeSessionShape) {
        return await this._create(ctx, [uid], { uid, ...shape });
    }
    watch(ctx: Context, uid: string, cb: () => void) {
        return this._watch(ctx, [uid], cb);
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new AuthCodeSession(ctx, this.connection, this.namespace, this.directory, [value.uid], value, this.options, isNew, this.indexes, 'AuthCodeSession');
    }
}
export interface ConversationShape {
    kind: 'private' | 'organization' | 'room';
}

export class Conversation extends FEntity {
    readonly entityName: 'Conversation' = 'Conversation';
    get id(): number { return this._value.id; }
    get kind(): 'private' | 'organization' | 'room' {
        return this._value.kind;
    }
    set kind(value: 'private' | 'organization' | 'room') {
        this._checkIsWritable();
        if (value === this._value.kind) { return; }
        this._value.kind = value;
        this.markDirty();
    }
}

export class ConversationFactory extends FEntityFactory<Conversation> {
    static schema: FEntitySchema = {
        name: 'Conversation',
        editable: false,
        primaryKeys: [
            { name: 'id', type: 'number' },
        ],
        fields: [
            { name: 'kind', type: 'enum', enumValues: ['private', 'organization', 'room'] },
        ],
        indexes: [
        ],
    };

    private static validate(src: any) {
        validators.notNull('id', src.id);
        validators.isNumber('id', src.id);
        validators.notNull('kind', src.kind);
        validators.isEnum('kind', src.kind, ['private', 'organization', 'room']);
    }

    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'conversation'),
            { enableVersioning: true, enableTimestamps: true, validator: ConversationFactory.validate, hasLiveStreams: false },
            [],
            'Conversation'
        );
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'id': rawId[0] };
    }
    async findById(ctx: Context, id: number) {
        return await this._findById(ctx, [id]);
    }
    async create(ctx: Context, id: number, shape: ConversationShape) {
        return await this._create(ctx, [id], { id, ...shape });
    }
    watch(ctx: Context, id: number, cb: () => void) {
        return this._watch(ctx, [id], cb);
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new Conversation(ctx, this.connection, this.namespace, this.directory, [value.id], value, this.options, isNew, this.indexes, 'Conversation');
    }
}
export interface ConversationPrivateShape {
    uid1: number;
    uid2: number;
}

export class ConversationPrivate extends FEntity {
    readonly entityName: 'ConversationPrivate' = 'ConversationPrivate';
    get id(): number { return this._value.id; }
    get uid1(): number {
        return this._value.uid1;
    }
    set uid1(value: number) {
        this._checkIsWritable();
        if (value === this._value.uid1) { return; }
        this._value.uid1 = value;
        this.markDirty();
    }
    get uid2(): number {
        return this._value.uid2;
    }
    set uid2(value: number) {
        this._checkIsWritable();
        if (value === this._value.uid2) { return; }
        this._value.uid2 = value;
        this.markDirty();
    }
}

export class ConversationPrivateFactory extends FEntityFactory<ConversationPrivate> {
    static schema: FEntitySchema = {
        name: 'ConversationPrivate',
        editable: false,
        primaryKeys: [
            { name: 'id', type: 'number' },
        ],
        fields: [
            { name: 'uid1', type: 'number' },
            { name: 'uid2', type: 'number' },
        ],
        indexes: [
            { name: 'users', type: 'unique', fields: ['uid1', 'uid2'] },
        ],
    };

    private static validate(src: any) {
        validators.notNull('id', src.id);
        validators.isNumber('id', src.id);
        validators.notNull('uid1', src.uid1);
        validators.isNumber('uid1', src.uid1);
        validators.notNull('uid2', src.uid2);
        validators.isNumber('uid2', src.uid2);
    }

    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'conversationPrivate'),
            { enableVersioning: true, enableTimestamps: true, validator: ConversationPrivateFactory.validate, hasLiveStreams: false },
            [new FEntityIndex('users', ['uid1', 'uid2'], true)],
            'ConversationPrivate'
        );
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'id': rawId[0] };
    }
    async findById(ctx: Context, id: number) {
        return await this._findById(ctx, [id]);
    }
    async create(ctx: Context, id: number, shape: ConversationPrivateShape) {
        return await this._create(ctx, [id], { id, ...shape });
    }
    watch(ctx: Context, id: number, cb: () => void) {
        return this._watch(ctx, [id], cb);
    }
    async findFromUsers(ctx: Context, uid1: number, uid2: number) {
        return await this._findFromIndex(ctx, ['__indexes', 'users', uid1, uid2]);
    }
    async allFromUsersAfter(ctx: Context, uid1: number, after: number) {
        return await this._findRangeAllAfter(ctx, ['__indexes', 'users', uid1], after);
    }
    async rangeFromUsersAfter(ctx: Context, uid1: number, after: number, limit: number, reversed?: boolean) {
        return await this._findRangeAfter(ctx, ['__indexes', 'users', uid1], after, limit, reversed);
    }
    async rangeFromUsers(ctx: Context, uid1: number, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'users', uid1], limit, reversed);
    }
    async rangeFromUsersWithCursor(ctx: Context, uid1: number, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'users', uid1], limit, after, reversed);
    }
    async allFromUsers(ctx: Context, uid1: number) {
        return await this._findAll(ctx, ['__indexes', 'users', uid1]);
    }
    createUsersStream(ctx: Context, uid1: number, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'conversationPrivate', '__indexes', 'users', uid1], limit, after); 
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new ConversationPrivate(ctx, this.connection, this.namespace, this.directory, [value.id], value, this.options, isNew, this.indexes, 'ConversationPrivate');
    }
}
export interface ConversationOrganizationShape {
    oid: number;
}

export class ConversationOrganization extends FEntity {
    readonly entityName: 'ConversationOrganization' = 'ConversationOrganization';
    get id(): number { return this._value.id; }
    get oid(): number {
        return this._value.oid;
    }
    set oid(value: number) {
        this._checkIsWritable();
        if (value === this._value.oid) { return; }
        this._value.oid = value;
        this.markDirty();
    }
}

export class ConversationOrganizationFactory extends FEntityFactory<ConversationOrganization> {
    static schema: FEntitySchema = {
        name: 'ConversationOrganization',
        editable: false,
        primaryKeys: [
            { name: 'id', type: 'number' },
        ],
        fields: [
            { name: 'oid', type: 'number' },
        ],
        indexes: [
            { name: 'organization', type: 'unique', fields: ['oid'] },
        ],
    };

    private static validate(src: any) {
        validators.notNull('id', src.id);
        validators.isNumber('id', src.id);
        validators.notNull('oid', src.oid);
        validators.isNumber('oid', src.oid);
    }

    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'conversationOrganization'),
            { enableVersioning: true, enableTimestamps: true, validator: ConversationOrganizationFactory.validate, hasLiveStreams: false },
            [new FEntityIndex('organization', ['oid'], true)],
            'ConversationOrganization'
        );
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'id': rawId[0] };
    }
    async findById(ctx: Context, id: number) {
        return await this._findById(ctx, [id]);
    }
    async create(ctx: Context, id: number, shape: ConversationOrganizationShape) {
        return await this._create(ctx, [id], { id, ...shape });
    }
    watch(ctx: Context, id: number, cb: () => void) {
        return this._watch(ctx, [id], cb);
    }
    async findFromOrganization(ctx: Context, oid: number) {
        return await this._findFromIndex(ctx, ['__indexes', 'organization', oid]);
    }
    async rangeFromOrganization(ctx: Context, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'organization'], limit, reversed);
    }
    async rangeFromOrganizationWithCursor(ctx: Context, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'organization'], limit, after, reversed);
    }
    async allFromOrganization(ctx: Context, ) {
        return await this._findAll(ctx, ['__indexes', 'organization']);
    }
    createOrganizationStream(ctx: Context, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'conversationOrganization', '__indexes', 'organization'], limit, after); 
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new ConversationOrganization(ctx, this.connection, this.namespace, this.directory, [value.id], value, this.options, isNew, this.indexes, 'ConversationOrganization');
    }
}
export interface ConversationRoomShape {
    kind: 'organization' | 'internal' | 'public' | 'group';
    oid?: number| null;
    ownerId?: number| null;
    featured?: boolean| null;
    listed?: boolean| null;
}

export class ConversationRoom extends FEntity {
    readonly entityName: 'ConversationRoom' = 'ConversationRoom';
    get id(): number { return this._value.id; }
    get kind(): 'organization' | 'internal' | 'public' | 'group' {
        return this._value.kind;
    }
    set kind(value: 'organization' | 'internal' | 'public' | 'group') {
        this._checkIsWritable();
        if (value === this._value.kind) { return; }
        this._value.kind = value;
        this.markDirty();
    }
    get oid(): number | null {
        let res = this._value.oid;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set oid(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.oid) { return; }
        this._value.oid = value;
        this.markDirty();
    }
    get ownerId(): number | null {
        let res = this._value.ownerId;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set ownerId(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.ownerId) { return; }
        this._value.ownerId = value;
        this.markDirty();
    }
    get featured(): boolean | null {
        let res = this._value.featured;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set featured(value: boolean | null) {
        this._checkIsWritable();
        if (value === this._value.featured) { return; }
        this._value.featured = value;
        this.markDirty();
    }
    get listed(): boolean | null {
        let res = this._value.listed;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set listed(value: boolean | null) {
        this._checkIsWritable();
        if (value === this._value.listed) { return; }
        this._value.listed = value;
        this.markDirty();
    }
}

export class ConversationRoomFactory extends FEntityFactory<ConversationRoom> {
    static schema: FEntitySchema = {
        name: 'ConversationRoom',
        editable: false,
        primaryKeys: [
            { name: 'id', type: 'number' },
        ],
        fields: [
            { name: 'kind', type: 'enum', enumValues: ['organization', 'internal', 'public', 'group'] },
            { name: 'oid', type: 'number' },
            { name: 'ownerId', type: 'number' },
            { name: 'featured', type: 'boolean' },
            { name: 'listed', type: 'boolean' },
        ],
        indexes: [
            { name: 'organization', type: 'range', fields: ['oid'] },
            { name: 'organizationPublicRooms', type: 'unique', fields: ['oid', 'id'] },
        ],
    };

    private static validate(src: any) {
        validators.notNull('id', src.id);
        validators.isNumber('id', src.id);
        validators.notNull('kind', src.kind);
        validators.isEnum('kind', src.kind, ['organization', 'internal', 'public', 'group']);
        validators.isNumber('oid', src.oid);
        validators.isNumber('ownerId', src.ownerId);
        validators.isBoolean('featured', src.featured);
        validators.isBoolean('listed', src.listed);
    }

    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'conversationRoom'),
            { enableVersioning: true, enableTimestamps: true, validator: ConversationRoomFactory.validate, hasLiveStreams: false },
            [new FEntityIndex('organization', ['oid'], false, (v) => v.kind === 'public' || v.kind === 'internal'), new FEntityIndex('organizationPublicRooms', ['oid', 'id'], true, (v) => v.kind === 'public')],
            'ConversationRoom'
        );
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'id': rawId[0] };
    }
    async findById(ctx: Context, id: number) {
        return await this._findById(ctx, [id]);
    }
    async create(ctx: Context, id: number, shape: ConversationRoomShape) {
        return await this._create(ctx, [id], { id, ...shape });
    }
    watch(ctx: Context, id: number, cb: () => void) {
        return this._watch(ctx, [id], cb);
    }
    async rangeFromOrganization(ctx: Context, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'organization'], limit, reversed);
    }
    async rangeFromOrganizationWithCursor(ctx: Context, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'organization'], limit, after, reversed);
    }
    async allFromOrganization(ctx: Context, ) {
        return await this._findAll(ctx, ['__indexes', 'organization']);
    }
    createOrganizationStream(ctx: Context, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'conversationRoom', '__indexes', 'organization'], limit, after); 
    }
    async findFromOrganizationPublicRooms(ctx: Context, oid: number, id: number) {
        return await this._findFromIndex(ctx, ['__indexes', 'organizationPublicRooms', oid, id]);
    }
    async allFromOrganizationPublicRoomsAfter(ctx: Context, oid: number, after: number) {
        return await this._findRangeAllAfter(ctx, ['__indexes', 'organizationPublicRooms', oid], after);
    }
    async rangeFromOrganizationPublicRoomsAfter(ctx: Context, oid: number, after: number, limit: number, reversed?: boolean) {
        return await this._findRangeAfter(ctx, ['__indexes', 'organizationPublicRooms', oid], after, limit, reversed);
    }
    async rangeFromOrganizationPublicRooms(ctx: Context, oid: number, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'organizationPublicRooms', oid], limit, reversed);
    }
    async rangeFromOrganizationPublicRoomsWithCursor(ctx: Context, oid: number, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'organizationPublicRooms', oid], limit, after, reversed);
    }
    async allFromOrganizationPublicRooms(ctx: Context, oid: number) {
        return await this._findAll(ctx, ['__indexes', 'organizationPublicRooms', oid]);
    }
    createOrganizationPublicRoomsStream(ctx: Context, oid: number, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'conversationRoom', '__indexes', 'organizationPublicRooms', oid], limit, after); 
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new ConversationRoom(ctx, this.connection, this.namespace, this.directory, [value.id], value, this.options, isNew, this.indexes, 'ConversationRoom');
    }
}
export interface RoomProfileShape {
    title: string;
    image?: any| null;
    description?: string| null;
    socialImage?: any| null;
    pinnedMessage?: number| null;
}

export class RoomProfile extends FEntity {
    readonly entityName: 'RoomProfile' = 'RoomProfile';
    get id(): number { return this._value.id; }
    get title(): string {
        return this._value.title;
    }
    set title(value: string) {
        this._checkIsWritable();
        if (value === this._value.title) { return; }
        this._value.title = value;
        this.markDirty();
    }
    get image(): any | null {
        let res = this._value.image;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set image(value: any | null) {
        this._checkIsWritable();
        if (value === this._value.image) { return; }
        this._value.image = value;
        this.markDirty();
    }
    get description(): string | null {
        let res = this._value.description;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set description(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.description) { return; }
        this._value.description = value;
        this.markDirty();
    }
    get socialImage(): any | null {
        let res = this._value.socialImage;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set socialImage(value: any | null) {
        this._checkIsWritable();
        if (value === this._value.socialImage) { return; }
        this._value.socialImage = value;
        this.markDirty();
    }
    get pinnedMessage(): number | null {
        let res = this._value.pinnedMessage;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set pinnedMessage(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.pinnedMessage) { return; }
        this._value.pinnedMessage = value;
        this.markDirty();
    }
}

export class RoomProfileFactory extends FEntityFactory<RoomProfile> {
    static schema: FEntitySchema = {
        name: 'RoomProfile',
        editable: false,
        primaryKeys: [
            { name: 'id', type: 'number' },
        ],
        fields: [
            { name: 'title', type: 'string' },
            { name: 'image', type: 'json' },
            { name: 'description', type: 'string' },
            { name: 'socialImage', type: 'json' },
            { name: 'pinnedMessage', type: 'number' },
        ],
        indexes: [
            { name: 'updated', type: 'range', fields: ['updatedAt'] },
        ],
    };

    private static validate(src: any) {
        validators.notNull('id', src.id);
        validators.isNumber('id', src.id);
        validators.notNull('title', src.title);
        validators.isString('title', src.title);
        validators.isString('description', src.description);
        validators.isNumber('pinnedMessage', src.pinnedMessage);
    }

    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'roomProfile'),
            { enableVersioning: true, enableTimestamps: true, validator: RoomProfileFactory.validate, hasLiveStreams: false },
            [new FEntityIndex('updated', ['updatedAt'], false)],
            'RoomProfile'
        );
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'id': rawId[0] };
    }
    async findById(ctx: Context, id: number) {
        return await this._findById(ctx, [id]);
    }
    async create(ctx: Context, id: number, shape: RoomProfileShape) {
        return await this._create(ctx, [id], { id, ...shape });
    }
    watch(ctx: Context, id: number, cb: () => void) {
        return this._watch(ctx, [id], cb);
    }
    async rangeFromUpdated(ctx: Context, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'updated'], limit, reversed);
    }
    async rangeFromUpdatedWithCursor(ctx: Context, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'updated'], limit, after, reversed);
    }
    async allFromUpdated(ctx: Context, ) {
        return await this._findAll(ctx, ['__indexes', 'updated']);
    }
    createUpdatedStream(ctx: Context, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'roomProfile', '__indexes', 'updated'], limit, after); 
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new RoomProfile(ctx, this.connection, this.namespace, this.directory, [value.id], value, this.options, isNew, this.indexes, 'RoomProfile');
    }
}
export interface RoomParticipantShape {
    invitedBy: number;
    role: 'member' | 'admin' | 'owner';
    status: 'joined' | 'requested' | 'left' | 'kicked';
}

export class RoomParticipant extends FEntity {
    readonly entityName: 'RoomParticipant' = 'RoomParticipant';
    get cid(): number { return this._value.cid; }
    get uid(): number { return this._value.uid; }
    get invitedBy(): number {
        return this._value.invitedBy;
    }
    set invitedBy(value: number) {
        this._checkIsWritable();
        if (value === this._value.invitedBy) { return; }
        this._value.invitedBy = value;
        this.markDirty();
    }
    get role(): 'member' | 'admin' | 'owner' {
        return this._value.role;
    }
    set role(value: 'member' | 'admin' | 'owner') {
        this._checkIsWritable();
        if (value === this._value.role) { return; }
        this._value.role = value;
        this.markDirty();
    }
    get status(): 'joined' | 'requested' | 'left' | 'kicked' {
        return this._value.status;
    }
    set status(value: 'joined' | 'requested' | 'left' | 'kicked') {
        this._checkIsWritable();
        if (value === this._value.status) { return; }
        this._value.status = value;
        this.markDirty();
    }
}

export class RoomParticipantFactory extends FEntityFactory<RoomParticipant> {
    static schema: FEntitySchema = {
        name: 'RoomParticipant',
        editable: false,
        primaryKeys: [
            { name: 'cid', type: 'number' },
            { name: 'uid', type: 'number' },
        ],
        fields: [
            { name: 'invitedBy', type: 'number' },
            { name: 'role', type: 'enum', enumValues: ['member', 'admin', 'owner'] },
            { name: 'status', type: 'enum', enumValues: ['joined', 'requested', 'left', 'kicked'] },
        ],
        indexes: [
            { name: 'active', type: 'unique', fields: ['cid', 'uid'] },
            { name: 'requests', type: 'unique', fields: ['cid', 'uid'] },
            { name: 'userActive', type: 'unique', fields: ['uid', 'cid'] },
        ],
    };

    private static validate(src: any) {
        validators.notNull('cid', src.cid);
        validators.isNumber('cid', src.cid);
        validators.notNull('uid', src.uid);
        validators.isNumber('uid', src.uid);
        validators.notNull('invitedBy', src.invitedBy);
        validators.isNumber('invitedBy', src.invitedBy);
        validators.notNull('role', src.role);
        validators.isEnum('role', src.role, ['member', 'admin', 'owner']);
        validators.notNull('status', src.status);
        validators.isEnum('status', src.status, ['joined', 'requested', 'left', 'kicked']);
    }

    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'roomParticipant'),
            { enableVersioning: true, enableTimestamps: true, validator: RoomParticipantFactory.validate, hasLiveStreams: false },
            [new FEntityIndex('active', ['cid', 'uid'], true, (src) => src.status === 'joined'), new FEntityIndex('requests', ['cid', 'uid'], true, (src) => src.status === 'requested'), new FEntityIndex('userActive', ['uid', 'cid'], true, (src) => src.status === 'joined')],
            'RoomParticipant'
        );
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 2) { throw Error('Invalid key length!'); }
        return { 'cid': rawId[0], 'uid': rawId[1] };
    }
    async findById(ctx: Context, cid: number, uid: number) {
        return await this._findById(ctx, [cid, uid]);
    }
    async create(ctx: Context, cid: number, uid: number, shape: RoomParticipantShape) {
        return await this._create(ctx, [cid, uid], { cid, uid, ...shape });
    }
    watch(ctx: Context, cid: number, uid: number, cb: () => void) {
        return this._watch(ctx, [cid, uid], cb);
    }
    async findFromActive(ctx: Context, cid: number, uid: number) {
        return await this._findFromIndex(ctx, ['__indexes', 'active', cid, uid]);
    }
    async allFromActiveAfter(ctx: Context, cid: number, after: number) {
        return await this._findRangeAllAfter(ctx, ['__indexes', 'active', cid], after);
    }
    async rangeFromActiveAfter(ctx: Context, cid: number, after: number, limit: number, reversed?: boolean) {
        return await this._findRangeAfter(ctx, ['__indexes', 'active', cid], after, limit, reversed);
    }
    async rangeFromActive(ctx: Context, cid: number, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'active', cid], limit, reversed);
    }
    async rangeFromActiveWithCursor(ctx: Context, cid: number, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'active', cid], limit, after, reversed);
    }
    async allFromActive(ctx: Context, cid: number) {
        return await this._findAll(ctx, ['__indexes', 'active', cid]);
    }
    createActiveStream(ctx: Context, cid: number, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'roomParticipant', '__indexes', 'active', cid], limit, after); 
    }
    async findFromRequests(ctx: Context, cid: number, uid: number) {
        return await this._findFromIndex(ctx, ['__indexes', 'requests', cid, uid]);
    }
    async allFromRequestsAfter(ctx: Context, cid: number, after: number) {
        return await this._findRangeAllAfter(ctx, ['__indexes', 'requests', cid], after);
    }
    async rangeFromRequestsAfter(ctx: Context, cid: number, after: number, limit: number, reversed?: boolean) {
        return await this._findRangeAfter(ctx, ['__indexes', 'requests', cid], after, limit, reversed);
    }
    async rangeFromRequests(ctx: Context, cid: number, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'requests', cid], limit, reversed);
    }
    async rangeFromRequestsWithCursor(ctx: Context, cid: number, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'requests', cid], limit, after, reversed);
    }
    async allFromRequests(ctx: Context, cid: number) {
        return await this._findAll(ctx, ['__indexes', 'requests', cid]);
    }
    createRequestsStream(ctx: Context, cid: number, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'roomParticipant', '__indexes', 'requests', cid], limit, after); 
    }
    async findFromUserActive(ctx: Context, uid: number, cid: number) {
        return await this._findFromIndex(ctx, ['__indexes', 'userActive', uid, cid]);
    }
    async allFromUserActiveAfter(ctx: Context, uid: number, after: number) {
        return await this._findRangeAllAfter(ctx, ['__indexes', 'userActive', uid], after);
    }
    async rangeFromUserActiveAfter(ctx: Context, uid: number, after: number, limit: number, reversed?: boolean) {
        return await this._findRangeAfter(ctx, ['__indexes', 'userActive', uid], after, limit, reversed);
    }
    async rangeFromUserActive(ctx: Context, uid: number, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'userActive', uid], limit, reversed);
    }
    async rangeFromUserActiveWithCursor(ctx: Context, uid: number, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'userActive', uid], limit, after, reversed);
    }
    async allFromUserActive(ctx: Context, uid: number) {
        return await this._findAll(ctx, ['__indexes', 'userActive', uid]);
    }
    createUserActiveStream(ctx: Context, uid: number, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'roomParticipant', '__indexes', 'userActive', uid], limit, after); 
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new RoomParticipant(ctx, this.connection, this.namespace, this.directory, [value.cid, value.uid], value, this.options, isNew, this.indexes, 'RoomParticipant');
    }
}
export interface ConversationReceiverShape {
    enabled: boolean;
}

export class ConversationReceiver extends FEntity {
    readonly entityName: 'ConversationReceiver' = 'ConversationReceiver';
    get cid(): number { return this._value.cid; }
    get uid(): number { return this._value.uid; }
    get enabled(): boolean {
        return this._value.enabled;
    }
    set enabled(value: boolean) {
        this._checkIsWritable();
        if (value === this._value.enabled) { return; }
        this._value.enabled = value;
        this.markDirty();
    }
}

export class ConversationReceiverFactory extends FEntityFactory<ConversationReceiver> {
    static schema: FEntitySchema = {
        name: 'ConversationReceiver',
        editable: false,
        primaryKeys: [
            { name: 'cid', type: 'number' },
            { name: 'uid', type: 'number' },
        ],
        fields: [
            { name: 'enabled', type: 'boolean' },
        ],
        indexes: [
            { name: 'conversation', type: 'unique', fields: ['cid', 'uid'] },
        ],
    };

    private static validate(src: any) {
        validators.notNull('cid', src.cid);
        validators.isNumber('cid', src.cid);
        validators.notNull('uid', src.uid);
        validators.isNumber('uid', src.uid);
        validators.notNull('enabled', src.enabled);
        validators.isBoolean('enabled', src.enabled);
    }

    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'conversationReceiver'),
            { enableVersioning: true, enableTimestamps: true, validator: ConversationReceiverFactory.validate, hasLiveStreams: false },
            [new FEntityIndex('conversation', ['cid', 'uid'], true, (src) => src.enabled)],
            'ConversationReceiver'
        );
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 2) { throw Error('Invalid key length!'); }
        return { 'cid': rawId[0], 'uid': rawId[1] };
    }
    async findById(ctx: Context, cid: number, uid: number) {
        return await this._findById(ctx, [cid, uid]);
    }
    async create(ctx: Context, cid: number, uid: number, shape: ConversationReceiverShape) {
        return await this._create(ctx, [cid, uid], { cid, uid, ...shape });
    }
    watch(ctx: Context, cid: number, uid: number, cb: () => void) {
        return this._watch(ctx, [cid, uid], cb);
    }
    async findFromConversation(ctx: Context, cid: number, uid: number) {
        return await this._findFromIndex(ctx, ['__indexes', 'conversation', cid, uid]);
    }
    async allFromConversationAfter(ctx: Context, cid: number, after: number) {
        return await this._findRangeAllAfter(ctx, ['__indexes', 'conversation', cid], after);
    }
    async rangeFromConversationAfter(ctx: Context, cid: number, after: number, limit: number, reversed?: boolean) {
        return await this._findRangeAfter(ctx, ['__indexes', 'conversation', cid], after, limit, reversed);
    }
    async rangeFromConversation(ctx: Context, cid: number, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'conversation', cid], limit, reversed);
    }
    async rangeFromConversationWithCursor(ctx: Context, cid: number, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'conversation', cid], limit, after, reversed);
    }
    async allFromConversation(ctx: Context, cid: number) {
        return await this._findAll(ctx, ['__indexes', 'conversation', cid]);
    }
    createConversationStream(ctx: Context, cid: number, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'conversationReceiver', '__indexes', 'conversation', cid], limit, after); 
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new ConversationReceiver(ctx, this.connection, this.namespace, this.directory, [value.cid, value.uid], value, this.options, isNew, this.indexes, 'ConversationReceiver');
    }
}
export interface SequenceShape {
    value: number;
}

export class Sequence extends FEntity {
    readonly entityName: 'Sequence' = 'Sequence';
    get sequence(): string { return this._value.sequence; }
    get value(): number {
        return this._value.value;
    }
    set value(value: number) {
        this._checkIsWritable();
        if (value === this._value.value) { return; }
        this._value.value = value;
        this.markDirty();
    }
}

export class SequenceFactory extends FEntityFactory<Sequence> {
    static schema: FEntitySchema = {
        name: 'Sequence',
        editable: false,
        primaryKeys: [
            { name: 'sequence', type: 'string' },
        ],
        fields: [
            { name: 'value', type: 'number' },
        ],
        indexes: [
        ],
    };

    private static validate(src: any) {
        validators.notNull('sequence', src.sequence);
        validators.isString('sequence', src.sequence);
        validators.notNull('value', src.value);
        validators.isNumber('value', src.value);
    }

    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'sequence'),
            { enableVersioning: false, enableTimestamps: false, validator: SequenceFactory.validate, hasLiveStreams: false },
            [],
            'Sequence'
        );
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'sequence': rawId[0] };
    }
    async findById(ctx: Context, sequence: string) {
        return await this._findById(ctx, [sequence]);
    }
    async create(ctx: Context, sequence: string, shape: SequenceShape) {
        return await this._create(ctx, [sequence], { sequence, ...shape });
    }
    watch(ctx: Context, sequence: string, cb: () => void) {
        return this._watch(ctx, [sequence], cb);
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new Sequence(ctx, this.connection, this.namespace, this.directory, [value.sequence], value, this.options, isNew, this.indexes, 'Sequence');
    }
}
export interface MessageShape {
    cid: number;
    uid: number;
    repeatKey?: string| null;
    text?: string| null;
    fileId?: string| null;
    fileMetadata?: any| null;
    filePreview?: string| null;
    mentions?: any| null;
    replyMessages?: any| null;
    augmentation?: any| null;
    serviceMetadata?: any| null;
    reactions?: any| null;
    edited?: boolean| null;
    attachments?: any| null;
    buttons?: any| null;
    type?: string| null;
    title?: string| null;
    postType?: string| null;
    complexMentions?: any| null;
    spans?: ({ type: 'user_mention', offset: number, length: number, user: number, } | { type: 'multi_user_mention', offset: number, length: number, users: (number)[], } | { type: 'room_mention', offset: number, length: number, room: number, } | { type: 'link', offset: number, length: number, url: string, })[]| null;
    isMuted: boolean;
    isService: boolean;
    deleted?: boolean| null;
}

export class Message extends FEntity {
    readonly entityName: 'Message' = 'Message';
    get id(): number { return this._value.id; }
    get cid(): number {
        return this._value.cid;
    }
    set cid(value: number) {
        this._checkIsWritable();
        if (value === this._value.cid) { return; }
        this._value.cid = value;
        this.markDirty();
    }
    get uid(): number {
        return this._value.uid;
    }
    set uid(value: number) {
        this._checkIsWritable();
        if (value === this._value.uid) { return; }
        this._value.uid = value;
        this.markDirty();
    }
    get repeatKey(): string | null {
        let res = this._value.repeatKey;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set repeatKey(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.repeatKey) { return; }
        this._value.repeatKey = value;
        this.markDirty();
    }
    get text(): string | null {
        let res = this._value.text;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set text(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.text) { return; }
        this._value.text = value;
        this.markDirty();
    }
    get fileId(): string | null {
        let res = this._value.fileId;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set fileId(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.fileId) { return; }
        this._value.fileId = value;
        this.markDirty();
    }
    get fileMetadata(): any | null {
        let res = this._value.fileMetadata;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set fileMetadata(value: any | null) {
        this._checkIsWritable();
        if (value === this._value.fileMetadata) { return; }
        this._value.fileMetadata = value;
        this.markDirty();
    }
    get filePreview(): string | null {
        let res = this._value.filePreview;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set filePreview(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.filePreview) { return; }
        this._value.filePreview = value;
        this.markDirty();
    }
    get mentions(): any | null {
        let res = this._value.mentions;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set mentions(value: any | null) {
        this._checkIsWritable();
        if (value === this._value.mentions) { return; }
        this._value.mentions = value;
        this.markDirty();
    }
    get replyMessages(): any | null {
        let res = this._value.replyMessages;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set replyMessages(value: any | null) {
        this._checkIsWritable();
        if (value === this._value.replyMessages) { return; }
        this._value.replyMessages = value;
        this.markDirty();
    }
    get augmentation(): any | null {
        let res = this._value.augmentation;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set augmentation(value: any | null) {
        this._checkIsWritable();
        if (value === this._value.augmentation) { return; }
        this._value.augmentation = value;
        this.markDirty();
    }
    get serviceMetadata(): any | null {
        let res = this._value.serviceMetadata;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set serviceMetadata(value: any | null) {
        this._checkIsWritable();
        if (value === this._value.serviceMetadata) { return; }
        this._value.serviceMetadata = value;
        this.markDirty();
    }
    get reactions(): any | null {
        let res = this._value.reactions;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set reactions(value: any | null) {
        this._checkIsWritable();
        if (value === this._value.reactions) { return; }
        this._value.reactions = value;
        this.markDirty();
    }
    get edited(): boolean | null {
        let res = this._value.edited;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set edited(value: boolean | null) {
        this._checkIsWritable();
        if (value === this._value.edited) { return; }
        this._value.edited = value;
        this.markDirty();
    }
    get attachments(): any | null {
        let res = this._value.attachments;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set attachments(value: any | null) {
        this._checkIsWritable();
        if (value === this._value.attachments) { return; }
        this._value.attachments = value;
        this.markDirty();
    }
    get buttons(): any | null {
        let res = this._value.buttons;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set buttons(value: any | null) {
        this._checkIsWritable();
        if (value === this._value.buttons) { return; }
        this._value.buttons = value;
        this.markDirty();
    }
    get type(): string | null {
        let res = this._value.type;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set type(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.type) { return; }
        this._value.type = value;
        this.markDirty();
    }
    get title(): string | null {
        let res = this._value.title;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set title(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.title) { return; }
        this._value.title = value;
        this.markDirty();
    }
    get postType(): string | null {
        let res = this._value.postType;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set postType(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.postType) { return; }
        this._value.postType = value;
        this.markDirty();
    }
    get complexMentions(): any | null {
        let res = this._value.complexMentions;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set complexMentions(value: any | null) {
        this._checkIsWritable();
        if (value === this._value.complexMentions) { return; }
        this._value.complexMentions = value;
        this.markDirty();
    }
    get spans(): ({ type: 'user_mention', offset: number, length: number, user: number, } | { type: 'multi_user_mention', offset: number, length: number, users: (number)[], } | { type: 'room_mention', offset: number, length: number, room: number, } | { type: 'link', offset: number, length: number, url: string, })[] | null {
        let res = this._value.spans;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set spans(value: ({ type: 'user_mention', offset: number, length: number, user: number, } | { type: 'multi_user_mention', offset: number, length: number, users: (number)[], } | { type: 'room_mention', offset: number, length: number, room: number, } | { type: 'link', offset: number, length: number, url: string, })[] | null) {
        this._checkIsWritable();
        if (value === this._value.spans) { return; }
        this._value.spans = value;
        this.markDirty();
    }
    get isMuted(): boolean {
        return this._value.isMuted;
    }
    set isMuted(value: boolean) {
        this._checkIsWritable();
        if (value === this._value.isMuted) { return; }
        this._value.isMuted = value;
        this.markDirty();
    }
    get isService(): boolean {
        return this._value.isService;
    }
    set isService(value: boolean) {
        this._checkIsWritable();
        if (value === this._value.isService) { return; }
        this._value.isService = value;
        this.markDirty();
    }
    get deleted(): boolean | null {
        let res = this._value.deleted;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set deleted(value: boolean | null) {
        this._checkIsWritable();
        if (value === this._value.deleted) { return; }
        this._value.deleted = value;
        this.markDirty();
    }
}

export class MessageFactory extends FEntityFactory<Message> {
    static schema: FEntitySchema = {
        name: 'Message',
        editable: false,
        primaryKeys: [
            { name: 'id', type: 'number' },
        ],
        fields: [
            { name: 'cid', type: 'number' },
            { name: 'uid', type: 'number' },
            { name: 'repeatKey', type: 'string' },
            { name: 'text', type: 'string', secure: true },
            { name: 'fileId', type: 'string', secure: true },
            { name: 'fileMetadata', type: 'json', secure: true },
            { name: 'filePreview', type: 'string', secure: true },
            { name: 'mentions', type: 'json' },
            { name: 'replyMessages', type: 'json' },
            { name: 'augmentation', type: 'json' },
            { name: 'serviceMetadata', type: 'json' },
            { name: 'reactions', type: 'json', secure: true },
            { name: 'edited', type: 'boolean' },
            { name: 'attachments', type: 'json' },
            { name: 'buttons', type: 'json' },
            { name: 'type', type: 'string' },
            { name: 'title', type: 'string' },
            { name: 'postType', type: 'string' },
            { name: 'complexMentions', type: 'json' },
            { name: 'spans', type: 'json' },
            { name: 'isMuted', type: 'boolean' },
            { name: 'isService', type: 'boolean' },
            { name: 'deleted', type: 'boolean' },
        ],
        indexes: [
            { name: 'chat', type: 'range', fields: ['cid', 'id'] },
            { name: 'updated', type: 'range', fields: ['updatedAt'] },
            { name: 'repeat', type: 'unique', fields: ['uid', 'cid', 'repeatKey'] },
        ],
    };

    private static validate(src: any) {
        validators.notNull('id', src.id);
        validators.isNumber('id', src.id);
        validators.notNull('cid', src.cid);
        validators.isNumber('cid', src.cid);
        validators.notNull('uid', src.uid);
        validators.isNumber('uid', src.uid);
        validators.isString('repeatKey', src.repeatKey);
        validators.isString('text', src.text);
        validators.isString('fileId', src.fileId);
        validators.isString('filePreview', src.filePreview);
        validators.isBoolean('edited', src.edited);
        validators.isString('type', src.type);
        validators.isString('title', src.title);
        validators.isString('postType', src.postType);
        validators.isJson('spans', src.spans, jVec(jEnum(
            json(() => {
                jField('type', jString('user_mention'));
                jField('offset', jNumber());
                jField('length', jNumber());
                jField('user', jNumber());
            }), 
            json(() => {
                jField('type', jString('multi_user_mention'));
                jField('offset', jNumber());
                jField('length', jNumber());
                jField('users', jVec(jNumber()));
            }), 
            json(() => {
                jField('type', jString('room_mention'));
                jField('offset', jNumber());
                jField('length', jNumber());
                jField('room', jNumber());
            }), 
            json(() => {
                jField('type', jString('link'));
                jField('offset', jNumber());
                jField('length', jNumber());
                jField('url', jString());
            })
        )));
        validators.notNull('isMuted', src.isMuted);
        validators.isBoolean('isMuted', src.isMuted);
        validators.notNull('isService', src.isService);
        validators.isBoolean('isService', src.isService);
        validators.isBoolean('deleted', src.deleted);
    }

    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'message'),
            { enableVersioning: true, enableTimestamps: true, validator: MessageFactory.validate, hasLiveStreams: false },
            [new FEntityIndex('chat', ['cid', 'id'], false, (src) => !src.deleted), new FEntityIndex('updated', ['updatedAt'], false), new FEntityIndex('repeat', ['uid', 'cid', 'repeatKey'], true, (src) => !!src.repeatKey)],
            'Message'
        );
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'id': rawId[0] };
    }
    async findById(ctx: Context, id: number) {
        return await this._findById(ctx, [id]);
    }
    async create(ctx: Context, id: number, shape: MessageShape) {
        return await this._create(ctx, [id], { id, ...shape });
    }
    watch(ctx: Context, id: number, cb: () => void) {
        return this._watch(ctx, [id], cb);
    }
    async allFromChatAfter(ctx: Context, cid: number, after: number) {
        return await this._findRangeAllAfter(ctx, ['__indexes', 'chat', cid], after);
    }
    async rangeFromChatAfter(ctx: Context, cid: number, after: number, limit: number, reversed?: boolean) {
        return await this._findRangeAfter(ctx, ['__indexes', 'chat', cid], after, limit, reversed);
    }
    async rangeFromChat(ctx: Context, cid: number, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'chat', cid], limit, reversed);
    }
    async rangeFromChatWithCursor(ctx: Context, cid: number, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'chat', cid], limit, after, reversed);
    }
    async allFromChat(ctx: Context, cid: number) {
        return await this._findAll(ctx, ['__indexes', 'chat', cid]);
    }
    createChatStream(ctx: Context, cid: number, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'message', '__indexes', 'chat', cid], limit, after); 
    }
    async rangeFromUpdated(ctx: Context, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'updated'], limit, reversed);
    }
    async rangeFromUpdatedWithCursor(ctx: Context, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'updated'], limit, after, reversed);
    }
    async allFromUpdated(ctx: Context, ) {
        return await this._findAll(ctx, ['__indexes', 'updated']);
    }
    createUpdatedStream(ctx: Context, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'message', '__indexes', 'updated'], limit, after); 
    }
    async findFromRepeat(ctx: Context, uid: number, cid: number, repeatKey: string) {
        return await this._findFromIndex(ctx, ['__indexes', 'repeat', uid, cid, repeatKey]);
    }
    async allFromRepeatAfter(ctx: Context, uid: number, cid: number, after: string) {
        return await this._findRangeAllAfter(ctx, ['__indexes', 'repeat', uid, cid], after);
    }
    async rangeFromRepeatAfter(ctx: Context, uid: number, cid: number, after: string, limit: number, reversed?: boolean) {
        return await this._findRangeAfter(ctx, ['__indexes', 'repeat', uid, cid], after, limit, reversed);
    }
    async rangeFromRepeat(ctx: Context, uid: number, cid: number, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'repeat', uid, cid], limit, reversed);
    }
    async rangeFromRepeatWithCursor(ctx: Context, uid: number, cid: number, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'repeat', uid, cid], limit, after, reversed);
    }
    async allFromRepeat(ctx: Context, uid: number, cid: number) {
        return await this._findAll(ctx, ['__indexes', 'repeat', uid, cid]);
    }
    createRepeatStream(ctx: Context, uid: number, cid: number, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'message', '__indexes', 'repeat', uid, cid], limit, after); 
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new Message(ctx, this.connection, this.namespace, this.directory, [value.id], value, this.options, isNew, this.indexes, 'Message');
    }
}
export interface ConversationSeqShape {
    seq: number;
}

export class ConversationSeq extends FEntity {
    readonly entityName: 'ConversationSeq' = 'ConversationSeq';
    get cid(): number { return this._value.cid; }
    get seq(): number {
        return this._value.seq;
    }
    set seq(value: number) {
        this._checkIsWritable();
        if (value === this._value.seq) { return; }
        this._value.seq = value;
        this.markDirty();
    }
}

export class ConversationSeqFactory extends FEntityFactory<ConversationSeq> {
    static schema: FEntitySchema = {
        name: 'ConversationSeq',
        editable: false,
        primaryKeys: [
            { name: 'cid', type: 'number' },
        ],
        fields: [
            { name: 'seq', type: 'number' },
        ],
        indexes: [
        ],
    };

    private static validate(src: any) {
        validators.notNull('cid', src.cid);
        validators.isNumber('cid', src.cid);
        validators.notNull('seq', src.seq);
        validators.isNumber('seq', src.seq);
    }

    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'conversationSeq'),
            { enableVersioning: false, enableTimestamps: false, validator: ConversationSeqFactory.validate, hasLiveStreams: false },
            [],
            'ConversationSeq'
        );
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'cid': rawId[0] };
    }
    async findById(ctx: Context, cid: number) {
        return await this._findById(ctx, [cid]);
    }
    async create(ctx: Context, cid: number, shape: ConversationSeqShape) {
        return await this._create(ctx, [cid], { cid, ...shape });
    }
    watch(ctx: Context, cid: number, cb: () => void) {
        return this._watch(ctx, [cid], cb);
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new ConversationSeq(ctx, this.connection, this.namespace, this.directory, [value.cid], value, this.options, isNew, this.indexes, 'ConversationSeq');
    }
}
export interface ConversationEventShape {
    uid?: number| null;
    mid?: number| null;
    kind: 'chat_updated' | 'message_received' | 'message_updated' | 'message_deleted';
}

export class ConversationEvent extends FEntity {
    readonly entityName: 'ConversationEvent' = 'ConversationEvent';
    get cid(): number { return this._value.cid; }
    get seq(): number { return this._value.seq; }
    get uid(): number | null {
        let res = this._value.uid;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set uid(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.uid) { return; }
        this._value.uid = value;
        this.markDirty();
    }
    get mid(): number | null {
        let res = this._value.mid;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set mid(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.mid) { return; }
        this._value.mid = value;
        this.markDirty();
    }
    get kind(): 'chat_updated' | 'message_received' | 'message_updated' | 'message_deleted' {
        return this._value.kind;
    }
    set kind(value: 'chat_updated' | 'message_received' | 'message_updated' | 'message_deleted') {
        this._checkIsWritable();
        if (value === this._value.kind) { return; }
        this._value.kind = value;
        this.markDirty();
    }
}

export class ConversationEventFactory extends FEntityFactory<ConversationEvent> {
    static schema: FEntitySchema = {
        name: 'ConversationEvent',
        editable: false,
        primaryKeys: [
            { name: 'cid', type: 'number' },
            { name: 'seq', type: 'number' },
        ],
        fields: [
            { name: 'uid', type: 'number' },
            { name: 'mid', type: 'number' },
            { name: 'kind', type: 'enum', enumValues: ['chat_updated', 'message_received', 'message_updated', 'message_deleted'] },
        ],
        indexes: [
            { name: 'user', type: 'range', fields: ['cid', 'seq'] },
        ],
    };

    private static validate(src: any) {
        validators.notNull('cid', src.cid);
        validators.isNumber('cid', src.cid);
        validators.notNull('seq', src.seq);
        validators.isNumber('seq', src.seq);
        validators.isNumber('uid', src.uid);
        validators.isNumber('mid', src.mid);
        validators.notNull('kind', src.kind);
        validators.isEnum('kind', src.kind, ['chat_updated', 'message_received', 'message_updated', 'message_deleted']);
    }

    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'conversationEvent'),
            { enableVersioning: true, enableTimestamps: true, validator: ConversationEventFactory.validate, hasLiveStreams: true },
            [new FEntityIndex('user', ['cid', 'seq'], false)],
            'ConversationEvent'
        );
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 2) { throw Error('Invalid key length!'); }
        return { 'cid': rawId[0], 'seq': rawId[1] };
    }
    async findById(ctx: Context, cid: number, seq: number) {
        return await this._findById(ctx, [cid, seq]);
    }
    async create(ctx: Context, cid: number, seq: number, shape: ConversationEventShape) {
        return await this._create(ctx, [cid, seq], { cid, seq, ...shape });
    }
    watch(ctx: Context, cid: number, seq: number, cb: () => void) {
        return this._watch(ctx, [cid, seq], cb);
    }
    async allFromUserAfter(ctx: Context, cid: number, after: number) {
        return await this._findRangeAllAfter(ctx, ['__indexes', 'user', cid], after);
    }
    async rangeFromUserAfter(ctx: Context, cid: number, after: number, limit: number, reversed?: boolean) {
        return await this._findRangeAfter(ctx, ['__indexes', 'user', cid], after, limit, reversed);
    }
    async rangeFromUser(ctx: Context, cid: number, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'user', cid], limit, reversed);
    }
    async rangeFromUserWithCursor(ctx: Context, cid: number, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'user', cid], limit, after, reversed);
    }
    async allFromUser(ctx: Context, cid: number) {
        return await this._findAll(ctx, ['__indexes', 'user', cid]);
    }
    createUserStream(ctx: Context, cid: number, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'conversationEvent', '__indexes', 'user', cid], limit, after); 
    }
    createUserLiveStream(ctx: Context, cid: number, limit: number, after?: string) {
        return this._createLiveStream(ctx, ['entity', 'conversationEvent', '__indexes', 'user', cid], limit, after); 
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new ConversationEvent(ctx, this.connection, this.namespace, this.directory, [value.cid, value.seq], value, this.options, isNew, this.indexes, 'ConversationEvent');
    }
}
export interface UserDialogShape {
    unread: number;
    readMessageId?: number| null;
    date?: number| null;
    haveMention?: boolean| null;
    title?: string| null;
    photo?: any| null;
}

export class UserDialog extends FEntity {
    readonly entityName: 'UserDialog' = 'UserDialog';
    get uid(): number { return this._value.uid; }
    get cid(): number { return this._value.cid; }
    get unread(): number {
        return this._value.unread;
    }
    set unread(value: number) {
        this._checkIsWritable();
        if (value === this._value.unread) { return; }
        this._value.unread = value;
        this.markDirty();
    }
    get readMessageId(): number | null {
        let res = this._value.readMessageId;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set readMessageId(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.readMessageId) { return; }
        this._value.readMessageId = value;
        this.markDirty();
    }
    get date(): number | null {
        let res = this._value.date;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set date(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.date) { return; }
        this._value.date = value;
        this.markDirty();
    }
    get haveMention(): boolean | null {
        let res = this._value.haveMention;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set haveMention(value: boolean | null) {
        this._checkIsWritable();
        if (value === this._value.haveMention) { return; }
        this._value.haveMention = value;
        this.markDirty();
    }
    get title(): string | null {
        let res = this._value.title;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set title(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.title) { return; }
        this._value.title = value;
        this.markDirty();
    }
    get photo(): any | null {
        let res = this._value.photo;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set photo(value: any | null) {
        this._checkIsWritable();
        if (value === this._value.photo) { return; }
        this._value.photo = value;
        this.markDirty();
    }
}

export class UserDialogFactory extends FEntityFactory<UserDialog> {
    static schema: FEntitySchema = {
        name: 'UserDialog',
        editable: false,
        primaryKeys: [
            { name: 'uid', type: 'number' },
            { name: 'cid', type: 'number' },
        ],
        fields: [
            { name: 'unread', type: 'number' },
            { name: 'readMessageId', type: 'number' },
            { name: 'date', type: 'number' },
            { name: 'haveMention', type: 'boolean' },
            { name: 'title', type: 'string' },
            { name: 'photo', type: 'json' },
        ],
        indexes: [
            { name: 'user', type: 'range', fields: ['uid', 'date'], displayName: 'dialogsForUser' },
            { name: 'conversation', type: 'unique', fields: ['cid', 'uid'] },
            { name: 'updated', type: 'range', fields: ['updatedAt'] },
        ],
    };

    private static validate(src: any) {
        validators.notNull('uid', src.uid);
        validators.isNumber('uid', src.uid);
        validators.notNull('cid', src.cid);
        validators.isNumber('cid', src.cid);
        validators.notNull('unread', src.unread);
        validators.isNumber('unread', src.unread);
        validators.isNumber('readMessageId', src.readMessageId);
        validators.isNumber('date', src.date);
        validators.isBoolean('haveMention', src.haveMention);
        validators.isString('title', src.title);
    }

    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'userDialog'),
            { enableVersioning: true, enableTimestamps: true, validator: UserDialogFactory.validate, hasLiveStreams: false },
            [new FEntityIndex('user', ['uid', 'date'], false, (src) => !!src.date), new FEntityIndex('conversation', ['cid', 'uid'], true), new FEntityIndex('updated', ['updatedAt'], false)],
            'UserDialog'
        );
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 2) { throw Error('Invalid key length!'); }
        return { 'uid': rawId[0], 'cid': rawId[1] };
    }
    async findById(ctx: Context, uid: number, cid: number) {
        return await this._findById(ctx, [uid, cid]);
    }
    async create(ctx: Context, uid: number, cid: number, shape: UserDialogShape) {
        return await this._create(ctx, [uid, cid], { uid, cid, ...shape });
    }
    watch(ctx: Context, uid: number, cid: number, cb: () => void) {
        return this._watch(ctx, [uid, cid], cb);
    }
    async allFromUserAfter(ctx: Context, uid: number, after: number) {
        return await this._findRangeAllAfter(ctx, ['__indexes', 'user', uid], after);
    }
    async rangeFromUserAfter(ctx: Context, uid: number, after: number, limit: number, reversed?: boolean) {
        return await this._findRangeAfter(ctx, ['__indexes', 'user', uid], after, limit, reversed);
    }
    async rangeFromUser(ctx: Context, uid: number, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'user', uid], limit, reversed);
    }
    async rangeFromUserWithCursor(ctx: Context, uid: number, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'user', uid], limit, after, reversed);
    }
    async allFromUser(ctx: Context, uid: number) {
        return await this._findAll(ctx, ['__indexes', 'user', uid]);
    }
    createUserStream(ctx: Context, uid: number, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'userDialog', '__indexes', 'user', uid], limit, after); 
    }
    async findFromConversation(ctx: Context, cid: number, uid: number) {
        return await this._findFromIndex(ctx, ['__indexes', 'conversation', cid, uid]);
    }
    async allFromConversationAfter(ctx: Context, cid: number, after: number) {
        return await this._findRangeAllAfter(ctx, ['__indexes', 'conversation', cid], after);
    }
    async rangeFromConversationAfter(ctx: Context, cid: number, after: number, limit: number, reversed?: boolean) {
        return await this._findRangeAfter(ctx, ['__indexes', 'conversation', cid], after, limit, reversed);
    }
    async rangeFromConversation(ctx: Context, cid: number, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'conversation', cid], limit, reversed);
    }
    async rangeFromConversationWithCursor(ctx: Context, cid: number, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'conversation', cid], limit, after, reversed);
    }
    async allFromConversation(ctx: Context, cid: number) {
        return await this._findAll(ctx, ['__indexes', 'conversation', cid]);
    }
    createConversationStream(ctx: Context, cid: number, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'userDialog', '__indexes', 'conversation', cid], limit, after); 
    }
    async rangeFromUpdated(ctx: Context, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'updated'], limit, reversed);
    }
    async rangeFromUpdatedWithCursor(ctx: Context, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'updated'], limit, after, reversed);
    }
    async allFromUpdated(ctx: Context, ) {
        return await this._findAll(ctx, ['__indexes', 'updated']);
    }
    createUpdatedStream(ctx: Context, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'userDialog', '__indexes', 'updated'], limit, after); 
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new UserDialog(ctx, this.connection, this.namespace, this.directory, [value.uid, value.cid], value, this.options, isNew, this.indexes, 'UserDialog');
    }
}
export interface UserDialogHandledMessageShape {
}

export class UserDialogHandledMessage extends FEntity {
    readonly entityName: 'UserDialogHandledMessage' = 'UserDialogHandledMessage';
    get uid(): number { return this._value.uid; }
    get cid(): number { return this._value.cid; }
    get mid(): number { return this._value.mid; }
}

export class UserDialogHandledMessageFactory extends FEntityFactory<UserDialogHandledMessage> {
    static schema: FEntitySchema = {
        name: 'UserDialogHandledMessage',
        editable: false,
        primaryKeys: [
            { name: 'uid', type: 'number' },
            { name: 'cid', type: 'number' },
            { name: 'mid', type: 'number' },
        ],
        fields: [
        ],
        indexes: [
        ],
    };

    private static validate(src: any) {
        validators.notNull('uid', src.uid);
        validators.isNumber('uid', src.uid);
        validators.notNull('cid', src.cid);
        validators.isNumber('cid', src.cid);
        validators.notNull('mid', src.mid);
        validators.isNumber('mid', src.mid);
    }

    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'userDialogHandledMessage'),
            { enableVersioning: true, enableTimestamps: true, validator: UserDialogHandledMessageFactory.validate, hasLiveStreams: false },
            [],
            'UserDialogHandledMessage'
        );
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 3) { throw Error('Invalid key length!'); }
        return { 'uid': rawId[0], 'cid': rawId[1], 'mid': rawId[2] };
    }
    async findById(ctx: Context, uid: number, cid: number, mid: number) {
        return await this._findById(ctx, [uid, cid, mid]);
    }
    async create(ctx: Context, uid: number, cid: number, mid: number, shape: UserDialogHandledMessageShape) {
        return await this._create(ctx, [uid, cid, mid], { uid, cid, mid, ...shape });
    }
    watch(ctx: Context, uid: number, cid: number, mid: number, cb: () => void) {
        return this._watch(ctx, [uid, cid, mid], cb);
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new UserDialogHandledMessage(ctx, this.connection, this.namespace, this.directory, [value.uid, value.cid, value.mid], value, this.options, isNew, this.indexes, 'UserDialogHandledMessage');
    }
}
export interface UserDialogSettingsShape {
    mute: boolean;
}

export class UserDialogSettings extends FEntity {
    readonly entityName: 'UserDialogSettings' = 'UserDialogSettings';
    get uid(): number { return this._value.uid; }
    get cid(): number { return this._value.cid; }
    get mute(): boolean {
        return this._value.mute;
    }
    set mute(value: boolean) {
        this._checkIsWritable();
        if (value === this._value.mute) { return; }
        this._value.mute = value;
        this.markDirty();
    }
}

export class UserDialogSettingsFactory extends FEntityFactory<UserDialogSettings> {
    static schema: FEntitySchema = {
        name: 'UserDialogSettings',
        editable: false,
        primaryKeys: [
            { name: 'uid', type: 'number' },
            { name: 'cid', type: 'number' },
        ],
        fields: [
            { name: 'mute', type: 'boolean' },
        ],
        indexes: [
        ],
    };

    private static validate(src: any) {
        validators.notNull('uid', src.uid);
        validators.isNumber('uid', src.uid);
        validators.notNull('cid', src.cid);
        validators.isNumber('cid', src.cid);
        validators.notNull('mute', src.mute);
        validators.isBoolean('mute', src.mute);
    }

    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'userDialogSettings'),
            { enableVersioning: true, enableTimestamps: true, validator: UserDialogSettingsFactory.validate, hasLiveStreams: false },
            [],
            'UserDialogSettings'
        );
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 2) { throw Error('Invalid key length!'); }
        return { 'uid': rawId[0], 'cid': rawId[1] };
    }
    async findById(ctx: Context, uid: number, cid: number) {
        return await this._findById(ctx, [uid, cid]);
    }
    async create(ctx: Context, uid: number, cid: number, shape: UserDialogSettingsShape) {
        return await this._create(ctx, [uid, cid], { uid, cid, ...shape });
    }
    watch(ctx: Context, uid: number, cid: number, cb: () => void) {
        return this._watch(ctx, [uid, cid], cb);
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new UserDialogSettings(ctx, this.connection, this.namespace, this.directory, [value.uid, value.cid], value, this.options, isNew, this.indexes, 'UserDialogSettings');
    }
}
export interface UserDialogEventShape {
    cid?: number| null;
    mid?: number| null;
    allUnread?: number| null;
    unread?: number| null;
    title?: string| null;
    photo?: any| null;
    mute?: boolean| null;
    haveMention?: boolean| null;
    kind: 'message_received' | 'message_updated' | 'message_deleted' | 'message_read' | 'title_updated' | 'dialog_deleted' | 'photo_updated' | 'dialog_mute_changed' | 'dialog_mentioned_changed';
}

export class UserDialogEvent extends FEntity {
    readonly entityName: 'UserDialogEvent' = 'UserDialogEvent';
    get uid(): number { return this._value.uid; }
    get seq(): number { return this._value.seq; }
    get cid(): number | null {
        let res = this._value.cid;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set cid(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.cid) { return; }
        this._value.cid = value;
        this.markDirty();
    }
    get mid(): number | null {
        let res = this._value.mid;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set mid(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.mid) { return; }
        this._value.mid = value;
        this.markDirty();
    }
    get allUnread(): number | null {
        let res = this._value.allUnread;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set allUnread(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.allUnread) { return; }
        this._value.allUnread = value;
        this.markDirty();
    }
    get unread(): number | null {
        let res = this._value.unread;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set unread(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.unread) { return; }
        this._value.unread = value;
        this.markDirty();
    }
    get title(): string | null {
        let res = this._value.title;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set title(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.title) { return; }
        this._value.title = value;
        this.markDirty();
    }
    get photo(): any | null {
        let res = this._value.photo;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set photo(value: any | null) {
        this._checkIsWritable();
        if (value === this._value.photo) { return; }
        this._value.photo = value;
        this.markDirty();
    }
    get mute(): boolean | null {
        let res = this._value.mute;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set mute(value: boolean | null) {
        this._checkIsWritable();
        if (value === this._value.mute) { return; }
        this._value.mute = value;
        this.markDirty();
    }
    get haveMention(): boolean | null {
        let res = this._value.haveMention;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set haveMention(value: boolean | null) {
        this._checkIsWritable();
        if (value === this._value.haveMention) { return; }
        this._value.haveMention = value;
        this.markDirty();
    }
    get kind(): 'message_received' | 'message_updated' | 'message_deleted' | 'message_read' | 'title_updated' | 'dialog_deleted' | 'photo_updated' | 'dialog_mute_changed' | 'dialog_mentioned_changed' {
        return this._value.kind;
    }
    set kind(value: 'message_received' | 'message_updated' | 'message_deleted' | 'message_read' | 'title_updated' | 'dialog_deleted' | 'photo_updated' | 'dialog_mute_changed' | 'dialog_mentioned_changed') {
        this._checkIsWritable();
        if (value === this._value.kind) { return; }
        this._value.kind = value;
        this.markDirty();
    }
}

export class UserDialogEventFactory extends FEntityFactory<UserDialogEvent> {
    static schema: FEntitySchema = {
        name: 'UserDialogEvent',
        editable: false,
        primaryKeys: [
            { name: 'uid', type: 'number' },
            { name: 'seq', type: 'number' },
        ],
        fields: [
            { name: 'cid', type: 'number' },
            { name: 'mid', type: 'number' },
            { name: 'allUnread', type: 'number' },
            { name: 'unread', type: 'number' },
            { name: 'title', type: 'string' },
            { name: 'photo', type: 'json' },
            { name: 'mute', type: 'boolean' },
            { name: 'haveMention', type: 'boolean' },
            { name: 'kind', type: 'enum', enumValues: ['message_received', 'message_updated', 'message_deleted', 'message_read', 'title_updated', 'dialog_deleted', 'photo_updated', 'dialog_mute_changed', 'dialog_mentioned_changed'] },
        ],
        indexes: [
            { name: 'user', type: 'range', fields: ['uid', 'seq'] },
        ],
    };

    private static validate(src: any) {
        validators.notNull('uid', src.uid);
        validators.isNumber('uid', src.uid);
        validators.notNull('seq', src.seq);
        validators.isNumber('seq', src.seq);
        validators.isNumber('cid', src.cid);
        validators.isNumber('mid', src.mid);
        validators.isNumber('allUnread', src.allUnread);
        validators.isNumber('unread', src.unread);
        validators.isString('title', src.title);
        validators.isBoolean('mute', src.mute);
        validators.isBoolean('haveMention', src.haveMention);
        validators.notNull('kind', src.kind);
        validators.isEnum('kind', src.kind, ['message_received', 'message_updated', 'message_deleted', 'message_read', 'title_updated', 'dialog_deleted', 'photo_updated', 'dialog_mute_changed', 'dialog_mentioned_changed']);
    }

    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'userDialogEvent'),
            { enableVersioning: true, enableTimestamps: true, validator: UserDialogEventFactory.validate, hasLiveStreams: true },
            [new FEntityIndex('user', ['uid', 'seq'], false)],
            'UserDialogEvent'
        );
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 2) { throw Error('Invalid key length!'); }
        return { 'uid': rawId[0], 'seq': rawId[1] };
    }
    async findById(ctx: Context, uid: number, seq: number) {
        return await this._findById(ctx, [uid, seq]);
    }
    async create(ctx: Context, uid: number, seq: number, shape: UserDialogEventShape) {
        return await this._create(ctx, [uid, seq], { uid, seq, ...shape });
    }
    watch(ctx: Context, uid: number, seq: number, cb: () => void) {
        return this._watch(ctx, [uid, seq], cb);
    }
    async allFromUserAfter(ctx: Context, uid: number, after: number) {
        return await this._findRangeAllAfter(ctx, ['__indexes', 'user', uid], after);
    }
    async rangeFromUserAfter(ctx: Context, uid: number, after: number, limit: number, reversed?: boolean) {
        return await this._findRangeAfter(ctx, ['__indexes', 'user', uid], after, limit, reversed);
    }
    async rangeFromUser(ctx: Context, uid: number, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'user', uid], limit, reversed);
    }
    async rangeFromUserWithCursor(ctx: Context, uid: number, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'user', uid], limit, after, reversed);
    }
    async allFromUser(ctx: Context, uid: number) {
        return await this._findAll(ctx, ['__indexes', 'user', uid]);
    }
    createUserStream(ctx: Context, uid: number, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'userDialogEvent', '__indexes', 'user', uid], limit, after); 
    }
    createUserLiveStream(ctx: Context, uid: number, limit: number, after?: string) {
        return this._createLiveStream(ctx, ['entity', 'userDialogEvent', '__indexes', 'user', uid], limit, after); 
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new UserDialogEvent(ctx, this.connection, this.namespace, this.directory, [value.uid, value.seq], value, this.options, isNew, this.indexes, 'UserDialogEvent');
    }
}
export interface UserMessagingStateShape {
    seq: number;
    unread: number;
}

export class UserMessagingState extends FEntity {
    readonly entityName: 'UserMessagingState' = 'UserMessagingState';
    get uid(): number { return this._value.uid; }
    get seq(): number {
        return this._value.seq;
    }
    set seq(value: number) {
        this._checkIsWritable();
        if (value === this._value.seq) { return; }
        this._value.seq = value;
        this.markDirty();
    }
    get unread(): number {
        return this._value.unread;
    }
    set unread(value: number) {
        this._checkIsWritable();
        if (value === this._value.unread) { return; }
        this._value.unread = value;
        this.markDirty();
    }
}

export class UserMessagingStateFactory extends FEntityFactory<UserMessagingState> {
    static schema: FEntitySchema = {
        name: 'UserMessagingState',
        editable: false,
        primaryKeys: [
            { name: 'uid', type: 'number' },
        ],
        fields: [
            { name: 'seq', type: 'number' },
            { name: 'unread', type: 'number' },
        ],
        indexes: [
            { name: 'hasUnread', type: 'range', fields: [] },
        ],
    };

    private static validate(src: any) {
        validators.notNull('uid', src.uid);
        validators.isNumber('uid', src.uid);
        validators.notNull('seq', src.seq);
        validators.isNumber('seq', src.seq);
        validators.notNull('unread', src.unread);
        validators.isNumber('unread', src.unread);
    }

    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'userMessagingState'),
            { enableVersioning: true, enableTimestamps: true, validator: UserMessagingStateFactory.validate, hasLiveStreams: false },
            [new FEntityIndex('hasUnread', [], false, (src) => src.unread && src.unread > 0)],
            'UserMessagingState'
        );
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'uid': rawId[0] };
    }
    async findById(ctx: Context, uid: number) {
        return await this._findById(ctx, [uid]);
    }
    async create(ctx: Context, uid: number, shape: UserMessagingStateShape) {
        return await this._create(ctx, [uid], { uid, ...shape });
    }
    watch(ctx: Context, uid: number, cb: () => void) {
        return this._watch(ctx, [uid], cb);
    }
    async rangeFromHasUnread(ctx: Context, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'hasUnread'], limit, reversed);
    }
    async rangeFromHasUnreadWithCursor(ctx: Context, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'hasUnread'], limit, after, reversed);
    }
    async allFromHasUnread(ctx: Context, ) {
        return await this._findAll(ctx, ['__indexes', 'hasUnread']);
    }
    createHasUnreadStream(ctx: Context, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'userMessagingState', '__indexes', 'hasUnread'], limit, after); 
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new UserMessagingState(ctx, this.connection, this.namespace, this.directory, [value.uid], value, this.options, isNew, this.indexes, 'UserMessagingState');
    }
}
export interface UserNotificationsStateShape {
    readSeq?: number| null;
    lastEmailNotification?: number| null;
    lastPushNotification?: number| null;
    lastEmailSeq?: number| null;
    lastPushSeq?: number| null;
}

export class UserNotificationsState extends FEntity {
    readonly entityName: 'UserNotificationsState' = 'UserNotificationsState';
    get uid(): number { return this._value.uid; }
    get readSeq(): number | null {
        let res = this._value.readSeq;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set readSeq(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.readSeq) { return; }
        this._value.readSeq = value;
        this.markDirty();
    }
    get lastEmailNotification(): number | null {
        let res = this._value.lastEmailNotification;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set lastEmailNotification(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.lastEmailNotification) { return; }
        this._value.lastEmailNotification = value;
        this.markDirty();
    }
    get lastPushNotification(): number | null {
        let res = this._value.lastPushNotification;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set lastPushNotification(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.lastPushNotification) { return; }
        this._value.lastPushNotification = value;
        this.markDirty();
    }
    get lastEmailSeq(): number | null {
        let res = this._value.lastEmailSeq;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set lastEmailSeq(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.lastEmailSeq) { return; }
        this._value.lastEmailSeq = value;
        this.markDirty();
    }
    get lastPushSeq(): number | null {
        let res = this._value.lastPushSeq;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set lastPushSeq(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.lastPushSeq) { return; }
        this._value.lastPushSeq = value;
        this.markDirty();
    }
}

export class UserNotificationsStateFactory extends FEntityFactory<UserNotificationsState> {
    static schema: FEntitySchema = {
        name: 'UserNotificationsState',
        editable: false,
        primaryKeys: [
            { name: 'uid', type: 'number' },
        ],
        fields: [
            { name: 'readSeq', type: 'number' },
            { name: 'lastEmailNotification', type: 'number' },
            { name: 'lastPushNotification', type: 'number' },
            { name: 'lastEmailSeq', type: 'number' },
            { name: 'lastPushSeq', type: 'number' },
        ],
        indexes: [
        ],
    };

    private static validate(src: any) {
        validators.notNull('uid', src.uid);
        validators.isNumber('uid', src.uid);
        validators.isNumber('readSeq', src.readSeq);
        validators.isNumber('lastEmailNotification', src.lastEmailNotification);
        validators.isNumber('lastPushNotification', src.lastPushNotification);
        validators.isNumber('lastEmailSeq', src.lastEmailSeq);
        validators.isNumber('lastPushSeq', src.lastPushSeq);
    }

    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'userNotificationsState'),
            { enableVersioning: true, enableTimestamps: true, validator: UserNotificationsStateFactory.validate, hasLiveStreams: false },
            [],
            'UserNotificationsState'
        );
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'uid': rawId[0] };
    }
    async findById(ctx: Context, uid: number) {
        return await this._findById(ctx, [uid]);
    }
    async create(ctx: Context, uid: number, shape: UserNotificationsStateShape) {
        return await this._create(ctx, [uid], { uid, ...shape });
    }
    watch(ctx: Context, uid: number, cb: () => void) {
        return this._watch(ctx, [uid], cb);
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new UserNotificationsState(ctx, this.connection, this.namespace, this.directory, [value.uid], value, this.options, isNew, this.indexes, 'UserNotificationsState');
    }
}
export interface HyperLogShape {
    type: string;
    date: number;
    body: any;
}

export class HyperLog extends FEntity {
    readonly entityName: 'HyperLog' = 'HyperLog';
    get id(): string { return this._value.id; }
    get type(): string {
        return this._value.type;
    }
    set type(value: string) {
        this._checkIsWritable();
        if (value === this._value.type) { return; }
        this._value.type = value;
        this.markDirty();
    }
    get date(): number {
        return this._value.date;
    }
    set date(value: number) {
        this._checkIsWritable();
        if (value === this._value.date) { return; }
        this._value.date = value;
        this.markDirty();
    }
    get body(): any {
        return this._value.body;
    }
    set body(value: any) {
        this._checkIsWritable();
        if (value === this._value.body) { return; }
        this._value.body = value;
        this.markDirty();
    }
}

export class HyperLogFactory extends FEntityFactory<HyperLog> {
    static schema: FEntitySchema = {
        name: 'HyperLog',
        editable: false,
        primaryKeys: [
            { name: 'id', type: 'string' },
        ],
        fields: [
            { name: 'type', type: 'string' },
            { name: 'date', type: 'number' },
            { name: 'body', type: 'json' },
        ],
        indexes: [
            { name: 'created', type: 'range', fields: ['createdAt'] },
            { name: 'userEvents', type: 'range', fields: ['createdAt'], displayName: 'userEvents' },
            { name: 'onlineChangeEvents', type: 'range', fields: ['createdAt'], displayName: 'onlineChangeEvents' },
        ],
    };

    private static validate(src: any) {
        validators.notNull('id', src.id);
        validators.isString('id', src.id);
        validators.notNull('type', src.type);
        validators.isString('type', src.type);
        validators.notNull('date', src.date);
        validators.isNumber('date', src.date);
        validators.notNull('body', src.body);
    }

    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'hyperLog'),
            { enableVersioning: false, enableTimestamps: true, validator: HyperLogFactory.validate, hasLiveStreams: false },
            [new FEntityIndex('created', ['createdAt'], false), new FEntityIndex('userEvents', ['createdAt'], false, (src) => src.type === 'track'), new FEntityIndex('onlineChangeEvents', ['createdAt'], false, (src) => src.type === 'online_status')],
            'HyperLog'
        );
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'id': rawId[0] };
    }
    async findById(ctx: Context, id: string) {
        return await this._findById(ctx, [id]);
    }
    async create(ctx: Context, id: string, shape: HyperLogShape) {
        return await this._create(ctx, [id], { id, ...shape });
    }
    watch(ctx: Context, id: string, cb: () => void) {
        return this._watch(ctx, [id], cb);
    }
    async rangeFromCreated(ctx: Context, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'created'], limit, reversed);
    }
    async rangeFromCreatedWithCursor(ctx: Context, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'created'], limit, after, reversed);
    }
    async allFromCreated(ctx: Context, ) {
        return await this._findAll(ctx, ['__indexes', 'created']);
    }
    createCreatedStream(ctx: Context, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'hyperLog', '__indexes', 'created'], limit, after); 
    }
    async rangeFromUserEvents(ctx: Context, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'userEvents'], limit, reversed);
    }
    async rangeFromUserEventsWithCursor(ctx: Context, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'userEvents'], limit, after, reversed);
    }
    async allFromUserEvents(ctx: Context, ) {
        return await this._findAll(ctx, ['__indexes', 'userEvents']);
    }
    createUserEventsStream(ctx: Context, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'hyperLog', '__indexes', 'userEvents'], limit, after); 
    }
    async rangeFromOnlineChangeEvents(ctx: Context, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'onlineChangeEvents'], limit, reversed);
    }
    async rangeFromOnlineChangeEventsWithCursor(ctx: Context, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'onlineChangeEvents'], limit, after, reversed);
    }
    async allFromOnlineChangeEvents(ctx: Context, ) {
        return await this._findAll(ctx, ['__indexes', 'onlineChangeEvents']);
    }
    createOnlineChangeEventsStream(ctx: Context, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'hyperLog', '__indexes', 'onlineChangeEvents'], limit, after); 
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new HyperLog(ctx, this.connection, this.namespace, this.directory, [value.id], value, this.options, isNew, this.indexes, 'HyperLog');
    }
}
export interface MessageDraftShape {
    contents: string;
}

export class MessageDraft extends FEntity {
    readonly entityName: 'MessageDraft' = 'MessageDraft';
    get uid(): number { return this._value.uid; }
    get cid(): number { return this._value.cid; }
    get contents(): string {
        return this._value.contents;
    }
    set contents(value: string) {
        this._checkIsWritable();
        if (value === this._value.contents) { return; }
        this._value.contents = value;
        this.markDirty();
    }
}

export class MessageDraftFactory extends FEntityFactory<MessageDraft> {
    static schema: FEntitySchema = {
        name: 'MessageDraft',
        editable: false,
        primaryKeys: [
            { name: 'uid', type: 'number' },
            { name: 'cid', type: 'number' },
        ],
        fields: [
            { name: 'contents', type: 'string', secure: true },
        ],
        indexes: [
        ],
    };

    private static validate(src: any) {
        validators.notNull('uid', src.uid);
        validators.isNumber('uid', src.uid);
        validators.notNull('cid', src.cid);
        validators.isNumber('cid', src.cid);
        validators.notNull('contents', src.contents);
        validators.isString('contents', src.contents);
    }

    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'messageDraft'),
            { enableVersioning: true, enableTimestamps: true, validator: MessageDraftFactory.validate, hasLiveStreams: false },
            [],
            'MessageDraft'
        );
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 2) { throw Error('Invalid key length!'); }
        return { 'uid': rawId[0], 'cid': rawId[1] };
    }
    async findById(ctx: Context, uid: number, cid: number) {
        return await this._findById(ctx, [uid, cid]);
    }
    async create(ctx: Context, uid: number, cid: number, shape: MessageDraftShape) {
        return await this._create(ctx, [uid, cid], { uid, cid, ...shape });
    }
    watch(ctx: Context, uid: number, cid: number, cb: () => void) {
        return this._watch(ctx, [uid, cid], cb);
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new MessageDraft(ctx, this.connection, this.namespace, this.directory, [value.uid, value.cid], value, this.options, isNew, this.indexes, 'MessageDraft');
    }
}
export interface ChannelInvitationShape {
    creatorId: number;
    channelId: number;
    email: string;
    firstName?: string| null;
    lastName?: string| null;
    text?: string| null;
    acceptedById?: number| null;
    enabled: boolean;
}

export class ChannelInvitation extends FEntity {
    readonly entityName: 'ChannelInvitation' = 'ChannelInvitation';
    get id(): string { return this._value.id; }
    get creatorId(): number {
        return this._value.creatorId;
    }
    set creatorId(value: number) {
        this._checkIsWritable();
        if (value === this._value.creatorId) { return; }
        this._value.creatorId = value;
        this.markDirty();
    }
    get channelId(): number {
        return this._value.channelId;
    }
    set channelId(value: number) {
        this._checkIsWritable();
        if (value === this._value.channelId) { return; }
        this._value.channelId = value;
        this.markDirty();
    }
    get email(): string {
        return this._value.email;
    }
    set email(value: string) {
        this._checkIsWritable();
        if (value === this._value.email) { return; }
        this._value.email = value;
        this.markDirty();
    }
    get firstName(): string | null {
        let res = this._value.firstName;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set firstName(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.firstName) { return; }
        this._value.firstName = value;
        this.markDirty();
    }
    get lastName(): string | null {
        let res = this._value.lastName;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set lastName(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.lastName) { return; }
        this._value.lastName = value;
        this.markDirty();
    }
    get text(): string | null {
        let res = this._value.text;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set text(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.text) { return; }
        this._value.text = value;
        this.markDirty();
    }
    get acceptedById(): number | null {
        let res = this._value.acceptedById;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set acceptedById(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.acceptedById) { return; }
        this._value.acceptedById = value;
        this.markDirty();
    }
    get enabled(): boolean {
        return this._value.enabled;
    }
    set enabled(value: boolean) {
        this._checkIsWritable();
        if (value === this._value.enabled) { return; }
        this._value.enabled = value;
        this.markDirty();
    }
}

export class ChannelInvitationFactory extends FEntityFactory<ChannelInvitation> {
    static schema: FEntitySchema = {
        name: 'ChannelInvitation',
        editable: false,
        primaryKeys: [
            { name: 'id', type: 'string' },
        ],
        fields: [
            { name: 'creatorId', type: 'number' },
            { name: 'channelId', type: 'number' },
            { name: 'email', type: 'string' },
            { name: 'firstName', type: 'string' },
            { name: 'lastName', type: 'string' },
            { name: 'text', type: 'string' },
            { name: 'acceptedById', type: 'number' },
            { name: 'enabled', type: 'boolean' },
        ],
        indexes: [
            { name: 'channel', type: 'range', fields: ['createdAt', 'channelId'] },
            { name: 'updated', type: 'range', fields: ['updatedAt'] },
        ],
    };

    private static validate(src: any) {
        validators.notNull('id', src.id);
        validators.isString('id', src.id);
        validators.notNull('creatorId', src.creatorId);
        validators.isNumber('creatorId', src.creatorId);
        validators.notNull('channelId', src.channelId);
        validators.isNumber('channelId', src.channelId);
        validators.notNull('email', src.email);
        validators.isString('email', src.email);
        validators.isString('firstName', src.firstName);
        validators.isString('lastName', src.lastName);
        validators.isString('text', src.text);
        validators.isNumber('acceptedById', src.acceptedById);
        validators.notNull('enabled', src.enabled);
        validators.isBoolean('enabled', src.enabled);
    }

    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'channelInvitation'),
            { enableVersioning: true, enableTimestamps: true, validator: ChannelInvitationFactory.validate, hasLiveStreams: false },
            [new FEntityIndex('channel', ['createdAt', 'channelId'], false), new FEntityIndex('updated', ['updatedAt'], false)],
            'ChannelInvitation'
        );
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'id': rawId[0] };
    }
    async findById(ctx: Context, id: string) {
        return await this._findById(ctx, [id]);
    }
    async create(ctx: Context, id: string, shape: ChannelInvitationShape) {
        return await this._create(ctx, [id], { id, ...shape });
    }
    watch(ctx: Context, id: string, cb: () => void) {
        return this._watch(ctx, [id], cb);
    }
    async allFromChannelAfter(ctx: Context, createdAt: number, after: number) {
        return await this._findRangeAllAfter(ctx, ['__indexes', 'channel', createdAt], after);
    }
    async rangeFromChannelAfter(ctx: Context, createdAt: number, after: number, limit: number, reversed?: boolean) {
        return await this._findRangeAfter(ctx, ['__indexes', 'channel', createdAt], after, limit, reversed);
    }
    async rangeFromChannel(ctx: Context, createdAt: number, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'channel', createdAt], limit, reversed);
    }
    async rangeFromChannelWithCursor(ctx: Context, createdAt: number, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'channel', createdAt], limit, after, reversed);
    }
    async allFromChannel(ctx: Context, createdAt: number) {
        return await this._findAll(ctx, ['__indexes', 'channel', createdAt]);
    }
    createChannelStream(ctx: Context, createdAt: number, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'channelInvitation', '__indexes', 'channel', createdAt], limit, after); 
    }
    async rangeFromUpdated(ctx: Context, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'updated'], limit, reversed);
    }
    async rangeFromUpdatedWithCursor(ctx: Context, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'updated'], limit, after, reversed);
    }
    async allFromUpdated(ctx: Context, ) {
        return await this._findAll(ctx, ['__indexes', 'updated']);
    }
    createUpdatedStream(ctx: Context, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'channelInvitation', '__indexes', 'updated'], limit, after); 
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new ChannelInvitation(ctx, this.connection, this.namespace, this.directory, [value.id], value, this.options, isNew, this.indexes, 'ChannelInvitation');
    }
}
export interface ChannelLinkShape {
    creatorId: number;
    channelId: number;
    enabled: boolean;
}

export class ChannelLink extends FEntity {
    readonly entityName: 'ChannelLink' = 'ChannelLink';
    get id(): string { return this._value.id; }
    get creatorId(): number {
        return this._value.creatorId;
    }
    set creatorId(value: number) {
        this._checkIsWritable();
        if (value === this._value.creatorId) { return; }
        this._value.creatorId = value;
        this.markDirty();
    }
    get channelId(): number {
        return this._value.channelId;
    }
    set channelId(value: number) {
        this._checkIsWritable();
        if (value === this._value.channelId) { return; }
        this._value.channelId = value;
        this.markDirty();
    }
    get enabled(): boolean {
        return this._value.enabled;
    }
    set enabled(value: boolean) {
        this._checkIsWritable();
        if (value === this._value.enabled) { return; }
        this._value.enabled = value;
        this.markDirty();
    }
}

export class ChannelLinkFactory extends FEntityFactory<ChannelLink> {
    static schema: FEntitySchema = {
        name: 'ChannelLink',
        editable: false,
        primaryKeys: [
            { name: 'id', type: 'string' },
        ],
        fields: [
            { name: 'creatorId', type: 'number' },
            { name: 'channelId', type: 'number' },
            { name: 'enabled', type: 'boolean' },
        ],
        indexes: [
            { name: 'channel', type: 'range', fields: ['createdAt', 'channelId'] },
        ],
    };

    private static validate(src: any) {
        validators.notNull('id', src.id);
        validators.isString('id', src.id);
        validators.notNull('creatorId', src.creatorId);
        validators.isNumber('creatorId', src.creatorId);
        validators.notNull('channelId', src.channelId);
        validators.isNumber('channelId', src.channelId);
        validators.notNull('enabled', src.enabled);
        validators.isBoolean('enabled', src.enabled);
    }

    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'channelLink'),
            { enableVersioning: true, enableTimestamps: true, validator: ChannelLinkFactory.validate, hasLiveStreams: false },
            [new FEntityIndex('channel', ['createdAt', 'channelId'], false)],
            'ChannelLink'
        );
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'id': rawId[0] };
    }
    async findById(ctx: Context, id: string) {
        return await this._findById(ctx, [id]);
    }
    async create(ctx: Context, id: string, shape: ChannelLinkShape) {
        return await this._create(ctx, [id], { id, ...shape });
    }
    watch(ctx: Context, id: string, cb: () => void) {
        return this._watch(ctx, [id], cb);
    }
    async allFromChannelAfter(ctx: Context, createdAt: number, after: number) {
        return await this._findRangeAllAfter(ctx, ['__indexes', 'channel', createdAt], after);
    }
    async rangeFromChannelAfter(ctx: Context, createdAt: number, after: number, limit: number, reversed?: boolean) {
        return await this._findRangeAfter(ctx, ['__indexes', 'channel', createdAt], after, limit, reversed);
    }
    async rangeFromChannel(ctx: Context, createdAt: number, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'channel', createdAt], limit, reversed);
    }
    async rangeFromChannelWithCursor(ctx: Context, createdAt: number, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'channel', createdAt], limit, after, reversed);
    }
    async allFromChannel(ctx: Context, createdAt: number) {
        return await this._findAll(ctx, ['__indexes', 'channel', createdAt]);
    }
    createChannelStream(ctx: Context, createdAt: number, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'channelLink', '__indexes', 'channel', createdAt], limit, after); 
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new ChannelLink(ctx, this.connection, this.namespace, this.directory, [value.id], value, this.options, isNew, this.indexes, 'ChannelLink');
    }
}
export interface AppInviteLinkShape {
    uid: number;
}

export class AppInviteLink extends FEntity {
    readonly entityName: 'AppInviteLink' = 'AppInviteLink';
    get id(): string { return this._value.id; }
    get uid(): number {
        return this._value.uid;
    }
    set uid(value: number) {
        this._checkIsWritable();
        if (value === this._value.uid) { return; }
        this._value.uid = value;
        this.markDirty();
    }
}

export class AppInviteLinkFactory extends FEntityFactory<AppInviteLink> {
    static schema: FEntitySchema = {
        name: 'AppInviteLink',
        editable: false,
        primaryKeys: [
            { name: 'id', type: 'string' },
        ],
        fields: [
            { name: 'uid', type: 'number' },
        ],
        indexes: [
            { name: 'user', type: 'unique', fields: ['uid'] },
        ],
    };

    private static validate(src: any) {
        validators.notNull('id', src.id);
        validators.isString('id', src.id);
        validators.notNull('uid', src.uid);
        validators.isNumber('uid', src.uid);
    }

    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'appInviteLink'),
            { enableVersioning: true, enableTimestamps: true, validator: AppInviteLinkFactory.validate, hasLiveStreams: false },
            [new FEntityIndex('user', ['uid'], true)],
            'AppInviteLink'
        );
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'id': rawId[0] };
    }
    async findById(ctx: Context, id: string) {
        return await this._findById(ctx, [id]);
    }
    async create(ctx: Context, id: string, shape: AppInviteLinkShape) {
        return await this._create(ctx, [id], { id, ...shape });
    }
    watch(ctx: Context, id: string, cb: () => void) {
        return this._watch(ctx, [id], cb);
    }
    async findFromUser(ctx: Context, uid: number) {
        return await this._findFromIndex(ctx, ['__indexes', 'user', uid]);
    }
    async rangeFromUser(ctx: Context, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'user'], limit, reversed);
    }
    async rangeFromUserWithCursor(ctx: Context, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'user'], limit, after, reversed);
    }
    async allFromUser(ctx: Context, ) {
        return await this._findAll(ctx, ['__indexes', 'user']);
    }
    createUserStream(ctx: Context, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'appInviteLink', '__indexes', 'user'], limit, after); 
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new AppInviteLink(ctx, this.connection, this.namespace, this.directory, [value.id], value, this.options, isNew, this.indexes, 'AppInviteLink');
    }
}
export interface SampleEntityShape {
    data: string;
}

export class SampleEntity extends FEntity {
    readonly entityName: 'SampleEntity' = 'SampleEntity';
    get id(): string { return this._value.id; }
    get data(): string {
        return this._value.data;
    }
    set data(value: string) {
        this._checkIsWritable();
        if (value === this._value.data) { return; }
        this._value.data = value;
        this.markDirty();
    }
}

export class SampleEntityFactory extends FEntityFactory<SampleEntity> {
    static schema: FEntitySchema = {
        name: 'SampleEntity',
        editable: true,
        primaryKeys: [
            { name: 'id', type: 'string' },
        ],
        fields: [
            { name: 'data', type: 'string' },
        ],
        indexes: [
        ],
    };

    private static validate(src: any) {
        validators.notNull('id', src.id);
        validators.isString('id', src.id);
        validators.notNull('data', src.data);
        validators.isString('data', src.data);
    }

    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'sampleEntity'),
            { enableVersioning: true, enableTimestamps: true, validator: SampleEntityFactory.validate, hasLiveStreams: false },
            [],
            'SampleEntity'
        );
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'id': rawId[0] };
    }
    async findById(ctx: Context, id: string) {
        return await this._findById(ctx, [id]);
    }
    async create(ctx: Context, id: string, shape: SampleEntityShape) {
        return await this._create(ctx, [id], { id, ...shape });
    }
    watch(ctx: Context, id: string, cb: () => void) {
        return this._watch(ctx, [id], cb);
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new SampleEntity(ctx, this.connection, this.namespace, this.directory, [value.id], value, this.options, isNew, this.indexes, 'SampleEntity');
    }
}
export interface OrganizationPublicInviteLinkShape {
    uid: number;
    oid: number;
    enabled: boolean;
}

export class OrganizationPublicInviteLink extends FEntity {
    readonly entityName: 'OrganizationPublicInviteLink' = 'OrganizationPublicInviteLink';
    get id(): string { return this._value.id; }
    get uid(): number {
        return this._value.uid;
    }
    set uid(value: number) {
        this._checkIsWritable();
        if (value === this._value.uid) { return; }
        this._value.uid = value;
        this.markDirty();
    }
    get oid(): number {
        return this._value.oid;
    }
    set oid(value: number) {
        this._checkIsWritable();
        if (value === this._value.oid) { return; }
        this._value.oid = value;
        this.markDirty();
    }
    get enabled(): boolean {
        return this._value.enabled;
    }
    set enabled(value: boolean) {
        this._checkIsWritable();
        if (value === this._value.enabled) { return; }
        this._value.enabled = value;
        this.markDirty();
    }
}

export class OrganizationPublicInviteLinkFactory extends FEntityFactory<OrganizationPublicInviteLink> {
    static schema: FEntitySchema = {
        name: 'OrganizationPublicInviteLink',
        editable: false,
        primaryKeys: [
            { name: 'id', type: 'string' },
        ],
        fields: [
            { name: 'uid', type: 'number' },
            { name: 'oid', type: 'number' },
            { name: 'enabled', type: 'boolean' },
        ],
        indexes: [
            { name: 'userInOrganization', type: 'unique', fields: ['uid', 'oid'] },
        ],
    };

    private static validate(src: any) {
        validators.notNull('id', src.id);
        validators.isString('id', src.id);
        validators.notNull('uid', src.uid);
        validators.isNumber('uid', src.uid);
        validators.notNull('oid', src.oid);
        validators.isNumber('oid', src.oid);
        validators.notNull('enabled', src.enabled);
        validators.isBoolean('enabled', src.enabled);
    }

    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'organizationPublicInviteLink'),
            { enableVersioning: true, enableTimestamps: true, validator: OrganizationPublicInviteLinkFactory.validate, hasLiveStreams: false },
            [new FEntityIndex('userInOrganization', ['uid', 'oid'], true, src => src.enabled)],
            'OrganizationPublicInviteLink'
        );
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'id': rawId[0] };
    }
    async findById(ctx: Context, id: string) {
        return await this._findById(ctx, [id]);
    }
    async create(ctx: Context, id: string, shape: OrganizationPublicInviteLinkShape) {
        return await this._create(ctx, [id], { id, ...shape });
    }
    watch(ctx: Context, id: string, cb: () => void) {
        return this._watch(ctx, [id], cb);
    }
    async findFromUserInOrganization(ctx: Context, uid: number, oid: number) {
        return await this._findFromIndex(ctx, ['__indexes', 'userInOrganization', uid, oid]);
    }
    async allFromUserInOrganizationAfter(ctx: Context, uid: number, after: number) {
        return await this._findRangeAllAfter(ctx, ['__indexes', 'userInOrganization', uid], after);
    }
    async rangeFromUserInOrganizationAfter(ctx: Context, uid: number, after: number, limit: number, reversed?: boolean) {
        return await this._findRangeAfter(ctx, ['__indexes', 'userInOrganization', uid], after, limit, reversed);
    }
    async rangeFromUserInOrganization(ctx: Context, uid: number, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'userInOrganization', uid], limit, reversed);
    }
    async rangeFromUserInOrganizationWithCursor(ctx: Context, uid: number, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'userInOrganization', uid], limit, after, reversed);
    }
    async allFromUserInOrganization(ctx: Context, uid: number) {
        return await this._findAll(ctx, ['__indexes', 'userInOrganization', uid]);
    }
    createUserInOrganizationStream(ctx: Context, uid: number, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'organizationPublicInviteLink', '__indexes', 'userInOrganization', uid], limit, after); 
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new OrganizationPublicInviteLink(ctx, this.connection, this.namespace, this.directory, [value.id], value, this.options, isNew, this.indexes, 'OrganizationPublicInviteLink');
    }
}
export interface OrganizationInviteLinkShape {
    oid: number;
    email: string;
    uid: number;
    firstName?: string| null;
    lastName?: string| null;
    text?: string| null;
    ttl?: number| null;
    enabled: boolean;
    joined: boolean;
    role: 'MEMBER' | 'OWNER';
}

export class OrganizationInviteLink extends FEntity {
    readonly entityName: 'OrganizationInviteLink' = 'OrganizationInviteLink';
    get id(): string { return this._value.id; }
    get oid(): number {
        return this._value.oid;
    }
    set oid(value: number) {
        this._checkIsWritable();
        if (value === this._value.oid) { return; }
        this._value.oid = value;
        this.markDirty();
    }
    get email(): string {
        return this._value.email;
    }
    set email(value: string) {
        this._checkIsWritable();
        if (value === this._value.email) { return; }
        this._value.email = value;
        this.markDirty();
    }
    get uid(): number {
        return this._value.uid;
    }
    set uid(value: number) {
        this._checkIsWritable();
        if (value === this._value.uid) { return; }
        this._value.uid = value;
        this.markDirty();
    }
    get firstName(): string | null {
        let res = this._value.firstName;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set firstName(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.firstName) { return; }
        this._value.firstName = value;
        this.markDirty();
    }
    get lastName(): string | null {
        let res = this._value.lastName;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set lastName(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.lastName) { return; }
        this._value.lastName = value;
        this.markDirty();
    }
    get text(): string | null {
        let res = this._value.text;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set text(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.text) { return; }
        this._value.text = value;
        this.markDirty();
    }
    get ttl(): number | null {
        let res = this._value.ttl;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set ttl(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.ttl) { return; }
        this._value.ttl = value;
        this.markDirty();
    }
    get enabled(): boolean {
        return this._value.enabled;
    }
    set enabled(value: boolean) {
        this._checkIsWritable();
        if (value === this._value.enabled) { return; }
        this._value.enabled = value;
        this.markDirty();
    }
    get joined(): boolean {
        return this._value.joined;
    }
    set joined(value: boolean) {
        this._checkIsWritable();
        if (value === this._value.joined) { return; }
        this._value.joined = value;
        this.markDirty();
    }
    get role(): 'MEMBER' | 'OWNER' {
        return this._value.role;
    }
    set role(value: 'MEMBER' | 'OWNER') {
        this._checkIsWritable();
        if (value === this._value.role) { return; }
        this._value.role = value;
        this.markDirty();
    }
}

export class OrganizationInviteLinkFactory extends FEntityFactory<OrganizationInviteLink> {
    static schema: FEntitySchema = {
        name: 'OrganizationInviteLink',
        editable: false,
        primaryKeys: [
            { name: 'id', type: 'string' },
        ],
        fields: [
            { name: 'oid', type: 'number' },
            { name: 'email', type: 'string' },
            { name: 'uid', type: 'number' },
            { name: 'firstName', type: 'string' },
            { name: 'lastName', type: 'string' },
            { name: 'text', type: 'string' },
            { name: 'ttl', type: 'number' },
            { name: 'enabled', type: 'boolean' },
            { name: 'joined', type: 'boolean' },
            { name: 'role', type: 'enum', enumValues: ['MEMBER', 'OWNER'] },
        ],
        indexes: [
            { name: 'organization', type: 'unique', fields: ['oid', 'id'] },
            { name: 'emailInOrganization', type: 'unique', fields: ['email', 'oid'] },
        ],
    };

    private static validate(src: any) {
        validators.notNull('id', src.id);
        validators.isString('id', src.id);
        validators.notNull('oid', src.oid);
        validators.isNumber('oid', src.oid);
        validators.notNull('email', src.email);
        validators.isString('email', src.email);
        validators.notNull('uid', src.uid);
        validators.isNumber('uid', src.uid);
        validators.isString('firstName', src.firstName);
        validators.isString('lastName', src.lastName);
        validators.isString('text', src.text);
        validators.isNumber('ttl', src.ttl);
        validators.notNull('enabled', src.enabled);
        validators.isBoolean('enabled', src.enabled);
        validators.notNull('joined', src.joined);
        validators.isBoolean('joined', src.joined);
        validators.notNull('role', src.role);
        validators.isEnum('role', src.role, ['MEMBER', 'OWNER']);
    }

    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'organizationInviteLink'),
            { enableVersioning: true, enableTimestamps: true, validator: OrganizationInviteLinkFactory.validate, hasLiveStreams: false },
            [new FEntityIndex('organization', ['oid', 'id'], true, src => src.enabled), new FEntityIndex('emailInOrganization', ['email', 'oid'], true, src => src.enabled)],
            'OrganizationInviteLink'
        );
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'id': rawId[0] };
    }
    async findById(ctx: Context, id: string) {
        return await this._findById(ctx, [id]);
    }
    async create(ctx: Context, id: string, shape: OrganizationInviteLinkShape) {
        return await this._create(ctx, [id], { id, ...shape });
    }
    watch(ctx: Context, id: string, cb: () => void) {
        return this._watch(ctx, [id], cb);
    }
    async findFromOrganization(ctx: Context, oid: number, id: string) {
        return await this._findFromIndex(ctx, ['__indexes', 'organization', oid, id]);
    }
    async allFromOrganizationAfter(ctx: Context, oid: number, after: string) {
        return await this._findRangeAllAfter(ctx, ['__indexes', 'organization', oid], after);
    }
    async rangeFromOrganizationAfter(ctx: Context, oid: number, after: string, limit: number, reversed?: boolean) {
        return await this._findRangeAfter(ctx, ['__indexes', 'organization', oid], after, limit, reversed);
    }
    async rangeFromOrganization(ctx: Context, oid: number, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'organization', oid], limit, reversed);
    }
    async rangeFromOrganizationWithCursor(ctx: Context, oid: number, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'organization', oid], limit, after, reversed);
    }
    async allFromOrganization(ctx: Context, oid: number) {
        return await this._findAll(ctx, ['__indexes', 'organization', oid]);
    }
    createOrganizationStream(ctx: Context, oid: number, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'organizationInviteLink', '__indexes', 'organization', oid], limit, after); 
    }
    async findFromEmailInOrganization(ctx: Context, email: string, oid: number) {
        return await this._findFromIndex(ctx, ['__indexes', 'emailInOrganization', email, oid]);
    }
    async allFromEmailInOrganizationAfter(ctx: Context, email: string, after: number) {
        return await this._findRangeAllAfter(ctx, ['__indexes', 'emailInOrganization', email], after);
    }
    async rangeFromEmailInOrganizationAfter(ctx: Context, email: string, after: number, limit: number, reversed?: boolean) {
        return await this._findRangeAfter(ctx, ['__indexes', 'emailInOrganization', email], after, limit, reversed);
    }
    async rangeFromEmailInOrganization(ctx: Context, email: string, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'emailInOrganization', email], limit, reversed);
    }
    async rangeFromEmailInOrganizationWithCursor(ctx: Context, email: string, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'emailInOrganization', email], limit, after, reversed);
    }
    async allFromEmailInOrganization(ctx: Context, email: string) {
        return await this._findAll(ctx, ['__indexes', 'emailInOrganization', email]);
    }
    createEmailInOrganizationStream(ctx: Context, email: string, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'organizationInviteLink', '__indexes', 'emailInOrganization', email], limit, after); 
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new OrganizationInviteLink(ctx, this.connection, this.namespace, this.directory, [value.id], value, this.options, isNew, this.indexes, 'OrganizationInviteLink');
    }
}
export interface ConferenceRoomShape {
    strategy?: 'direct' | 'bridged'| null;
}

export class ConferenceRoom extends FEntity {
    readonly entityName: 'ConferenceRoom' = 'ConferenceRoom';
    get id(): number { return this._value.id; }
    get strategy(): 'direct' | 'bridged' | null {
        let res = this._value.strategy;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set strategy(value: 'direct' | 'bridged' | null) {
        this._checkIsWritable();
        if (value === this._value.strategy) { return; }
        this._value.strategy = value;
        this.markDirty();
    }
}

export class ConferenceRoomFactory extends FEntityFactory<ConferenceRoom> {
    static schema: FEntitySchema = {
        name: 'ConferenceRoom',
        editable: false,
        primaryKeys: [
            { name: 'id', type: 'number' },
        ],
        fields: [
            { name: 'strategy', type: 'enum', enumValues: ['direct', 'bridged'] },
        ],
        indexes: [
        ],
    };

    private static validate(src: any) {
        validators.notNull('id', src.id);
        validators.isNumber('id', src.id);
        validators.isEnum('strategy', src.strategy, ['direct', 'bridged']);
    }

    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'conferenceRoom'),
            { enableVersioning: true, enableTimestamps: true, validator: ConferenceRoomFactory.validate, hasLiveStreams: false },
            [],
            'ConferenceRoom'
        );
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'id': rawId[0] };
    }
    async findById(ctx: Context, id: number) {
        return await this._findById(ctx, [id]);
    }
    async create(ctx: Context, id: number, shape: ConferenceRoomShape) {
        return await this._create(ctx, [id], { id, ...shape });
    }
    watch(ctx: Context, id: number, cb: () => void) {
        return this._watch(ctx, [id], cb);
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new ConferenceRoom(ctx, this.connection, this.namespace, this.directory, [value.id], value, this.options, isNew, this.indexes, 'ConferenceRoom');
    }
}
export interface ConferencePeerShape {
    cid: number;
    uid: number;
    tid: string;
    keepAliveTimeout: number;
    enabled: boolean;
}

export class ConferencePeer extends FEntity {
    readonly entityName: 'ConferencePeer' = 'ConferencePeer';
    get id(): number { return this._value.id; }
    get cid(): number {
        return this._value.cid;
    }
    set cid(value: number) {
        this._checkIsWritable();
        if (value === this._value.cid) { return; }
        this._value.cid = value;
        this.markDirty();
    }
    get uid(): number {
        return this._value.uid;
    }
    set uid(value: number) {
        this._checkIsWritable();
        if (value === this._value.uid) { return; }
        this._value.uid = value;
        this.markDirty();
    }
    get tid(): string {
        return this._value.tid;
    }
    set tid(value: string) {
        this._checkIsWritable();
        if (value === this._value.tid) { return; }
        this._value.tid = value;
        this.markDirty();
    }
    get keepAliveTimeout(): number {
        return this._value.keepAliveTimeout;
    }
    set keepAliveTimeout(value: number) {
        this._checkIsWritable();
        if (value === this._value.keepAliveTimeout) { return; }
        this._value.keepAliveTimeout = value;
        this.markDirty();
    }
    get enabled(): boolean {
        return this._value.enabled;
    }
    set enabled(value: boolean) {
        this._checkIsWritable();
        if (value === this._value.enabled) { return; }
        this._value.enabled = value;
        this.markDirty();
    }
}

export class ConferencePeerFactory extends FEntityFactory<ConferencePeer> {
    static schema: FEntitySchema = {
        name: 'ConferencePeer',
        editable: false,
        primaryKeys: [
            { name: 'id', type: 'number' },
        ],
        fields: [
            { name: 'cid', type: 'number' },
            { name: 'uid', type: 'number' },
            { name: 'tid', type: 'string' },
            { name: 'keepAliveTimeout', type: 'number' },
            { name: 'enabled', type: 'boolean' },
        ],
        indexes: [
            { name: 'auth', type: 'unique', fields: ['cid', 'uid', 'tid'] },
            { name: 'conference', type: 'range', fields: ['cid', 'keepAliveTimeout'] },
            { name: 'active', type: 'range', fields: ['keepAliveTimeout'] },
        ],
    };

    private static validate(src: any) {
        validators.notNull('id', src.id);
        validators.isNumber('id', src.id);
        validators.notNull('cid', src.cid);
        validators.isNumber('cid', src.cid);
        validators.notNull('uid', src.uid);
        validators.isNumber('uid', src.uid);
        validators.notNull('tid', src.tid);
        validators.isString('tid', src.tid);
        validators.notNull('keepAliveTimeout', src.keepAliveTimeout);
        validators.isNumber('keepAliveTimeout', src.keepAliveTimeout);
        validators.notNull('enabled', src.enabled);
        validators.isBoolean('enabled', src.enabled);
    }

    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'conferencePeer'),
            { enableVersioning: true, enableTimestamps: true, validator: ConferencePeerFactory.validate, hasLiveStreams: false },
            [new FEntityIndex('auth', ['cid', 'uid', 'tid'], true, (src) => src.enabled), new FEntityIndex('conference', ['cid', 'keepAliveTimeout'], false, (src) => src.enabled), new FEntityIndex('active', ['keepAliveTimeout'], false, (src) => src.enabled)],
            'ConferencePeer'
        );
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'id': rawId[0] };
    }
    async findById(ctx: Context, id: number) {
        return await this._findById(ctx, [id]);
    }
    async create(ctx: Context, id: number, shape: ConferencePeerShape) {
        return await this._create(ctx, [id], { id, ...shape });
    }
    watch(ctx: Context, id: number, cb: () => void) {
        return this._watch(ctx, [id], cb);
    }
    async findFromAuth(ctx: Context, cid: number, uid: number, tid: string) {
        return await this._findFromIndex(ctx, ['__indexes', 'auth', cid, uid, tid]);
    }
    async allFromAuthAfter(ctx: Context, cid: number, uid: number, after: string) {
        return await this._findRangeAllAfter(ctx, ['__indexes', 'auth', cid, uid], after);
    }
    async rangeFromAuthAfter(ctx: Context, cid: number, uid: number, after: string, limit: number, reversed?: boolean) {
        return await this._findRangeAfter(ctx, ['__indexes', 'auth', cid, uid], after, limit, reversed);
    }
    async rangeFromAuth(ctx: Context, cid: number, uid: number, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'auth', cid, uid], limit, reversed);
    }
    async rangeFromAuthWithCursor(ctx: Context, cid: number, uid: number, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'auth', cid, uid], limit, after, reversed);
    }
    async allFromAuth(ctx: Context, cid: number, uid: number) {
        return await this._findAll(ctx, ['__indexes', 'auth', cid, uid]);
    }
    createAuthStream(ctx: Context, cid: number, uid: number, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'conferencePeer', '__indexes', 'auth', cid, uid], limit, after); 
    }
    async allFromConferenceAfter(ctx: Context, cid: number, after: number) {
        return await this._findRangeAllAfter(ctx, ['__indexes', 'conference', cid], after);
    }
    async rangeFromConferenceAfter(ctx: Context, cid: number, after: number, limit: number, reversed?: boolean) {
        return await this._findRangeAfter(ctx, ['__indexes', 'conference', cid], after, limit, reversed);
    }
    async rangeFromConference(ctx: Context, cid: number, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'conference', cid], limit, reversed);
    }
    async rangeFromConferenceWithCursor(ctx: Context, cid: number, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'conference', cid], limit, after, reversed);
    }
    async allFromConference(ctx: Context, cid: number) {
        return await this._findAll(ctx, ['__indexes', 'conference', cid]);
    }
    createConferenceStream(ctx: Context, cid: number, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'conferencePeer', '__indexes', 'conference', cid], limit, after); 
    }
    async rangeFromActive(ctx: Context, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'active'], limit, reversed);
    }
    async rangeFromActiveWithCursor(ctx: Context, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'active'], limit, after, reversed);
    }
    async allFromActive(ctx: Context, ) {
        return await this._findAll(ctx, ['__indexes', 'active']);
    }
    createActiveStream(ctx: Context, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'conferencePeer', '__indexes', 'active'], limit, after); 
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new ConferencePeer(ctx, this.connection, this.namespace, this.directory, [value.id], value, this.options, isNew, this.indexes, 'ConferencePeer');
    }
}
export interface ConferenceMediaStreamShape {
    cid: number;
    peer1: number;
    peer2?: number| null;
    kind: 'direct' | 'bridged';
    state: 'wait-offer' | 'wait-answer' | 'online' | 'completed';
    offer?: string| null;
    answer?: string| null;
    ice1: any;
    ice2: any;
}

export class ConferenceMediaStream extends FEntity {
    readonly entityName: 'ConferenceMediaStream' = 'ConferenceMediaStream';
    get id(): number { return this._value.id; }
    get cid(): number {
        return this._value.cid;
    }
    set cid(value: number) {
        this._checkIsWritable();
        if (value === this._value.cid) { return; }
        this._value.cid = value;
        this.markDirty();
    }
    get peer1(): number {
        return this._value.peer1;
    }
    set peer1(value: number) {
        this._checkIsWritable();
        if (value === this._value.peer1) { return; }
        this._value.peer1 = value;
        this.markDirty();
    }
    get peer2(): number | null {
        let res = this._value.peer2;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set peer2(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.peer2) { return; }
        this._value.peer2 = value;
        this.markDirty();
    }
    get kind(): 'direct' | 'bridged' {
        return this._value.kind;
    }
    set kind(value: 'direct' | 'bridged') {
        this._checkIsWritable();
        if (value === this._value.kind) { return; }
        this._value.kind = value;
        this.markDirty();
    }
    get state(): 'wait-offer' | 'wait-answer' | 'online' | 'completed' {
        return this._value.state;
    }
    set state(value: 'wait-offer' | 'wait-answer' | 'online' | 'completed') {
        this._checkIsWritable();
        if (value === this._value.state) { return; }
        this._value.state = value;
        this.markDirty();
    }
    get offer(): string | null {
        let res = this._value.offer;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set offer(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.offer) { return; }
        this._value.offer = value;
        this.markDirty();
    }
    get answer(): string | null {
        let res = this._value.answer;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set answer(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.answer) { return; }
        this._value.answer = value;
        this.markDirty();
    }
    get ice1(): any {
        return this._value.ice1;
    }
    set ice1(value: any) {
        this._checkIsWritable();
        if (value === this._value.ice1) { return; }
        this._value.ice1 = value;
        this.markDirty();
    }
    get ice2(): any {
        return this._value.ice2;
    }
    set ice2(value: any) {
        this._checkIsWritable();
        if (value === this._value.ice2) { return; }
        this._value.ice2 = value;
        this.markDirty();
    }
}

export class ConferenceMediaStreamFactory extends FEntityFactory<ConferenceMediaStream> {
    static schema: FEntitySchema = {
        name: 'ConferenceMediaStream',
        editable: false,
        primaryKeys: [
            { name: 'id', type: 'number' },
        ],
        fields: [
            { name: 'cid', type: 'number' },
            { name: 'peer1', type: 'number' },
            { name: 'peer2', type: 'number' },
            { name: 'kind', type: 'enum', enumValues: ['direct', 'bridged'] },
            { name: 'state', type: 'enum', enumValues: ['wait-offer', 'wait-answer', 'online', 'completed'] },
            { name: 'offer', type: 'string' },
            { name: 'answer', type: 'string' },
            { name: 'ice1', type: 'json' },
            { name: 'ice2', type: 'json' },
        ],
        indexes: [
            { name: 'conference', type: 'range', fields: ['cid', 'createdAt'] },
        ],
    };

    private static validate(src: any) {
        validators.notNull('id', src.id);
        validators.isNumber('id', src.id);
        validators.notNull('cid', src.cid);
        validators.isNumber('cid', src.cid);
        validators.notNull('peer1', src.peer1);
        validators.isNumber('peer1', src.peer1);
        validators.isNumber('peer2', src.peer2);
        validators.notNull('kind', src.kind);
        validators.isEnum('kind', src.kind, ['direct', 'bridged']);
        validators.notNull('state', src.state);
        validators.isEnum('state', src.state, ['wait-offer', 'wait-answer', 'online', 'completed']);
        validators.isString('offer', src.offer);
        validators.isString('answer', src.answer);
        validators.notNull('ice1', src.ice1);
        validators.notNull('ice2', src.ice2);
    }

    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'conferenceMediaStream'),
            { enableVersioning: true, enableTimestamps: true, validator: ConferenceMediaStreamFactory.validate, hasLiveStreams: false },
            [new FEntityIndex('conference', ['cid', 'createdAt'], false, (src) => src.state !== 'completed')],
            'ConferenceMediaStream'
        );
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'id': rawId[0] };
    }
    async findById(ctx: Context, id: number) {
        return await this._findById(ctx, [id]);
    }
    async create(ctx: Context, id: number, shape: ConferenceMediaStreamShape) {
        return await this._create(ctx, [id], { id, ...shape });
    }
    watch(ctx: Context, id: number, cb: () => void) {
        return this._watch(ctx, [id], cb);
    }
    async allFromConferenceAfter(ctx: Context, cid: number, after: number) {
        return await this._findRangeAllAfter(ctx, ['__indexes', 'conference', cid], after);
    }
    async rangeFromConferenceAfter(ctx: Context, cid: number, after: number, limit: number, reversed?: boolean) {
        return await this._findRangeAfter(ctx, ['__indexes', 'conference', cid], after, limit, reversed);
    }
    async rangeFromConference(ctx: Context, cid: number, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'conference', cid], limit, reversed);
    }
    async rangeFromConferenceWithCursor(ctx: Context, cid: number, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'conference', cid], limit, after, reversed);
    }
    async allFromConference(ctx: Context, cid: number) {
        return await this._findAll(ctx, ['__indexes', 'conference', cid]);
    }
    createConferenceStream(ctx: Context, cid: number, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'conferenceMediaStream', '__indexes', 'conference', cid], limit, after); 
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new ConferenceMediaStream(ctx, this.connection, this.namespace, this.directory, [value.id], value, this.options, isNew, this.indexes, 'ConferenceMediaStream');
    }
}
export interface ConferenceConnectionShape {
    cid: number;
    state: 'wait-offer' | 'wait-answer' | 'online' | 'completed';
    offer?: string| null;
    answer?: string| null;
    ice1: any;
    ice2: any;
}

export class ConferenceConnection extends FEntity {
    readonly entityName: 'ConferenceConnection' = 'ConferenceConnection';
    get peer1(): number { return this._value.peer1; }
    get peer2(): number { return this._value.peer2; }
    get cid(): number {
        return this._value.cid;
    }
    set cid(value: number) {
        this._checkIsWritable();
        if (value === this._value.cid) { return; }
        this._value.cid = value;
        this.markDirty();
    }
    get state(): 'wait-offer' | 'wait-answer' | 'online' | 'completed' {
        return this._value.state;
    }
    set state(value: 'wait-offer' | 'wait-answer' | 'online' | 'completed') {
        this._checkIsWritable();
        if (value === this._value.state) { return; }
        this._value.state = value;
        this.markDirty();
    }
    get offer(): string | null {
        let res = this._value.offer;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set offer(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.offer) { return; }
        this._value.offer = value;
        this.markDirty();
    }
    get answer(): string | null {
        let res = this._value.answer;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set answer(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.answer) { return; }
        this._value.answer = value;
        this.markDirty();
    }
    get ice1(): any {
        return this._value.ice1;
    }
    set ice1(value: any) {
        this._checkIsWritable();
        if (value === this._value.ice1) { return; }
        this._value.ice1 = value;
        this.markDirty();
    }
    get ice2(): any {
        return this._value.ice2;
    }
    set ice2(value: any) {
        this._checkIsWritable();
        if (value === this._value.ice2) { return; }
        this._value.ice2 = value;
        this.markDirty();
    }
}

export class ConferenceConnectionFactory extends FEntityFactory<ConferenceConnection> {
    static schema: FEntitySchema = {
        name: 'ConferenceConnection',
        editable: false,
        primaryKeys: [
            { name: 'peer1', type: 'number' },
            { name: 'peer2', type: 'number' },
        ],
        fields: [
            { name: 'cid', type: 'number' },
            { name: 'state', type: 'enum', enumValues: ['wait-offer', 'wait-answer', 'online', 'completed'] },
            { name: 'offer', type: 'string' },
            { name: 'answer', type: 'string' },
            { name: 'ice1', type: 'json' },
            { name: 'ice2', type: 'json' },
        ],
        indexes: [
            { name: 'conference', type: 'range', fields: ['cid', 'createdAt'] },
        ],
    };

    private static validate(src: any) {
        validators.notNull('peer1', src.peer1);
        validators.isNumber('peer1', src.peer1);
        validators.notNull('peer2', src.peer2);
        validators.isNumber('peer2', src.peer2);
        validators.notNull('cid', src.cid);
        validators.isNumber('cid', src.cid);
        validators.notNull('state', src.state);
        validators.isEnum('state', src.state, ['wait-offer', 'wait-answer', 'online', 'completed']);
        validators.isString('offer', src.offer);
        validators.isString('answer', src.answer);
        validators.notNull('ice1', src.ice1);
        validators.notNull('ice2', src.ice2);
    }

    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'conferenceConnection'),
            { enableVersioning: true, enableTimestamps: true, validator: ConferenceConnectionFactory.validate, hasLiveStreams: false },
            [new FEntityIndex('conference', ['cid', 'createdAt'], false, (src) => src.state !== 'completed')],
            'ConferenceConnection'
        );
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 2) { throw Error('Invalid key length!'); }
        return { 'peer1': rawId[0], 'peer2': rawId[1] };
    }
    async findById(ctx: Context, peer1: number, peer2: number) {
        return await this._findById(ctx, [peer1, peer2]);
    }
    async create(ctx: Context, peer1: number, peer2: number, shape: ConferenceConnectionShape) {
        return await this._create(ctx, [peer1, peer2], { peer1, peer2, ...shape });
    }
    watch(ctx: Context, peer1: number, peer2: number, cb: () => void) {
        return this._watch(ctx, [peer1, peer2], cb);
    }
    async allFromConferenceAfter(ctx: Context, cid: number, after: number) {
        return await this._findRangeAllAfter(ctx, ['__indexes', 'conference', cid], after);
    }
    async rangeFromConferenceAfter(ctx: Context, cid: number, after: number, limit: number, reversed?: boolean) {
        return await this._findRangeAfter(ctx, ['__indexes', 'conference', cid], after, limit, reversed);
    }
    async rangeFromConference(ctx: Context, cid: number, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'conference', cid], limit, reversed);
    }
    async rangeFromConferenceWithCursor(ctx: Context, cid: number, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'conference', cid], limit, after, reversed);
    }
    async allFromConference(ctx: Context, cid: number) {
        return await this._findAll(ctx, ['__indexes', 'conference', cid]);
    }
    createConferenceStream(ctx: Context, cid: number, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'conferenceConnection', '__indexes', 'conference', cid], limit, after); 
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new ConferenceConnection(ctx, this.connection, this.namespace, this.directory, [value.peer1, value.peer2], value, this.options, isNew, this.indexes, 'ConferenceConnection');
    }
}
export interface UserEdgeShape {
}

export class UserEdge extends FEntity {
    readonly entityName: 'UserEdge' = 'UserEdge';
    get uid1(): number { return this._value.uid1; }
    get uid2(): number { return this._value.uid2; }
}

export class UserEdgeFactory extends FEntityFactory<UserEdge> {
    static schema: FEntitySchema = {
        name: 'UserEdge',
        editable: false,
        primaryKeys: [
            { name: 'uid1', type: 'number' },
            { name: 'uid2', type: 'number' },
        ],
        fields: [
        ],
        indexes: [
            { name: 'forward', type: 'range', fields: ['uid1', 'uid2'] },
            { name: 'reverse', type: 'range', fields: ['uid2', 'uid1'] },
        ],
    };

    private static validate(src: any) {
        validators.notNull('uid1', src.uid1);
        validators.isNumber('uid1', src.uid1);
        validators.notNull('uid2', src.uid2);
        validators.isNumber('uid2', src.uid2);
    }

    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'userEdge'),
            { enableVersioning: true, enableTimestamps: true, validator: UserEdgeFactory.validate, hasLiveStreams: false },
            [new FEntityIndex('forward', ['uid1', 'uid2'], false), new FEntityIndex('reverse', ['uid2', 'uid1'], false)],
            'UserEdge'
        );
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 2) { throw Error('Invalid key length!'); }
        return { 'uid1': rawId[0], 'uid2': rawId[1] };
    }
    async findById(ctx: Context, uid1: number, uid2: number) {
        return await this._findById(ctx, [uid1, uid2]);
    }
    async create(ctx: Context, uid1: number, uid2: number, shape: UserEdgeShape) {
        return await this._create(ctx, [uid1, uid2], { uid1, uid2, ...shape });
    }
    watch(ctx: Context, uid1: number, uid2: number, cb: () => void) {
        return this._watch(ctx, [uid1, uid2], cb);
    }
    async allFromForwardAfter(ctx: Context, uid1: number, after: number) {
        return await this._findRangeAllAfter(ctx, ['__indexes', 'forward', uid1], after);
    }
    async rangeFromForwardAfter(ctx: Context, uid1: number, after: number, limit: number, reversed?: boolean) {
        return await this._findRangeAfter(ctx, ['__indexes', 'forward', uid1], after, limit, reversed);
    }
    async rangeFromForward(ctx: Context, uid1: number, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'forward', uid1], limit, reversed);
    }
    async rangeFromForwardWithCursor(ctx: Context, uid1: number, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'forward', uid1], limit, after, reversed);
    }
    async allFromForward(ctx: Context, uid1: number) {
        return await this._findAll(ctx, ['__indexes', 'forward', uid1]);
    }
    createForwardStream(ctx: Context, uid1: number, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'userEdge', '__indexes', 'forward', uid1], limit, after); 
    }
    async allFromReverseAfter(ctx: Context, uid2: number, after: number) {
        return await this._findRangeAllAfter(ctx, ['__indexes', 'reverse', uid2], after);
    }
    async rangeFromReverseAfter(ctx: Context, uid2: number, after: number, limit: number, reversed?: boolean) {
        return await this._findRangeAfter(ctx, ['__indexes', 'reverse', uid2], after, limit, reversed);
    }
    async rangeFromReverse(ctx: Context, uid2: number, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'reverse', uid2], limit, reversed);
    }
    async rangeFromReverseWithCursor(ctx: Context, uid2: number, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'reverse', uid2], limit, after, reversed);
    }
    async allFromReverse(ctx: Context, uid2: number) {
        return await this._findAll(ctx, ['__indexes', 'reverse', uid2]);
    }
    createReverseStream(ctx: Context, uid2: number, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'userEdge', '__indexes', 'reverse', uid2], limit, after); 
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new UserEdge(ctx, this.connection, this.namespace, this.directory, [value.uid1, value.uid2], value, this.options, isNew, this.indexes, 'UserEdge');
    }
}
export interface UserInfluencerUserIndexShape {
    value: number;
}

export class UserInfluencerUserIndex extends FEntity {
    readonly entityName: 'UserInfluencerUserIndex' = 'UserInfluencerUserIndex';
    get uid(): number { return this._value.uid; }
    get value(): number {
        return this._value.value;
    }
    set value(value: number) {
        this._checkIsWritable();
        if (value === this._value.value) { return; }
        this._value.value = value;
        this.markDirty();
    }
}

export class UserInfluencerUserIndexFactory extends FEntityFactory<UserInfluencerUserIndex> {
    static schema: FEntitySchema = {
        name: 'UserInfluencerUserIndex',
        editable: false,
        primaryKeys: [
            { name: 'uid', type: 'number' },
        ],
        fields: [
            { name: 'value', type: 'number' },
        ],
        indexes: [
        ],
    };

    private static validate(src: any) {
        validators.notNull('uid', src.uid);
        validators.isNumber('uid', src.uid);
        validators.notNull('value', src.value);
        validators.isNumber('value', src.value);
    }

    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'userInfluencerUserIndex'),
            { enableVersioning: true, enableTimestamps: true, validator: UserInfluencerUserIndexFactory.validate, hasLiveStreams: false },
            [],
            'UserInfluencerUserIndex'
        );
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'uid': rawId[0] };
    }
    async findById(ctx: Context, uid: number) {
        return await this._findById(ctx, [uid]);
    }
    async create(ctx: Context, uid: number, shape: UserInfluencerUserIndexShape) {
        return await this._create(ctx, [uid], { uid, ...shape });
    }
    watch(ctx: Context, uid: number, cb: () => void) {
        return this._watch(ctx, [uid], cb);
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new UserInfluencerUserIndex(ctx, this.connection, this.namespace, this.directory, [value.uid], value, this.options, isNew, this.indexes, 'UserInfluencerUserIndex');
    }
}
export interface UserInfluencerIndexShape {
    value: number;
}

export class UserInfluencerIndex extends FEntity {
    readonly entityName: 'UserInfluencerIndex' = 'UserInfluencerIndex';
    get uid(): number { return this._value.uid; }
    get value(): number {
        return this._value.value;
    }
    set value(value: number) {
        this._checkIsWritable();
        if (value === this._value.value) { return; }
        this._value.value = value;
        this.markDirty();
    }
}

export class UserInfluencerIndexFactory extends FEntityFactory<UserInfluencerIndex> {
    static schema: FEntitySchema = {
        name: 'UserInfluencerIndex',
        editable: false,
        primaryKeys: [
            { name: 'uid', type: 'number' },
        ],
        fields: [
            { name: 'value', type: 'number' },
        ],
        indexes: [
        ],
    };

    private static validate(src: any) {
        validators.notNull('uid', src.uid);
        validators.isNumber('uid', src.uid);
        validators.notNull('value', src.value);
        validators.isNumber('value', src.value);
    }

    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'userInfluencerIndex'),
            { enableVersioning: true, enableTimestamps: true, validator: UserInfluencerIndexFactory.validate, hasLiveStreams: false },
            [],
            'UserInfluencerIndex'
        );
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'uid': rawId[0] };
    }
    async findById(ctx: Context, uid: number) {
        return await this._findById(ctx, [uid]);
    }
    async create(ctx: Context, uid: number, shape: UserInfluencerIndexShape) {
        return await this._create(ctx, [uid], { uid, ...shape });
    }
    watch(ctx: Context, uid: number, cb: () => void) {
        return this._watch(ctx, [uid], cb);
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new UserInfluencerIndex(ctx, this.connection, this.namespace, this.directory, [value.uid], value, this.options, isNew, this.indexes, 'UserInfluencerIndex');
    }
}
export interface FeedSubscriberShape {
    key: string;
}

export class FeedSubscriber extends FEntity {
    readonly entityName: 'FeedSubscriber' = 'FeedSubscriber';
    get id(): number { return this._value.id; }
    get key(): string {
        return this._value.key;
    }
    set key(value: string) {
        this._checkIsWritable();
        if (value === this._value.key) { return; }
        this._value.key = value;
        this.markDirty();
    }
}

export class FeedSubscriberFactory extends FEntityFactory<FeedSubscriber> {
    static schema: FEntitySchema = {
        name: 'FeedSubscriber',
        editable: false,
        primaryKeys: [
            { name: 'id', type: 'number' },
        ],
        fields: [
            { name: 'key', type: 'string' },
        ],
        indexes: [
            { name: 'key', type: 'unique', fields: ['key'] },
        ],
    };

    private static validate(src: any) {
        validators.notNull('id', src.id);
        validators.isNumber('id', src.id);
        validators.notNull('key', src.key);
        validators.isString('key', src.key);
    }

    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'feedSubscriber'),
            { enableVersioning: true, enableTimestamps: true, validator: FeedSubscriberFactory.validate, hasLiveStreams: false },
            [new FEntityIndex('key', ['key'], true)],
            'FeedSubscriber'
        );
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'id': rawId[0] };
    }
    async findById(ctx: Context, id: number) {
        return await this._findById(ctx, [id]);
    }
    async create(ctx: Context, id: number, shape: FeedSubscriberShape) {
        return await this._create(ctx, [id], { id, ...shape });
    }
    watch(ctx: Context, id: number, cb: () => void) {
        return this._watch(ctx, [id], cb);
    }
    async findFromKey(ctx: Context, key: string) {
        return await this._findFromIndex(ctx, ['__indexes', 'key', key]);
    }
    async rangeFromKey(ctx: Context, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'key'], limit, reversed);
    }
    async rangeFromKeyWithCursor(ctx: Context, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'key'], limit, after, reversed);
    }
    async allFromKey(ctx: Context, ) {
        return await this._findAll(ctx, ['__indexes', 'key']);
    }
    createKeyStream(ctx: Context, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'feedSubscriber', '__indexes', 'key'], limit, after); 
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new FeedSubscriber(ctx, this.connection, this.namespace, this.directory, [value.id], value, this.options, isNew, this.indexes, 'FeedSubscriber');
    }
}
export interface FeedSubscriptionShape {
    enabled: boolean;
}

export class FeedSubscription extends FEntity {
    readonly entityName: 'FeedSubscription' = 'FeedSubscription';
    get sid(): number { return this._value.sid; }
    get tid(): number { return this._value.tid; }
    get enabled(): boolean {
        return this._value.enabled;
    }
    set enabled(value: boolean) {
        this._checkIsWritable();
        if (value === this._value.enabled) { return; }
        this._value.enabled = value;
        this.markDirty();
    }
}

export class FeedSubscriptionFactory extends FEntityFactory<FeedSubscription> {
    static schema: FEntitySchema = {
        name: 'FeedSubscription',
        editable: false,
        primaryKeys: [
            { name: 'sid', type: 'number' },
            { name: 'tid', type: 'number' },
        ],
        fields: [
            { name: 'enabled', type: 'boolean' },
        ],
        indexes: [
            { name: 'subscriber', type: 'range', fields: ['sid', 'tid'] },
            { name: 'topic', type: 'range', fields: ['tid', 'sid'] },
        ],
    };

    private static validate(src: any) {
        validators.notNull('sid', src.sid);
        validators.isNumber('sid', src.sid);
        validators.notNull('tid', src.tid);
        validators.isNumber('tid', src.tid);
        validators.notNull('enabled', src.enabled);
        validators.isBoolean('enabled', src.enabled);
    }

    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'feedSubscription'),
            { enableVersioning: false, enableTimestamps: false, validator: FeedSubscriptionFactory.validate, hasLiveStreams: false },
            [new FEntityIndex('subscriber', ['sid', 'tid'], false, (state) => state.enabled), new FEntityIndex('topic', ['tid', 'sid'], false, (state) => state.enabled)],
            'FeedSubscription'
        );
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 2) { throw Error('Invalid key length!'); }
        return { 'sid': rawId[0], 'tid': rawId[1] };
    }
    async findById(ctx: Context, sid: number, tid: number) {
        return await this._findById(ctx, [sid, tid]);
    }
    async create(ctx: Context, sid: number, tid: number, shape: FeedSubscriptionShape) {
        return await this._create(ctx, [sid, tid], { sid, tid, ...shape });
    }
    watch(ctx: Context, sid: number, tid: number, cb: () => void) {
        return this._watch(ctx, [sid, tid], cb);
    }
    async allFromSubscriberAfter(ctx: Context, sid: number, after: number) {
        return await this._findRangeAllAfter(ctx, ['__indexes', 'subscriber', sid], after);
    }
    async rangeFromSubscriberAfter(ctx: Context, sid: number, after: number, limit: number, reversed?: boolean) {
        return await this._findRangeAfter(ctx, ['__indexes', 'subscriber', sid], after, limit, reversed);
    }
    async rangeFromSubscriber(ctx: Context, sid: number, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'subscriber', sid], limit, reversed);
    }
    async rangeFromSubscriberWithCursor(ctx: Context, sid: number, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'subscriber', sid], limit, after, reversed);
    }
    async allFromSubscriber(ctx: Context, sid: number) {
        return await this._findAll(ctx, ['__indexes', 'subscriber', sid]);
    }
    createSubscriberStream(ctx: Context, sid: number, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'feedSubscription', '__indexes', 'subscriber', sid], limit, after); 
    }
    async allFromTopicAfter(ctx: Context, tid: number, after: number) {
        return await this._findRangeAllAfter(ctx, ['__indexes', 'topic', tid], after);
    }
    async rangeFromTopicAfter(ctx: Context, tid: number, after: number, limit: number, reversed?: boolean) {
        return await this._findRangeAfter(ctx, ['__indexes', 'topic', tid], after, limit, reversed);
    }
    async rangeFromTopic(ctx: Context, tid: number, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'topic', tid], limit, reversed);
    }
    async rangeFromTopicWithCursor(ctx: Context, tid: number, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'topic', tid], limit, after, reversed);
    }
    async allFromTopic(ctx: Context, tid: number) {
        return await this._findAll(ctx, ['__indexes', 'topic', tid]);
    }
    createTopicStream(ctx: Context, tid: number, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'feedSubscription', '__indexes', 'topic', tid], limit, after); 
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new FeedSubscription(ctx, this.connection, this.namespace, this.directory, [value.sid, value.tid], value, this.options, isNew, this.indexes, 'FeedSubscription');
    }
}
export interface FeedTopicShape {
    key: string;
}

export class FeedTopic extends FEntity {
    readonly entityName: 'FeedTopic' = 'FeedTopic';
    get id(): number { return this._value.id; }
    get key(): string {
        return this._value.key;
    }
    set key(value: string) {
        this._checkIsWritable();
        if (value === this._value.key) { return; }
        this._value.key = value;
        this.markDirty();
    }
}

export class FeedTopicFactory extends FEntityFactory<FeedTopic> {
    static schema: FEntitySchema = {
        name: 'FeedTopic',
        editable: false,
        primaryKeys: [
            { name: 'id', type: 'number' },
        ],
        fields: [
            { name: 'key', type: 'string' },
        ],
        indexes: [
            { name: 'key', type: 'unique', fields: ['key'] },
        ],
    };

    private static validate(src: any) {
        validators.notNull('id', src.id);
        validators.isNumber('id', src.id);
        validators.notNull('key', src.key);
        validators.isString('key', src.key);
    }

    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'feedTopic'),
            { enableVersioning: true, enableTimestamps: true, validator: FeedTopicFactory.validate, hasLiveStreams: false },
            [new FEntityIndex('key', ['key'], true)],
            'FeedTopic'
        );
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'id': rawId[0] };
    }
    async findById(ctx: Context, id: number) {
        return await this._findById(ctx, [id]);
    }
    async create(ctx: Context, id: number, shape: FeedTopicShape) {
        return await this._create(ctx, [id], { id, ...shape });
    }
    watch(ctx: Context, id: number, cb: () => void) {
        return this._watch(ctx, [id], cb);
    }
    async findFromKey(ctx: Context, key: string) {
        return await this._findFromIndex(ctx, ['__indexes', 'key', key]);
    }
    async rangeFromKey(ctx: Context, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'key'], limit, reversed);
    }
    async rangeFromKeyWithCursor(ctx: Context, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'key'], limit, after, reversed);
    }
    async allFromKey(ctx: Context, ) {
        return await this._findAll(ctx, ['__indexes', 'key']);
    }
    createKeyStream(ctx: Context, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'feedTopic', '__indexes', 'key'], limit, after); 
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new FeedTopic(ctx, this.connection, this.namespace, this.directory, [value.id], value, this.options, isNew, this.indexes, 'FeedTopic');
    }
}
export interface FeedEventShape {
    tid: number;
    type: string;
    content: any;
}

export class FeedEvent extends FEntity {
    readonly entityName: 'FeedEvent' = 'FeedEvent';
    get id(): number { return this._value.id; }
    get tid(): number {
        return this._value.tid;
    }
    set tid(value: number) {
        this._checkIsWritable();
        if (value === this._value.tid) { return; }
        this._value.tid = value;
        this.markDirty();
    }
    get type(): string {
        return this._value.type;
    }
    set type(value: string) {
        this._checkIsWritable();
        if (value === this._value.type) { return; }
        this._value.type = value;
        this.markDirty();
    }
    get content(): any {
        return this._value.content;
    }
    set content(value: any) {
        this._checkIsWritable();
        if (value === this._value.content) { return; }
        this._value.content = value;
        this.markDirty();
    }
}

export class FeedEventFactory extends FEntityFactory<FeedEvent> {
    static schema: FEntitySchema = {
        name: 'FeedEvent',
        editable: false,
        primaryKeys: [
            { name: 'id', type: 'number' },
        ],
        fields: [
            { name: 'tid', type: 'number' },
            { name: 'type', type: 'string' },
            { name: 'content', type: 'json' },
        ],
        indexes: [
            { name: 'topic', type: 'range', fields: ['tid', 'createdAt'] },
            { name: 'updated', type: 'range', fields: ['updatedAt'] },
        ],
    };

    private static validate(src: any) {
        validators.notNull('id', src.id);
        validators.isNumber('id', src.id);
        validators.notNull('tid', src.tid);
        validators.isNumber('tid', src.tid);
        validators.notNull('type', src.type);
        validators.isString('type', src.type);
        validators.notNull('content', src.content);
    }

    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'feedEvent'),
            { enableVersioning: true, enableTimestamps: true, validator: FeedEventFactory.validate, hasLiveStreams: false },
            [new FEntityIndex('topic', ['tid', 'createdAt'], false), new FEntityIndex('updated', ['updatedAt'], false)],
            'FeedEvent'
        );
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'id': rawId[0] };
    }
    async findById(ctx: Context, id: number) {
        return await this._findById(ctx, [id]);
    }
    async create(ctx: Context, id: number, shape: FeedEventShape) {
        return await this._create(ctx, [id], { id, ...shape });
    }
    watch(ctx: Context, id: number, cb: () => void) {
        return this._watch(ctx, [id], cb);
    }
    async allFromTopicAfter(ctx: Context, tid: number, after: number) {
        return await this._findRangeAllAfter(ctx, ['__indexes', 'topic', tid], after);
    }
    async rangeFromTopicAfter(ctx: Context, tid: number, after: number, limit: number, reversed?: boolean) {
        return await this._findRangeAfter(ctx, ['__indexes', 'topic', tid], after, limit, reversed);
    }
    async rangeFromTopic(ctx: Context, tid: number, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'topic', tid], limit, reversed);
    }
    async rangeFromTopicWithCursor(ctx: Context, tid: number, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'topic', tid], limit, after, reversed);
    }
    async allFromTopic(ctx: Context, tid: number) {
        return await this._findAll(ctx, ['__indexes', 'topic', tid]);
    }
    createTopicStream(ctx: Context, tid: number, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'feedEvent', '__indexes', 'topic', tid], limit, after); 
    }
    async rangeFromUpdated(ctx: Context, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'updated'], limit, reversed);
    }
    async rangeFromUpdatedWithCursor(ctx: Context, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'updated'], limit, after, reversed);
    }
    async allFromUpdated(ctx: Context, ) {
        return await this._findAll(ctx, ['__indexes', 'updated']);
    }
    createUpdatedStream(ctx: Context, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'feedEvent', '__indexes', 'updated'], limit, after); 
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new FeedEvent(ctx, this.connection, this.namespace, this.directory, [value.id], value, this.options, isNew, this.indexes, 'FeedEvent');
    }
}
export interface AppHookShape {
    key: string;
}

export class AppHook extends FEntity {
    readonly entityName: 'AppHook' = 'AppHook';
    get appId(): number { return this._value.appId; }
    get chatId(): number { return this._value.chatId; }
    get key(): string {
        return this._value.key;
    }
    set key(value: string) {
        this._checkIsWritable();
        if (value === this._value.key) { return; }
        this._value.key = value;
        this.markDirty();
    }
}

export class AppHookFactory extends FEntityFactory<AppHook> {
    static schema: FEntitySchema = {
        name: 'AppHook',
        editable: false,
        primaryKeys: [
            { name: 'appId', type: 'number' },
            { name: 'chatId', type: 'number' },
        ],
        fields: [
            { name: 'key', type: 'string' },
        ],
        indexes: [
            { name: 'key', type: 'unique', fields: ['key'] },
        ],
    };

    private static validate(src: any) {
        validators.notNull('appId', src.appId);
        validators.isNumber('appId', src.appId);
        validators.notNull('chatId', src.chatId);
        validators.isNumber('chatId', src.chatId);
        validators.notNull('key', src.key);
        validators.isString('key', src.key);
    }

    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'appHook'),
            { enableVersioning: true, enableTimestamps: true, validator: AppHookFactory.validate, hasLiveStreams: false },
            [new FEntityIndex('key', ['key'], true)],
            'AppHook'
        );
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 2) { throw Error('Invalid key length!'); }
        return { 'appId': rawId[0], 'chatId': rawId[1] };
    }
    async findById(ctx: Context, appId: number, chatId: number) {
        return await this._findById(ctx, [appId, chatId]);
    }
    async create(ctx: Context, appId: number, chatId: number, shape: AppHookShape) {
        return await this._create(ctx, [appId, chatId], { appId, chatId, ...shape });
    }
    watch(ctx: Context, appId: number, chatId: number, cb: () => void) {
        return this._watch(ctx, [appId, chatId], cb);
    }
    async findFromKey(ctx: Context, key: string) {
        return await this._findFromIndex(ctx, ['__indexes', 'key', key]);
    }
    async rangeFromKey(ctx: Context, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, ['__indexes', 'key'], limit, reversed);
    }
    async rangeFromKeyWithCursor(ctx: Context, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, ['__indexes', 'key'], limit, after, reversed);
    }
    async allFromKey(ctx: Context, ) {
        return await this._findAll(ctx, ['__indexes', 'key']);
    }
    createKeyStream(ctx: Context, limit: number, after?: string) {
        return this._createStream(ctx, ['entity', 'appHook', '__indexes', 'key'], limit, after); 
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new AppHook(ctx, this.connection, this.namespace, this.directory, [value.appId, value.chatId], value, this.options, isNew, this.indexes, 'AppHook');
    }
}

export interface AllEntities {
    readonly connection: FConnection;
    readonly Environment: EnvironmentFactory;
    readonly EnvironmentVariable: EnvironmentVariableFactory;
    readonly Online: OnlineFactory;
    readonly Presence: PresenceFactory;
    readonly AuthToken: AuthTokenFactory;
    readonly ServiceCache: ServiceCacheFactory;
    readonly Lock: LockFactory;
    readonly Task: TaskFactory;
    readonly PushFirebase: PushFirebaseFactory;
    readonly PushApple: PushAppleFactory;
    readonly PushWeb: PushWebFactory;
    readonly PushSafari: PushSafariFactory;
    readonly UserProfilePrefil: UserProfilePrefilFactory;
    readonly User: UserFactory;
    readonly UserProfile: UserProfileFactory;
    readonly UserIndexingQueue: UserIndexingQueueFactory;
    readonly Organization: OrganizationFactory;
    readonly OrganizationProfile: OrganizationProfileFactory;
    readonly OrganizationEditorial: OrganizationEditorialFactory;
    readonly OrganizationIndexingQueue: OrganizationIndexingQueueFactory;
    readonly OrganizationMember: OrganizationMemberFactory;
    readonly FeatureFlag: FeatureFlagFactory;
    readonly OrganizationFeatures: OrganizationFeaturesFactory;
    readonly ReaderState: ReaderStateFactory;
    readonly SuperAdmin: SuperAdminFactory;
    readonly UserSettings: UserSettingsFactory;
    readonly ShortnameReservation: ShortnameReservationFactory;
    readonly AuthCodeSession: AuthCodeSessionFactory;
    readonly Conversation: ConversationFactory;
    readonly ConversationPrivate: ConversationPrivateFactory;
    readonly ConversationOrganization: ConversationOrganizationFactory;
    readonly ConversationRoom: ConversationRoomFactory;
    readonly RoomProfile: RoomProfileFactory;
    readonly RoomParticipant: RoomParticipantFactory;
    readonly ConversationReceiver: ConversationReceiverFactory;
    readonly Sequence: SequenceFactory;
    readonly Message: MessageFactory;
    readonly ConversationSeq: ConversationSeqFactory;
    readonly ConversationEvent: ConversationEventFactory;
    readonly UserDialog: UserDialogFactory;
    readonly UserDialogHandledMessage: UserDialogHandledMessageFactory;
    readonly UserDialogSettings: UserDialogSettingsFactory;
    readonly UserDialogEvent: UserDialogEventFactory;
    readonly UserMessagingState: UserMessagingStateFactory;
    readonly UserNotificationsState: UserNotificationsStateFactory;
    readonly HyperLog: HyperLogFactory;
    readonly MessageDraft: MessageDraftFactory;
    readonly ChannelInvitation: ChannelInvitationFactory;
    readonly ChannelLink: ChannelLinkFactory;
    readonly AppInviteLink: AppInviteLinkFactory;
    readonly SampleEntity: SampleEntityFactory;
    readonly OrganizationPublicInviteLink: OrganizationPublicInviteLinkFactory;
    readonly OrganizationInviteLink: OrganizationInviteLinkFactory;
    readonly ConferenceRoom: ConferenceRoomFactory;
    readonly ConferencePeer: ConferencePeerFactory;
    readonly ConferenceMediaStream: ConferenceMediaStreamFactory;
    readonly ConferenceConnection: ConferenceConnectionFactory;
    readonly UserEdge: UserEdgeFactory;
    readonly UserInfluencerUserIndex: UserInfluencerUserIndexFactory;
    readonly UserInfluencerIndex: UserInfluencerIndexFactory;
    readonly FeedSubscriber: FeedSubscriberFactory;
    readonly FeedSubscription: FeedSubscriptionFactory;
    readonly FeedTopic: FeedTopicFactory;
    readonly FeedEvent: FeedEventFactory;
    readonly AppHook: AppHookFactory;
}
export class AllEntitiesDirect extends FDBInstance implements AllEntities {
    static readonly schema: FEntitySchema[] = [
        EnvironmentFactory.schema,
        EnvironmentVariableFactory.schema,
        OnlineFactory.schema,
        PresenceFactory.schema,
        AuthTokenFactory.schema,
        ServiceCacheFactory.schema,
        LockFactory.schema,
        TaskFactory.schema,
        PushFirebaseFactory.schema,
        PushAppleFactory.schema,
        PushWebFactory.schema,
        PushSafariFactory.schema,
        UserProfilePrefilFactory.schema,
        UserFactory.schema,
        UserProfileFactory.schema,
        UserIndexingQueueFactory.schema,
        OrganizationFactory.schema,
        OrganizationProfileFactory.schema,
        OrganizationEditorialFactory.schema,
        OrganizationIndexingQueueFactory.schema,
        OrganizationMemberFactory.schema,
        FeatureFlagFactory.schema,
        OrganizationFeaturesFactory.schema,
        ReaderStateFactory.schema,
        SuperAdminFactory.schema,
        UserSettingsFactory.schema,
        ShortnameReservationFactory.schema,
        AuthCodeSessionFactory.schema,
        ConversationFactory.schema,
        ConversationPrivateFactory.schema,
        ConversationOrganizationFactory.schema,
        ConversationRoomFactory.schema,
        RoomProfileFactory.schema,
        RoomParticipantFactory.schema,
        ConversationReceiverFactory.schema,
        SequenceFactory.schema,
        MessageFactory.schema,
        ConversationSeqFactory.schema,
        ConversationEventFactory.schema,
        UserDialogFactory.schema,
        UserDialogHandledMessageFactory.schema,
        UserDialogSettingsFactory.schema,
        UserDialogEventFactory.schema,
        UserMessagingStateFactory.schema,
        UserNotificationsStateFactory.schema,
        HyperLogFactory.schema,
        MessageDraftFactory.schema,
        ChannelInvitationFactory.schema,
        ChannelLinkFactory.schema,
        AppInviteLinkFactory.schema,
        SampleEntityFactory.schema,
        OrganizationPublicInviteLinkFactory.schema,
        OrganizationInviteLinkFactory.schema,
        ConferenceRoomFactory.schema,
        ConferencePeerFactory.schema,
        ConferenceMediaStreamFactory.schema,
        ConferenceConnectionFactory.schema,
        UserEdgeFactory.schema,
        UserInfluencerUserIndexFactory.schema,
        UserInfluencerIndexFactory.schema,
        FeedSubscriberFactory.schema,
        FeedSubscriptionFactory.schema,
        FeedTopicFactory.schema,
        FeedEventFactory.schema,
        AppHookFactory.schema,
    ];
    allEntities: FEntityFactory<FEntity>[] = [];
    Environment: EnvironmentFactory;
    EnvironmentVariable: EnvironmentVariableFactory;
    Online: OnlineFactory;
    Presence: PresenceFactory;
    AuthToken: AuthTokenFactory;
    ServiceCache: ServiceCacheFactory;
    Lock: LockFactory;
    Task: TaskFactory;
    PushFirebase: PushFirebaseFactory;
    PushApple: PushAppleFactory;
    PushWeb: PushWebFactory;
    PushSafari: PushSafariFactory;
    UserProfilePrefil: UserProfilePrefilFactory;
    User: UserFactory;
    UserProfile: UserProfileFactory;
    UserIndexingQueue: UserIndexingQueueFactory;
    Organization: OrganizationFactory;
    OrganizationProfile: OrganizationProfileFactory;
    OrganizationEditorial: OrganizationEditorialFactory;
    OrganizationIndexingQueue: OrganizationIndexingQueueFactory;
    OrganizationMember: OrganizationMemberFactory;
    FeatureFlag: FeatureFlagFactory;
    OrganizationFeatures: OrganizationFeaturesFactory;
    ReaderState: ReaderStateFactory;
    SuperAdmin: SuperAdminFactory;
    UserSettings: UserSettingsFactory;
    ShortnameReservation: ShortnameReservationFactory;
    AuthCodeSession: AuthCodeSessionFactory;
    Conversation: ConversationFactory;
    ConversationPrivate: ConversationPrivateFactory;
    ConversationOrganization: ConversationOrganizationFactory;
    ConversationRoom: ConversationRoomFactory;
    RoomProfile: RoomProfileFactory;
    RoomParticipant: RoomParticipantFactory;
    ConversationReceiver: ConversationReceiverFactory;
    Sequence: SequenceFactory;
    Message: MessageFactory;
    ConversationSeq: ConversationSeqFactory;
    ConversationEvent: ConversationEventFactory;
    UserDialog: UserDialogFactory;
    UserDialogHandledMessage: UserDialogHandledMessageFactory;
    UserDialogSettings: UserDialogSettingsFactory;
    UserDialogEvent: UserDialogEventFactory;
    UserMessagingState: UserMessagingStateFactory;
    UserNotificationsState: UserNotificationsStateFactory;
    HyperLog: HyperLogFactory;
    MessageDraft: MessageDraftFactory;
    ChannelInvitation: ChannelInvitationFactory;
    ChannelLink: ChannelLinkFactory;
    AppInviteLink: AppInviteLinkFactory;
    SampleEntity: SampleEntityFactory;
    OrganizationPublicInviteLink: OrganizationPublicInviteLinkFactory;
    OrganizationInviteLink: OrganizationInviteLinkFactory;
    ConferenceRoom: ConferenceRoomFactory;
    ConferencePeer: ConferencePeerFactory;
    ConferenceMediaStream: ConferenceMediaStreamFactory;
    ConferenceConnection: ConferenceConnectionFactory;
    UserEdge: UserEdgeFactory;
    UserInfluencerUserIndex: UserInfluencerUserIndexFactory;
    UserInfluencerIndex: UserInfluencerIndexFactory;
    FeedSubscriber: FeedSubscriberFactory;
    FeedSubscription: FeedSubscriptionFactory;
    FeedTopic: FeedTopicFactory;
    FeedEvent: FeedEventFactory;
    AppHook: AppHookFactory;

    constructor(connection: FConnection) {
        super(connection);
        this.Environment = new EnvironmentFactory(connection);
        this.allEntities.push(this.Environment);
        this.EnvironmentVariable = new EnvironmentVariableFactory(connection);
        this.allEntities.push(this.EnvironmentVariable);
        this.Online = new OnlineFactory(connection);
        this.allEntities.push(this.Online);
        this.Presence = new PresenceFactory(connection);
        this.allEntities.push(this.Presence);
        this.AuthToken = new AuthTokenFactory(connection);
        this.allEntities.push(this.AuthToken);
        this.ServiceCache = new ServiceCacheFactory(connection);
        this.allEntities.push(this.ServiceCache);
        this.Lock = new LockFactory(connection);
        this.allEntities.push(this.Lock);
        this.Task = new TaskFactory(connection);
        this.allEntities.push(this.Task);
        this.PushFirebase = new PushFirebaseFactory(connection);
        this.allEntities.push(this.PushFirebase);
        this.PushApple = new PushAppleFactory(connection);
        this.allEntities.push(this.PushApple);
        this.PushWeb = new PushWebFactory(connection);
        this.allEntities.push(this.PushWeb);
        this.PushSafari = new PushSafariFactory(connection);
        this.allEntities.push(this.PushSafari);
        this.UserProfilePrefil = new UserProfilePrefilFactory(connection);
        this.allEntities.push(this.UserProfilePrefil);
        this.User = new UserFactory(connection);
        this.allEntities.push(this.User);
        this.UserProfile = new UserProfileFactory(connection);
        this.allEntities.push(this.UserProfile);
        this.UserIndexingQueue = new UserIndexingQueueFactory(connection);
        this.allEntities.push(this.UserIndexingQueue);
        this.Organization = new OrganizationFactory(connection);
        this.allEntities.push(this.Organization);
        this.OrganizationProfile = new OrganizationProfileFactory(connection);
        this.allEntities.push(this.OrganizationProfile);
        this.OrganizationEditorial = new OrganizationEditorialFactory(connection);
        this.allEntities.push(this.OrganizationEditorial);
        this.OrganizationIndexingQueue = new OrganizationIndexingQueueFactory(connection);
        this.allEntities.push(this.OrganizationIndexingQueue);
        this.OrganizationMember = new OrganizationMemberFactory(connection);
        this.allEntities.push(this.OrganizationMember);
        this.FeatureFlag = new FeatureFlagFactory(connection);
        this.allEntities.push(this.FeatureFlag);
        this.OrganizationFeatures = new OrganizationFeaturesFactory(connection);
        this.allEntities.push(this.OrganizationFeatures);
        this.ReaderState = new ReaderStateFactory(connection);
        this.allEntities.push(this.ReaderState);
        this.SuperAdmin = new SuperAdminFactory(connection);
        this.allEntities.push(this.SuperAdmin);
        this.UserSettings = new UserSettingsFactory(connection);
        this.allEntities.push(this.UserSettings);
        this.ShortnameReservation = new ShortnameReservationFactory(connection);
        this.allEntities.push(this.ShortnameReservation);
        this.AuthCodeSession = new AuthCodeSessionFactory(connection);
        this.allEntities.push(this.AuthCodeSession);
        this.Conversation = new ConversationFactory(connection);
        this.allEntities.push(this.Conversation);
        this.ConversationPrivate = new ConversationPrivateFactory(connection);
        this.allEntities.push(this.ConversationPrivate);
        this.ConversationOrganization = new ConversationOrganizationFactory(connection);
        this.allEntities.push(this.ConversationOrganization);
        this.ConversationRoom = new ConversationRoomFactory(connection);
        this.allEntities.push(this.ConversationRoom);
        this.RoomProfile = new RoomProfileFactory(connection);
        this.allEntities.push(this.RoomProfile);
        this.RoomParticipant = new RoomParticipantFactory(connection);
        this.allEntities.push(this.RoomParticipant);
        this.ConversationReceiver = new ConversationReceiverFactory(connection);
        this.allEntities.push(this.ConversationReceiver);
        this.Sequence = new SequenceFactory(connection);
        this.allEntities.push(this.Sequence);
        this.Message = new MessageFactory(connection);
        this.allEntities.push(this.Message);
        this.ConversationSeq = new ConversationSeqFactory(connection);
        this.allEntities.push(this.ConversationSeq);
        this.ConversationEvent = new ConversationEventFactory(connection);
        this.allEntities.push(this.ConversationEvent);
        this.UserDialog = new UserDialogFactory(connection);
        this.allEntities.push(this.UserDialog);
        this.UserDialogHandledMessage = new UserDialogHandledMessageFactory(connection);
        this.allEntities.push(this.UserDialogHandledMessage);
        this.UserDialogSettings = new UserDialogSettingsFactory(connection);
        this.allEntities.push(this.UserDialogSettings);
        this.UserDialogEvent = new UserDialogEventFactory(connection);
        this.allEntities.push(this.UserDialogEvent);
        this.UserMessagingState = new UserMessagingStateFactory(connection);
        this.allEntities.push(this.UserMessagingState);
        this.UserNotificationsState = new UserNotificationsStateFactory(connection);
        this.allEntities.push(this.UserNotificationsState);
        this.HyperLog = new HyperLogFactory(connection);
        this.allEntities.push(this.HyperLog);
        this.MessageDraft = new MessageDraftFactory(connection);
        this.allEntities.push(this.MessageDraft);
        this.ChannelInvitation = new ChannelInvitationFactory(connection);
        this.allEntities.push(this.ChannelInvitation);
        this.ChannelLink = new ChannelLinkFactory(connection);
        this.allEntities.push(this.ChannelLink);
        this.AppInviteLink = new AppInviteLinkFactory(connection);
        this.allEntities.push(this.AppInviteLink);
        this.SampleEntity = new SampleEntityFactory(connection);
        this.allEntities.push(this.SampleEntity);
        this.OrganizationPublicInviteLink = new OrganizationPublicInviteLinkFactory(connection);
        this.allEntities.push(this.OrganizationPublicInviteLink);
        this.OrganizationInviteLink = new OrganizationInviteLinkFactory(connection);
        this.allEntities.push(this.OrganizationInviteLink);
        this.ConferenceRoom = new ConferenceRoomFactory(connection);
        this.allEntities.push(this.ConferenceRoom);
        this.ConferencePeer = new ConferencePeerFactory(connection);
        this.allEntities.push(this.ConferencePeer);
        this.ConferenceMediaStream = new ConferenceMediaStreamFactory(connection);
        this.allEntities.push(this.ConferenceMediaStream);
        this.ConferenceConnection = new ConferenceConnectionFactory(connection);
        this.allEntities.push(this.ConferenceConnection);
        this.UserEdge = new UserEdgeFactory(connection);
        this.allEntities.push(this.UserEdge);
        this.UserInfluencerUserIndex = new UserInfluencerUserIndexFactory(connection);
        this.allEntities.push(this.UserInfluencerUserIndex);
        this.UserInfluencerIndex = new UserInfluencerIndexFactory(connection);
        this.allEntities.push(this.UserInfluencerIndex);
        this.FeedSubscriber = new FeedSubscriberFactory(connection);
        this.allEntities.push(this.FeedSubscriber);
        this.FeedSubscription = new FeedSubscriptionFactory(connection);
        this.allEntities.push(this.FeedSubscription);
        this.FeedTopic = new FeedTopicFactory(connection);
        this.allEntities.push(this.FeedTopic);
        this.FeedEvent = new FeedEventFactory(connection);
        this.allEntities.push(this.FeedEvent);
        this.AppHook = new AppHookFactory(connection);
        this.allEntities.push(this.AppHook);
    }
}
export class AllEntitiesProxy implements AllEntities {
    get connection(): FConnection {
        return this.resolver().connection;
    }
    get Environment(): EnvironmentFactory {
        return this.resolver().Environment;
    }
    get EnvironmentVariable(): EnvironmentVariableFactory {
        return this.resolver().EnvironmentVariable;
    }
    get Online(): OnlineFactory {
        return this.resolver().Online;
    }
    get Presence(): PresenceFactory {
        return this.resolver().Presence;
    }
    get AuthToken(): AuthTokenFactory {
        return this.resolver().AuthToken;
    }
    get ServiceCache(): ServiceCacheFactory {
        return this.resolver().ServiceCache;
    }
    get Lock(): LockFactory {
        return this.resolver().Lock;
    }
    get Task(): TaskFactory {
        return this.resolver().Task;
    }
    get PushFirebase(): PushFirebaseFactory {
        return this.resolver().PushFirebase;
    }
    get PushApple(): PushAppleFactory {
        return this.resolver().PushApple;
    }
    get PushWeb(): PushWebFactory {
        return this.resolver().PushWeb;
    }
    get PushSafari(): PushSafariFactory {
        return this.resolver().PushSafari;
    }
    get UserProfilePrefil(): UserProfilePrefilFactory {
        return this.resolver().UserProfilePrefil;
    }
    get User(): UserFactory {
        return this.resolver().User;
    }
    get UserProfile(): UserProfileFactory {
        return this.resolver().UserProfile;
    }
    get UserIndexingQueue(): UserIndexingQueueFactory {
        return this.resolver().UserIndexingQueue;
    }
    get Organization(): OrganizationFactory {
        return this.resolver().Organization;
    }
    get OrganizationProfile(): OrganizationProfileFactory {
        return this.resolver().OrganizationProfile;
    }
    get OrganizationEditorial(): OrganizationEditorialFactory {
        return this.resolver().OrganizationEditorial;
    }
    get OrganizationIndexingQueue(): OrganizationIndexingQueueFactory {
        return this.resolver().OrganizationIndexingQueue;
    }
    get OrganizationMember(): OrganizationMemberFactory {
        return this.resolver().OrganizationMember;
    }
    get FeatureFlag(): FeatureFlagFactory {
        return this.resolver().FeatureFlag;
    }
    get OrganizationFeatures(): OrganizationFeaturesFactory {
        return this.resolver().OrganizationFeatures;
    }
    get ReaderState(): ReaderStateFactory {
        return this.resolver().ReaderState;
    }
    get SuperAdmin(): SuperAdminFactory {
        return this.resolver().SuperAdmin;
    }
    get UserSettings(): UserSettingsFactory {
        return this.resolver().UserSettings;
    }
    get ShortnameReservation(): ShortnameReservationFactory {
        return this.resolver().ShortnameReservation;
    }
    get AuthCodeSession(): AuthCodeSessionFactory {
        return this.resolver().AuthCodeSession;
    }
    get Conversation(): ConversationFactory {
        return this.resolver().Conversation;
    }
    get ConversationPrivate(): ConversationPrivateFactory {
        return this.resolver().ConversationPrivate;
    }
    get ConversationOrganization(): ConversationOrganizationFactory {
        return this.resolver().ConversationOrganization;
    }
    get ConversationRoom(): ConversationRoomFactory {
        return this.resolver().ConversationRoom;
    }
    get RoomProfile(): RoomProfileFactory {
        return this.resolver().RoomProfile;
    }
    get RoomParticipant(): RoomParticipantFactory {
        return this.resolver().RoomParticipant;
    }
    get ConversationReceiver(): ConversationReceiverFactory {
        return this.resolver().ConversationReceiver;
    }
    get Sequence(): SequenceFactory {
        return this.resolver().Sequence;
    }
    get Message(): MessageFactory {
        return this.resolver().Message;
    }
    get ConversationSeq(): ConversationSeqFactory {
        return this.resolver().ConversationSeq;
    }
    get ConversationEvent(): ConversationEventFactory {
        return this.resolver().ConversationEvent;
    }
    get UserDialog(): UserDialogFactory {
        return this.resolver().UserDialog;
    }
    get UserDialogHandledMessage(): UserDialogHandledMessageFactory {
        return this.resolver().UserDialogHandledMessage;
    }
    get UserDialogSettings(): UserDialogSettingsFactory {
        return this.resolver().UserDialogSettings;
    }
    get UserDialogEvent(): UserDialogEventFactory {
        return this.resolver().UserDialogEvent;
    }
    get UserMessagingState(): UserMessagingStateFactory {
        return this.resolver().UserMessagingState;
    }
    get UserNotificationsState(): UserNotificationsStateFactory {
        return this.resolver().UserNotificationsState;
    }
    get HyperLog(): HyperLogFactory {
        return this.resolver().HyperLog;
    }
    get MessageDraft(): MessageDraftFactory {
        return this.resolver().MessageDraft;
    }
    get ChannelInvitation(): ChannelInvitationFactory {
        return this.resolver().ChannelInvitation;
    }
    get ChannelLink(): ChannelLinkFactory {
        return this.resolver().ChannelLink;
    }
    get AppInviteLink(): AppInviteLinkFactory {
        return this.resolver().AppInviteLink;
    }
    get SampleEntity(): SampleEntityFactory {
        return this.resolver().SampleEntity;
    }
    get OrganizationPublicInviteLink(): OrganizationPublicInviteLinkFactory {
        return this.resolver().OrganizationPublicInviteLink;
    }
    get OrganizationInviteLink(): OrganizationInviteLinkFactory {
        return this.resolver().OrganizationInviteLink;
    }
    get ConferenceRoom(): ConferenceRoomFactory {
        return this.resolver().ConferenceRoom;
    }
    get ConferencePeer(): ConferencePeerFactory {
        return this.resolver().ConferencePeer;
    }
    get ConferenceMediaStream(): ConferenceMediaStreamFactory {
        return this.resolver().ConferenceMediaStream;
    }
    get ConferenceConnection(): ConferenceConnectionFactory {
        return this.resolver().ConferenceConnection;
    }
    get UserEdge(): UserEdgeFactory {
        return this.resolver().UserEdge;
    }
    get UserInfluencerUserIndex(): UserInfluencerUserIndexFactory {
        return this.resolver().UserInfluencerUserIndex;
    }
    get UserInfluencerIndex(): UserInfluencerIndexFactory {
        return this.resolver().UserInfluencerIndex;
    }
    get FeedSubscriber(): FeedSubscriberFactory {
        return this.resolver().FeedSubscriber;
    }
    get FeedSubscription(): FeedSubscriptionFactory {
        return this.resolver().FeedSubscription;
    }
    get FeedTopic(): FeedTopicFactory {
        return this.resolver().FeedTopic;
    }
    get FeedEvent(): FeedEventFactory {
        return this.resolver().FeedEvent;
    }
    get AppHook(): AppHookFactory {
        return this.resolver().AppHook;
    }
    private resolver: () => AllEntities;
    constructor(resolver: () => AllEntities) {
        this.resolver = resolver;
    }
}
