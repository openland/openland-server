// THIS FILE IS AUTOGENERATED! DO NOT TRY TO EDIT!
import { FDBInstance } from 'foundation-orm/FDBInstance';
import { FEntity } from 'foundation-orm/FEntity';
import { FEntityIndex } from 'foundation-orm/FEntityIndex';
import { FNamespace } from 'foundation-orm/FNamespace';
import { FEntityFactory } from 'foundation-orm/FEntityFactory';
import { FConnection } from 'foundation-orm/FConnection';

export interface OnlineShape {
    lastSeen: number;
}

export class Online extends FEntity {
    get uid(): number { return this._value.uid; }
    get lastSeen(): number {
        return this._value.lastSeen;
    }
    set lastSeen(value: number) {
        this._checkIsWritable();
        if (value === this._value.lastSeen) { return; }
        this._value.lastSeen = value;
        this.markDirty();
    }
}

export class OnlineFactory extends FEntityFactory<Online> {
    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'online'),
            { enableVersioning: false, enableTimestamps: false },
            []
        );
    }
    extractId(rawId: any[]) {
        return { 'uid': rawId[0] };
    }
    async findById(uid: number) {
        return await this._findById([uid]);
    }
    async create(uid: number, shape: OnlineShape) {
        return await this._create([uid], { uid, ...shape });
    }
    watch(uid: number, cb: () => void) {
        return this._watch([uid], cb);
    }
    protected _createEntity(value: any, isNew: boolean) {
        return new Online(this.connection, this.namespace, [value.uid], value, this.options, isNew, this.indexes);
    }
}
export interface PresenceShape {
    lastSeen: number;
    lastSeenTimeout: number;
    platform: string;
}

export class Presence extends FEntity {
    get uid(): number { return this._value.uid; }
    get tid(): string { return this._value.tid; }
    get lastSeen(): number {
        return this._value.lastSeen;
    }
    set lastSeen(value: number) {
        this._checkIsWritable();
        if (value === this._value.lastSeen) { return; }
        this._value.lastSeen = value;
        this.markDirty();
    }
    get lastSeenTimeout(): number {
        return this._value.lastSeenTimeout;
    }
    set lastSeenTimeout(value: number) {
        this._checkIsWritable();
        if (value === this._value.lastSeenTimeout) { return; }
        this._value.lastSeenTimeout = value;
        this.markDirty();
    }
    get platform(): string {
        return this._value.platform;
    }
    set platform(value: string) {
        this._checkIsWritable();
        if (value === this._value.platform) { return; }
        this._value.platform = value;
        this.markDirty();
    }
}

export class PresenceFactory extends FEntityFactory<Presence> {
    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'presence'),
            { enableVersioning: false, enableTimestamps: false },
            []
        );
    }
    extractId(rawId: any[]) {
        return { 'uid': rawId[0], 'tid': rawId[1] };
    }
    async findById(uid: number, tid: string) {
        return await this._findById([uid, tid]);
    }
    async create(uid: number, tid: string, shape: PresenceShape) {
        return await this._create([uid, tid], { uid, tid, ...shape });
    }
    watch(uid: number, tid: string, cb: () => void) {
        return this._watch([uid, tid], cb);
    }
    protected _createEntity(value: any, isNew: boolean) {
        return new Presence(this.connection, this.namespace, [value.uid, value.tid], value, this.options, isNew, this.indexes);
    }
}
export interface CounterShape {
    value: number;
}

export class Counter extends FEntity {
    get name(): string { return this._value.name; }
    get value(): number {
        return this._value.value;
    }
    set value(value: number) {
        this._checkIsWritable();
        if (value === this._value.value) { return; }
        this._value.value = value;
        this.markDirty();
    }
}

export class CounterFactory extends FEntityFactory<Counter> {
    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'counter'),
            { enableVersioning: false, enableTimestamps: false },
            []
        );
    }
    extractId(rawId: any[]) {
        return { 'name': rawId[0] };
    }
    async findById(name: string) {
        return await this._findById([name]);
    }
    async create(name: string, shape: CounterShape) {
        return await this._create([name], { name, ...shape });
    }
    watch(name: string, cb: () => void) {
        return this._watch([name], cb);
    }
    protected _createEntity(value: any, isNew: boolean) {
        return new Counter(this.connection, this.namespace, [value.name], value, this.options, isNew, this.indexes);
    }
}
export interface AuthTokenShape {
    salt: string;
    uid: number;
    lastIp: string;
}

export class AuthToken extends FEntity {
    get uuid(): string { return this._value.uuid; }
    get salt(): string {
        return this._value.salt;
    }
    set salt(value: string) {
        this._checkIsWritable();
        if (value === this._value.salt) { return; }
        this._value.salt = value;
        this.markDirty();
    }
    get uid(): number {
        return this._value.uid;
    }
    set uid(value: number) {
        this._checkIsWritable();
        if (value === this._value.uid) { return; }
        this._value.uid = value;
        this.markDirty();
    }
    get lastIp(): string {
        return this._value.lastIp;
    }
    set lastIp(value: string) {
        this._checkIsWritable();
        if (value === this._value.lastIp) { return; }
        this._value.lastIp = value;
        this.markDirty();
    }
}

export class AuthTokenFactory extends FEntityFactory<AuthToken> {
    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'authToken'),
            { enableVersioning: true, enableTimestamps: true },
            [new FEntityIndex('salt', ['salt'], true)]
        );
    }
    extractId(rawId: any[]) {
        return { 'uuid': rawId[0] };
    }
    async findById(uuid: string) {
        return await this._findById([uuid]);
    }
    async create(uuid: string, shape: AuthTokenShape) {
        return await this._create([uuid], { uuid, ...shape });
    }
    watch(uuid: string, cb: () => void) {
        return this._watch([uuid], cb);
    }
    async findFromSalt(salt: string) {
        return await this._findById(['__indexes', 'salt', salt]);
    }
    protected _createEntity(value: any, isNew: boolean) {
        return new AuthToken(this.connection, this.namespace, [value.uuid], value, this.options, isNew, this.indexes);
    }
}
export interface ServiceCacheShape {
    value: string;
}

export class ServiceCache extends FEntity {
    get service(): string { return this._value.service; }
    get key(): string { return this._value.key; }
    get value(): string {
        return this._value.value;
    }
    set value(value: string) {
        this._checkIsWritable();
        if (value === this._value.value) { return; }
        this._value.value = value;
        this.markDirty();
    }
}

export class ServiceCacheFactory extends FEntityFactory<ServiceCache> {
    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'serviceCache'),
            { enableVersioning: true, enableTimestamps: true },
            []
        );
    }
    extractId(rawId: any[]) {
        return { 'service': rawId[0], 'key': rawId[1] };
    }
    async findById(service: string, key: string) {
        return await this._findById([service, key]);
    }
    async create(service: string, key: string, shape: ServiceCacheShape) {
        return await this._create([service, key], { service, key, ...shape });
    }
    watch(service: string, key: string, cb: () => void) {
        return this._watch([service, key], cb);
    }
    protected _createEntity(value: any, isNew: boolean) {
        return new ServiceCache(this.connection, this.namespace, [value.service, value.key], value, this.options, isNew, this.indexes);
    }
}
export interface LockShape {
    seed: string;
    timeout: number;
    version: number;
    minVersion: number;
}

export class Lock extends FEntity {
    get key(): string { return this._value.key; }
    get seed(): string {
        return this._value.seed;
    }
    set seed(value: string) {
        this._checkIsWritable();
        if (value === this._value.seed) { return; }
        this._value.seed = value;
        this.markDirty();
    }
    get timeout(): number {
        return this._value.timeout;
    }
    set timeout(value: number) {
        this._checkIsWritable();
        if (value === this._value.timeout) { return; }
        this._value.timeout = value;
        this.markDirty();
    }
    get version(): number {
        return this._value.version;
    }
    set version(value: number) {
        this._checkIsWritable();
        if (value === this._value.version) { return; }
        this._value.version = value;
        this.markDirty();
    }
    get minVersion(): number {
        return this._value.minVersion;
    }
    set minVersion(value: number) {
        this._checkIsWritable();
        if (value === this._value.minVersion) { return; }
        this._value.minVersion = value;
        this.markDirty();
    }
}

export class LockFactory extends FEntityFactory<Lock> {
    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'lock'),
            { enableVersioning: false, enableTimestamps: false },
            []
        );
    }
    extractId(rawId: any[]) {
        return { 'key': rawId[0] };
    }
    async findById(key: string) {
        return await this._findById([key]);
    }
    async create(key: string, shape: LockShape) {
        return await this._create([key], { key, ...shape });
    }
    watch(key: string, cb: () => void) {
        return this._watch([key], cb);
    }
    protected _createEntity(value: any, isNew: boolean) {
        return new Lock(this.connection, this.namespace, [value.key], value, this.options, isNew, this.indexes);
    }
}
export interface TaskShape {
    arguments: any;
    result?: any| null;
    taskStatus: 'pending' | 'executing' | 'failing' | 'failed' | 'completed';
    taskFailureCount?: number| null;
    taskFailureTime?: number| null;
    taskLockSeed?: string| null;
    taskLockTimeout?: number| null;
    taskFailureMessage?: string| null;
}

export class Task extends FEntity {
    get taskType(): string { return this._value.taskType; }
    get uid(): string { return this._value.uid; }
    get arguments(): any {
        return this._value.arguments;
    }
    set arguments(value: any) {
        this._checkIsWritable();
        if (value === this._value.arguments) { return; }
        this._value.arguments = value;
        this.markDirty();
    }
    get result(): any | null {
        let res = this._value.result;
        if (res) { return res; }
        return null;
    }
    set result(value: any | null) {
        this._checkIsWritable();
        if (value === this._value.result) { return; }
        this._value.result = value;
        this.markDirty();
    }
    get taskStatus(): 'pending' | 'executing' | 'failing' | 'failed' | 'completed' {
        return this._value.taskStatus;
    }
    set taskStatus(value: 'pending' | 'executing' | 'failing' | 'failed' | 'completed') {
        this._checkIsWritable();
        if (value === this._value.taskStatus) { return; }
        this._value.taskStatus = value;
        this.markDirty();
    }
    get taskFailureCount(): number | null {
        let res = this._value.taskFailureCount;
        if (res) { return res; }
        return null;
    }
    set taskFailureCount(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.taskFailureCount) { return; }
        this._value.taskFailureCount = value;
        this.markDirty();
    }
    get taskFailureTime(): number | null {
        let res = this._value.taskFailureTime;
        if (res) { return res; }
        return null;
    }
    set taskFailureTime(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.taskFailureTime) { return; }
        this._value.taskFailureTime = value;
        this.markDirty();
    }
    get taskLockSeed(): string | null {
        let res = this._value.taskLockSeed;
        if (res) { return res; }
        return null;
    }
    set taskLockSeed(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.taskLockSeed) { return; }
        this._value.taskLockSeed = value;
        this.markDirty();
    }
    get taskLockTimeout(): number | null {
        let res = this._value.taskLockTimeout;
        if (res) { return res; }
        return null;
    }
    set taskLockTimeout(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.taskLockTimeout) { return; }
        this._value.taskLockTimeout = value;
        this.markDirty();
    }
    get taskFailureMessage(): string | null {
        let res = this._value.taskFailureMessage;
        if (res) { return res; }
        return null;
    }
    set taskFailureMessage(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.taskFailureMessage) { return; }
        this._value.taskFailureMessage = value;
        this.markDirty();
    }
}

export class TaskFactory extends FEntityFactory<Task> {
    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'task'),
            { enableVersioning: true, enableTimestamps: true },
            [new FEntityIndex('pending', ['taskType', 'createdAt'], false, (src) => src.taskStatus === 'pending'), new FEntityIndex('executing', ['taskLockTimeout'], false, (src) => src.taskStatus === 'executing'), new FEntityIndex('failing', ['taskFailureTime'], false, (src) => src.taskStatus === 'failing')]
        );
    }
    extractId(rawId: any[]) {
        return { 'taskType': rawId[0], 'uid': rawId[1] };
    }
    async findById(taskType: string, uid: string) {
        return await this._findById([taskType, uid]);
    }
    async create(taskType: string, uid: string, shape: TaskShape) {
        return await this._create([taskType, uid], { taskType, uid, ...shape });
    }
    watch(taskType: string, uid: string, cb: () => void) {
        return this._watch([taskType, uid], cb);
    }
    async rangeFromPending(taskType: string, limit: number) {
        return await this._findRange(['__indexes', 'pending', taskType], limit);
    }
    async allFromPending(taskType: string) {
        return await this._findAll(['__indexes', 'pending', taskType]);
    }
    createPendingStream(limit: number, after?: string) {
        return this._createStream(['entity', 'task', '__indexes', 'pending'], limit, after); 
    }
    async rangeFromExecuting(limit: number) {
        return await this._findRange(['__indexes', 'executing'], limit);
    }
    async allFromExecuting() {
        return await this._findAll(['__indexes', 'executing']);
    }
    createExecutingStream(limit: number, after?: string) {
        return this._createStream(['entity', 'task', '__indexes', 'executing'], limit, after); 
    }
    async rangeFromFailing(limit: number) {
        return await this._findRange(['__indexes', 'failing'], limit);
    }
    async allFromFailing() {
        return await this._findAll(['__indexes', 'failing']);
    }
    createFailingStream(limit: number, after?: string) {
        return this._createStream(['entity', 'task', '__indexes', 'failing'], limit, after); 
    }
    protected _createEntity(value: any, isNew: boolean) {
        return new Task(this.connection, this.namespace, [value.taskType, value.uid], value, this.options, isNew, this.indexes);
    }
}
export interface PushFirebaseShape {
    uid: number;
    tid: string;
    token: string;
    packageId: string;
    sandbox: boolean;
    enabled: boolean;
}

export class PushFirebase extends FEntity {
    get id(): string { return this._value.id; }
    get uid(): number {
        return this._value.uid;
    }
    set uid(value: number) {
        this._checkIsWritable();
        if (value === this._value.uid) { return; }
        this._value.uid = value;
        this.markDirty();
    }
    get tid(): string {
        return this._value.tid;
    }
    set tid(value: string) {
        this._checkIsWritable();
        if (value === this._value.tid) { return; }
        this._value.tid = value;
        this.markDirty();
    }
    get token(): string {
        return this._value.token;
    }
    set token(value: string) {
        this._checkIsWritable();
        if (value === this._value.token) { return; }
        this._value.token = value;
        this.markDirty();
    }
    get packageId(): string {
        return this._value.packageId;
    }
    set packageId(value: string) {
        this._checkIsWritable();
        if (value === this._value.packageId) { return; }
        this._value.packageId = value;
        this.markDirty();
    }
    get sandbox(): boolean {
        return this._value.sandbox;
    }
    set sandbox(value: boolean) {
        this._checkIsWritable();
        if (value === this._value.sandbox) { return; }
        this._value.sandbox = value;
        this.markDirty();
    }
    get enabled(): boolean {
        return this._value.enabled;
    }
    set enabled(value: boolean) {
        this._checkIsWritable();
        if (value === this._value.enabled) { return; }
        this._value.enabled = value;
        this.markDirty();
    }
}

export class PushFirebaseFactory extends FEntityFactory<PushFirebase> {
    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'pushFirebase'),
            { enableVersioning: true, enableTimestamps: true },
            [new FEntityIndex('user', ['uid', 'id'], false), new FEntityIndex('token', ['token'], true, src => src.enabled)]
        );
    }
    extractId(rawId: any[]) {
        return { 'id': rawId[0] };
    }
    async findById(id: string) {
        return await this._findById([id]);
    }
    async create(id: string, shape: PushFirebaseShape) {
        return await this._create([id], { id, ...shape });
    }
    watch(id: string, cb: () => void) {
        return this._watch([id], cb);
    }
    async rangeFromUser(uid: number, limit: number) {
        return await this._findRange(['__indexes', 'user', uid], limit);
    }
    async allFromUser(uid: number) {
        return await this._findAll(['__indexes', 'user', uid]);
    }
    createUserStream(limit: number, after?: string) {
        return this._createStream(['entity', 'pushFirebase', '__indexes', 'user'], limit, after); 
    }
    async findFromToken(token: string) {
        return await this._findById(['__indexes', 'token', token]);
    }
    protected _createEntity(value: any, isNew: boolean) {
        return new PushFirebase(this.connection, this.namespace, [value.id], value, this.options, isNew, this.indexes);
    }
}
export interface PushAppleShape {
    uid: number;
    tid: string;
    token: string;
    bundleId: string;
    sandbox: boolean;
    enabled: boolean;
}

export class PushApple extends FEntity {
    get id(): string { return this._value.id; }
    get uid(): number {
        return this._value.uid;
    }
    set uid(value: number) {
        this._checkIsWritable();
        if (value === this._value.uid) { return; }
        this._value.uid = value;
        this.markDirty();
    }
    get tid(): string {
        return this._value.tid;
    }
    set tid(value: string) {
        this._checkIsWritable();
        if (value === this._value.tid) { return; }
        this._value.tid = value;
        this.markDirty();
    }
    get token(): string {
        return this._value.token;
    }
    set token(value: string) {
        this._checkIsWritable();
        if (value === this._value.token) { return; }
        this._value.token = value;
        this.markDirty();
    }
    get bundleId(): string {
        return this._value.bundleId;
    }
    set bundleId(value: string) {
        this._checkIsWritable();
        if (value === this._value.bundleId) { return; }
        this._value.bundleId = value;
        this.markDirty();
    }
    get sandbox(): boolean {
        return this._value.sandbox;
    }
    set sandbox(value: boolean) {
        this._checkIsWritable();
        if (value === this._value.sandbox) { return; }
        this._value.sandbox = value;
        this.markDirty();
    }
    get enabled(): boolean {
        return this._value.enabled;
    }
    set enabled(value: boolean) {
        this._checkIsWritable();
        if (value === this._value.enabled) { return; }
        this._value.enabled = value;
        this.markDirty();
    }
}

export class PushAppleFactory extends FEntityFactory<PushApple> {
    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'pushApple'),
            { enableVersioning: true, enableTimestamps: true },
            [new FEntityIndex('user', ['uid', 'id'], false), new FEntityIndex('token', ['token'], true, src => src.enabled)]
        );
    }
    extractId(rawId: any[]) {
        return { 'id': rawId[0] };
    }
    async findById(id: string) {
        return await this._findById([id]);
    }
    async create(id: string, shape: PushAppleShape) {
        return await this._create([id], { id, ...shape });
    }
    watch(id: string, cb: () => void) {
        return this._watch([id], cb);
    }
    async rangeFromUser(uid: number, limit: number) {
        return await this._findRange(['__indexes', 'user', uid], limit);
    }
    async allFromUser(uid: number) {
        return await this._findAll(['__indexes', 'user', uid]);
    }
    createUserStream(limit: number, after?: string) {
        return this._createStream(['entity', 'pushApple', '__indexes', 'user'], limit, after); 
    }
    async findFromToken(token: string) {
        return await this._findById(['__indexes', 'token', token]);
    }
    protected _createEntity(value: any, isNew: boolean) {
        return new PushApple(this.connection, this.namespace, [value.id], value, this.options, isNew, this.indexes);
    }
}
export interface PushWebShape {
    uid: number;
    tid: string;
    endpoint: string;
    enabled: boolean;
}

export class PushWeb extends FEntity {
    get id(): string { return this._value.id; }
    get uid(): number {
        return this._value.uid;
    }
    set uid(value: number) {
        this._checkIsWritable();
        if (value === this._value.uid) { return; }
        this._value.uid = value;
        this.markDirty();
    }
    get tid(): string {
        return this._value.tid;
    }
    set tid(value: string) {
        this._checkIsWritable();
        if (value === this._value.tid) { return; }
        this._value.tid = value;
        this.markDirty();
    }
    get endpoint(): string {
        return this._value.endpoint;
    }
    set endpoint(value: string) {
        this._checkIsWritable();
        if (value === this._value.endpoint) { return; }
        this._value.endpoint = value;
        this.markDirty();
    }
    get enabled(): boolean {
        return this._value.enabled;
    }
    set enabled(value: boolean) {
        this._checkIsWritable();
        if (value === this._value.enabled) { return; }
        this._value.enabled = value;
        this.markDirty();
    }
}

export class PushWebFactory extends FEntityFactory<PushWeb> {
    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'pushWeb'),
            { enableVersioning: true, enableTimestamps: true },
            [new FEntityIndex('user', ['uid', 'id'], false), new FEntityIndex('endpoint', ['endpoint'], true, src => src.enabled)]
        );
    }
    extractId(rawId: any[]) {
        return { 'id': rawId[0] };
    }
    async findById(id: string) {
        return await this._findById([id]);
    }
    async create(id: string, shape: PushWebShape) {
        return await this._create([id], { id, ...shape });
    }
    watch(id: string, cb: () => void) {
        return this._watch([id], cb);
    }
    async rangeFromUser(uid: number, limit: number) {
        return await this._findRange(['__indexes', 'user', uid], limit);
    }
    async allFromUser(uid: number) {
        return await this._findAll(['__indexes', 'user', uid]);
    }
    createUserStream(limit: number, after?: string) {
        return this._createStream(['entity', 'pushWeb', '__indexes', 'user'], limit, after); 
    }
    async findFromEndpoint(endpoint: string) {
        return await this._findById(['__indexes', 'endpoint', endpoint]);
    }
    protected _createEntity(value: any, isNew: boolean) {
        return new PushWeb(this.connection, this.namespace, [value.id], value, this.options, isNew, this.indexes);
    }
}
export interface UserProfilePrefilShape {
    firstName?: string| null;
    lastName?: string| null;
    picture?: string| null;
}

export class UserProfilePrefil extends FEntity {
    get id(): number { return this._value.id; }
    get firstName(): string | null {
        let res = this._value.firstName;
        if (res) { return res; }
        return null;
    }
    set firstName(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.firstName) { return; }
        this._value.firstName = value;
        this.markDirty();
    }
    get lastName(): string | null {
        let res = this._value.lastName;
        if (res) { return res; }
        return null;
    }
    set lastName(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.lastName) { return; }
        this._value.lastName = value;
        this.markDirty();
    }
    get picture(): string | null {
        let res = this._value.picture;
        if (res) { return res; }
        return null;
    }
    set picture(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.picture) { return; }
        this._value.picture = value;
        this.markDirty();
    }
}

export class UserProfilePrefilFactory extends FEntityFactory<UserProfilePrefil> {
    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'userProfilePrefil'),
            { enableVersioning: true, enableTimestamps: true },
            []
        );
    }
    extractId(rawId: any[]) {
        return { 'id': rawId[0] };
    }
    async findById(id: number) {
        return await this._findById([id]);
    }
    async create(id: number, shape: UserProfilePrefilShape) {
        return await this._create([id], { id, ...shape });
    }
    watch(id: number, cb: () => void) {
        return this._watch([id], cb);
    }
    protected _createEntity(value: any, isNew: boolean) {
        return new UserProfilePrefil(this.connection, this.namespace, [value.id], value, this.options, isNew, this.indexes);
    }
}
export interface UserProfileShape {
    firstName: string;
    lastName?: string| null;
    phone?: string| null;
    about?: string| null;
    website?: string| null;
    location?: string| null;
    email?: string| null;
    picture?: any| null;
    linkedin?: string| null;
    twitter?: string| null;
    locations?: any| null;
    primaryOrganization?: number| null;
    role?: string| null;
}

export class UserProfile extends FEntity {
    get id(): number { return this._value.id; }
    get firstName(): string {
        return this._value.firstName;
    }
    set firstName(value: string) {
        this._checkIsWritable();
        if (value === this._value.firstName) { return; }
        this._value.firstName = value;
        this.markDirty();
    }
    get lastName(): string | null {
        let res = this._value.lastName;
        if (res) { return res; }
        return null;
    }
    set lastName(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.lastName) { return; }
        this._value.lastName = value;
        this.markDirty();
    }
    get phone(): string | null {
        let res = this._value.phone;
        if (res) { return res; }
        return null;
    }
    set phone(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.phone) { return; }
        this._value.phone = value;
        this.markDirty();
    }
    get about(): string | null {
        let res = this._value.about;
        if (res) { return res; }
        return null;
    }
    set about(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.about) { return; }
        this._value.about = value;
        this.markDirty();
    }
    get website(): string | null {
        let res = this._value.website;
        if (res) { return res; }
        return null;
    }
    set website(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.website) { return; }
        this._value.website = value;
        this.markDirty();
    }
    get location(): string | null {
        let res = this._value.location;
        if (res) { return res; }
        return null;
    }
    set location(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.location) { return; }
        this._value.location = value;
        this.markDirty();
    }
    get email(): string | null {
        let res = this._value.email;
        if (res) { return res; }
        return null;
    }
    set email(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.email) { return; }
        this._value.email = value;
        this.markDirty();
    }
    get picture(): any | null {
        let res = this._value.picture;
        if (res) { return res; }
        return null;
    }
    set picture(value: any | null) {
        this._checkIsWritable();
        if (value === this._value.picture) { return; }
        this._value.picture = value;
        this.markDirty();
    }
    get linkedin(): string | null {
        let res = this._value.linkedin;
        if (res) { return res; }
        return null;
    }
    set linkedin(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.linkedin) { return; }
        this._value.linkedin = value;
        this.markDirty();
    }
    get twitter(): string | null {
        let res = this._value.twitter;
        if (res) { return res; }
        return null;
    }
    set twitter(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.twitter) { return; }
        this._value.twitter = value;
        this.markDirty();
    }
    get locations(): any | null {
        let res = this._value.locations;
        if (res) { return res; }
        return null;
    }
    set locations(value: any | null) {
        this._checkIsWritable();
        if (value === this._value.locations) { return; }
        this._value.locations = value;
        this.markDirty();
    }
    get primaryOrganization(): number | null {
        let res = this._value.primaryOrganization;
        if (res) { return res; }
        return null;
    }
    set primaryOrganization(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.primaryOrganization) { return; }
        this._value.primaryOrganization = value;
        this.markDirty();
    }
    get role(): string | null {
        let res = this._value.role;
        if (res) { return res; }
        return null;
    }
    set role(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.role) { return; }
        this._value.role = value;
        this.markDirty();
    }
}

export class UserProfileFactory extends FEntityFactory<UserProfile> {
    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'userProfile'),
            { enableVersioning: true, enableTimestamps: true },
            [new FEntityIndex('byUpdatedAt', ['updatedAt'], false)]
        );
    }
    extractId(rawId: any[]) {
        return { 'id': rawId[0] };
    }
    async findById(id: number) {
        return await this._findById([id]);
    }
    async create(id: number, shape: UserProfileShape) {
        return await this._create([id], { id, ...shape });
    }
    watch(id: number, cb: () => void) {
        return this._watch([id], cb);
    }
    async rangeFromByUpdatedAt(limit: number) {
        return await this._findRange(['__indexes', 'byUpdatedAt'], limit);
    }
    async allFromByUpdatedAt() {
        return await this._findAll(['__indexes', 'byUpdatedAt']);
    }
    createByUpdatedAtStream(limit: number, after?: string) {
        return this._createStream(['entity', 'userProfile', '__indexes', 'byUpdatedAt'], limit, after); 
    }
    protected _createEntity(value: any, isNew: boolean) {
        return new UserProfile(this.connection, this.namespace, [value.id], value, this.options, isNew, this.indexes);
    }
}
export interface FeatureFlagShape {
    title: string;
}

export class FeatureFlag extends FEntity {
    get key(): string { return this._value.key; }
    get title(): string {
        return this._value.title;
    }
    set title(value: string) {
        this._checkIsWritable();
        if (value === this._value.title) { return; }
        this._value.title = value;
        this.markDirty();
    }
}

export class FeatureFlagFactory extends FEntityFactory<FeatureFlag> {
    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'featureFlag'),
            { enableVersioning: true, enableTimestamps: true },
            []
        );
    }
    extractId(rawId: any[]) {
        return { 'key': rawId[0] };
    }
    async findById(key: string) {
        return await this._findById([key]);
    }
    async create(key: string, shape: FeatureFlagShape) {
        return await this._create([key], { key, ...shape });
    }
    watch(key: string, cb: () => void) {
        return this._watch([key], cb);
    }
    protected _createEntity(value: any, isNew: boolean) {
        return new FeatureFlag(this.connection, this.namespace, [value.key], value, this.options, isNew, this.indexes);
    }
}
export interface OrganizationFeaturesShape {
    featureKey: string;
    organizationId: number;
    enabled: boolean;
}

export class OrganizationFeatures extends FEntity {
    get id(): string { return this._value.id; }
    get featureKey(): string {
        return this._value.featureKey;
    }
    set featureKey(value: string) {
        this._checkIsWritable();
        if (value === this._value.featureKey) { return; }
        this._value.featureKey = value;
        this.markDirty();
    }
    get organizationId(): number {
        return this._value.organizationId;
    }
    set organizationId(value: number) {
        this._checkIsWritable();
        if (value === this._value.organizationId) { return; }
        this._value.organizationId = value;
        this.markDirty();
    }
    get enabled(): boolean {
        return this._value.enabled;
    }
    set enabled(value: boolean) {
        this._checkIsWritable();
        if (value === this._value.enabled) { return; }
        this._value.enabled = value;
        this.markDirty();
    }
}

export class OrganizationFeaturesFactory extends FEntityFactory<OrganizationFeatures> {
    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'organizationFeatures'),
            { enableVersioning: true, enableTimestamps: true },
            [new FEntityIndex('organization', ['organizationId', 'featureKey'], true)]
        );
    }
    extractId(rawId: any[]) {
        return { 'id': rawId[0] };
    }
    async findById(id: string) {
        return await this._findById([id]);
    }
    async create(id: string, shape: OrganizationFeaturesShape) {
        return await this._create([id], { id, ...shape });
    }
    watch(id: string, cb: () => void) {
        return this._watch([id], cb);
    }
    async findFromOrganization(organizationId: number, featureKey: string) {
        return await this._findById(['__indexes', 'organization', organizationId, featureKey]);
    }
    async rangeFromOrganization(organizationId: number, limit: number) {
        return await this._findRange(['__indexes', 'organization', organizationId], limit);
    }
    async allFromOrganization(organizationId: number) {
        return await this._findAll(['__indexes', 'organization', organizationId]);
    }
    createOrganizationStream(limit: number, after?: string) {
        return this._createStream(['entity', 'organizationFeatures', '__indexes', 'organization'], limit, after); 
    }
    protected _createEntity(value: any, isNew: boolean) {
        return new OrganizationFeatures(this.connection, this.namespace, [value.id], value, this.options, isNew, this.indexes);
    }
}
export interface ReaderStateShape {
    cursor: string;
    version?: number| null;
}

export class ReaderState extends FEntity {
    get id(): string { return this._value.id; }
    get cursor(): string {
        return this._value.cursor;
    }
    set cursor(value: string) {
        this._checkIsWritable();
        if (value === this._value.cursor) { return; }
        this._value.cursor = value;
        this.markDirty();
    }
    get version(): number | null {
        let res = this._value.version;
        if (res) { return res; }
        return null;
    }
    set version(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.version) { return; }
        this._value.version = value;
        this.markDirty();
    }
}

export class ReaderStateFactory extends FEntityFactory<ReaderState> {
    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'readerState'),
            { enableVersioning: true, enableTimestamps: true },
            []
        );
    }
    extractId(rawId: any[]) {
        return { 'id': rawId[0] };
    }
    async findById(id: string) {
        return await this._findById([id]);
    }
    async create(id: string, shape: ReaderStateShape) {
        return await this._create([id], { id, ...shape });
    }
    watch(id: string, cb: () => void) {
        return this._watch([id], cb);
    }
    protected _createEntity(value: any, isNew: boolean) {
        return new ReaderState(this.connection, this.namespace, [value.id], value, this.options, isNew, this.indexes);
    }
}
export interface SuperAdminShape {
    role: string;
    enabled: boolean;
}

export class SuperAdmin extends FEntity {
    get id(): number { return this._value.id; }
    get role(): string {
        return this._value.role;
    }
    set role(value: string) {
        this._checkIsWritable();
        if (value === this._value.role) { return; }
        this._value.role = value;
        this.markDirty();
    }
    get enabled(): boolean {
        return this._value.enabled;
    }
    set enabled(value: boolean) {
        this._checkIsWritable();
        if (value === this._value.enabled) { return; }
        this._value.enabled = value;
        this.markDirty();
    }
}

export class SuperAdminFactory extends FEntityFactory<SuperAdmin> {
    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'superAdmin'),
            { enableVersioning: false, enableTimestamps: false },
            []
        );
    }
    extractId(rawId: any[]) {
        return { 'id': rawId[0] };
    }
    async findById(id: number) {
        return await this._findById([id]);
    }
    async create(id: number, shape: SuperAdminShape) {
        return await this._create([id], { id, ...shape });
    }
    watch(id: number, cb: () => void) {
        return this._watch([id], cb);
    }
    protected _createEntity(value: any, isNew: boolean) {
        return new SuperAdmin(this.connection, this.namespace, [value.id], value, this.options, isNew, this.indexes);
    }
}
export interface UserSettingsShape {
    emailFrequency: '1hour' | '15min' | 'never' | '24hour' | '1week';
    desktopNotifications: 'all' | 'direct' | 'none';
    mobileNotifications: 'all' | 'direct' | 'none';
    mobileAlert: boolean;
    mobileIncludeText: boolean;
    notificationsDelay: 'none' | '1min' | '15min';
}

export class UserSettings extends FEntity {
    get id(): number { return this._value.id; }
    get emailFrequency(): '1hour' | '15min' | 'never' | '24hour' | '1week' {
        return this._value.emailFrequency;
    }
    set emailFrequency(value: '1hour' | '15min' | 'never' | '24hour' | '1week') {
        this._checkIsWritable();
        if (value === this._value.emailFrequency) { return; }
        this._value.emailFrequency = value;
        this.markDirty();
    }
    get desktopNotifications(): 'all' | 'direct' | 'none' {
        return this._value.desktopNotifications;
    }
    set desktopNotifications(value: 'all' | 'direct' | 'none') {
        this._checkIsWritable();
        if (value === this._value.desktopNotifications) { return; }
        this._value.desktopNotifications = value;
        this.markDirty();
    }
    get mobileNotifications(): 'all' | 'direct' | 'none' {
        return this._value.mobileNotifications;
    }
    set mobileNotifications(value: 'all' | 'direct' | 'none') {
        this._checkIsWritable();
        if (value === this._value.mobileNotifications) { return; }
        this._value.mobileNotifications = value;
        this.markDirty();
    }
    get mobileAlert(): boolean {
        return this._value.mobileAlert;
    }
    set mobileAlert(value: boolean) {
        this._checkIsWritable();
        if (value === this._value.mobileAlert) { return; }
        this._value.mobileAlert = value;
        this.markDirty();
    }
    get mobileIncludeText(): boolean {
        return this._value.mobileIncludeText;
    }
    set mobileIncludeText(value: boolean) {
        this._checkIsWritable();
        if (value === this._value.mobileIncludeText) { return; }
        this._value.mobileIncludeText = value;
        this.markDirty();
    }
    get notificationsDelay(): 'none' | '1min' | '15min' {
        return this._value.notificationsDelay;
    }
    set notificationsDelay(value: 'none' | '1min' | '15min') {
        this._checkIsWritable();
        if (value === this._value.notificationsDelay) { return; }
        this._value.notificationsDelay = value;
        this.markDirty();
    }
}

export class UserSettingsFactory extends FEntityFactory<UserSettings> {
    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'userSettings'),
            { enableVersioning: true, enableTimestamps: true },
            []
        );
    }
    extractId(rawId: any[]) {
        return { 'id': rawId[0] };
    }
    async findById(id: number) {
        return await this._findById([id]);
    }
    async create(id: number, shape: UserSettingsShape) {
        return await this._create([id], { id, ...shape });
    }
    watch(id: number, cb: () => void) {
        return this._watch([id], cb);
    }
    protected _createEntity(value: any, isNew: boolean) {
        return new UserSettings(this.connection, this.namespace, [value.id], value, this.options, isNew, this.indexes);
    }
}
export interface ShortnameReservationShape {
    ownerType: 'org' | 'user';
    ownerId: number;
    enabled: boolean;
}

export class ShortnameReservation extends FEntity {
    get shortname(): string { return this._value.shortname; }
    get ownerType(): 'org' | 'user' {
        return this._value.ownerType;
    }
    set ownerType(value: 'org' | 'user') {
        this._checkIsWritable();
        if (value === this._value.ownerType) { return; }
        this._value.ownerType = value;
        this.markDirty();
    }
    get ownerId(): number {
        return this._value.ownerId;
    }
    set ownerId(value: number) {
        this._checkIsWritable();
        if (value === this._value.ownerId) { return; }
        this._value.ownerId = value;
        this.markDirty();
    }
    get enabled(): boolean {
        return this._value.enabled;
    }
    set enabled(value: boolean) {
        this._checkIsWritable();
        if (value === this._value.enabled) { return; }
        this._value.enabled = value;
        this.markDirty();
    }
}

export class ShortnameReservationFactory extends FEntityFactory<ShortnameReservation> {
    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'shortnameReservation'),
            { enableVersioning: true, enableTimestamps: true },
            [new FEntityIndex('user', ['ownerId'], true, (src) => src.ownerType === 'user' && src.enabled), new FEntityIndex('org', ['ownerId'], true, (src) => src.ownerType === 'org' && src.enabled)]
        );
    }
    extractId(rawId: any[]) {
        return { 'shortname': rawId[0] };
    }
    async findById(shortname: string) {
        return await this._findById([shortname]);
    }
    async create(shortname: string, shape: ShortnameReservationShape) {
        return await this._create([shortname], { shortname, ...shape });
    }
    watch(shortname: string, cb: () => void) {
        return this._watch([shortname], cb);
    }
    async findFromUser(ownerId: number) {
        return await this._findById(['__indexes', 'user', ownerId]);
    }
    async findFromOrg(ownerId: number) {
        return await this._findById(['__indexes', 'org', ownerId]);
    }
    protected _createEntity(value: any, isNew: boolean) {
        return new ShortnameReservation(this.connection, this.namespace, [value.shortname], value, this.options, isNew, this.indexes);
    }
}
export interface AuthCodeSessionShape {
    code: string;
    expires: number;
    email: string;
    tokenId?: string| null;
    enabled: boolean;
}

export class AuthCodeSession extends FEntity {
    get uid(): string { return this._value.uid; }
    get code(): string {
        return this._value.code;
    }
    set code(value: string) {
        this._checkIsWritable();
        if (value === this._value.code) { return; }
        this._value.code = value;
        this.markDirty();
    }
    get expires(): number {
        return this._value.expires;
    }
    set expires(value: number) {
        this._checkIsWritable();
        if (value === this._value.expires) { return; }
        this._value.expires = value;
        this.markDirty();
    }
    get email(): string {
        return this._value.email;
    }
    set email(value: string) {
        this._checkIsWritable();
        if (value === this._value.email) { return; }
        this._value.email = value;
        this.markDirty();
    }
    get tokenId(): string | null {
        let res = this._value.tokenId;
        if (res) { return res; }
        return null;
    }
    set tokenId(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.tokenId) { return; }
        this._value.tokenId = value;
        this.markDirty();
    }
    get enabled(): boolean {
        return this._value.enabled;
    }
    set enabled(value: boolean) {
        this._checkIsWritable();
        if (value === this._value.enabled) { return; }
        this._value.enabled = value;
        this.markDirty();
    }
}

export class AuthCodeSessionFactory extends FEntityFactory<AuthCodeSession> {
    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'authCodeSession'),
            { enableVersioning: true, enableTimestamps: true },
            []
        );
    }
    extractId(rawId: any[]) {
        return { 'uid': rawId[0] };
    }
    async findById(uid: string) {
        return await this._findById([uid]);
    }
    async create(uid: string, shape: AuthCodeSessionShape) {
        return await this._create([uid], { uid, ...shape });
    }
    watch(uid: string, cb: () => void) {
        return this._watch([uid], cb);
    }
    protected _createEntity(value: any, isNew: boolean) {
        return new AuthCodeSession(this.connection, this.namespace, [value.uid], value, this.options, isNew, this.indexes);
    }
}
export interface ConversationSeqShape {
    seq: number;
}

export class ConversationSeq extends FEntity {
    get cid(): string { return this._value.cid; }
    get seq(): number {
        return this._value.seq;
    }
    set seq(value: number) {
        this._checkIsWritable();
        if (value === this._value.seq) { return; }
        this._value.seq = value;
        this.markDirty();
    }
}

export class ConversationSeqFactory extends FEntityFactory<ConversationSeq> {
    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'conversationSeq'),
            { enableVersioning: false, enableTimestamps: false },
            []
        );
    }
    extractId(rawId: any[]) {
        return { 'cid': rawId[0] };
    }
    async findById(cid: string) {
        return await this._findById([cid]);
    }
    async create(cid: string, shape: ConversationSeqShape) {
        return await this._create([cid], { cid, ...shape });
    }
    watch(cid: string, cb: () => void) {
        return this._watch([cid], cb);
    }
    protected _createEntity(value: any, isNew: boolean) {
        return new ConversationSeq(this.connection, this.namespace, [value.cid], value, this.options, isNew, this.indexes);
    }
}
export interface MessageShape {
    cid: string;
    uid: number;
    repeatToken?: string| null;
    text?: string| null;
    fileId?: string| null;
    fileMetadata?: any| null;
    filePreview?: string| null;
    mentions?: any| null;
    replyMessages?: any| null;
    augmentation?: any| null;
    isMuted: boolean;
    isService: boolean;
    deleted: boolean;
}

export class Message extends FEntity {
    get id(): string { return this._value.id; }
    get cid(): string {
        return this._value.cid;
    }
    set cid(value: string) {
        this._checkIsWritable();
        if (value === this._value.cid) { return; }
        this._value.cid = value;
        this.markDirty();
    }
    get uid(): number {
        return this._value.uid;
    }
    set uid(value: number) {
        this._checkIsWritable();
        if (value === this._value.uid) { return; }
        this._value.uid = value;
        this.markDirty();
    }
    get repeatToken(): string | null {
        let res = this._value.repeatToken;
        if (res) { return res; }
        return null;
    }
    set repeatToken(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.repeatToken) { return; }
        this._value.repeatToken = value;
        this.markDirty();
    }
    get text(): string | null {
        let res = this._value.text;
        if (res) { return res; }
        return null;
    }
    set text(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.text) { return; }
        this._value.text = value;
        this.markDirty();
    }
    get fileId(): string | null {
        let res = this._value.fileId;
        if (res) { return res; }
        return null;
    }
    set fileId(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.fileId) { return; }
        this._value.fileId = value;
        this.markDirty();
    }
    get fileMetadata(): any | null {
        let res = this._value.fileMetadata;
        if (res) { return res; }
        return null;
    }
    set fileMetadata(value: any | null) {
        this._checkIsWritable();
        if (value === this._value.fileMetadata) { return; }
        this._value.fileMetadata = value;
        this.markDirty();
    }
    get filePreview(): string | null {
        let res = this._value.filePreview;
        if (res) { return res; }
        return null;
    }
    set filePreview(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.filePreview) { return; }
        this._value.filePreview = value;
        this.markDirty();
    }
    get mentions(): any | null {
        let res = this._value.mentions;
        if (res) { return res; }
        return null;
    }
    set mentions(value: any | null) {
        this._checkIsWritable();
        if (value === this._value.mentions) { return; }
        this._value.mentions = value;
        this.markDirty();
    }
    get replyMessages(): any | null {
        let res = this._value.replyMessages;
        if (res) { return res; }
        return null;
    }
    set replyMessages(value: any | null) {
        this._checkIsWritable();
        if (value === this._value.replyMessages) { return; }
        this._value.replyMessages = value;
        this.markDirty();
    }
    get augmentation(): any | null {
        let res = this._value.augmentation;
        if (res) { return res; }
        return null;
    }
    set augmentation(value: any | null) {
        this._checkIsWritable();
        if (value === this._value.augmentation) { return; }
        this._value.augmentation = value;
        this.markDirty();
    }
    get isMuted(): boolean {
        return this._value.isMuted;
    }
    set isMuted(value: boolean) {
        this._checkIsWritable();
        if (value === this._value.isMuted) { return; }
        this._value.isMuted = value;
        this.markDirty();
    }
    get isService(): boolean {
        return this._value.isService;
    }
    set isService(value: boolean) {
        this._checkIsWritable();
        if (value === this._value.isService) { return; }
        this._value.isService = value;
        this.markDirty();
    }
    get deleted(): boolean {
        return this._value.deleted;
    }
    set deleted(value: boolean) {
        this._checkIsWritable();
        if (value === this._value.deleted) { return; }
        this._value.deleted = value;
        this.markDirty();
    }
}

export class MessageFactory extends FEntityFactory<Message> {
    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'message'),
            { enableVersioning: false, enableTimestamps: false },
            [new FEntityIndex('chat', ['cid', 'id'], false, (src) => !src.deleted)]
        );
    }
    extractId(rawId: any[]) {
        return { 'id': rawId[0] };
    }
    async findById(id: string) {
        return await this._findById([id]);
    }
    async create(id: string, shape: MessageShape) {
        return await this._create([id], { id, ...shape });
    }
    watch(id: string, cb: () => void) {
        return this._watch([id], cb);
    }
    async rangeFromChat(cid: string, limit: number) {
        return await this._findRange(['__indexes', 'chat', cid], limit);
    }
    async allFromChat(cid: string) {
        return await this._findAll(['__indexes', 'chat', cid]);
    }
    createChatStream(limit: number, after?: string) {
        return this._createStream(['entity', 'message', '__indexes', 'chat'], limit, after); 
    }
    protected _createEntity(value: any, isNew: boolean) {
        return new Message(this.connection, this.namespace, [value.id], value, this.options, isNew, this.indexes);
    }
}
export interface ConversationEventShape {
    userId?: number| null;
    kickedIds?: any| null;
    addedIds?: any| null;
    title?: string| null;
    photo?: string| null;
    messageId?: string| null;
    kind: 'create_message' | 'update_message' | 'delete_message' | 'group_update' | 'add_members' | 'remove_members';
}

export class ConversationEvent extends FEntity {
    get cid(): string { return this._value.cid; }
    get seq(): number { return this._value.seq; }
    get userId(): number | null {
        let res = this._value.userId;
        if (res) { return res; }
        return null;
    }
    set userId(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.userId) { return; }
        this._value.userId = value;
        this.markDirty();
    }
    get kickedIds(): any | null {
        let res = this._value.kickedIds;
        if (res) { return res; }
        return null;
    }
    set kickedIds(value: any | null) {
        this._checkIsWritable();
        if (value === this._value.kickedIds) { return; }
        this._value.kickedIds = value;
        this.markDirty();
    }
    get addedIds(): any | null {
        let res = this._value.addedIds;
        if (res) { return res; }
        return null;
    }
    set addedIds(value: any | null) {
        this._checkIsWritable();
        if (value === this._value.addedIds) { return; }
        this._value.addedIds = value;
        this.markDirty();
    }
    get title(): string | null {
        let res = this._value.title;
        if (res) { return res; }
        return null;
    }
    set title(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.title) { return; }
        this._value.title = value;
        this.markDirty();
    }
    get photo(): string | null {
        let res = this._value.photo;
        if (res) { return res; }
        return null;
    }
    set photo(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.photo) { return; }
        this._value.photo = value;
        this.markDirty();
    }
    get messageId(): string | null {
        let res = this._value.messageId;
        if (res) { return res; }
        return null;
    }
    set messageId(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.messageId) { return; }
        this._value.messageId = value;
        this.markDirty();
    }
    get kind(): 'create_message' | 'update_message' | 'delete_message' | 'group_update' | 'add_members' | 'remove_members' {
        return this._value.kind;
    }
    set kind(value: 'create_message' | 'update_message' | 'delete_message' | 'group_update' | 'add_members' | 'remove_members') {
        this._checkIsWritable();
        if (value === this._value.kind) { return; }
        this._value.kind = value;
        this.markDirty();
    }
}

export class ConversationEventFactory extends FEntityFactory<ConversationEvent> {
    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'conversationEvent'),
            { enableVersioning: true, enableTimestamps: true },
            []
        );
    }
    extractId(rawId: any[]) {
        return { 'cid': rawId[0], 'seq': rawId[1] };
    }
    async findById(cid: string, seq: number) {
        return await this._findById([cid, seq]);
    }
    async create(cid: string, seq: number, shape: ConversationEventShape) {
        return await this._create([cid, seq], { cid, seq, ...shape });
    }
    watch(cid: string, seq: number, cb: () => void) {
        return this._watch([cid, seq], cb);
    }
    protected _createEntity(value: any, isNew: boolean) {
        return new ConversationEvent(this.connection, this.namespace, [value.cid, value.seq], value, this.options, isNew, this.indexes);
    }
}
export interface UserConversationEventShape {
}

export class UserConversationEvent extends FEntity {
    get cid(): string { return this._value.cid; }
    get seq(): number { return this._value.seq; }
}

export class UserConversationEventFactory extends FEntityFactory<UserConversationEvent> {
    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'userConversationEvent'),
            { enableVersioning: true, enableTimestamps: true },
            []
        );
    }
    extractId(rawId: any[]) {
        return { 'cid': rawId[0], 'seq': rawId[1] };
    }
    async findById(cid: string, seq: number) {
        return await this._findById([cid, seq]);
    }
    async create(cid: string, seq: number, shape: UserConversationEventShape) {
        return await this._create([cid, seq], { cid, seq, ...shape });
    }
    watch(cid: string, seq: number, cb: () => void) {
        return this._watch([cid, seq], cb);
    }
    protected _createEntity(value: any, isNew: boolean) {
        return new UserConversationEvent(this.connection, this.namespace, [value.cid, value.seq], value, this.options, isNew, this.indexes);
    }
}
export interface UserMessagingStateShape {
    unread: number;
    seq: number;
}

export class UserMessagingState extends FEntity {
    get uid(): number { return this._value.uid; }
    get unread(): number {
        return this._value.unread;
    }
    set unread(value: number) {
        this._checkIsWritable();
        if (value === this._value.unread) { return; }
        this._value.unread = value;
        this.markDirty();
    }
    get seq(): number {
        return this._value.seq;
    }
    set seq(value: number) {
        this._checkIsWritable();
        if (value === this._value.seq) { return; }
        this._value.seq = value;
        this.markDirty();
    }
}

export class UserMessagingStateFactory extends FEntityFactory<UserMessagingState> {
    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'userMessagingState'),
            { enableVersioning: true, enableTimestamps: true },
            []
        );
    }
    extractId(rawId: any[]) {
        return { 'uid': rawId[0] };
    }
    async findById(uid: number) {
        return await this._findById([uid]);
    }
    async create(uid: number, shape: UserMessagingStateShape) {
        return await this._create([uid], { uid, ...shape });
    }
    watch(uid: number, cb: () => void) {
        return this._watch([uid], cb);
    }
    protected _createEntity(value: any, isNew: boolean) {
        return new UserMessagingState(this.connection, this.namespace, [value.uid], value, this.options, isNew, this.indexes);
    }
}
export interface UserMessagingEventShape {
    allUnread: number;
    convUnread: number;
    userId?: number| null;
    kickedIds?: any| null;
    addedIds?: any| null;
    title?: string| null;
    photo?: string| null;
    messageId?: string| null;
    kind: 'create_message' | 'update_message' | 'delete_message' | 'group_update' | 'add_members' | 'remove_members';
}

export class UserMessagingEvent extends FEntity {
    get uid(): number { return this._value.uid; }
    get seq(): number { return this._value.seq; }
    get allUnread(): number {
        return this._value.allUnread;
    }
    set allUnread(value: number) {
        this._checkIsWritable();
        if (value === this._value.allUnread) { return; }
        this._value.allUnread = value;
        this.markDirty();
    }
    get convUnread(): number {
        return this._value.convUnread;
    }
    set convUnread(value: number) {
        this._checkIsWritable();
        if (value === this._value.convUnread) { return; }
        this._value.convUnread = value;
        this.markDirty();
    }
    get userId(): number | null {
        let res = this._value.userId;
        if (res) { return res; }
        return null;
    }
    set userId(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.userId) { return; }
        this._value.userId = value;
        this.markDirty();
    }
    get kickedIds(): any | null {
        let res = this._value.kickedIds;
        if (res) { return res; }
        return null;
    }
    set kickedIds(value: any | null) {
        this._checkIsWritable();
        if (value === this._value.kickedIds) { return; }
        this._value.kickedIds = value;
        this.markDirty();
    }
    get addedIds(): any | null {
        let res = this._value.addedIds;
        if (res) { return res; }
        return null;
    }
    set addedIds(value: any | null) {
        this._checkIsWritable();
        if (value === this._value.addedIds) { return; }
        this._value.addedIds = value;
        this.markDirty();
    }
    get title(): string | null {
        let res = this._value.title;
        if (res) { return res; }
        return null;
    }
    set title(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.title) { return; }
        this._value.title = value;
        this.markDirty();
    }
    get photo(): string | null {
        let res = this._value.photo;
        if (res) { return res; }
        return null;
    }
    set photo(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.photo) { return; }
        this._value.photo = value;
        this.markDirty();
    }
    get messageId(): string | null {
        let res = this._value.messageId;
        if (res) { return res; }
        return null;
    }
    set messageId(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.messageId) { return; }
        this._value.messageId = value;
        this.markDirty();
    }
    get kind(): 'create_message' | 'update_message' | 'delete_message' | 'group_update' | 'add_members' | 'remove_members' {
        return this._value.kind;
    }
    set kind(value: 'create_message' | 'update_message' | 'delete_message' | 'group_update' | 'add_members' | 'remove_members') {
        this._checkIsWritable();
        if (value === this._value.kind) { return; }
        this._value.kind = value;
        this.markDirty();
    }
}

export class UserMessagingEventFactory extends FEntityFactory<UserMessagingEvent> {
    constructor(connection: FConnection) {
        super(connection,
            new FNamespace('entity', 'userMessagingEvent'),
            { enableVersioning: true, enableTimestamps: true },
            []
        );
    }
    extractId(rawId: any[]) {
        return { 'uid': rawId[0], 'seq': rawId[1] };
    }
    async findById(uid: number, seq: number) {
        return await this._findById([uid, seq]);
    }
    async create(uid: number, seq: number, shape: UserMessagingEventShape) {
        return await this._create([uid, seq], { uid, seq, ...shape });
    }
    watch(uid: number, seq: number, cb: () => void) {
        return this._watch([uid, seq], cb);
    }
    protected _createEntity(value: any, isNew: boolean) {
        return new UserMessagingEvent(this.connection, this.namespace, [value.uid, value.seq], value, this.options, isNew, this.indexes);
    }
}

export class AllEntities extends FDBInstance {
    Online: OnlineFactory;
    Presence: PresenceFactory;
    Counter: CounterFactory;
    AuthToken: AuthTokenFactory;
    ServiceCache: ServiceCacheFactory;
    Lock: LockFactory;
    Task: TaskFactory;
    PushFirebase: PushFirebaseFactory;
    PushApple: PushAppleFactory;
    PushWeb: PushWebFactory;
    UserProfilePrefil: UserProfilePrefilFactory;
    UserProfile: UserProfileFactory;
    FeatureFlag: FeatureFlagFactory;
    OrganizationFeatures: OrganizationFeaturesFactory;
    ReaderState: ReaderStateFactory;
    SuperAdmin: SuperAdminFactory;
    UserSettings: UserSettingsFactory;
    ShortnameReservation: ShortnameReservationFactory;
    AuthCodeSession: AuthCodeSessionFactory;
    ConversationSeq: ConversationSeqFactory;
    Message: MessageFactory;
    ConversationEvent: ConversationEventFactory;
    UserConversationEvent: UserConversationEventFactory;
    UserMessagingState: UserMessagingStateFactory;
    UserMessagingEvent: UserMessagingEventFactory;

    constructor(connection: FConnection) {
        super(connection);
        this.Online = new OnlineFactory(connection);
        this.Presence = new PresenceFactory(connection);
        this.Counter = new CounterFactory(connection);
        this.AuthToken = new AuthTokenFactory(connection);
        this.ServiceCache = new ServiceCacheFactory(connection);
        this.Lock = new LockFactory(connection);
        this.Task = new TaskFactory(connection);
        this.PushFirebase = new PushFirebaseFactory(connection);
        this.PushApple = new PushAppleFactory(connection);
        this.PushWeb = new PushWebFactory(connection);
        this.UserProfilePrefil = new UserProfilePrefilFactory(connection);
        this.UserProfile = new UserProfileFactory(connection);
        this.FeatureFlag = new FeatureFlagFactory(connection);
        this.OrganizationFeatures = new OrganizationFeaturesFactory(connection);
        this.ReaderState = new ReaderStateFactory(connection);
        this.SuperAdmin = new SuperAdminFactory(connection);
        this.UserSettings = new UserSettingsFactory(connection);
        this.ShortnameReservation = new ShortnameReservationFactory(connection);
        this.AuthCodeSession = new AuthCodeSessionFactory(connection);
        this.ConversationSeq = new ConversationSeqFactory(connection);
        this.Message = new MessageFactory(connection);
        this.ConversationEvent = new ConversationEventFactory(connection);
        this.UserConversationEvent = new UserConversationEventFactory(connection);
        this.UserMessagingState = new UserMessagingStateFactory(connection);
        this.UserMessagingEvent = new UserMessagingEventFactory(connection);
    }
}
