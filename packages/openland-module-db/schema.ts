// THIS FILE IS AUTOGENERATED! DO NOT TRY TO EDIT!
// @ts-ignore
import { EntitiesBase } from 'foundation-orm/EntitiesBase';
// @ts-ignore
import { Subspace, Directory, Tuple } from '@openland/foundationdb';
// @ts-ignore
import { FEntity, FEntityOptions } from 'foundation-orm/FEntity';
// @ts-ignore
import { FEntitySchema } from 'foundation-orm/FEntitySchema';
// @ts-ignore
import { FEntityIndex } from 'foundation-orm/FEntityIndex';
// @ts-ignore
import { FEntityFactory } from 'foundation-orm/FEntityFactory';
// @ts-ignore
import { FConnection } from 'foundation-orm/FConnection';
// @ts-ignore
import { validators } from 'foundation-orm/utils/validators';
// @ts-ignore
import { EntityLayer } from 'foundation-orm/EntityLayer';
// @ts-ignore
import { Context } from '@openland/context';
// @ts-ignore
import { json, jField, jNumber, jString, jBool, jVec, jEnum, jEnumString } from 'openland-utils/jsonSchema';

export interface UserIndexingQueueShape {
}

export class UserIndexingQueue extends FEntity {
    readonly entityName: 'UserIndexingQueue' = 'UserIndexingQueue';
    get id(): number { return this._value.id; }
}

export class UserIndexingQueueFactory extends FEntityFactory<UserIndexingQueue> {
    static schema: FEntitySchema = {
        name: 'UserIndexingQueue',
        editable: false,
        primaryKeys: [
            { name: 'id', type: 'number' },
        ],
        fields: [
        ],
        indexes: [
            { name: 'updated', type: 'range', fields: ['updatedAt'] },
        ],
    };

    static async create(layer: EntityLayer) {
        let directory = await layer.resolveEntityDirectory('userIndexingQueue');
        let config = { enableVersioning: true, enableTimestamps: true, validator: UserIndexingQueueFactory.validate, keyValidator: UserIndexingQueueFactory.validateKey, hasLiveStreams: false };
        let indexUpdated = new FEntityIndex(await layer.resolveEntityIndexDirectory('userIndexingQueue', 'updated'), 'updated', ['updatedAt'], false);
        let indexes = {
            updated: indexUpdated,
        };
        return new UserIndexingQueueFactory(layer, directory, config, indexes);
    }

    readonly indexUpdated: FEntityIndex;

    private static validate(src: any) {
        validators.notNull('id', src.id);
        validators.isNumber('id', src.id);
    }

    private static validateKey(key: Tuple[]) {
        validators.isNumber('0', key[0]);
    }

    constructor(layer: EntityLayer, directory: Subspace, config: FEntityOptions, indexes: { updated: FEntityIndex }) {
        super('UserIndexingQueue', 'userIndexingQueue', config, [indexes.updated], layer, directory);
        this.indexUpdated = indexes.updated;
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'id': rawId[0] };
    }
    async findById(ctx: Context, id: number) {
        return await this._findById(ctx, [id]);
    }
    async create(ctx: Context, id: number, shape: UserIndexingQueueShape) {
        return await this._create(ctx, [id], { id, ...shape });
    }
    async create_UNSAFE(ctx: Context, id: number, shape: UserIndexingQueueShape) {
        return await this._create_UNSAFE(ctx, [id], { id, ...shape });
    }
    watch(ctx: Context, id: number) {
        return this._watch(ctx, [id]);
    }
    async rangeFromUpdated(ctx: Context, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, this.indexUpdated.directory, [], limit, reversed);
    }
    async rangeFromUpdatedWithCursor(ctx: Context, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, this.indexUpdated.directory, [], limit, after, reversed);
    }
    async allFromUpdated(ctx: Context, ) {
        return await this._findAll(ctx, this.indexUpdated.directory, []);
    }
    createUpdatedStream(limit: number, after?: string) {
        return this._createStream(this.indexUpdated.directory, [], limit, after); 
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new UserIndexingQueue(ctx, this.layer, this.directory, [value.id], value, this.options, isNew, this.indexes, 'UserIndexingQueue');
    }
}
export interface OrganizationIndexingQueueShape {
}

export class OrganizationIndexingQueue extends FEntity {
    readonly entityName: 'OrganizationIndexingQueue' = 'OrganizationIndexingQueue';
    get id(): number { return this._value.id; }
}

export class OrganizationIndexingQueueFactory extends FEntityFactory<OrganizationIndexingQueue> {
    static schema: FEntitySchema = {
        name: 'OrganizationIndexingQueue',
        editable: false,
        primaryKeys: [
            { name: 'id', type: 'number' },
        ],
        fields: [
        ],
        indexes: [
            { name: 'updated', type: 'range', fields: ['updatedAt'] },
        ],
    };

    static async create(layer: EntityLayer) {
        let directory = await layer.resolveEntityDirectory('organizationIndexingQueue');
        let config = { enableVersioning: true, enableTimestamps: true, validator: OrganizationIndexingQueueFactory.validate, keyValidator: OrganizationIndexingQueueFactory.validateKey, hasLiveStreams: false };
        let indexUpdated = new FEntityIndex(await layer.resolveEntityIndexDirectory('organizationIndexingQueue', 'updated'), 'updated', ['updatedAt'], false);
        let indexes = {
            updated: indexUpdated,
        };
        return new OrganizationIndexingQueueFactory(layer, directory, config, indexes);
    }

    readonly indexUpdated: FEntityIndex;

    private static validate(src: any) {
        validators.notNull('id', src.id);
        validators.isNumber('id', src.id);
    }

    private static validateKey(key: Tuple[]) {
        validators.isNumber('0', key[0]);
    }

    constructor(layer: EntityLayer, directory: Subspace, config: FEntityOptions, indexes: { updated: FEntityIndex }) {
        super('OrganizationIndexingQueue', 'organizationIndexingQueue', config, [indexes.updated], layer, directory);
        this.indexUpdated = indexes.updated;
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'id': rawId[0] };
    }
    async findById(ctx: Context, id: number) {
        return await this._findById(ctx, [id]);
    }
    async create(ctx: Context, id: number, shape: OrganizationIndexingQueueShape) {
        return await this._create(ctx, [id], { id, ...shape });
    }
    async create_UNSAFE(ctx: Context, id: number, shape: OrganizationIndexingQueueShape) {
        return await this._create_UNSAFE(ctx, [id], { id, ...shape });
    }
    watch(ctx: Context, id: number) {
        return this._watch(ctx, [id]);
    }
    async rangeFromUpdated(ctx: Context, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, this.indexUpdated.directory, [], limit, reversed);
    }
    async rangeFromUpdatedWithCursor(ctx: Context, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, this.indexUpdated.directory, [], limit, after, reversed);
    }
    async allFromUpdated(ctx: Context, ) {
        return await this._findAll(ctx, this.indexUpdated.directory, []);
    }
    createUpdatedStream(limit: number, after?: string) {
        return this._createStream(this.indexUpdated.directory, [], limit, after); 
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new OrganizationIndexingQueue(ctx, this.layer, this.directory, [value.id], value, this.options, isNew, this.indexes, 'OrganizationIndexingQueue');
    }
}
export interface ConversationShape {
    kind: 'private' | 'organization' | 'room';
    deleted?: boolean| null;
    archived?: boolean| null;
}

export class Conversation extends FEntity {
    readonly entityName: 'Conversation' = 'Conversation';
    get id(): number { return this._value.id; }
    get kind(): 'private' | 'organization' | 'room' {
        return this._value.kind;
    }
    set kind(value: 'private' | 'organization' | 'room') {
        this._checkIsWritable();
        if (value === this._value.kind) { return; }
        this._value.kind = value;
        this.markDirty();
    }
    get deleted(): boolean | null {
        let res = this._value.deleted;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set deleted(value: boolean | null) {
        this._checkIsWritable();
        if (value === this._value.deleted) { return; }
        this._value.deleted = value;
        this.markDirty();
    }
    get archived(): boolean | null {
        let res = this._value.archived;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set archived(value: boolean | null) {
        this._checkIsWritable();
        if (value === this._value.archived) { return; }
        this._value.archived = value;
        this.markDirty();
    }
}

export class ConversationFactory extends FEntityFactory<Conversation> {
    static schema: FEntitySchema = {
        name: 'Conversation',
        editable: false,
        primaryKeys: [
            { name: 'id', type: 'number' },
        ],
        fields: [
            { name: 'kind', type: 'enum', enumValues: ['private', 'organization', 'room'] },
            { name: 'deleted', type: 'boolean' },
            { name: 'archived', type: 'boolean' },
        ],
        indexes: [
        ],
    };

    static async create(layer: EntityLayer) {
        let directory = await layer.resolveEntityDirectory('conversation');
        let config = { enableVersioning: true, enableTimestamps: true, validator: ConversationFactory.validate, keyValidator: ConversationFactory.validateKey, hasLiveStreams: false };
        return new ConversationFactory(layer, directory, config);
    }

    private static validate(src: any) {
        validators.notNull('id', src.id);
        validators.isNumber('id', src.id);
        validators.notNull('kind', src.kind);
        validators.isEnum('kind', src.kind, ['private', 'organization', 'room']);
        validators.isBoolean('deleted', src.deleted);
        validators.isBoolean('archived', src.archived);
    }

    private static validateKey(key: Tuple[]) {
        validators.isNumber('0', key[0]);
    }

    constructor(layer: EntityLayer, directory: Subspace, config: FEntityOptions) {
        super('Conversation', 'conversation', config, [], layer, directory);
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'id': rawId[0] };
    }
    async findById(ctx: Context, id: number) {
        return await this._findById(ctx, [id]);
    }
    async create(ctx: Context, id: number, shape: ConversationShape) {
        return await this._create(ctx, [id], { id, ...shape });
    }
    async create_UNSAFE(ctx: Context, id: number, shape: ConversationShape) {
        return await this._create_UNSAFE(ctx, [id], { id, ...shape });
    }
    watch(ctx: Context, id: number) {
        return this._watch(ctx, [id]);
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new Conversation(ctx, this.layer, this.directory, [value.id], value, this.options, isNew, this.indexes, 'Conversation');
    }
}
export interface ConversationPrivateShape {
    uid1: number;
    uid2: number;
    pinnedMessage?: number| null;
}

export class ConversationPrivate extends FEntity {
    readonly entityName: 'ConversationPrivate' = 'ConversationPrivate';
    get id(): number { return this._value.id; }
    get uid1(): number {
        return this._value.uid1;
    }
    set uid1(value: number) {
        this._checkIsWritable();
        if (value === this._value.uid1) { return; }
        this._value.uid1 = value;
        this.markDirty();
    }
    get uid2(): number {
        return this._value.uid2;
    }
    set uid2(value: number) {
        this._checkIsWritable();
        if (value === this._value.uid2) { return; }
        this._value.uid2 = value;
        this.markDirty();
    }
    get pinnedMessage(): number | null {
        let res = this._value.pinnedMessage;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set pinnedMessage(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.pinnedMessage) { return; }
        this._value.pinnedMessage = value;
        this.markDirty();
    }
}

export class ConversationPrivateFactory extends FEntityFactory<ConversationPrivate> {
    static schema: FEntitySchema = {
        name: 'ConversationPrivate',
        editable: false,
        primaryKeys: [
            { name: 'id', type: 'number' },
        ],
        fields: [
            { name: 'uid1', type: 'number' },
            { name: 'uid2', type: 'number' },
            { name: 'pinnedMessage', type: 'number' },
        ],
        indexes: [
            { name: 'users', type: 'unique', fields: ['uid1', 'uid2'] },
        ],
    };

    static async create(layer: EntityLayer) {
        let directory = await layer.resolveEntityDirectory('conversationPrivate');
        let config = { enableVersioning: true, enableTimestamps: true, validator: ConversationPrivateFactory.validate, keyValidator: ConversationPrivateFactory.validateKey, hasLiveStreams: false };
        let indexUsers = new FEntityIndex(await layer.resolveEntityIndexDirectory('conversationPrivate', 'users'), 'users', ['uid1', 'uid2'], true);
        let indexes = {
            users: indexUsers,
        };
        return new ConversationPrivateFactory(layer, directory, config, indexes);
    }

    readonly indexUsers: FEntityIndex;

    private static validate(src: any) {
        validators.notNull('id', src.id);
        validators.isNumber('id', src.id);
        validators.notNull('uid1', src.uid1);
        validators.isNumber('uid1', src.uid1);
        validators.notNull('uid2', src.uid2);
        validators.isNumber('uid2', src.uid2);
        validators.isNumber('pinnedMessage', src.pinnedMessage);
    }

    private static validateKey(key: Tuple[]) {
        validators.isNumber('0', key[0]);
    }

    constructor(layer: EntityLayer, directory: Subspace, config: FEntityOptions, indexes: { users: FEntityIndex }) {
        super('ConversationPrivate', 'conversationPrivate', config, [indexes.users], layer, directory);
        this.indexUsers = indexes.users;
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'id': rawId[0] };
    }
    async findById(ctx: Context, id: number) {
        return await this._findById(ctx, [id]);
    }
    async create(ctx: Context, id: number, shape: ConversationPrivateShape) {
        return await this._create(ctx, [id], { id, ...shape });
    }
    async create_UNSAFE(ctx: Context, id: number, shape: ConversationPrivateShape) {
        return await this._create_UNSAFE(ctx, [id], { id, ...shape });
    }
    watch(ctx: Context, id: number) {
        return this._watch(ctx, [id]);
    }
    async findFromUsers(ctx: Context, uid1: number, uid2: number) {
        return await this._findFromIndex(ctx, this.indexUsers.directory, [uid1, uid2]);
    }
    async allFromUsersAfter(ctx: Context, uid1: number, after: number) {
        return await this._findRangeAllAfter(ctx, this.indexUsers.directory, [uid1], after);
    }
    async rangeFromUsersAfter(ctx: Context, uid1: number, after: number, limit: number, reversed?: boolean) {
        return await this._findRangeAfter(ctx, this.indexUsers.directory, [uid1], after, limit, reversed);
    }
    async rangeFromUsers(ctx: Context, uid1: number, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, this.indexUsers.directory, [uid1], limit, reversed);
    }
    async rangeFromUsersWithCursor(ctx: Context, uid1: number, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, this.indexUsers.directory, [uid1], limit, after, reversed);
    }
    async allFromUsers(ctx: Context, uid1: number) {
        return await this._findAll(ctx, this.indexUsers.directory, [uid1]);
    }
    createUsersStream(uid1: number, limit: number, after?: string) {
        return this._createStream(this.indexUsers.directory, [uid1], limit, after); 
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new ConversationPrivate(ctx, this.layer, this.directory, [value.id], value, this.options, isNew, this.indexes, 'ConversationPrivate');
    }
}
export interface ConversationOrganizationShape {
    oid: number;
}

export class ConversationOrganization extends FEntity {
    readonly entityName: 'ConversationOrganization' = 'ConversationOrganization';
    get id(): number { return this._value.id; }
    get oid(): number {
        return this._value.oid;
    }
    set oid(value: number) {
        this._checkIsWritable();
        if (value === this._value.oid) { return; }
        this._value.oid = value;
        this.markDirty();
    }
}

export class ConversationOrganizationFactory extends FEntityFactory<ConversationOrganization> {
    static schema: FEntitySchema = {
        name: 'ConversationOrganization',
        editable: false,
        primaryKeys: [
            { name: 'id', type: 'number' },
        ],
        fields: [
            { name: 'oid', type: 'number' },
        ],
        indexes: [
            { name: 'organization', type: 'unique', fields: ['oid'] },
        ],
    };

    static async create(layer: EntityLayer) {
        let directory = await layer.resolveEntityDirectory('conversationOrganization');
        let config = { enableVersioning: true, enableTimestamps: true, validator: ConversationOrganizationFactory.validate, keyValidator: ConversationOrganizationFactory.validateKey, hasLiveStreams: false };
        let indexOrganization = new FEntityIndex(await layer.resolveEntityIndexDirectory('conversationOrganization', 'organization'), 'organization', ['oid'], true);
        let indexes = {
            organization: indexOrganization,
        };
        return new ConversationOrganizationFactory(layer, directory, config, indexes);
    }

    readonly indexOrganization: FEntityIndex;

    private static validate(src: any) {
        validators.notNull('id', src.id);
        validators.isNumber('id', src.id);
        validators.notNull('oid', src.oid);
        validators.isNumber('oid', src.oid);
    }

    private static validateKey(key: Tuple[]) {
        validators.isNumber('0', key[0]);
    }

    constructor(layer: EntityLayer, directory: Subspace, config: FEntityOptions, indexes: { organization: FEntityIndex }) {
        super('ConversationOrganization', 'conversationOrganization', config, [indexes.organization], layer, directory);
        this.indexOrganization = indexes.organization;
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'id': rawId[0] };
    }
    async findById(ctx: Context, id: number) {
        return await this._findById(ctx, [id]);
    }
    async create(ctx: Context, id: number, shape: ConversationOrganizationShape) {
        return await this._create(ctx, [id], { id, ...shape });
    }
    async create_UNSAFE(ctx: Context, id: number, shape: ConversationOrganizationShape) {
        return await this._create_UNSAFE(ctx, [id], { id, ...shape });
    }
    watch(ctx: Context, id: number) {
        return this._watch(ctx, [id]);
    }
    async findFromOrganization(ctx: Context, oid: number) {
        return await this._findFromIndex(ctx, this.indexOrganization.directory, [oid]);
    }
    async rangeFromOrganization(ctx: Context, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, this.indexOrganization.directory, [], limit, reversed);
    }
    async rangeFromOrganizationWithCursor(ctx: Context, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, this.indexOrganization.directory, [], limit, after, reversed);
    }
    async allFromOrganization(ctx: Context, ) {
        return await this._findAll(ctx, this.indexOrganization.directory, []);
    }
    createOrganizationStream(limit: number, after?: string) {
        return this._createStream(this.indexOrganization.directory, [], limit, after); 
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new ConversationOrganization(ctx, this.layer, this.directory, [value.id], value, this.options, isNew, this.indexes, 'ConversationOrganization');
    }
}
export interface ConversationRoomShape {
    kind: 'organization' | 'internal' | 'public' | 'group';
    oid?: number| null;
    ownerId?: number| null;
    featured?: boolean| null;
    listed?: boolean| null;
    isChannel?: boolean| null;
}

export class ConversationRoom extends FEntity {
    readonly entityName: 'ConversationRoom' = 'ConversationRoom';
    get id(): number { return this._value.id; }
    get kind(): 'organization' | 'internal' | 'public' | 'group' {
        return this._value.kind;
    }
    set kind(value: 'organization' | 'internal' | 'public' | 'group') {
        this._checkIsWritable();
        if (value === this._value.kind) { return; }
        this._value.kind = value;
        this.markDirty();
    }
    get oid(): number | null {
        let res = this._value.oid;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set oid(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.oid) { return; }
        this._value.oid = value;
        this.markDirty();
    }
    get ownerId(): number | null {
        let res = this._value.ownerId;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set ownerId(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.ownerId) { return; }
        this._value.ownerId = value;
        this.markDirty();
    }
    get featured(): boolean | null {
        let res = this._value.featured;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set featured(value: boolean | null) {
        this._checkIsWritable();
        if (value === this._value.featured) { return; }
        this._value.featured = value;
        this.markDirty();
    }
    get listed(): boolean | null {
        let res = this._value.listed;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set listed(value: boolean | null) {
        this._checkIsWritable();
        if (value === this._value.listed) { return; }
        this._value.listed = value;
        this.markDirty();
    }
    get isChannel(): boolean | null {
        let res = this._value.isChannel;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set isChannel(value: boolean | null) {
        this._checkIsWritable();
        if (value === this._value.isChannel) { return; }
        this._value.isChannel = value;
        this.markDirty();
    }
}

export class ConversationRoomFactory extends FEntityFactory<ConversationRoom> {
    static schema: FEntitySchema = {
        name: 'ConversationRoom',
        editable: false,
        primaryKeys: [
            { name: 'id', type: 'number' },
        ],
        fields: [
            { name: 'kind', type: 'enum', enumValues: ['organization', 'internal', 'public', 'group'] },
            { name: 'oid', type: 'number' },
            { name: 'ownerId', type: 'number' },
            { name: 'featured', type: 'boolean' },
            { name: 'listed', type: 'boolean' },
            { name: 'isChannel', type: 'boolean' },
        ],
        indexes: [
            { name: 'organization', type: 'range', fields: ['oid'] },
            { name: 'organizationPublicRooms', type: 'unique', fields: ['oid', 'id'] },
        ],
    };

    static async create(layer: EntityLayer) {
        let directory = await layer.resolveEntityDirectory('conversationRoom');
        let config = { enableVersioning: true, enableTimestamps: true, validator: ConversationRoomFactory.validate, keyValidator: ConversationRoomFactory.validateKey, hasLiveStreams: false };
        let indexOrganization = new FEntityIndex(await layer.resolveEntityIndexDirectory('conversationRoom', 'organization'), 'organization', ['oid'], false, (v) => v.kind === 'public' || v.kind === 'internal');
        let indexOrganizationPublicRooms = new FEntityIndex(await layer.resolveEntityIndexDirectory('conversationRoom', 'organizationPublicRooms'), 'organizationPublicRooms', ['oid', 'id'], true, (v) => v.kind === 'public');
        let indexes = {
            organization: indexOrganization,
            organizationPublicRooms: indexOrganizationPublicRooms,
        };
        return new ConversationRoomFactory(layer, directory, config, indexes);
    }

    readonly indexOrganization: FEntityIndex;
    readonly indexOrganizationPublicRooms: FEntityIndex;

    private static validate(src: any) {
        validators.notNull('id', src.id);
        validators.isNumber('id', src.id);
        validators.notNull('kind', src.kind);
        validators.isEnum('kind', src.kind, ['organization', 'internal', 'public', 'group']);
        validators.isNumber('oid', src.oid);
        validators.isNumber('ownerId', src.ownerId);
        validators.isBoolean('featured', src.featured);
        validators.isBoolean('listed', src.listed);
        validators.isBoolean('isChannel', src.isChannel);
    }

    private static validateKey(key: Tuple[]) {
        validators.isNumber('0', key[0]);
    }

    constructor(layer: EntityLayer, directory: Subspace, config: FEntityOptions, indexes: { organization: FEntityIndex, organizationPublicRooms: FEntityIndex }) {
        super('ConversationRoom', 'conversationRoom', config, [indexes.organization, indexes.organizationPublicRooms], layer, directory);
        this.indexOrganization = indexes.organization;
        this.indexOrganizationPublicRooms = indexes.organizationPublicRooms;
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'id': rawId[0] };
    }
    async findById(ctx: Context, id: number) {
        return await this._findById(ctx, [id]);
    }
    async create(ctx: Context, id: number, shape: ConversationRoomShape) {
        return await this._create(ctx, [id], { id, ...shape });
    }
    async create_UNSAFE(ctx: Context, id: number, shape: ConversationRoomShape) {
        return await this._create_UNSAFE(ctx, [id], { id, ...shape });
    }
    watch(ctx: Context, id: number) {
        return this._watch(ctx, [id]);
    }
    async rangeFromOrganization(ctx: Context, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, this.indexOrganization.directory, [], limit, reversed);
    }
    async rangeFromOrganizationWithCursor(ctx: Context, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, this.indexOrganization.directory, [], limit, after, reversed);
    }
    async allFromOrganization(ctx: Context, ) {
        return await this._findAll(ctx, this.indexOrganization.directory, []);
    }
    createOrganizationStream(limit: number, after?: string) {
        return this._createStream(this.indexOrganization.directory, [], limit, after); 
    }
    async findFromOrganizationPublicRooms(ctx: Context, oid: number, id: number) {
        return await this._findFromIndex(ctx, this.indexOrganizationPublicRooms.directory, [oid, id]);
    }
    async allFromOrganizationPublicRoomsAfter(ctx: Context, oid: number, after: number) {
        return await this._findRangeAllAfter(ctx, this.indexOrganizationPublicRooms.directory, [oid], after);
    }
    async rangeFromOrganizationPublicRoomsAfter(ctx: Context, oid: number, after: number, limit: number, reversed?: boolean) {
        return await this._findRangeAfter(ctx, this.indexOrganizationPublicRooms.directory, [oid], after, limit, reversed);
    }
    async rangeFromOrganizationPublicRooms(ctx: Context, oid: number, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, this.indexOrganizationPublicRooms.directory, [oid], limit, reversed);
    }
    async rangeFromOrganizationPublicRoomsWithCursor(ctx: Context, oid: number, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, this.indexOrganizationPublicRooms.directory, [oid], limit, after, reversed);
    }
    async allFromOrganizationPublicRooms(ctx: Context, oid: number) {
        return await this._findAll(ctx, this.indexOrganizationPublicRooms.directory, [oid]);
    }
    createOrganizationPublicRoomsStream(oid: number, limit: number, after?: string) {
        return this._createStream(this.indexOrganizationPublicRooms.directory, [oid], limit, after); 
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new ConversationRoom(ctx, this.layer, this.directory, [value.id], value, this.options, isNew, this.indexes, 'ConversationRoom');
    }
}
export interface RoomProfileShape {
    title: string;
    image?: any| null;
    description?: string| null;
    socialImage?: any| null;
    pinnedMessage?: number| null;
    welcomeMessageIsOn?: boolean| null;
    welcomeMessageSender?: number| null;
    welcomeMessageText?: string| null;
    activeMembersCount?: number| null;
}

export class RoomProfile extends FEntity {
    readonly entityName: 'RoomProfile' = 'RoomProfile';
    get id(): number { return this._value.id; }
    get title(): string {
        return this._value.title;
    }
    set title(value: string) {
        this._checkIsWritable();
        if (value === this._value.title) { return; }
        this._value.title = value;
        this.markDirty();
    }
    get image(): any | null {
        let res = this._value.image;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set image(value: any | null) {
        this._checkIsWritable();
        if (value === this._value.image) { return; }
        this._value.image = value;
        this.markDirty();
    }
    get description(): string | null {
        let res = this._value.description;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set description(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.description) { return; }
        this._value.description = value;
        this.markDirty();
    }
    get socialImage(): any | null {
        let res = this._value.socialImage;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set socialImage(value: any | null) {
        this._checkIsWritable();
        if (value === this._value.socialImage) { return; }
        this._value.socialImage = value;
        this.markDirty();
    }
    get pinnedMessage(): number | null {
        let res = this._value.pinnedMessage;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set pinnedMessage(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.pinnedMessage) { return; }
        this._value.pinnedMessage = value;
        this.markDirty();
    }
    get welcomeMessageIsOn(): boolean | null {
        let res = this._value.welcomeMessageIsOn;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set welcomeMessageIsOn(value: boolean | null) {
        this._checkIsWritable();
        if (value === this._value.welcomeMessageIsOn) { return; }
        this._value.welcomeMessageIsOn = value;
        this.markDirty();
    }
    get welcomeMessageSender(): number | null {
        let res = this._value.welcomeMessageSender;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set welcomeMessageSender(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.welcomeMessageSender) { return; }
        this._value.welcomeMessageSender = value;
        this.markDirty();
    }
    get welcomeMessageText(): string | null {
        let res = this._value.welcomeMessageText;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set welcomeMessageText(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.welcomeMessageText) { return; }
        this._value.welcomeMessageText = value;
        this.markDirty();
    }
    get activeMembersCount(): number | null {
        let res = this._value.activeMembersCount;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set activeMembersCount(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.activeMembersCount) { return; }
        this._value.activeMembersCount = value;
        this.markDirty();
    }
}

export class RoomProfileFactory extends FEntityFactory<RoomProfile> {
    static schema: FEntitySchema = {
        name: 'RoomProfile',
        editable: false,
        primaryKeys: [
            { name: 'id', type: 'number' },
        ],
        fields: [
            { name: 'title', type: 'string' },
            { name: 'image', type: 'json' },
            { name: 'description', type: 'string' },
            { name: 'socialImage', type: 'json' },
            { name: 'pinnedMessage', type: 'number' },
            { name: 'welcomeMessageIsOn', type: 'boolean' },
            { name: 'welcomeMessageSender', type: 'number' },
            { name: 'welcomeMessageText', type: 'string' },
            { name: 'activeMembersCount', type: 'number' },
        ],
        indexes: [
            { name: 'updated', type: 'range', fields: ['updatedAt'] },
        ],
    };

    static async create(layer: EntityLayer) {
        let directory = await layer.resolveEntityDirectory('roomProfile');
        let config = { enableVersioning: true, enableTimestamps: true, validator: RoomProfileFactory.validate, keyValidator: RoomProfileFactory.validateKey, hasLiveStreams: false };
        let indexUpdated = new FEntityIndex(await layer.resolveEntityIndexDirectory('roomProfile', 'updated'), 'updated', ['updatedAt'], false);
        let indexes = {
            updated: indexUpdated,
        };
        return new RoomProfileFactory(layer, directory, config, indexes);
    }

    readonly indexUpdated: FEntityIndex;

    private static validate(src: any) {
        validators.notNull('id', src.id);
        validators.isNumber('id', src.id);
        validators.notNull('title', src.title);
        validators.isString('title', src.title);
        validators.isString('description', src.description);
        validators.isNumber('pinnedMessage', src.pinnedMessage);
        validators.isBoolean('welcomeMessageIsOn', src.welcomeMessageIsOn);
        validators.isNumber('welcomeMessageSender', src.welcomeMessageSender);
        validators.isString('welcomeMessageText', src.welcomeMessageText);
        validators.isNumber('activeMembersCount', src.activeMembersCount);
    }

    private static validateKey(key: Tuple[]) {
        validators.isNumber('0', key[0]);
    }

    constructor(layer: EntityLayer, directory: Subspace, config: FEntityOptions, indexes: { updated: FEntityIndex }) {
        super('RoomProfile', 'roomProfile', config, [indexes.updated], layer, directory);
        this.indexUpdated = indexes.updated;
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'id': rawId[0] };
    }
    async findById(ctx: Context, id: number) {
        return await this._findById(ctx, [id]);
    }
    async create(ctx: Context, id: number, shape: RoomProfileShape) {
        return await this._create(ctx, [id], { id, ...shape });
    }
    async create_UNSAFE(ctx: Context, id: number, shape: RoomProfileShape) {
        return await this._create_UNSAFE(ctx, [id], { id, ...shape });
    }
    watch(ctx: Context, id: number) {
        return this._watch(ctx, [id]);
    }
    async rangeFromUpdated(ctx: Context, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, this.indexUpdated.directory, [], limit, reversed);
    }
    async rangeFromUpdatedWithCursor(ctx: Context, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, this.indexUpdated.directory, [], limit, after, reversed);
    }
    async allFromUpdated(ctx: Context, ) {
        return await this._findAll(ctx, this.indexUpdated.directory, []);
    }
    createUpdatedStream(limit: number, after?: string) {
        return this._createStream(this.indexUpdated.directory, [], limit, after); 
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new RoomProfile(ctx, this.layer, this.directory, [value.id], value, this.options, isNew, this.indexes, 'RoomProfile');
    }
}
export interface RoomParticipantShape {
    invitedBy: number;
    role: 'member' | 'admin' | 'owner';
    status: 'joined' | 'requested' | 'left' | 'kicked';
}

export class RoomParticipant extends FEntity {
    readonly entityName: 'RoomParticipant' = 'RoomParticipant';
    get cid(): number { return this._value.cid; }
    get uid(): number { return this._value.uid; }
    get invitedBy(): number {
        return this._value.invitedBy;
    }
    set invitedBy(value: number) {
        this._checkIsWritable();
        if (value === this._value.invitedBy) { return; }
        this._value.invitedBy = value;
        this.markDirty();
    }
    get role(): 'member' | 'admin' | 'owner' {
        return this._value.role;
    }
    set role(value: 'member' | 'admin' | 'owner') {
        this._checkIsWritable();
        if (value === this._value.role) { return; }
        this._value.role = value;
        this.markDirty();
    }
    get status(): 'joined' | 'requested' | 'left' | 'kicked' {
        return this._value.status;
    }
    set status(value: 'joined' | 'requested' | 'left' | 'kicked') {
        this._checkIsWritable();
        if (value === this._value.status) { return; }
        this._value.status = value;
        this.markDirty();
    }
}

export class RoomParticipantFactory extends FEntityFactory<RoomParticipant> {
    static schema: FEntitySchema = {
        name: 'RoomParticipant',
        editable: false,
        primaryKeys: [
            { name: 'cid', type: 'number' },
            { name: 'uid', type: 'number' },
        ],
        fields: [
            { name: 'invitedBy', type: 'number' },
            { name: 'role', type: 'enum', enumValues: ['member', 'admin', 'owner'] },
            { name: 'status', type: 'enum', enumValues: ['joined', 'requested', 'left', 'kicked'] },
        ],
        indexes: [
            { name: 'active', type: 'unique', fields: ['cid', 'uid'] },
            { name: 'requests', type: 'unique', fields: ['cid', 'uid'] },
            { name: 'userActive', type: 'unique', fields: ['uid', 'cid'] },
        ],
    };

    static async create(layer: EntityLayer) {
        let directory = await layer.resolveEntityDirectory('roomParticipant');
        let config = { enableVersioning: true, enableTimestamps: true, validator: RoomParticipantFactory.validate, keyValidator: RoomParticipantFactory.validateKey, hasLiveStreams: false };
        let indexActive = new FEntityIndex(await layer.resolveEntityIndexDirectory('roomParticipant', 'active'), 'active', ['cid', 'uid'], true, (src) => src.status === 'joined');
        let indexRequests = new FEntityIndex(await layer.resolveEntityIndexDirectory('roomParticipant', 'requests'), 'requests', ['cid', 'uid'], true, (src) => src.status === 'requested');
        let indexUserActive = new FEntityIndex(await layer.resolveEntityIndexDirectory('roomParticipant', 'userActive'), 'userActive', ['uid', 'cid'], true, (src) => src.status === 'joined');
        let indexes = {
            active: indexActive,
            requests: indexRequests,
            userActive: indexUserActive,
        };
        return new RoomParticipantFactory(layer, directory, config, indexes);
    }

    readonly indexActive: FEntityIndex;
    readonly indexRequests: FEntityIndex;
    readonly indexUserActive: FEntityIndex;

    private static validate(src: any) {
        validators.notNull('cid', src.cid);
        validators.isNumber('cid', src.cid);
        validators.notNull('uid', src.uid);
        validators.isNumber('uid', src.uid);
        validators.notNull('invitedBy', src.invitedBy);
        validators.isNumber('invitedBy', src.invitedBy);
        validators.notNull('role', src.role);
        validators.isEnum('role', src.role, ['member', 'admin', 'owner']);
        validators.notNull('status', src.status);
        validators.isEnum('status', src.status, ['joined', 'requested', 'left', 'kicked']);
    }

    private static validateKey(key: Tuple[]) {
        validators.isNumber('0', key[0]);
        validators.isNumber('1', key[1]);
    }

    constructor(layer: EntityLayer, directory: Subspace, config: FEntityOptions, indexes: { active: FEntityIndex, requests: FEntityIndex, userActive: FEntityIndex }) {
        super('RoomParticipant', 'roomParticipant', config, [indexes.active, indexes.requests, indexes.userActive], layer, directory);
        this.indexActive = indexes.active;
        this.indexRequests = indexes.requests;
        this.indexUserActive = indexes.userActive;
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 2) { throw Error('Invalid key length!'); }
        return { 'cid': rawId[0], 'uid': rawId[1] };
    }
    async findById(ctx: Context, cid: number, uid: number) {
        return await this._findById(ctx, [cid, uid]);
    }
    async create(ctx: Context, cid: number, uid: number, shape: RoomParticipantShape) {
        return await this._create(ctx, [cid, uid], { cid, uid, ...shape });
    }
    async create_UNSAFE(ctx: Context, cid: number, uid: number, shape: RoomParticipantShape) {
        return await this._create_UNSAFE(ctx, [cid, uid], { cid, uid, ...shape });
    }
    watch(ctx: Context, cid: number, uid: number) {
        return this._watch(ctx, [cid, uid]);
    }
    async findFromActive(ctx: Context, cid: number, uid: number) {
        return await this._findFromIndex(ctx, this.indexActive.directory, [cid, uid]);
    }
    async allFromActiveAfter(ctx: Context, cid: number, after: number) {
        return await this._findRangeAllAfter(ctx, this.indexActive.directory, [cid], after);
    }
    async rangeFromActiveAfter(ctx: Context, cid: number, after: number, limit: number, reversed?: boolean) {
        return await this._findRangeAfter(ctx, this.indexActive.directory, [cid], after, limit, reversed);
    }
    async rangeFromActive(ctx: Context, cid: number, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, this.indexActive.directory, [cid], limit, reversed);
    }
    async rangeFromActiveWithCursor(ctx: Context, cid: number, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, this.indexActive.directory, [cid], limit, after, reversed);
    }
    async allFromActive(ctx: Context, cid: number) {
        return await this._findAll(ctx, this.indexActive.directory, [cid]);
    }
    createActiveStream(cid: number, limit: number, after?: string) {
        return this._createStream(this.indexActive.directory, [cid], limit, after); 
    }
    async findFromRequests(ctx: Context, cid: number, uid: number) {
        return await this._findFromIndex(ctx, this.indexRequests.directory, [cid, uid]);
    }
    async allFromRequestsAfter(ctx: Context, cid: number, after: number) {
        return await this._findRangeAllAfter(ctx, this.indexRequests.directory, [cid], after);
    }
    async rangeFromRequestsAfter(ctx: Context, cid: number, after: number, limit: number, reversed?: boolean) {
        return await this._findRangeAfter(ctx, this.indexRequests.directory, [cid], after, limit, reversed);
    }
    async rangeFromRequests(ctx: Context, cid: number, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, this.indexRequests.directory, [cid], limit, reversed);
    }
    async rangeFromRequestsWithCursor(ctx: Context, cid: number, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, this.indexRequests.directory, [cid], limit, after, reversed);
    }
    async allFromRequests(ctx: Context, cid: number) {
        return await this._findAll(ctx, this.indexRequests.directory, [cid]);
    }
    createRequestsStream(cid: number, limit: number, after?: string) {
        return this._createStream(this.indexRequests.directory, [cid], limit, after); 
    }
    async findFromUserActive(ctx: Context, uid: number, cid: number) {
        return await this._findFromIndex(ctx, this.indexUserActive.directory, [uid, cid]);
    }
    async allFromUserActiveAfter(ctx: Context, uid: number, after: number) {
        return await this._findRangeAllAfter(ctx, this.indexUserActive.directory, [uid], after);
    }
    async rangeFromUserActiveAfter(ctx: Context, uid: number, after: number, limit: number, reversed?: boolean) {
        return await this._findRangeAfter(ctx, this.indexUserActive.directory, [uid], after, limit, reversed);
    }
    async rangeFromUserActive(ctx: Context, uid: number, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, this.indexUserActive.directory, [uid], limit, reversed);
    }
    async rangeFromUserActiveWithCursor(ctx: Context, uid: number, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, this.indexUserActive.directory, [uid], limit, after, reversed);
    }
    async allFromUserActive(ctx: Context, uid: number) {
        return await this._findAll(ctx, this.indexUserActive.directory, [uid]);
    }
    createUserActiveStream(uid: number, limit: number, after?: string) {
        return this._createStream(this.indexUserActive.directory, [uid], limit, after); 
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new RoomParticipant(ctx, this.layer, this.directory, [value.cid, value.uid], value, this.options, isNew, this.indexes, 'RoomParticipant');
    }
}
export interface ConversationReceiverShape {
    enabled: boolean;
}

export class ConversationReceiver extends FEntity {
    readonly entityName: 'ConversationReceiver' = 'ConversationReceiver';
    get cid(): number { return this._value.cid; }
    get uid(): number { return this._value.uid; }
    get enabled(): boolean {
        return this._value.enabled;
    }
    set enabled(value: boolean) {
        this._checkIsWritable();
        if (value === this._value.enabled) { return; }
        this._value.enabled = value;
        this.markDirty();
    }
}

export class ConversationReceiverFactory extends FEntityFactory<ConversationReceiver> {
    static schema: FEntitySchema = {
        name: 'ConversationReceiver',
        editable: false,
        primaryKeys: [
            { name: 'cid', type: 'number' },
            { name: 'uid', type: 'number' },
        ],
        fields: [
            { name: 'enabled', type: 'boolean' },
        ],
        indexes: [
            { name: 'conversation', type: 'unique', fields: ['cid', 'uid'] },
        ],
    };

    static async create(layer: EntityLayer) {
        let directory = await layer.resolveEntityDirectory('conversationReceiver');
        let config = { enableVersioning: true, enableTimestamps: true, validator: ConversationReceiverFactory.validate, keyValidator: ConversationReceiverFactory.validateKey, hasLiveStreams: false };
        let indexConversation = new FEntityIndex(await layer.resolveEntityIndexDirectory('conversationReceiver', 'conversation'), 'conversation', ['cid', 'uid'], true, (src) => src.enabled);
        let indexes = {
            conversation: indexConversation,
        };
        return new ConversationReceiverFactory(layer, directory, config, indexes);
    }

    readonly indexConversation: FEntityIndex;

    private static validate(src: any) {
        validators.notNull('cid', src.cid);
        validators.isNumber('cid', src.cid);
        validators.notNull('uid', src.uid);
        validators.isNumber('uid', src.uid);
        validators.notNull('enabled', src.enabled);
        validators.isBoolean('enabled', src.enabled);
    }

    private static validateKey(key: Tuple[]) {
        validators.isNumber('0', key[0]);
        validators.isNumber('1', key[1]);
    }

    constructor(layer: EntityLayer, directory: Subspace, config: FEntityOptions, indexes: { conversation: FEntityIndex }) {
        super('ConversationReceiver', 'conversationReceiver', config, [indexes.conversation], layer, directory);
        this.indexConversation = indexes.conversation;
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 2) { throw Error('Invalid key length!'); }
        return { 'cid': rawId[0], 'uid': rawId[1] };
    }
    async findById(ctx: Context, cid: number, uid: number) {
        return await this._findById(ctx, [cid, uid]);
    }
    async create(ctx: Context, cid: number, uid: number, shape: ConversationReceiverShape) {
        return await this._create(ctx, [cid, uid], { cid, uid, ...shape });
    }
    async create_UNSAFE(ctx: Context, cid: number, uid: number, shape: ConversationReceiverShape) {
        return await this._create_UNSAFE(ctx, [cid, uid], { cid, uid, ...shape });
    }
    watch(ctx: Context, cid: number, uid: number) {
        return this._watch(ctx, [cid, uid]);
    }
    async findFromConversation(ctx: Context, cid: number, uid: number) {
        return await this._findFromIndex(ctx, this.indexConversation.directory, [cid, uid]);
    }
    async allFromConversationAfter(ctx: Context, cid: number, after: number) {
        return await this._findRangeAllAfter(ctx, this.indexConversation.directory, [cid], after);
    }
    async rangeFromConversationAfter(ctx: Context, cid: number, after: number, limit: number, reversed?: boolean) {
        return await this._findRangeAfter(ctx, this.indexConversation.directory, [cid], after, limit, reversed);
    }
    async rangeFromConversation(ctx: Context, cid: number, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, this.indexConversation.directory, [cid], limit, reversed);
    }
    async rangeFromConversationWithCursor(ctx: Context, cid: number, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, this.indexConversation.directory, [cid], limit, after, reversed);
    }
    async allFromConversation(ctx: Context, cid: number) {
        return await this._findAll(ctx, this.indexConversation.directory, [cid]);
    }
    createConversationStream(cid: number, limit: number, after?: string) {
        return this._createStream(this.indexConversation.directory, [cid], limit, after); 
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new ConversationReceiver(ctx, this.layer, this.directory, [value.cid, value.uid], value, this.options, isNew, this.indexes, 'ConversationReceiver');
    }
}
export interface MessageShape {
    cid: number;
    uid: number;
    repeatKey?: string| null;
    text?: string| null;
    replyMessages?: (number)[]| null;
    serviceMetadata?: any| null;
    reactions?: ({ userId: number, reaction: string, })[]| null;
    edited?: boolean| null;
    isMuted: boolean;
    isService: boolean;
    deleted?: boolean| null;
    spans?: ({ type: 'user_mention', offset: number, length: number, user: number, } | { type: 'multi_user_mention', offset: number, length: number, users: (number)[], } | { type: 'room_mention', offset: number, length: number, room: number, } | { type: 'link', offset: number, length: number, url: string, } | { type: 'bold_text', offset: number, length: number, } | { type: 'italic_text', offset: number, length: number, } | { type: 'irony_text', offset: number, length: number, } | { type: 'inline_code_text', offset: number, length: number, } | { type: 'code_block_text', offset: number, length: number, } | { type: 'insane_text', offset: number, length: number, } | { type: 'loud_text', offset: number, length: number, } | { type: 'rotating_text', offset: number, length: number, } | { type: 'date_text', offset: number, length: number, date: number, } | { type: 'all_mention', offset: number, length: number, })[]| null;
    attachmentsModern?: ({ type: 'file_attachment', fileId: string, filePreview: string | null, fileMetadata: { isImage: boolean, isStored: boolean, imageWidth: number | null, imageHeight: number | null, imageFormat: string | null, mimeType: string, name: string, size: number, } | null, id: string, } | { type: 'rich_attachment', title: string | null, subTitle: string | null, titleLink: string | null, text: string | null, icon: { uuid: string, crop: { x: number, y: number, w: number, h: number, } | null, } | null, image: { uuid: string, crop: { x: number, y: number, w: number, h: number, } | null, } | null, iconInfo: { isImage: boolean, isStored: boolean, imageWidth: number | null, imageHeight: number | null, imageFormat: string | null, mimeType: string, name: string, size: number, } | null, imageInfo: { isImage: boolean, isStored: boolean, imageWidth: number | null, imageHeight: number | null, imageFormat: string | null, mimeType: string, name: string, size: number, } | null, titleLinkHostname: string | null, keyboard: { buttons: (({ title: string, style: 'DEFAULT' | 'LIGHT', url: string | null, })[])[], } | null, id: string, })[]| null;
    fileId?: string| null;
    fileMetadata?: { isStored: boolean | undefined, isImage: boolean | null, imageWidth: number | null, imageHeight: number | null, imageFormat: string | null, mimeType: string, name: string, size: number, }| null;
    filePreview?: string| null;
    augmentation?: any| null;
    mentions?: any| null;
    attachments?: any| null;
    buttons?: any| null;
    type?: string| null;
    title?: string| null;
    postType?: string| null;
    complexMentions?: any| null;
}

export class Message extends FEntity {
    readonly entityName: 'Message' = 'Message';
    get id(): number { return this._value.id; }
    get cid(): number {
        return this._value.cid;
    }
    set cid(value: number) {
        this._checkIsWritable();
        if (value === this._value.cid) { return; }
        this._value.cid = value;
        this.markDirty();
    }
    get uid(): number {
        return this._value.uid;
    }
    set uid(value: number) {
        this._checkIsWritable();
        if (value === this._value.uid) { return; }
        this._value.uid = value;
        this.markDirty();
    }
    get repeatKey(): string | null {
        let res = this._value.repeatKey;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set repeatKey(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.repeatKey) { return; }
        this._value.repeatKey = value;
        this.markDirty();
    }
    get text(): string | null {
        let res = this._value.text;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set text(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.text) { return; }
        this._value.text = value;
        this.markDirty();
    }
    get replyMessages(): (number)[] | null {
        let res = this._value.replyMessages;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set replyMessages(value: (number)[] | null) {
        this._checkIsWritable();
        if (value === this._value.replyMessages) { return; }
        this._value.replyMessages = value;
        this.markDirty();
    }
    get serviceMetadata(): any | null {
        let res = this._value.serviceMetadata;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set serviceMetadata(value: any | null) {
        this._checkIsWritable();
        if (value === this._value.serviceMetadata) { return; }
        this._value.serviceMetadata = value;
        this.markDirty();
    }
    get reactions(): ({ userId: number, reaction: string, })[] | null {
        let res = this._value.reactions;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set reactions(value: ({ userId: number, reaction: string, })[] | null) {
        this._checkIsWritable();
        if (value === this._value.reactions) { return; }
        this._value.reactions = value;
        this.markDirty();
    }
    get edited(): boolean | null {
        let res = this._value.edited;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set edited(value: boolean | null) {
        this._checkIsWritable();
        if (value === this._value.edited) { return; }
        this._value.edited = value;
        this.markDirty();
    }
    get isMuted(): boolean {
        return this._value.isMuted;
    }
    set isMuted(value: boolean) {
        this._checkIsWritable();
        if (value === this._value.isMuted) { return; }
        this._value.isMuted = value;
        this.markDirty();
    }
    get isService(): boolean {
        return this._value.isService;
    }
    set isService(value: boolean) {
        this._checkIsWritable();
        if (value === this._value.isService) { return; }
        this._value.isService = value;
        this.markDirty();
    }
    get deleted(): boolean | null {
        let res = this._value.deleted;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set deleted(value: boolean | null) {
        this._checkIsWritable();
        if (value === this._value.deleted) { return; }
        this._value.deleted = value;
        this.markDirty();
    }
    get spans(): ({ type: 'user_mention', offset: number, length: number, user: number, } | { type: 'multi_user_mention', offset: number, length: number, users: (number)[], } | { type: 'room_mention', offset: number, length: number, room: number, } | { type: 'link', offset: number, length: number, url: string, } | { type: 'bold_text', offset: number, length: number, } | { type: 'italic_text', offset: number, length: number, } | { type: 'irony_text', offset: number, length: number, } | { type: 'inline_code_text', offset: number, length: number, } | { type: 'code_block_text', offset: number, length: number, } | { type: 'insane_text', offset: number, length: number, } | { type: 'loud_text', offset: number, length: number, } | { type: 'rotating_text', offset: number, length: number, } | { type: 'date_text', offset: number, length: number, date: number, } | { type: 'all_mention', offset: number, length: number, })[] | null {
        let res = this._value.spans;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set spans(value: ({ type: 'user_mention', offset: number, length: number, user: number, } | { type: 'multi_user_mention', offset: number, length: number, users: (number)[], } | { type: 'room_mention', offset: number, length: number, room: number, } | { type: 'link', offset: number, length: number, url: string, } | { type: 'bold_text', offset: number, length: number, } | { type: 'italic_text', offset: number, length: number, } | { type: 'irony_text', offset: number, length: number, } | { type: 'inline_code_text', offset: number, length: number, } | { type: 'code_block_text', offset: number, length: number, } | { type: 'insane_text', offset: number, length: number, } | { type: 'loud_text', offset: number, length: number, } | { type: 'rotating_text', offset: number, length: number, } | { type: 'date_text', offset: number, length: number, date: number, } | { type: 'all_mention', offset: number, length: number, })[] | null) {
        this._checkIsWritable();
        if (value === this._value.spans) { return; }
        this._value.spans = value;
        this.markDirty();
    }
    get attachmentsModern(): ({ type: 'file_attachment', fileId: string, filePreview: string | null, fileMetadata: { isImage: boolean, isStored: boolean, imageWidth: number | null, imageHeight: number | null, imageFormat: string | null, mimeType: string, name: string, size: number, } | null, id: string, } | { type: 'rich_attachment', title: string | null, subTitle: string | null, titleLink: string | null, text: string | null, icon: { uuid: string, crop: { x: number, y: number, w: number, h: number, } | null, } | null, image: { uuid: string, crop: { x: number, y: number, w: number, h: number, } | null, } | null, iconInfo: { isImage: boolean, isStored: boolean, imageWidth: number | null, imageHeight: number | null, imageFormat: string | null, mimeType: string, name: string, size: number, } | null, imageInfo: { isImage: boolean, isStored: boolean, imageWidth: number | null, imageHeight: number | null, imageFormat: string | null, mimeType: string, name: string, size: number, } | null, titleLinkHostname: string | null, keyboard: { buttons: (({ title: string, style: 'DEFAULT' | 'LIGHT', url: string | null, })[])[], } | null, id: string, })[] | null {
        let res = this._value.attachmentsModern;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set attachmentsModern(value: ({ type: 'file_attachment', fileId: string, filePreview: string | null, fileMetadata: { isImage: boolean, isStored: boolean, imageWidth: number | null, imageHeight: number | null, imageFormat: string | null, mimeType: string, name: string, size: number, } | null, id: string, } | { type: 'rich_attachment', title: string | null, subTitle: string | null, titleLink: string | null, text: string | null, icon: { uuid: string, crop: { x: number, y: number, w: number, h: number, } | null, } | null, image: { uuid: string, crop: { x: number, y: number, w: number, h: number, } | null, } | null, iconInfo: { isImage: boolean, isStored: boolean, imageWidth: number | null, imageHeight: number | null, imageFormat: string | null, mimeType: string, name: string, size: number, } | null, imageInfo: { isImage: boolean, isStored: boolean, imageWidth: number | null, imageHeight: number | null, imageFormat: string | null, mimeType: string, name: string, size: number, } | null, titleLinkHostname: string | null, keyboard: { buttons: (({ title: string, style: 'DEFAULT' | 'LIGHT', url: string | null, })[])[], } | null, id: string, })[] | null) {
        this._checkIsWritable();
        if (value === this._value.attachmentsModern) { return; }
        this._value.attachmentsModern = value;
        this.markDirty();
    }
    get fileId(): string | null {
        let res = this._value.fileId;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set fileId(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.fileId) { return; }
        this._value.fileId = value;
        this.markDirty();
    }
    get fileMetadata(): { isStored: boolean | undefined, isImage: boolean | null, imageWidth: number | null, imageHeight: number | null, imageFormat: string | null, mimeType: string, name: string, size: number, } | null {
        let res = this._value.fileMetadata;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set fileMetadata(value: { isStored: boolean | undefined, isImage: boolean | null, imageWidth: number | null, imageHeight: number | null, imageFormat: string | null, mimeType: string, name: string, size: number, } | null) {
        this._checkIsWritable();
        if (value === this._value.fileMetadata) { return; }
        this._value.fileMetadata = value;
        this.markDirty();
    }
    get filePreview(): string | null {
        let res = this._value.filePreview;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set filePreview(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.filePreview) { return; }
        this._value.filePreview = value;
        this.markDirty();
    }
    get augmentation(): any | null {
        let res = this._value.augmentation;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set augmentation(value: any | null) {
        this._checkIsWritable();
        if (value === this._value.augmentation) { return; }
        this._value.augmentation = value;
        this.markDirty();
    }
    get mentions(): any | null {
        let res = this._value.mentions;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set mentions(value: any | null) {
        this._checkIsWritable();
        if (value === this._value.mentions) { return; }
        this._value.mentions = value;
        this.markDirty();
    }
    get attachments(): any | null {
        let res = this._value.attachments;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set attachments(value: any | null) {
        this._checkIsWritable();
        if (value === this._value.attachments) { return; }
        this._value.attachments = value;
        this.markDirty();
    }
    get buttons(): any | null {
        let res = this._value.buttons;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set buttons(value: any | null) {
        this._checkIsWritable();
        if (value === this._value.buttons) { return; }
        this._value.buttons = value;
        this.markDirty();
    }
    get type(): string | null {
        let res = this._value.type;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set type(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.type) { return; }
        this._value.type = value;
        this.markDirty();
    }
    get title(): string | null {
        let res = this._value.title;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set title(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.title) { return; }
        this._value.title = value;
        this.markDirty();
    }
    get postType(): string | null {
        let res = this._value.postType;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set postType(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.postType) { return; }
        this._value.postType = value;
        this.markDirty();
    }
    get complexMentions(): any | null {
        let res = this._value.complexMentions;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set complexMentions(value: any | null) {
        this._checkIsWritable();
        if (value === this._value.complexMentions) { return; }
        this._value.complexMentions = value;
        this.markDirty();
    }
}

export class MessageFactory extends FEntityFactory<Message> {
    static schema: FEntitySchema = {
        name: 'Message',
        editable: false,
        primaryKeys: [
            { name: 'id', type: 'number' },
        ],
        fields: [
            { name: 'cid', type: 'number' },
            { name: 'uid', type: 'number' },
            { name: 'repeatKey', type: 'string' },
            { name: 'text', type: 'string', secure: true },
            { name: 'replyMessages', type: 'json' },
            { name: 'serviceMetadata', type: 'json' },
            { name: 'reactions', type: 'json' },
            { name: 'edited', type: 'boolean' },
            { name: 'isMuted', type: 'boolean' },
            { name: 'isService', type: 'boolean' },
            { name: 'deleted', type: 'boolean' },
            { name: 'spans', type: 'json' },
            { name: 'attachmentsModern', type: 'json' },
            { name: 'fileId', type: 'string', secure: true },
            { name: 'fileMetadata', type: 'json', secure: true },
            { name: 'filePreview', type: 'string', secure: true },
            { name: 'augmentation', type: 'json' },
            { name: 'mentions', type: 'json' },
            { name: 'attachments', type: 'json' },
            { name: 'buttons', type: 'json' },
            { name: 'type', type: 'string' },
            { name: 'title', type: 'string' },
            { name: 'postType', type: 'string' },
            { name: 'complexMentions', type: 'json' },
        ],
        indexes: [
            { name: 'chat', type: 'range', fields: ['cid', 'id'] },
            { name: 'updated', type: 'range', fields: ['updatedAt'] },
            { name: 'repeat', type: 'unique', fields: ['uid', 'cid', 'repeatKey'] },
        ],
    };

    static async create(layer: EntityLayer) {
        let directory = await layer.resolveEntityDirectory('message');
        let config = { enableVersioning: true, enableTimestamps: true, validator: MessageFactory.validate, keyValidator: MessageFactory.validateKey, hasLiveStreams: false };
        let indexChat = new FEntityIndex(await layer.resolveEntityIndexDirectory('message', 'chat'), 'chat', ['cid', 'id'], false, (src) => !src.deleted);
        let indexUpdated = new FEntityIndex(await layer.resolveEntityIndexDirectory('message', 'updated'), 'updated', ['updatedAt'], false);
        let indexRepeat = new FEntityIndex(await layer.resolveEntityIndexDirectory('message', 'repeat'), 'repeat', ['uid', 'cid', 'repeatKey'], true, (src) => !!src.repeatKey);
        let indexes = {
            chat: indexChat,
            updated: indexUpdated,
            repeat: indexRepeat,
        };
        return new MessageFactory(layer, directory, config, indexes);
    }

    readonly indexChat: FEntityIndex;
    readonly indexUpdated: FEntityIndex;
    readonly indexRepeat: FEntityIndex;

    private static validate(src: any) {
        validators.notNull('id', src.id);
        validators.isNumber('id', src.id);
        validators.notNull('cid', src.cid);
        validators.isNumber('cid', src.cid);
        validators.notNull('uid', src.uid);
        validators.isNumber('uid', src.uid);
        validators.isString('repeatKey', src.repeatKey);
        validators.isString('text', src.text);
        validators.isJson('replyMessages', src.replyMessages, jVec(jNumber()));
        validators.isJson('reactions', src.reactions, jVec(json(() => {
            jField('userId', jNumber());
            jField('reaction', jString());
        })));
        validators.isBoolean('edited', src.edited);
        validators.notNull('isMuted', src.isMuted);
        validators.isBoolean('isMuted', src.isMuted);
        validators.notNull('isService', src.isService);
        validators.isBoolean('isService', src.isService);
        validators.isBoolean('deleted', src.deleted);
        validators.isJson('spans', src.spans, jVec(jEnum(
            json(() => {
                jField('type', jString('user_mention'));
                jField('offset', jNumber());
                jField('length', jNumber());
                jField('user', jNumber());
            }), 
            json(() => {
                jField('type', jString('multi_user_mention'));
                jField('offset', jNumber());
                jField('length', jNumber());
                jField('users', jVec(jNumber()));
            }), 
            json(() => {
                jField('type', jString('room_mention'));
                jField('offset', jNumber());
                jField('length', jNumber());
                jField('room', jNumber());
            }), 
            json(() => {
                jField('type', jString('link'));
                jField('offset', jNumber());
                jField('length', jNumber());
                jField('url', jString());
            }), 
            json(() => {
                jField('type', jString('bold_text'));
                jField('offset', jNumber());
                jField('length', jNumber());
            }), 
            json(() => {
                jField('type', jString('italic_text'));
                jField('offset', jNumber());
                jField('length', jNumber());
            }), 
            json(() => {
                jField('type', jString('irony_text'));
                jField('offset', jNumber());
                jField('length', jNumber());
            }), 
            json(() => {
                jField('type', jString('inline_code_text'));
                jField('offset', jNumber());
                jField('length', jNumber());
            }), 
            json(() => {
                jField('type', jString('code_block_text'));
                jField('offset', jNumber());
                jField('length', jNumber());
            }), 
            json(() => {
                jField('type', jString('insane_text'));
                jField('offset', jNumber());
                jField('length', jNumber());
            }), 
            json(() => {
                jField('type', jString('loud_text'));
                jField('offset', jNumber());
                jField('length', jNumber());
            }), 
            json(() => {
                jField('type', jString('rotating_text'));
                jField('offset', jNumber());
                jField('length', jNumber());
            }), 
            json(() => {
                jField('type', jString('date_text'));
                jField('offset', jNumber());
                jField('length', jNumber());
                jField('date', jNumber());
            }), 
            json(() => {
                jField('type', jString('all_mention'));
                jField('offset', jNumber());
                jField('length', jNumber());
            })
        )));
        validators.isJson('attachmentsModern', src.attachmentsModern, jVec(jEnum(
            json(() => {
                jField('type', jString('file_attachment'));
                jField('fileId', jString());
                jField('filePreview', jString()).nullable();
                jField('fileMetadata', json(() => {
                jField('isImage', jBool());
                jField('isStored', jBool());
                jField('imageWidth', jNumber()).nullable();
                jField('imageHeight', jNumber()).nullable();
                jField('imageFormat', jString()).nullable();
                jField('mimeType', jString());
                jField('name', jString());
                jField('size', jNumber());
            })).nullable();
                jField('id', jString());
            }), 
            json(() => {
                jField('type', jString('rich_attachment'));
                jField('title', jString()).nullable();
                jField('subTitle', jString()).nullable();
                jField('titleLink', jString()).nullable();
                jField('text', jString()).nullable();
                jField('icon', json(() => {
                jField('uuid', jString());
                jField('crop', json(() => {
                jField('x', jNumber());
                jField('y', jNumber());
                jField('w', jNumber());
                jField('h', jNumber());
            })).nullable();
            })).nullable();
                jField('image', json(() => {
                jField('uuid', jString());
                jField('crop', json(() => {
                jField('x', jNumber());
                jField('y', jNumber());
                jField('w', jNumber());
                jField('h', jNumber());
            })).nullable();
            })).nullable();
                jField('iconInfo', json(() => {
                jField('isImage', jBool());
                jField('isStored', jBool());
                jField('imageWidth', jNumber()).nullable();
                jField('imageHeight', jNumber()).nullable();
                jField('imageFormat', jString()).nullable();
                jField('mimeType', jString());
                jField('name', jString());
                jField('size', jNumber());
            })).nullable();
                jField('imageInfo', json(() => {
                jField('isImage', jBool());
                jField('isStored', jBool());
                jField('imageWidth', jNumber()).nullable();
                jField('imageHeight', jNumber()).nullable();
                jField('imageFormat', jString()).nullable();
                jField('mimeType', jString());
                jField('name', jString());
                jField('size', jNumber());
            })).nullable();
                jField('titleLinkHostname', jString()).nullable();
                jField('keyboard', json(() => {
                jField('buttons', jVec(jVec(json(() => {
                jField('title', jString());
                jField('style', jEnumString('DEFAULT', 'LIGHT'));
                jField('url', jString()).nullable();
            }))));
            })).nullable();
                jField('id', jString());
            })
        )));
        validators.isString('fileId', src.fileId);
        validators.isJson('fileMetadata', src.fileMetadata, json(() => {
            jField('isStored', jBool()).undefinable();
            jField('isImage', jBool()).nullable();
            jField('imageWidth', jNumber()).nullable();
            jField('imageHeight', jNumber()).nullable();
            jField('imageFormat', jString()).nullable();
            jField('mimeType', jString());
            jField('name', jString());
            jField('size', jNumber());
        }));
        validators.isString('filePreview', src.filePreview);
        validators.isString('type', src.type);
        validators.isString('title', src.title);
        validators.isString('postType', src.postType);
    }

    private static validateKey(key: Tuple[]) {
        validators.isNumber('0', key[0]);
    }

    constructor(layer: EntityLayer, directory: Subspace, config: FEntityOptions, indexes: { chat: FEntityIndex, updated: FEntityIndex, repeat: FEntityIndex }) {
        super('Message', 'message', config, [indexes.chat, indexes.updated, indexes.repeat], layer, directory);
        this.indexChat = indexes.chat;
        this.indexUpdated = indexes.updated;
        this.indexRepeat = indexes.repeat;
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'id': rawId[0] };
    }
    async findById(ctx: Context, id: number) {
        return await this._findById(ctx, [id]);
    }
    async create(ctx: Context, id: number, shape: MessageShape) {
        return await this._create(ctx, [id], { id, ...shape });
    }
    async create_UNSAFE(ctx: Context, id: number, shape: MessageShape) {
        return await this._create_UNSAFE(ctx, [id], { id, ...shape });
    }
    watch(ctx: Context, id: number) {
        return this._watch(ctx, [id]);
    }
    async allFromChatAfter(ctx: Context, cid: number, after: number) {
        return await this._findRangeAllAfter(ctx, this.indexChat.directory, [cid], after);
    }
    async rangeFromChatAfter(ctx: Context, cid: number, after: number, limit: number, reversed?: boolean) {
        return await this._findRangeAfter(ctx, this.indexChat.directory, [cid], after, limit, reversed);
    }
    async rangeFromChat(ctx: Context, cid: number, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, this.indexChat.directory, [cid], limit, reversed);
    }
    async rangeFromChatWithCursor(ctx: Context, cid: number, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, this.indexChat.directory, [cid], limit, after, reversed);
    }
    async allFromChat(ctx: Context, cid: number) {
        return await this._findAll(ctx, this.indexChat.directory, [cid]);
    }
    createChatStream(cid: number, limit: number, after?: string) {
        return this._createStream(this.indexChat.directory, [cid], limit, after); 
    }
    async rangeFromUpdated(ctx: Context, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, this.indexUpdated.directory, [], limit, reversed);
    }
    async rangeFromUpdatedWithCursor(ctx: Context, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, this.indexUpdated.directory, [], limit, after, reversed);
    }
    async allFromUpdated(ctx: Context, ) {
        return await this._findAll(ctx, this.indexUpdated.directory, []);
    }
    createUpdatedStream(limit: number, after?: string) {
        return this._createStream(this.indexUpdated.directory, [], limit, after); 
    }
    async findFromRepeat(ctx: Context, uid: number, cid: number, repeatKey: string) {
        return await this._findFromIndex(ctx, this.indexRepeat.directory, [uid, cid, repeatKey]);
    }
    async allFromRepeatAfter(ctx: Context, uid: number, cid: number, after: string) {
        return await this._findRangeAllAfter(ctx, this.indexRepeat.directory, [uid, cid], after);
    }
    async rangeFromRepeatAfter(ctx: Context, uid: number, cid: number, after: string, limit: number, reversed?: boolean) {
        return await this._findRangeAfter(ctx, this.indexRepeat.directory, [uid, cid], after, limit, reversed);
    }
    async rangeFromRepeat(ctx: Context, uid: number, cid: number, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, this.indexRepeat.directory, [uid, cid], limit, reversed);
    }
    async rangeFromRepeatWithCursor(ctx: Context, uid: number, cid: number, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, this.indexRepeat.directory, [uid, cid], limit, after, reversed);
    }
    async allFromRepeat(ctx: Context, uid: number, cid: number) {
        return await this._findAll(ctx, this.indexRepeat.directory, [uid, cid]);
    }
    createRepeatStream(uid: number, cid: number, limit: number, after?: string) {
        return this._createStream(this.indexRepeat.directory, [uid, cid], limit, after); 
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new Message(ctx, this.layer, this.directory, [value.id], value, this.options, isNew, this.indexes, 'Message');
    }
}
export interface CommentShape {
    peerId: number;
    peerType: 'message';
    parentCommentId?: number| null;
    uid: number;
    text?: string| null;
    reactions?: ({ userId: number, reaction: string, })[]| null;
    spans?: ({ type: 'user_mention', offset: number, length: number, user: number, } | { type: 'multi_user_mention', offset: number, length: number, users: (number)[], } | { type: 'room_mention', offset: number, length: number, room: number, } | { type: 'link', offset: number, length: number, url: string, } | { type: 'bold_text', offset: number, length: number, } | { type: 'italic_text', offset: number, length: number, } | { type: 'irony_text', offset: number, length: number, } | { type: 'inline_code_text', offset: number, length: number, } | { type: 'code_block_text', offset: number, length: number, } | { type: 'insane_text', offset: number, length: number, } | { type: 'loud_text', offset: number, length: number, } | { type: 'rotating_text', offset: number, length: number, } | { type: 'date_text', offset: number, length: number, date: number, } | { type: 'all_mention', offset: number, length: number, })[]| null;
    attachments?: ({ type: 'file_attachment', fileId: string, filePreview: string | null, fileMetadata: { isImage: boolean, isStored: boolean, imageWidth: number | null, imageHeight: number | null, imageFormat: string | null, mimeType: string, name: string, size: number, } | null, id: string, } | { type: 'rich_attachment', title: string | null, subTitle: string | null, titleLink: string | null, text: string | null, icon: { uuid: string, crop: { x: number, y: number, w: number, h: number, } | null, } | null, image: { uuid: string, crop: { x: number, y: number, w: number, h: number, } | null, } | null, iconInfo: { isImage: boolean, isStored: boolean, imageWidth: number | null, imageHeight: number | null, imageFormat: string | null, mimeType: string, name: string, size: number, } | null, imageInfo: { isImage: boolean, isStored: boolean, imageWidth: number | null, imageHeight: number | null, imageFormat: string | null, mimeType: string, name: string, size: number, } | null, titleLinkHostname: string | null, keyboard: { buttons: (({ title: string, style: 'DEFAULT' | 'LIGHT', url: string | null, })[])[], } | null, id: string, })[]| null;
    deleted?: boolean| null;
    edited?: boolean| null;
    visible?: boolean| null;
}

export class Comment extends FEntity {
    readonly entityName: 'Comment' = 'Comment';
    get id(): number { return this._value.id; }
    get peerId(): number {
        return this._value.peerId;
    }
    set peerId(value: number) {
        this._checkIsWritable();
        if (value === this._value.peerId) { return; }
        this._value.peerId = value;
        this.markDirty();
    }
    get peerType(): 'message' {
        return this._value.peerType;
    }
    set peerType(value: 'message') {
        this._checkIsWritable();
        if (value === this._value.peerType) { return; }
        this._value.peerType = value;
        this.markDirty();
    }
    get parentCommentId(): number | null {
        let res = this._value.parentCommentId;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set parentCommentId(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.parentCommentId) { return; }
        this._value.parentCommentId = value;
        this.markDirty();
    }
    get uid(): number {
        return this._value.uid;
    }
    set uid(value: number) {
        this._checkIsWritable();
        if (value === this._value.uid) { return; }
        this._value.uid = value;
        this.markDirty();
    }
    get text(): string | null {
        let res = this._value.text;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set text(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.text) { return; }
        this._value.text = value;
        this.markDirty();
    }
    get reactions(): ({ userId: number, reaction: string, })[] | null {
        let res = this._value.reactions;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set reactions(value: ({ userId: number, reaction: string, })[] | null) {
        this._checkIsWritable();
        if (value === this._value.reactions) { return; }
        this._value.reactions = value;
        this.markDirty();
    }
    get spans(): ({ type: 'user_mention', offset: number, length: number, user: number, } | { type: 'multi_user_mention', offset: number, length: number, users: (number)[], } | { type: 'room_mention', offset: number, length: number, room: number, } | { type: 'link', offset: number, length: number, url: string, } | { type: 'bold_text', offset: number, length: number, } | { type: 'italic_text', offset: number, length: number, } | { type: 'irony_text', offset: number, length: number, } | { type: 'inline_code_text', offset: number, length: number, } | { type: 'code_block_text', offset: number, length: number, } | { type: 'insane_text', offset: number, length: number, } | { type: 'loud_text', offset: number, length: number, } | { type: 'rotating_text', offset: number, length: number, } | { type: 'date_text', offset: number, length: number, date: number, } | { type: 'all_mention', offset: number, length: number, })[] | null {
        let res = this._value.spans;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set spans(value: ({ type: 'user_mention', offset: number, length: number, user: number, } | { type: 'multi_user_mention', offset: number, length: number, users: (number)[], } | { type: 'room_mention', offset: number, length: number, room: number, } | { type: 'link', offset: number, length: number, url: string, } | { type: 'bold_text', offset: number, length: number, } | { type: 'italic_text', offset: number, length: number, } | { type: 'irony_text', offset: number, length: number, } | { type: 'inline_code_text', offset: number, length: number, } | { type: 'code_block_text', offset: number, length: number, } | { type: 'insane_text', offset: number, length: number, } | { type: 'loud_text', offset: number, length: number, } | { type: 'rotating_text', offset: number, length: number, } | { type: 'date_text', offset: number, length: number, date: number, } | { type: 'all_mention', offset: number, length: number, })[] | null) {
        this._checkIsWritable();
        if (value === this._value.spans) { return; }
        this._value.spans = value;
        this.markDirty();
    }
    get attachments(): ({ type: 'file_attachment', fileId: string, filePreview: string | null, fileMetadata: { isImage: boolean, isStored: boolean, imageWidth: number | null, imageHeight: number | null, imageFormat: string | null, mimeType: string, name: string, size: number, } | null, id: string, } | { type: 'rich_attachment', title: string | null, subTitle: string | null, titleLink: string | null, text: string | null, icon: { uuid: string, crop: { x: number, y: number, w: number, h: number, } | null, } | null, image: { uuid: string, crop: { x: number, y: number, w: number, h: number, } | null, } | null, iconInfo: { isImage: boolean, isStored: boolean, imageWidth: number | null, imageHeight: number | null, imageFormat: string | null, mimeType: string, name: string, size: number, } | null, imageInfo: { isImage: boolean, isStored: boolean, imageWidth: number | null, imageHeight: number | null, imageFormat: string | null, mimeType: string, name: string, size: number, } | null, titleLinkHostname: string | null, keyboard: { buttons: (({ title: string, style: 'DEFAULT' | 'LIGHT', url: string | null, })[])[], } | null, id: string, })[] | null {
        let res = this._value.attachments;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set attachments(value: ({ type: 'file_attachment', fileId: string, filePreview: string | null, fileMetadata: { isImage: boolean, isStored: boolean, imageWidth: number | null, imageHeight: number | null, imageFormat: string | null, mimeType: string, name: string, size: number, } | null, id: string, } | { type: 'rich_attachment', title: string | null, subTitle: string | null, titleLink: string | null, text: string | null, icon: { uuid: string, crop: { x: number, y: number, w: number, h: number, } | null, } | null, image: { uuid: string, crop: { x: number, y: number, w: number, h: number, } | null, } | null, iconInfo: { isImage: boolean, isStored: boolean, imageWidth: number | null, imageHeight: number | null, imageFormat: string | null, mimeType: string, name: string, size: number, } | null, imageInfo: { isImage: boolean, isStored: boolean, imageWidth: number | null, imageHeight: number | null, imageFormat: string | null, mimeType: string, name: string, size: number, } | null, titleLinkHostname: string | null, keyboard: { buttons: (({ title: string, style: 'DEFAULT' | 'LIGHT', url: string | null, })[])[], } | null, id: string, })[] | null) {
        this._checkIsWritable();
        if (value === this._value.attachments) { return; }
        this._value.attachments = value;
        this.markDirty();
    }
    get deleted(): boolean | null {
        let res = this._value.deleted;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set deleted(value: boolean | null) {
        this._checkIsWritable();
        if (value === this._value.deleted) { return; }
        this._value.deleted = value;
        this.markDirty();
    }
    get edited(): boolean | null {
        let res = this._value.edited;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set edited(value: boolean | null) {
        this._checkIsWritable();
        if (value === this._value.edited) { return; }
        this._value.edited = value;
        this.markDirty();
    }
    get visible(): boolean | null {
        let res = this._value.visible;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set visible(value: boolean | null) {
        this._checkIsWritable();
        if (value === this._value.visible) { return; }
        this._value.visible = value;
        this.markDirty();
    }
}

export class CommentFactory extends FEntityFactory<Comment> {
    static schema: FEntitySchema = {
        name: 'Comment',
        editable: false,
        primaryKeys: [
            { name: 'id', type: 'number' },
        ],
        fields: [
            { name: 'peerId', type: 'number' },
            { name: 'peerType', type: 'enum', enumValues: ['message'] },
            { name: 'parentCommentId', type: 'number' },
            { name: 'uid', type: 'number' },
            { name: 'text', type: 'string', secure: true },
            { name: 'reactions', type: 'json' },
            { name: 'spans', type: 'json' },
            { name: 'attachments', type: 'json' },
            { name: 'deleted', type: 'boolean' },
            { name: 'edited', type: 'boolean' },
            { name: 'visible', type: 'boolean' },
        ],
        indexes: [
            { name: 'peer', type: 'range', fields: ['peerType', 'peerId', 'id'] },
            { name: 'child', type: 'range', fields: ['parentCommentId', 'id'] },
        ],
    };

    static async create(layer: EntityLayer) {
        let directory = await layer.resolveEntityDirectory('comment');
        let config = { enableVersioning: true, enableTimestamps: true, validator: CommentFactory.validate, keyValidator: CommentFactory.validateKey, hasLiveStreams: false };
        let indexPeer = new FEntityIndex(await layer.resolveEntityIndexDirectory('comment', 'peer'), 'peer', ['peerType', 'peerId', 'id'], false);
        let indexChild = new FEntityIndex(await layer.resolveEntityIndexDirectory('comment', 'child'), 'child', ['parentCommentId', 'id'], false);
        let indexes = {
            peer: indexPeer,
            child: indexChild,
        };
        return new CommentFactory(layer, directory, config, indexes);
    }

    readonly indexPeer: FEntityIndex;
    readonly indexChild: FEntityIndex;

    private static validate(src: any) {
        validators.notNull('id', src.id);
        validators.isNumber('id', src.id);
        validators.notNull('peerId', src.peerId);
        validators.isNumber('peerId', src.peerId);
        validators.notNull('peerType', src.peerType);
        validators.isEnum('peerType', src.peerType, ['message']);
        validators.isNumber('parentCommentId', src.parentCommentId);
        validators.notNull('uid', src.uid);
        validators.isNumber('uid', src.uid);
        validators.isString('text', src.text);
        validators.isJson('reactions', src.reactions, jVec(json(() => {
            jField('userId', jNumber());
            jField('reaction', jString());
        })));
        validators.isJson('spans', src.spans, jVec(jEnum(
            json(() => {
                jField('type', jString('user_mention'));
                jField('offset', jNumber());
                jField('length', jNumber());
                jField('user', jNumber());
            }), 
            json(() => {
                jField('type', jString('multi_user_mention'));
                jField('offset', jNumber());
                jField('length', jNumber());
                jField('users', jVec(jNumber()));
            }), 
            json(() => {
                jField('type', jString('room_mention'));
                jField('offset', jNumber());
                jField('length', jNumber());
                jField('room', jNumber());
            }), 
            json(() => {
                jField('type', jString('link'));
                jField('offset', jNumber());
                jField('length', jNumber());
                jField('url', jString());
            }), 
            json(() => {
                jField('type', jString('bold_text'));
                jField('offset', jNumber());
                jField('length', jNumber());
            }), 
            json(() => {
                jField('type', jString('italic_text'));
                jField('offset', jNumber());
                jField('length', jNumber());
            }), 
            json(() => {
                jField('type', jString('irony_text'));
                jField('offset', jNumber());
                jField('length', jNumber());
            }), 
            json(() => {
                jField('type', jString('inline_code_text'));
                jField('offset', jNumber());
                jField('length', jNumber());
            }), 
            json(() => {
                jField('type', jString('code_block_text'));
                jField('offset', jNumber());
                jField('length', jNumber());
            }), 
            json(() => {
                jField('type', jString('insane_text'));
                jField('offset', jNumber());
                jField('length', jNumber());
            }), 
            json(() => {
                jField('type', jString('loud_text'));
                jField('offset', jNumber());
                jField('length', jNumber());
            }), 
            json(() => {
                jField('type', jString('rotating_text'));
                jField('offset', jNumber());
                jField('length', jNumber());
            }), 
            json(() => {
                jField('type', jString('date_text'));
                jField('offset', jNumber());
                jField('length', jNumber());
                jField('date', jNumber());
            }), 
            json(() => {
                jField('type', jString('all_mention'));
                jField('offset', jNumber());
                jField('length', jNumber());
            })
        )));
        validators.isJson('attachments', src.attachments, jVec(jEnum(
            json(() => {
                jField('type', jString('file_attachment'));
                jField('fileId', jString());
                jField('filePreview', jString()).nullable();
                jField('fileMetadata', json(() => {
                jField('isImage', jBool());
                jField('isStored', jBool());
                jField('imageWidth', jNumber()).nullable();
                jField('imageHeight', jNumber()).nullable();
                jField('imageFormat', jString()).nullable();
                jField('mimeType', jString());
                jField('name', jString());
                jField('size', jNumber());
            })).nullable();
                jField('id', jString());
            }), 
            json(() => {
                jField('type', jString('rich_attachment'));
                jField('title', jString()).nullable();
                jField('subTitle', jString()).nullable();
                jField('titleLink', jString()).nullable();
                jField('text', jString()).nullable();
                jField('icon', json(() => {
                jField('uuid', jString());
                jField('crop', json(() => {
                jField('x', jNumber());
                jField('y', jNumber());
                jField('w', jNumber());
                jField('h', jNumber());
            })).nullable();
            })).nullable();
                jField('image', json(() => {
                jField('uuid', jString());
                jField('crop', json(() => {
                jField('x', jNumber());
                jField('y', jNumber());
                jField('w', jNumber());
                jField('h', jNumber());
            })).nullable();
            })).nullable();
                jField('iconInfo', json(() => {
                jField('isImage', jBool());
                jField('isStored', jBool());
                jField('imageWidth', jNumber()).nullable();
                jField('imageHeight', jNumber()).nullable();
                jField('imageFormat', jString()).nullable();
                jField('mimeType', jString());
                jField('name', jString());
                jField('size', jNumber());
            })).nullable();
                jField('imageInfo', json(() => {
                jField('isImage', jBool());
                jField('isStored', jBool());
                jField('imageWidth', jNumber()).nullable();
                jField('imageHeight', jNumber()).nullable();
                jField('imageFormat', jString()).nullable();
                jField('mimeType', jString());
                jField('name', jString());
                jField('size', jNumber());
            })).nullable();
                jField('titleLinkHostname', jString()).nullable();
                jField('keyboard', json(() => {
                jField('buttons', jVec(jVec(json(() => {
                jField('title', jString());
                jField('style', jEnumString('DEFAULT', 'LIGHT'));
                jField('url', jString()).nullable();
            }))));
            })).nullable();
                jField('id', jString());
            })
        )));
        validators.isBoolean('deleted', src.deleted);
        validators.isBoolean('edited', src.edited);
        validators.isBoolean('visible', src.visible);
    }

    private static validateKey(key: Tuple[]) {
        validators.isNumber('0', key[0]);
    }

    constructor(layer: EntityLayer, directory: Subspace, config: FEntityOptions, indexes: { peer: FEntityIndex, child: FEntityIndex }) {
        super('Comment', 'comment', config, [indexes.peer, indexes.child], layer, directory);
        this.indexPeer = indexes.peer;
        this.indexChild = indexes.child;
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'id': rawId[0] };
    }
    async findById(ctx: Context, id: number) {
        return await this._findById(ctx, [id]);
    }
    async create(ctx: Context, id: number, shape: CommentShape) {
        return await this._create(ctx, [id], { id, ...shape });
    }
    async create_UNSAFE(ctx: Context, id: number, shape: CommentShape) {
        return await this._create_UNSAFE(ctx, [id], { id, ...shape });
    }
    watch(ctx: Context, id: number) {
        return this._watch(ctx, [id]);
    }
    async allFromPeerAfter(ctx: Context, peerType: 'message', peerId: number, after: number) {
        return await this._findRangeAllAfter(ctx, this.indexPeer.directory, [peerType, peerId], after);
    }
    async rangeFromPeerAfter(ctx: Context, peerType: 'message', peerId: number, after: number, limit: number, reversed?: boolean) {
        return await this._findRangeAfter(ctx, this.indexPeer.directory, [peerType, peerId], after, limit, reversed);
    }
    async rangeFromPeer(ctx: Context, peerType: 'message', peerId: number, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, this.indexPeer.directory, [peerType, peerId], limit, reversed);
    }
    async rangeFromPeerWithCursor(ctx: Context, peerType: 'message', peerId: number, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, this.indexPeer.directory, [peerType, peerId], limit, after, reversed);
    }
    async allFromPeer(ctx: Context, peerType: 'message', peerId: number) {
        return await this._findAll(ctx, this.indexPeer.directory, [peerType, peerId]);
    }
    createPeerStream(peerType: 'message', peerId: number, limit: number, after?: string) {
        return this._createStream(this.indexPeer.directory, [peerType, peerId], limit, after); 
    }
    async allFromChildAfter(ctx: Context, parentCommentId: number, after: number) {
        return await this._findRangeAllAfter(ctx, this.indexChild.directory, [parentCommentId], after);
    }
    async rangeFromChildAfter(ctx: Context, parentCommentId: number, after: number, limit: number, reversed?: boolean) {
        return await this._findRangeAfter(ctx, this.indexChild.directory, [parentCommentId], after, limit, reversed);
    }
    async rangeFromChild(ctx: Context, parentCommentId: number, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, this.indexChild.directory, [parentCommentId], limit, reversed);
    }
    async rangeFromChildWithCursor(ctx: Context, parentCommentId: number, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, this.indexChild.directory, [parentCommentId], limit, after, reversed);
    }
    async allFromChild(ctx: Context, parentCommentId: number) {
        return await this._findAll(ctx, this.indexChild.directory, [parentCommentId]);
    }
    createChildStream(parentCommentId: number, limit: number, after?: string) {
        return this._createStream(this.indexChild.directory, [parentCommentId], limit, after); 
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new Comment(ctx, this.layer, this.directory, [value.id], value, this.options, isNew, this.indexes, 'Comment');
    }
}
export interface CommentStateShape {
    commentsCount: number;
}

export class CommentState extends FEntity {
    readonly entityName: 'CommentState' = 'CommentState';
    get peerType(): string { return this._value.peerType; }
    get peerId(): number { return this._value.peerId; }
    get commentsCount(): number {
        return this._value.commentsCount;
    }
    set commentsCount(value: number) {
        this._checkIsWritable();
        if (value === this._value.commentsCount) { return; }
        this._value.commentsCount = value;
        this.markDirty();
    }
}

export class CommentStateFactory extends FEntityFactory<CommentState> {
    static schema: FEntitySchema = {
        name: 'CommentState',
        editable: false,
        primaryKeys: [
            { name: 'peerType', type: 'string' },
            { name: 'peerId', type: 'number' },
        ],
        fields: [
            { name: 'commentsCount', type: 'number' },
        ],
        indexes: [
        ],
    };

    static async create(layer: EntityLayer) {
        let directory = await layer.resolveEntityDirectory('commentState');
        let config = { enableVersioning: false, enableTimestamps: false, validator: CommentStateFactory.validate, keyValidator: CommentStateFactory.validateKey, hasLiveStreams: false };
        return new CommentStateFactory(layer, directory, config);
    }

    private static validate(src: any) {
        validators.notNull('peerType', src.peerType);
        validators.isString('peerType', src.peerType);
        validators.notNull('peerId', src.peerId);
        validators.isNumber('peerId', src.peerId);
        validators.notNull('commentsCount', src.commentsCount);
        validators.isNumber('commentsCount', src.commentsCount);
    }

    private static validateKey(key: Tuple[]) {
        validators.notNull('0', key[0]);
        validators.isString('0', key[0]);
        validators.isNumber('1', key[1]);
    }

    constructor(layer: EntityLayer, directory: Subspace, config: FEntityOptions) {
        super('CommentState', 'commentState', config, [], layer, directory);
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 2) { throw Error('Invalid key length!'); }
        return { 'peerType': rawId[0], 'peerId': rawId[1] };
    }
    async findById(ctx: Context, peerType: string, peerId: number) {
        return await this._findById(ctx, [peerType, peerId]);
    }
    async create(ctx: Context, peerType: string, peerId: number, shape: CommentStateShape) {
        return await this._create(ctx, [peerType, peerId], { peerType, peerId, ...shape });
    }
    async create_UNSAFE(ctx: Context, peerType: string, peerId: number, shape: CommentStateShape) {
        return await this._create_UNSAFE(ctx, [peerType, peerId], { peerType, peerId, ...shape });
    }
    watch(ctx: Context, peerType: string, peerId: number) {
        return this._watch(ctx, [peerType, peerId]);
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new CommentState(ctx, this.layer, this.directory, [value.peerType, value.peerId], value, this.options, isNew, this.indexes, 'CommentState');
    }
}
export interface CommentSeqShape {
    seq: number;
}

export class CommentSeq extends FEntity {
    readonly entityName: 'CommentSeq' = 'CommentSeq';
    get peerType(): string { return this._value.peerType; }
    get peerId(): number { return this._value.peerId; }
    get seq(): number {
        return this._value.seq;
    }
    set seq(value: number) {
        this._checkIsWritable();
        if (value === this._value.seq) { return; }
        this._value.seq = value;
        this.markDirty();
    }
}

export class CommentSeqFactory extends FEntityFactory<CommentSeq> {
    static schema: FEntitySchema = {
        name: 'CommentSeq',
        editable: false,
        primaryKeys: [
            { name: 'peerType', type: 'string' },
            { name: 'peerId', type: 'number' },
        ],
        fields: [
            { name: 'seq', type: 'number' },
        ],
        indexes: [
        ],
    };

    static async create(layer: EntityLayer) {
        let directory = await layer.resolveEntityDirectory('commentSeq');
        let config = { enableVersioning: false, enableTimestamps: false, validator: CommentSeqFactory.validate, keyValidator: CommentSeqFactory.validateKey, hasLiveStreams: false };
        return new CommentSeqFactory(layer, directory, config);
    }

    private static validate(src: any) {
        validators.notNull('peerType', src.peerType);
        validators.isString('peerType', src.peerType);
        validators.notNull('peerId', src.peerId);
        validators.isNumber('peerId', src.peerId);
        validators.notNull('seq', src.seq);
        validators.isNumber('seq', src.seq);
    }

    private static validateKey(key: Tuple[]) {
        validators.notNull('0', key[0]);
        validators.isString('0', key[0]);
        validators.isNumber('1', key[1]);
    }

    constructor(layer: EntityLayer, directory: Subspace, config: FEntityOptions) {
        super('CommentSeq', 'commentSeq', config, [], layer, directory);
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 2) { throw Error('Invalid key length!'); }
        return { 'peerType': rawId[0], 'peerId': rawId[1] };
    }
    async findById(ctx: Context, peerType: string, peerId: number) {
        return await this._findById(ctx, [peerType, peerId]);
    }
    async create(ctx: Context, peerType: string, peerId: number, shape: CommentSeqShape) {
        return await this._create(ctx, [peerType, peerId], { peerType, peerId, ...shape });
    }
    async create_UNSAFE(ctx: Context, peerType: string, peerId: number, shape: CommentSeqShape) {
        return await this._create_UNSAFE(ctx, [peerType, peerId], { peerType, peerId, ...shape });
    }
    watch(ctx: Context, peerType: string, peerId: number) {
        return this._watch(ctx, [peerType, peerId]);
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new CommentSeq(ctx, this.layer, this.directory, [value.peerType, value.peerId], value, this.options, isNew, this.indexes, 'CommentSeq');
    }
}
export interface CommentEventShape {
    uid?: number| null;
    commentId?: number| null;
    kind: 'comment_received' | 'comment_updated';
}

export class CommentEvent extends FEntity {
    readonly entityName: 'CommentEvent' = 'CommentEvent';
    get peerType(): string { return this._value.peerType; }
    get peerId(): number { return this._value.peerId; }
    get seq(): number { return this._value.seq; }
    get uid(): number | null {
        let res = this._value.uid;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set uid(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.uid) { return; }
        this._value.uid = value;
        this.markDirty();
    }
    get commentId(): number | null {
        let res = this._value.commentId;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set commentId(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.commentId) { return; }
        this._value.commentId = value;
        this.markDirty();
    }
    get kind(): 'comment_received' | 'comment_updated' {
        return this._value.kind;
    }
    set kind(value: 'comment_received' | 'comment_updated') {
        this._checkIsWritable();
        if (value === this._value.kind) { return; }
        this._value.kind = value;
        this.markDirty();
    }
}

export class CommentEventFactory extends FEntityFactory<CommentEvent> {
    static schema: FEntitySchema = {
        name: 'CommentEvent',
        editable: false,
        primaryKeys: [
            { name: 'peerType', type: 'string' },
            { name: 'peerId', type: 'number' },
            { name: 'seq', type: 'number' },
        ],
        fields: [
            { name: 'uid', type: 'number' },
            { name: 'commentId', type: 'number' },
            { name: 'kind', type: 'enum', enumValues: ['comment_received', 'comment_updated'] },
        ],
        indexes: [
            { name: 'user', type: 'range', fields: ['peerType', 'peerId', 'seq'] },
        ],
    };

    static async create(layer: EntityLayer) {
        let directory = await layer.resolveEntityDirectory('commentEvent');
        let config = { enableVersioning: true, enableTimestamps: true, validator: CommentEventFactory.validate, keyValidator: CommentEventFactory.validateKey, hasLiveStreams: true };
        let indexUser = new FEntityIndex(await layer.resolveEntityIndexDirectory('commentEvent', 'user'), 'user', ['peerType', 'peerId', 'seq'], false);
        let indexes = {
            user: indexUser,
        };
        return new CommentEventFactory(layer, directory, config, indexes);
    }

    readonly indexUser: FEntityIndex;

    private static validate(src: any) {
        validators.notNull('peerType', src.peerType);
        validators.isString('peerType', src.peerType);
        validators.notNull('peerId', src.peerId);
        validators.isNumber('peerId', src.peerId);
        validators.notNull('seq', src.seq);
        validators.isNumber('seq', src.seq);
        validators.isNumber('uid', src.uid);
        validators.isNumber('commentId', src.commentId);
        validators.notNull('kind', src.kind);
        validators.isEnum('kind', src.kind, ['comment_received', 'comment_updated']);
    }

    private static validateKey(key: Tuple[]) {
        validators.notNull('0', key[0]);
        validators.isString('0', key[0]);
        validators.isNumber('1', key[1]);
        validators.isNumber('2', key[2]);
    }

    constructor(layer: EntityLayer, directory: Subspace, config: FEntityOptions, indexes: { user: FEntityIndex }) {
        super('CommentEvent', 'commentEvent', config, [indexes.user], layer, directory);
        this.indexUser = indexes.user;
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 3) { throw Error('Invalid key length!'); }
        return { 'peerType': rawId[0], 'peerId': rawId[1], 'seq': rawId[2] };
    }
    async findById(ctx: Context, peerType: string, peerId: number, seq: number) {
        return await this._findById(ctx, [peerType, peerId, seq]);
    }
    async create(ctx: Context, peerType: string, peerId: number, seq: number, shape: CommentEventShape) {
        return await this._create(ctx, [peerType, peerId, seq], { peerType, peerId, seq, ...shape });
    }
    async create_UNSAFE(ctx: Context, peerType: string, peerId: number, seq: number, shape: CommentEventShape) {
        return await this._create_UNSAFE(ctx, [peerType, peerId, seq], { peerType, peerId, seq, ...shape });
    }
    watch(ctx: Context, peerType: string, peerId: number, seq: number) {
        return this._watch(ctx, [peerType, peerId, seq]);
    }
    async allFromUserAfter(ctx: Context, peerType: string, peerId: number, after: number) {
        return await this._findRangeAllAfter(ctx, this.indexUser.directory, [peerType, peerId], after);
    }
    async rangeFromUserAfter(ctx: Context, peerType: string, peerId: number, after: number, limit: number, reversed?: boolean) {
        return await this._findRangeAfter(ctx, this.indexUser.directory, [peerType, peerId], after, limit, reversed);
    }
    async rangeFromUser(ctx: Context, peerType: string, peerId: number, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, this.indexUser.directory, [peerType, peerId], limit, reversed);
    }
    async rangeFromUserWithCursor(ctx: Context, peerType: string, peerId: number, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, this.indexUser.directory, [peerType, peerId], limit, after, reversed);
    }
    async allFromUser(ctx: Context, peerType: string, peerId: number) {
        return await this._findAll(ctx, this.indexUser.directory, [peerType, peerId]);
    }
    createUserStream(peerType: string, peerId: number, limit: number, after?: string) {
        return this._createStream(this.indexUser.directory, [peerType, peerId], limit, after); 
    }
    createUserLiveStream(ctx: Context, peerType: string, peerId: number, limit: number, after?: string) {
        return this._createLiveStream(ctx, this.indexUser.directory, [peerType, peerId], limit, after); 
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new CommentEvent(ctx, this.layer, this.directory, [value.peerType, value.peerId, value.seq], value, this.options, isNew, this.indexes, 'CommentEvent');
    }
}
export interface CommentsSubscriptionShape {
    kind: 'all' | 'direct';
    status: 'active' | 'disabled';
}

export class CommentsSubscription extends FEntity {
    readonly entityName: 'CommentsSubscription' = 'CommentsSubscription';
    get peerType(): string { return this._value.peerType; }
    get peerId(): number { return this._value.peerId; }
    get uid(): number { return this._value.uid; }
    get kind(): 'all' | 'direct' {
        return this._value.kind;
    }
    set kind(value: 'all' | 'direct') {
        this._checkIsWritable();
        if (value === this._value.kind) { return; }
        this._value.kind = value;
        this.markDirty();
    }
    get status(): 'active' | 'disabled' {
        return this._value.status;
    }
    set status(value: 'active' | 'disabled') {
        this._checkIsWritable();
        if (value === this._value.status) { return; }
        this._value.status = value;
        this.markDirty();
    }
}

export class CommentsSubscriptionFactory extends FEntityFactory<CommentsSubscription> {
    static schema: FEntitySchema = {
        name: 'CommentsSubscription',
        editable: false,
        primaryKeys: [
            { name: 'peerType', type: 'string' },
            { name: 'peerId', type: 'number' },
            { name: 'uid', type: 'number' },
        ],
        fields: [
            { name: 'kind', type: 'enum', enumValues: ['all', 'direct'] },
            { name: 'status', type: 'enum', enumValues: ['active', 'disabled'] },
        ],
        indexes: [
            { name: 'peer', type: 'range', fields: ['peerType', 'peerId', 'uid'] },
        ],
    };

    static async create(layer: EntityLayer) {
        let directory = await layer.resolveEntityDirectory('commentsSubscription');
        let config = { enableVersioning: false, enableTimestamps: false, validator: CommentsSubscriptionFactory.validate, keyValidator: CommentsSubscriptionFactory.validateKey, hasLiveStreams: false };
        let indexPeer = new FEntityIndex(await layer.resolveEntityIndexDirectory('commentsSubscription', 'peer'), 'peer', ['peerType', 'peerId', 'uid'], false);
        let indexes = {
            peer: indexPeer,
        };
        return new CommentsSubscriptionFactory(layer, directory, config, indexes);
    }

    readonly indexPeer: FEntityIndex;

    private static validate(src: any) {
        validators.notNull('peerType', src.peerType);
        validators.isString('peerType', src.peerType);
        validators.notNull('peerId', src.peerId);
        validators.isNumber('peerId', src.peerId);
        validators.notNull('uid', src.uid);
        validators.isNumber('uid', src.uid);
        validators.notNull('kind', src.kind);
        validators.isEnum('kind', src.kind, ['all', 'direct']);
        validators.notNull('status', src.status);
        validators.isEnum('status', src.status, ['active', 'disabled']);
    }

    private static validateKey(key: Tuple[]) {
        validators.notNull('0', key[0]);
        validators.isString('0', key[0]);
        validators.isNumber('1', key[1]);
        validators.isNumber('2', key[2]);
    }

    constructor(layer: EntityLayer, directory: Subspace, config: FEntityOptions, indexes: { peer: FEntityIndex }) {
        super('CommentsSubscription', 'commentsSubscription', config, [indexes.peer], layer, directory);
        this.indexPeer = indexes.peer;
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 3) { throw Error('Invalid key length!'); }
        return { 'peerType': rawId[0], 'peerId': rawId[1], 'uid': rawId[2] };
    }
    async findById(ctx: Context, peerType: string, peerId: number, uid: number) {
        return await this._findById(ctx, [peerType, peerId, uid]);
    }
    async create(ctx: Context, peerType: string, peerId: number, uid: number, shape: CommentsSubscriptionShape) {
        return await this._create(ctx, [peerType, peerId, uid], { peerType, peerId, uid, ...shape });
    }
    async create_UNSAFE(ctx: Context, peerType: string, peerId: number, uid: number, shape: CommentsSubscriptionShape) {
        return await this._create_UNSAFE(ctx, [peerType, peerId, uid], { peerType, peerId, uid, ...shape });
    }
    watch(ctx: Context, peerType: string, peerId: number, uid: number) {
        return this._watch(ctx, [peerType, peerId, uid]);
    }
    async allFromPeerAfter(ctx: Context, peerType: string, peerId: number, after: number) {
        return await this._findRangeAllAfter(ctx, this.indexPeer.directory, [peerType, peerId], after);
    }
    async rangeFromPeerAfter(ctx: Context, peerType: string, peerId: number, after: number, limit: number, reversed?: boolean) {
        return await this._findRangeAfter(ctx, this.indexPeer.directory, [peerType, peerId], after, limit, reversed);
    }
    async rangeFromPeer(ctx: Context, peerType: string, peerId: number, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, this.indexPeer.directory, [peerType, peerId], limit, reversed);
    }
    async rangeFromPeerWithCursor(ctx: Context, peerType: string, peerId: number, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, this.indexPeer.directory, [peerType, peerId], limit, after, reversed);
    }
    async allFromPeer(ctx: Context, peerType: string, peerId: number) {
        return await this._findAll(ctx, this.indexPeer.directory, [peerType, peerId]);
    }
    createPeerStream(peerType: string, peerId: number, limit: number, after?: string) {
        return this._createStream(this.indexPeer.directory, [peerType, peerId], limit, after); 
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new CommentsSubscription(ctx, this.layer, this.directory, [value.peerType, value.peerId, value.uid], value, this.options, isNew, this.indexes, 'CommentsSubscription');
    }
}
export interface CommentEventGlobalShape {
    peerType?: string| null;
    peerId?: number| null;
    kind: 'comments_peer_updated';
}

export class CommentEventGlobal extends FEntity {
    readonly entityName: 'CommentEventGlobal' = 'CommentEventGlobal';
    get uid(): number { return this._value.uid; }
    get seq(): number { return this._value.seq; }
    get peerType(): string | null {
        let res = this._value.peerType;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set peerType(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.peerType) { return; }
        this._value.peerType = value;
        this.markDirty();
    }
    get peerId(): number | null {
        let res = this._value.peerId;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set peerId(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.peerId) { return; }
        this._value.peerId = value;
        this.markDirty();
    }
    get kind(): 'comments_peer_updated' {
        return this._value.kind;
    }
    set kind(value: 'comments_peer_updated') {
        this._checkIsWritable();
        if (value === this._value.kind) { return; }
        this._value.kind = value;
        this.markDirty();
    }
}

export class CommentEventGlobalFactory extends FEntityFactory<CommentEventGlobal> {
    static schema: FEntitySchema = {
        name: 'CommentEventGlobal',
        editable: false,
        primaryKeys: [
            { name: 'uid', type: 'number' },
            { name: 'seq', type: 'number' },
        ],
        fields: [
            { name: 'peerType', type: 'string' },
            { name: 'peerId', type: 'number' },
            { name: 'kind', type: 'enum', enumValues: ['comments_peer_updated'] },
        ],
        indexes: [
            { name: 'user', type: 'range', fields: ['uid', 'seq'] },
        ],
    };

    static async create(layer: EntityLayer) {
        let directory = await layer.resolveEntityDirectory('commentEventGlobal');
        let config = { enableVersioning: true, enableTimestamps: true, validator: CommentEventGlobalFactory.validate, keyValidator: CommentEventGlobalFactory.validateKey, hasLiveStreams: true };
        let indexUser = new FEntityIndex(await layer.resolveEntityIndexDirectory('commentEventGlobal', 'user'), 'user', ['uid', 'seq'], false);
        let indexes = {
            user: indexUser,
        };
        return new CommentEventGlobalFactory(layer, directory, config, indexes);
    }

    readonly indexUser: FEntityIndex;

    private static validate(src: any) {
        validators.notNull('uid', src.uid);
        validators.isNumber('uid', src.uid);
        validators.notNull('seq', src.seq);
        validators.isNumber('seq', src.seq);
        validators.isString('peerType', src.peerType);
        validators.isNumber('peerId', src.peerId);
        validators.notNull('kind', src.kind);
        validators.isEnum('kind', src.kind, ['comments_peer_updated']);
    }

    private static validateKey(key: Tuple[]) {
        validators.isNumber('0', key[0]);
        validators.isNumber('1', key[1]);
    }

    constructor(layer: EntityLayer, directory: Subspace, config: FEntityOptions, indexes: { user: FEntityIndex }) {
        super('CommentEventGlobal', 'commentEventGlobal', config, [indexes.user], layer, directory);
        this.indexUser = indexes.user;
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 2) { throw Error('Invalid key length!'); }
        return { 'uid': rawId[0], 'seq': rawId[1] };
    }
    async findById(ctx: Context, uid: number, seq: number) {
        return await this._findById(ctx, [uid, seq]);
    }
    async create(ctx: Context, uid: number, seq: number, shape: CommentEventGlobalShape) {
        return await this._create(ctx, [uid, seq], { uid, seq, ...shape });
    }
    async create_UNSAFE(ctx: Context, uid: number, seq: number, shape: CommentEventGlobalShape) {
        return await this._create_UNSAFE(ctx, [uid, seq], { uid, seq, ...shape });
    }
    watch(ctx: Context, uid: number, seq: number) {
        return this._watch(ctx, [uid, seq]);
    }
    async allFromUserAfter(ctx: Context, uid: number, after: number) {
        return await this._findRangeAllAfter(ctx, this.indexUser.directory, [uid], after);
    }
    async rangeFromUserAfter(ctx: Context, uid: number, after: number, limit: number, reversed?: boolean) {
        return await this._findRangeAfter(ctx, this.indexUser.directory, [uid], after, limit, reversed);
    }
    async rangeFromUser(ctx: Context, uid: number, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, this.indexUser.directory, [uid], limit, reversed);
    }
    async rangeFromUserWithCursor(ctx: Context, uid: number, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, this.indexUser.directory, [uid], limit, after, reversed);
    }
    async allFromUser(ctx: Context, uid: number) {
        return await this._findAll(ctx, this.indexUser.directory, [uid]);
    }
    createUserStream(uid: number, limit: number, after?: string) {
        return this._createStream(this.indexUser.directory, [uid], limit, after); 
    }
    createUserLiveStream(ctx: Context, uid: number, limit: number, after?: string) {
        return this._createLiveStream(ctx, this.indexUser.directory, [uid], limit, after); 
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new CommentEventGlobal(ctx, this.layer, this.directory, [value.uid, value.seq], value, this.options, isNew, this.indexes, 'CommentEventGlobal');
    }
}
export interface ConversationSeqShape {
    seq: number;
}

export class ConversationSeq extends FEntity {
    readonly entityName: 'ConversationSeq' = 'ConversationSeq';
    get cid(): number { return this._value.cid; }
    get seq(): number {
        return this._value.seq;
    }
    set seq(value: number) {
        this._checkIsWritable();
        if (value === this._value.seq) { return; }
        this._value.seq = value;
        this.markDirty();
    }
}

export class ConversationSeqFactory extends FEntityFactory<ConversationSeq> {
    static schema: FEntitySchema = {
        name: 'ConversationSeq',
        editable: false,
        primaryKeys: [
            { name: 'cid', type: 'number' },
        ],
        fields: [
            { name: 'seq', type: 'number' },
        ],
        indexes: [
        ],
    };

    static async create(layer: EntityLayer) {
        let directory = await layer.resolveEntityDirectory('conversationSeq');
        let config = { enableVersioning: false, enableTimestamps: false, validator: ConversationSeqFactory.validate, keyValidator: ConversationSeqFactory.validateKey, hasLiveStreams: false };
        return new ConversationSeqFactory(layer, directory, config);
    }

    private static validate(src: any) {
        validators.notNull('cid', src.cid);
        validators.isNumber('cid', src.cid);
        validators.notNull('seq', src.seq);
        validators.isNumber('seq', src.seq);
    }

    private static validateKey(key: Tuple[]) {
        validators.isNumber('0', key[0]);
    }

    constructor(layer: EntityLayer, directory: Subspace, config: FEntityOptions) {
        super('ConversationSeq', 'conversationSeq', config, [], layer, directory);
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'cid': rawId[0] };
    }
    async findById(ctx: Context, cid: number) {
        return await this._findById(ctx, [cid]);
    }
    async create(ctx: Context, cid: number, shape: ConversationSeqShape) {
        return await this._create(ctx, [cid], { cid, ...shape });
    }
    async create_UNSAFE(ctx: Context, cid: number, shape: ConversationSeqShape) {
        return await this._create_UNSAFE(ctx, [cid], { cid, ...shape });
    }
    watch(ctx: Context, cid: number) {
        return this._watch(ctx, [cid]);
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new ConversationSeq(ctx, this.layer, this.directory, [value.cid], value, this.options, isNew, this.indexes, 'ConversationSeq');
    }
}
export interface ConversationEventShape {
    uid?: number| null;
    mid?: number| null;
    kind: 'chat_updated' | 'message_received' | 'message_updated' | 'message_deleted';
}

export class ConversationEvent extends FEntity {
    readonly entityName: 'ConversationEvent' = 'ConversationEvent';
    get cid(): number { return this._value.cid; }
    get seq(): number { return this._value.seq; }
    get uid(): number | null {
        let res = this._value.uid;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set uid(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.uid) { return; }
        this._value.uid = value;
        this.markDirty();
    }
    get mid(): number | null {
        let res = this._value.mid;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set mid(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.mid) { return; }
        this._value.mid = value;
        this.markDirty();
    }
    get kind(): 'chat_updated' | 'message_received' | 'message_updated' | 'message_deleted' {
        return this._value.kind;
    }
    set kind(value: 'chat_updated' | 'message_received' | 'message_updated' | 'message_deleted') {
        this._checkIsWritable();
        if (value === this._value.kind) { return; }
        this._value.kind = value;
        this.markDirty();
    }
}

export class ConversationEventFactory extends FEntityFactory<ConversationEvent> {
    static schema: FEntitySchema = {
        name: 'ConversationEvent',
        editable: false,
        primaryKeys: [
            { name: 'cid', type: 'number' },
            { name: 'seq', type: 'number' },
        ],
        fields: [
            { name: 'uid', type: 'number' },
            { name: 'mid', type: 'number' },
            { name: 'kind', type: 'enum', enumValues: ['chat_updated', 'message_received', 'message_updated', 'message_deleted'] },
        ],
        indexes: [
            { name: 'user', type: 'range', fields: ['cid', 'seq'] },
        ],
    };

    static async create(layer: EntityLayer) {
        let directory = await layer.resolveEntityDirectory('conversationEvent');
        let config = { enableVersioning: true, enableTimestamps: true, validator: ConversationEventFactory.validate, keyValidator: ConversationEventFactory.validateKey, hasLiveStreams: true };
        let indexUser = new FEntityIndex(await layer.resolveEntityIndexDirectory('conversationEvent', 'user'), 'user', ['cid', 'seq'], false);
        let indexes = {
            user: indexUser,
        };
        return new ConversationEventFactory(layer, directory, config, indexes);
    }

    readonly indexUser: FEntityIndex;

    private static validate(src: any) {
        validators.notNull('cid', src.cid);
        validators.isNumber('cid', src.cid);
        validators.notNull('seq', src.seq);
        validators.isNumber('seq', src.seq);
        validators.isNumber('uid', src.uid);
        validators.isNumber('mid', src.mid);
        validators.notNull('kind', src.kind);
        validators.isEnum('kind', src.kind, ['chat_updated', 'message_received', 'message_updated', 'message_deleted']);
    }

    private static validateKey(key: Tuple[]) {
        validators.isNumber('0', key[0]);
        validators.isNumber('1', key[1]);
    }

    constructor(layer: EntityLayer, directory: Subspace, config: FEntityOptions, indexes: { user: FEntityIndex }) {
        super('ConversationEvent', 'conversationEvent', config, [indexes.user], layer, directory);
        this.indexUser = indexes.user;
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 2) { throw Error('Invalid key length!'); }
        return { 'cid': rawId[0], 'seq': rawId[1] };
    }
    async findById(ctx: Context, cid: number, seq: number) {
        return await this._findById(ctx, [cid, seq]);
    }
    async create(ctx: Context, cid: number, seq: number, shape: ConversationEventShape) {
        return await this._create(ctx, [cid, seq], { cid, seq, ...shape });
    }
    async create_UNSAFE(ctx: Context, cid: number, seq: number, shape: ConversationEventShape) {
        return await this._create_UNSAFE(ctx, [cid, seq], { cid, seq, ...shape });
    }
    watch(ctx: Context, cid: number, seq: number) {
        return this._watch(ctx, [cid, seq]);
    }
    async allFromUserAfter(ctx: Context, cid: number, after: number) {
        return await this._findRangeAllAfter(ctx, this.indexUser.directory, [cid], after);
    }
    async rangeFromUserAfter(ctx: Context, cid: number, after: number, limit: number, reversed?: boolean) {
        return await this._findRangeAfter(ctx, this.indexUser.directory, [cid], after, limit, reversed);
    }
    async rangeFromUser(ctx: Context, cid: number, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, this.indexUser.directory, [cid], limit, reversed);
    }
    async rangeFromUserWithCursor(ctx: Context, cid: number, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, this.indexUser.directory, [cid], limit, after, reversed);
    }
    async allFromUser(ctx: Context, cid: number) {
        return await this._findAll(ctx, this.indexUser.directory, [cid]);
    }
    createUserStream(cid: number, limit: number, after?: string) {
        return this._createStream(this.indexUser.directory, [cid], limit, after); 
    }
    createUserLiveStream(ctx: Context, cid: number, limit: number, after?: string) {
        return this._createLiveStream(ctx, this.indexUser.directory, [cid], limit, after); 
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new ConversationEvent(ctx, this.layer, this.directory, [value.cid, value.seq], value, this.options, isNew, this.indexes, 'ConversationEvent');
    }
}
export interface UserDialogShape {
    unread: number;
    readMessageId?: number| null;
    date?: number| null;
    haveMention?: boolean| null;
    title?: string| null;
    photo?: any| null;
    hidden?: boolean| null;
    disableGlobalCounter?: boolean| null;
}

export class UserDialog extends FEntity {
    readonly entityName: 'UserDialog' = 'UserDialog';
    get uid(): number { return this._value.uid; }
    get cid(): number { return this._value.cid; }
    get unread(): number {
        return this._value.unread;
    }
    set unread(value: number) {
        this._checkIsWritable();
        if (value === this._value.unread) { return; }
        this._value.unread = value;
        this.markDirty();
    }
    get readMessageId(): number | null {
        let res = this._value.readMessageId;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set readMessageId(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.readMessageId) { return; }
        this._value.readMessageId = value;
        this.markDirty();
    }
    get date(): number | null {
        let res = this._value.date;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set date(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.date) { return; }
        this._value.date = value;
        this.markDirty();
    }
    get haveMention(): boolean | null {
        let res = this._value.haveMention;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set haveMention(value: boolean | null) {
        this._checkIsWritable();
        if (value === this._value.haveMention) { return; }
        this._value.haveMention = value;
        this.markDirty();
    }
    get title(): string | null {
        let res = this._value.title;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set title(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.title) { return; }
        this._value.title = value;
        this.markDirty();
    }
    get photo(): any | null {
        let res = this._value.photo;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set photo(value: any | null) {
        this._checkIsWritable();
        if (value === this._value.photo) { return; }
        this._value.photo = value;
        this.markDirty();
    }
    get hidden(): boolean | null {
        let res = this._value.hidden;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set hidden(value: boolean | null) {
        this._checkIsWritable();
        if (value === this._value.hidden) { return; }
        this._value.hidden = value;
        this.markDirty();
    }
    get disableGlobalCounter(): boolean | null {
        let res = this._value.disableGlobalCounter;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set disableGlobalCounter(value: boolean | null) {
        this._checkIsWritable();
        if (value === this._value.disableGlobalCounter) { return; }
        this._value.disableGlobalCounter = value;
        this.markDirty();
    }
}

export class UserDialogFactory extends FEntityFactory<UserDialog> {
    static schema: FEntitySchema = {
        name: 'UserDialog',
        editable: false,
        primaryKeys: [
            { name: 'uid', type: 'number' },
            { name: 'cid', type: 'number' },
        ],
        fields: [
            { name: 'unread', type: 'number' },
            { name: 'readMessageId', type: 'number' },
            { name: 'date', type: 'number' },
            { name: 'haveMention', type: 'boolean' },
            { name: 'title', type: 'string' },
            { name: 'photo', type: 'json' },
            { name: 'hidden', type: 'boolean' },
            { name: 'disableGlobalCounter', type: 'boolean' },
        ],
        indexes: [
            { name: 'user', type: 'range', fields: ['uid', 'date'], displayName: 'dialogsForUser' },
            { name: 'conversation', type: 'unique', fields: ['cid', 'uid'] },
            { name: 'updated', type: 'range', fields: ['updatedAt'] },
        ],
    };

    static async create(layer: EntityLayer) {
        let directory = await layer.resolveEntityDirectory('userDialog');
        let config = { enableVersioning: true, enableTimestamps: true, validator: UserDialogFactory.validate, keyValidator: UserDialogFactory.validateKey, hasLiveStreams: false };
        let indexUser = new FEntityIndex(await layer.resolveEntityIndexDirectory('userDialog', 'user'), 'user', ['uid', 'date'], false, (src) => !!src.date && !src.hidden);
        let indexConversation = new FEntityIndex(await layer.resolveEntityIndexDirectory('userDialog', 'conversation'), 'conversation', ['cid', 'uid'], true);
        let indexUpdated = new FEntityIndex(await layer.resolveEntityIndexDirectory('userDialog', 'updated'), 'updated', ['updatedAt'], false);
        let indexes = {
            user: indexUser,
            conversation: indexConversation,
            updated: indexUpdated,
        };
        return new UserDialogFactory(layer, directory, config, indexes);
    }

    readonly indexUser: FEntityIndex;
    readonly indexConversation: FEntityIndex;
    readonly indexUpdated: FEntityIndex;

    private static validate(src: any) {
        validators.notNull('uid', src.uid);
        validators.isNumber('uid', src.uid);
        validators.notNull('cid', src.cid);
        validators.isNumber('cid', src.cid);
        validators.notNull('unread', src.unread);
        validators.isNumber('unread', src.unread);
        validators.isNumber('readMessageId', src.readMessageId);
        validators.isNumber('date', src.date);
        validators.isBoolean('haveMention', src.haveMention);
        validators.isString('title', src.title);
        validators.isBoolean('hidden', src.hidden);
        validators.isBoolean('disableGlobalCounter', src.disableGlobalCounter);
    }

    private static validateKey(key: Tuple[]) {
        validators.isNumber('0', key[0]);
        validators.isNumber('1', key[1]);
    }

    constructor(layer: EntityLayer, directory: Subspace, config: FEntityOptions, indexes: { user: FEntityIndex, conversation: FEntityIndex, updated: FEntityIndex }) {
        super('UserDialog', 'userDialog', config, [indexes.user, indexes.conversation, indexes.updated], layer, directory);
        this.indexUser = indexes.user;
        this.indexConversation = indexes.conversation;
        this.indexUpdated = indexes.updated;
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 2) { throw Error('Invalid key length!'); }
        return { 'uid': rawId[0], 'cid': rawId[1] };
    }
    async findById(ctx: Context, uid: number, cid: number) {
        return await this._findById(ctx, [uid, cid]);
    }
    async create(ctx: Context, uid: number, cid: number, shape: UserDialogShape) {
        return await this._create(ctx, [uid, cid], { uid, cid, ...shape });
    }
    async create_UNSAFE(ctx: Context, uid: number, cid: number, shape: UserDialogShape) {
        return await this._create_UNSAFE(ctx, [uid, cid], { uid, cid, ...shape });
    }
    watch(ctx: Context, uid: number, cid: number) {
        return this._watch(ctx, [uid, cid]);
    }
    async allFromUserAfter(ctx: Context, uid: number, after: number) {
        return await this._findRangeAllAfter(ctx, this.indexUser.directory, [uid], after);
    }
    async rangeFromUserAfter(ctx: Context, uid: number, after: number, limit: number, reversed?: boolean) {
        return await this._findRangeAfter(ctx, this.indexUser.directory, [uid], after, limit, reversed);
    }
    async rangeFromUser(ctx: Context, uid: number, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, this.indexUser.directory, [uid], limit, reversed);
    }
    async rangeFromUserWithCursor(ctx: Context, uid: number, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, this.indexUser.directory, [uid], limit, after, reversed);
    }
    async allFromUser(ctx: Context, uid: number) {
        return await this._findAll(ctx, this.indexUser.directory, [uid]);
    }
    createUserStream(uid: number, limit: number, after?: string) {
        return this._createStream(this.indexUser.directory, [uid], limit, after); 
    }
    async findFromConversation(ctx: Context, cid: number, uid: number) {
        return await this._findFromIndex(ctx, this.indexConversation.directory, [cid, uid]);
    }
    async allFromConversationAfter(ctx: Context, cid: number, after: number) {
        return await this._findRangeAllAfter(ctx, this.indexConversation.directory, [cid], after);
    }
    async rangeFromConversationAfter(ctx: Context, cid: number, after: number, limit: number, reversed?: boolean) {
        return await this._findRangeAfter(ctx, this.indexConversation.directory, [cid], after, limit, reversed);
    }
    async rangeFromConversation(ctx: Context, cid: number, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, this.indexConversation.directory, [cid], limit, reversed);
    }
    async rangeFromConversationWithCursor(ctx: Context, cid: number, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, this.indexConversation.directory, [cid], limit, after, reversed);
    }
    async allFromConversation(ctx: Context, cid: number) {
        return await this._findAll(ctx, this.indexConversation.directory, [cid]);
    }
    createConversationStream(cid: number, limit: number, after?: string) {
        return this._createStream(this.indexConversation.directory, [cid], limit, after); 
    }
    async rangeFromUpdated(ctx: Context, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, this.indexUpdated.directory, [], limit, reversed);
    }
    async rangeFromUpdatedWithCursor(ctx: Context, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, this.indexUpdated.directory, [], limit, after, reversed);
    }
    async allFromUpdated(ctx: Context, ) {
        return await this._findAll(ctx, this.indexUpdated.directory, []);
    }
    createUpdatedStream(limit: number, after?: string) {
        return this._createStream(this.indexUpdated.directory, [], limit, after); 
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new UserDialog(ctx, this.layer, this.directory, [value.uid, value.cid], value, this.options, isNew, this.indexes, 'UserDialog');
    }
}
export interface UserDialogHandledMessageShape {
}

export class UserDialogHandledMessage extends FEntity {
    readonly entityName: 'UserDialogHandledMessage' = 'UserDialogHandledMessage';
    get uid(): number { return this._value.uid; }
    get cid(): number { return this._value.cid; }
    get mid(): number { return this._value.mid; }
}

export class UserDialogHandledMessageFactory extends FEntityFactory<UserDialogHandledMessage> {
    static schema: FEntitySchema = {
        name: 'UserDialogHandledMessage',
        editable: false,
        primaryKeys: [
            { name: 'uid', type: 'number' },
            { name: 'cid', type: 'number' },
            { name: 'mid', type: 'number' },
        ],
        fields: [
        ],
        indexes: [
        ],
    };

    static async create(layer: EntityLayer) {
        let directory = await layer.resolveEntityDirectory('userDialogHandledMessage');
        let config = { enableVersioning: true, enableTimestamps: true, validator: UserDialogHandledMessageFactory.validate, keyValidator: UserDialogHandledMessageFactory.validateKey, hasLiveStreams: false };
        return new UserDialogHandledMessageFactory(layer, directory, config);
    }

    private static validate(src: any) {
        validators.notNull('uid', src.uid);
        validators.isNumber('uid', src.uid);
        validators.notNull('cid', src.cid);
        validators.isNumber('cid', src.cid);
        validators.notNull('mid', src.mid);
        validators.isNumber('mid', src.mid);
    }

    private static validateKey(key: Tuple[]) {
        validators.isNumber('0', key[0]);
        validators.isNumber('1', key[1]);
        validators.isNumber('2', key[2]);
    }

    constructor(layer: EntityLayer, directory: Subspace, config: FEntityOptions) {
        super('UserDialogHandledMessage', 'userDialogHandledMessage', config, [], layer, directory);
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 3) { throw Error('Invalid key length!'); }
        return { 'uid': rawId[0], 'cid': rawId[1], 'mid': rawId[2] };
    }
    async findById(ctx: Context, uid: number, cid: number, mid: number) {
        return await this._findById(ctx, [uid, cid, mid]);
    }
    async create(ctx: Context, uid: number, cid: number, mid: number, shape: UserDialogHandledMessageShape) {
        return await this._create(ctx, [uid, cid, mid], { uid, cid, mid, ...shape });
    }
    async create_UNSAFE(ctx: Context, uid: number, cid: number, mid: number, shape: UserDialogHandledMessageShape) {
        return await this._create_UNSAFE(ctx, [uid, cid, mid], { uid, cid, mid, ...shape });
    }
    watch(ctx: Context, uid: number, cid: number, mid: number) {
        return this._watch(ctx, [uid, cid, mid]);
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new UserDialogHandledMessage(ctx, this.layer, this.directory, [value.uid, value.cid, value.mid], value, this.options, isNew, this.indexes, 'UserDialogHandledMessage');
    }
}
export interface UserDialogSettingsShape {
    mute: boolean;
}

export class UserDialogSettings extends FEntity {
    readonly entityName: 'UserDialogSettings' = 'UserDialogSettings';
    get uid(): number { return this._value.uid; }
    get cid(): number { return this._value.cid; }
    get mute(): boolean {
        return this._value.mute;
    }
    set mute(value: boolean) {
        this._checkIsWritable();
        if (value === this._value.mute) { return; }
        this._value.mute = value;
        this.markDirty();
    }
}

export class UserDialogSettingsFactory extends FEntityFactory<UserDialogSettings> {
    static schema: FEntitySchema = {
        name: 'UserDialogSettings',
        editable: false,
        primaryKeys: [
            { name: 'uid', type: 'number' },
            { name: 'cid', type: 'number' },
        ],
        fields: [
            { name: 'mute', type: 'boolean' },
        ],
        indexes: [
        ],
    };

    static async create(layer: EntityLayer) {
        let directory = await layer.resolveEntityDirectory('userDialogSettings');
        let config = { enableVersioning: true, enableTimestamps: true, validator: UserDialogSettingsFactory.validate, keyValidator: UserDialogSettingsFactory.validateKey, hasLiveStreams: false };
        return new UserDialogSettingsFactory(layer, directory, config);
    }

    private static validate(src: any) {
        validators.notNull('uid', src.uid);
        validators.isNumber('uid', src.uid);
        validators.notNull('cid', src.cid);
        validators.isNumber('cid', src.cid);
        validators.notNull('mute', src.mute);
        validators.isBoolean('mute', src.mute);
    }

    private static validateKey(key: Tuple[]) {
        validators.isNumber('0', key[0]);
        validators.isNumber('1', key[1]);
    }

    constructor(layer: EntityLayer, directory: Subspace, config: FEntityOptions) {
        super('UserDialogSettings', 'userDialogSettings', config, [], layer, directory);
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 2) { throw Error('Invalid key length!'); }
        return { 'uid': rawId[0], 'cid': rawId[1] };
    }
    async findById(ctx: Context, uid: number, cid: number) {
        return await this._findById(ctx, [uid, cid]);
    }
    async create(ctx: Context, uid: number, cid: number, shape: UserDialogSettingsShape) {
        return await this._create(ctx, [uid, cid], { uid, cid, ...shape });
    }
    async create_UNSAFE(ctx: Context, uid: number, cid: number, shape: UserDialogSettingsShape) {
        return await this._create_UNSAFE(ctx, [uid, cid], { uid, cid, ...shape });
    }
    watch(ctx: Context, uid: number, cid: number) {
        return this._watch(ctx, [uid, cid]);
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new UserDialogSettings(ctx, this.layer, this.directory, [value.uid, value.cid], value, this.options, isNew, this.indexes, 'UserDialogSettings');
    }
}
export interface UserDialogEventShape {
    cid?: number| null;
    mid?: number| null;
    allUnread?: number| null;
    unread?: number| null;
    title?: string| null;
    photo?: any| null;
    mute?: boolean| null;
    haveMention?: boolean| null;
    kind: 'message_received' | 'message_updated' | 'message_deleted' | 'message_read' | 'title_updated' | 'dialog_deleted' | 'dialog_bump' | 'photo_updated' | 'dialog_mute_changed' | 'dialog_mentioned_changed';
}

export class UserDialogEvent extends FEntity {
    readonly entityName: 'UserDialogEvent' = 'UserDialogEvent';
    get uid(): number { return this._value.uid; }
    get seq(): number { return this._value.seq; }
    get cid(): number | null {
        let res = this._value.cid;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set cid(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.cid) { return; }
        this._value.cid = value;
        this.markDirty();
    }
    get mid(): number | null {
        let res = this._value.mid;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set mid(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.mid) { return; }
        this._value.mid = value;
        this.markDirty();
    }
    get allUnread(): number | null {
        let res = this._value.allUnread;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set allUnread(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.allUnread) { return; }
        this._value.allUnread = value;
        this.markDirty();
    }
    get unread(): number | null {
        let res = this._value.unread;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set unread(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.unread) { return; }
        this._value.unread = value;
        this.markDirty();
    }
    get title(): string | null {
        let res = this._value.title;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set title(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.title) { return; }
        this._value.title = value;
        this.markDirty();
    }
    get photo(): any | null {
        let res = this._value.photo;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set photo(value: any | null) {
        this._checkIsWritable();
        if (value === this._value.photo) { return; }
        this._value.photo = value;
        this.markDirty();
    }
    get mute(): boolean | null {
        let res = this._value.mute;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set mute(value: boolean | null) {
        this._checkIsWritable();
        if (value === this._value.mute) { return; }
        this._value.mute = value;
        this.markDirty();
    }
    get haveMention(): boolean | null {
        let res = this._value.haveMention;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set haveMention(value: boolean | null) {
        this._checkIsWritable();
        if (value === this._value.haveMention) { return; }
        this._value.haveMention = value;
        this.markDirty();
    }
    get kind(): 'message_received' | 'message_updated' | 'message_deleted' | 'message_read' | 'title_updated' | 'dialog_deleted' | 'dialog_bump' | 'photo_updated' | 'dialog_mute_changed' | 'dialog_mentioned_changed' {
        return this._value.kind;
    }
    set kind(value: 'message_received' | 'message_updated' | 'message_deleted' | 'message_read' | 'title_updated' | 'dialog_deleted' | 'dialog_bump' | 'photo_updated' | 'dialog_mute_changed' | 'dialog_mentioned_changed') {
        this._checkIsWritable();
        if (value === this._value.kind) { return; }
        this._value.kind = value;
        this.markDirty();
    }
}

export class UserDialogEventFactory extends FEntityFactory<UserDialogEvent> {
    static schema: FEntitySchema = {
        name: 'UserDialogEvent',
        editable: false,
        primaryKeys: [
            { name: 'uid', type: 'number' },
            { name: 'seq', type: 'number' },
        ],
        fields: [
            { name: 'cid', type: 'number' },
            { name: 'mid', type: 'number' },
            { name: 'allUnread', type: 'number' },
            { name: 'unread', type: 'number' },
            { name: 'title', type: 'string' },
            { name: 'photo', type: 'json' },
            { name: 'mute', type: 'boolean' },
            { name: 'haveMention', type: 'boolean' },
            { name: 'kind', type: 'enum', enumValues: ['message_received', 'message_updated', 'message_deleted', 'message_read', 'title_updated', 'dialog_deleted', 'dialog_bump', 'photo_updated', 'dialog_mute_changed', 'dialog_mentioned_changed'] },
        ],
        indexes: [
            { name: 'user', type: 'range', fields: ['uid', 'seq'] },
        ],
    };

    static async create(layer: EntityLayer) {
        let directory = await layer.resolveEntityDirectory('userDialogEvent');
        let config = { enableVersioning: true, enableTimestamps: true, validator: UserDialogEventFactory.validate, keyValidator: UserDialogEventFactory.validateKey, hasLiveStreams: true };
        let indexUser = new FEntityIndex(await layer.resolveEntityIndexDirectory('userDialogEvent', 'user'), 'user', ['uid', 'seq'], false);
        let indexes = {
            user: indexUser,
        };
        return new UserDialogEventFactory(layer, directory, config, indexes);
    }

    readonly indexUser: FEntityIndex;

    private static validate(src: any) {
        validators.notNull('uid', src.uid);
        validators.isNumber('uid', src.uid);
        validators.notNull('seq', src.seq);
        validators.isNumber('seq', src.seq);
        validators.isNumber('cid', src.cid);
        validators.isNumber('mid', src.mid);
        validators.isNumber('allUnread', src.allUnread);
        validators.isNumber('unread', src.unread);
        validators.isString('title', src.title);
        validators.isBoolean('mute', src.mute);
        validators.isBoolean('haveMention', src.haveMention);
        validators.notNull('kind', src.kind);
        validators.isEnum('kind', src.kind, ['message_received', 'message_updated', 'message_deleted', 'message_read', 'title_updated', 'dialog_deleted', 'dialog_bump', 'photo_updated', 'dialog_mute_changed', 'dialog_mentioned_changed']);
    }

    private static validateKey(key: Tuple[]) {
        validators.isNumber('0', key[0]);
        validators.isNumber('1', key[1]);
    }

    constructor(layer: EntityLayer, directory: Subspace, config: FEntityOptions, indexes: { user: FEntityIndex }) {
        super('UserDialogEvent', 'userDialogEvent', config, [indexes.user], layer, directory);
        this.indexUser = indexes.user;
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 2) { throw Error('Invalid key length!'); }
        return { 'uid': rawId[0], 'seq': rawId[1] };
    }
    async findById(ctx: Context, uid: number, seq: number) {
        return await this._findById(ctx, [uid, seq]);
    }
    async create(ctx: Context, uid: number, seq: number, shape: UserDialogEventShape) {
        return await this._create(ctx, [uid, seq], { uid, seq, ...shape });
    }
    async create_UNSAFE(ctx: Context, uid: number, seq: number, shape: UserDialogEventShape) {
        return await this._create_UNSAFE(ctx, [uid, seq], { uid, seq, ...shape });
    }
    watch(ctx: Context, uid: number, seq: number) {
        return this._watch(ctx, [uid, seq]);
    }
    async allFromUserAfter(ctx: Context, uid: number, after: number) {
        return await this._findRangeAllAfter(ctx, this.indexUser.directory, [uid], after);
    }
    async rangeFromUserAfter(ctx: Context, uid: number, after: number, limit: number, reversed?: boolean) {
        return await this._findRangeAfter(ctx, this.indexUser.directory, [uid], after, limit, reversed);
    }
    async rangeFromUser(ctx: Context, uid: number, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, this.indexUser.directory, [uid], limit, reversed);
    }
    async rangeFromUserWithCursor(ctx: Context, uid: number, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, this.indexUser.directory, [uid], limit, after, reversed);
    }
    async allFromUser(ctx: Context, uid: number) {
        return await this._findAll(ctx, this.indexUser.directory, [uid]);
    }
    createUserStream(uid: number, limit: number, after?: string) {
        return this._createStream(this.indexUser.directory, [uid], limit, after); 
    }
    createUserLiveStream(ctx: Context, uid: number, limit: number, after?: string) {
        return this._createLiveStream(ctx, this.indexUser.directory, [uid], limit, after); 
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new UserDialogEvent(ctx, this.layer, this.directory, [value.uid, value.seq], value, this.options, isNew, this.indexes, 'UserDialogEvent');
    }
}
export interface UserMessagingStateShape {
    seq: number;
    unread: number;
    messagesSent?: number| null;
    messagesReceived?: number| null;
    chatsCount?: number| null;
    directChatsCount?: number| null;
}

export class UserMessagingState extends FEntity {
    readonly entityName: 'UserMessagingState' = 'UserMessagingState';
    get uid(): number { return this._value.uid; }
    get seq(): number {
        return this._value.seq;
    }
    set seq(value: number) {
        this._checkIsWritable();
        if (value === this._value.seq) { return; }
        this._value.seq = value;
        this.markDirty();
    }
    get unread(): number {
        return this._value.unread;
    }
    set unread(value: number) {
        this._checkIsWritable();
        if (value === this._value.unread) { return; }
        this._value.unread = value;
        this.markDirty();
    }
    get messagesSent(): number | null {
        let res = this._value.messagesSent;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set messagesSent(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.messagesSent) { return; }
        this._value.messagesSent = value;
        this.markDirty();
    }
    get messagesReceived(): number | null {
        let res = this._value.messagesReceived;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set messagesReceived(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.messagesReceived) { return; }
        this._value.messagesReceived = value;
        this.markDirty();
    }
    get chatsCount(): number | null {
        let res = this._value.chatsCount;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set chatsCount(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.chatsCount) { return; }
        this._value.chatsCount = value;
        this.markDirty();
    }
    get directChatsCount(): number | null {
        let res = this._value.directChatsCount;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set directChatsCount(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.directChatsCount) { return; }
        this._value.directChatsCount = value;
        this.markDirty();
    }
}

export class UserMessagingStateFactory extends FEntityFactory<UserMessagingState> {
    static schema: FEntitySchema = {
        name: 'UserMessagingState',
        editable: false,
        primaryKeys: [
            { name: 'uid', type: 'number' },
        ],
        fields: [
            { name: 'seq', type: 'number' },
            { name: 'unread', type: 'number' },
            { name: 'messagesSent', type: 'number' },
            { name: 'messagesReceived', type: 'number' },
            { name: 'chatsCount', type: 'number' },
            { name: 'directChatsCount', type: 'number' },
        ],
        indexes: [
            { name: 'hasUnread', type: 'range', fields: [] },
        ],
    };

    static async create(layer: EntityLayer) {
        let directory = await layer.resolveEntityDirectory('userMessagingState');
        let config = { enableVersioning: true, enableTimestamps: true, validator: UserMessagingStateFactory.validate, keyValidator: UserMessagingStateFactory.validateKey, hasLiveStreams: false };
        let indexHasUnread = new FEntityIndex(await layer.resolveEntityIndexDirectory('userMessagingState', 'hasUnread'), 'hasUnread', [], false, (src) => src.unread && src.unread > 0);
        let indexes = {
            hasUnread: indexHasUnread,
        };
        return new UserMessagingStateFactory(layer, directory, config, indexes);
    }

    readonly indexHasUnread: FEntityIndex;

    private static validate(src: any) {
        validators.notNull('uid', src.uid);
        validators.isNumber('uid', src.uid);
        validators.notNull('seq', src.seq);
        validators.isNumber('seq', src.seq);
        validators.notNull('unread', src.unread);
        validators.isNumber('unread', src.unread);
        validators.isNumber('messagesSent', src.messagesSent);
        validators.isNumber('messagesReceived', src.messagesReceived);
        validators.isNumber('chatsCount', src.chatsCount);
        validators.isNumber('directChatsCount', src.directChatsCount);
    }

    private static validateKey(key: Tuple[]) {
        validators.isNumber('0', key[0]);
    }

    constructor(layer: EntityLayer, directory: Subspace, config: FEntityOptions, indexes: { hasUnread: FEntityIndex }) {
        super('UserMessagingState', 'userMessagingState', config, [indexes.hasUnread], layer, directory);
        this.indexHasUnread = indexes.hasUnread;
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'uid': rawId[0] };
    }
    async findById(ctx: Context, uid: number) {
        return await this._findById(ctx, [uid]);
    }
    async create(ctx: Context, uid: number, shape: UserMessagingStateShape) {
        return await this._create(ctx, [uid], { uid, ...shape });
    }
    async create_UNSAFE(ctx: Context, uid: number, shape: UserMessagingStateShape) {
        return await this._create_UNSAFE(ctx, [uid], { uid, ...shape });
    }
    watch(ctx: Context, uid: number) {
        return this._watch(ctx, [uid]);
    }
    async rangeFromHasUnread(ctx: Context, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, this.indexHasUnread.directory, [], limit, reversed);
    }
    async rangeFromHasUnreadWithCursor(ctx: Context, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, this.indexHasUnread.directory, [], limit, after, reversed);
    }
    async allFromHasUnread(ctx: Context, ) {
        return await this._findAll(ctx, this.indexHasUnread.directory, []);
    }
    createHasUnreadStream(limit: number, after?: string) {
        return this._createStream(this.indexHasUnread.directory, [], limit, after); 
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new UserMessagingState(ctx, this.layer, this.directory, [value.uid], value, this.options, isNew, this.indexes, 'UserMessagingState');
    }
}
export interface UserNotificationsStateShape {
    readSeq?: number| null;
    lastEmailNotification?: number| null;
    lastPushNotification?: number| null;
    lastEmailSeq?: number| null;
    lastPushSeq?: number| null;
}

export class UserNotificationsState extends FEntity {
    readonly entityName: 'UserNotificationsState' = 'UserNotificationsState';
    get uid(): number { return this._value.uid; }
    get readSeq(): number | null {
        let res = this._value.readSeq;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set readSeq(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.readSeq) { return; }
        this._value.readSeq = value;
        this.markDirty();
    }
    get lastEmailNotification(): number | null {
        let res = this._value.lastEmailNotification;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set lastEmailNotification(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.lastEmailNotification) { return; }
        this._value.lastEmailNotification = value;
        this.markDirty();
    }
    get lastPushNotification(): number | null {
        let res = this._value.lastPushNotification;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set lastPushNotification(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.lastPushNotification) { return; }
        this._value.lastPushNotification = value;
        this.markDirty();
    }
    get lastEmailSeq(): number | null {
        let res = this._value.lastEmailSeq;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set lastEmailSeq(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.lastEmailSeq) { return; }
        this._value.lastEmailSeq = value;
        this.markDirty();
    }
    get lastPushSeq(): number | null {
        let res = this._value.lastPushSeq;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set lastPushSeq(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.lastPushSeq) { return; }
        this._value.lastPushSeq = value;
        this.markDirty();
    }
}

export class UserNotificationsStateFactory extends FEntityFactory<UserNotificationsState> {
    static schema: FEntitySchema = {
        name: 'UserNotificationsState',
        editable: false,
        primaryKeys: [
            { name: 'uid', type: 'number' },
        ],
        fields: [
            { name: 'readSeq', type: 'number' },
            { name: 'lastEmailNotification', type: 'number' },
            { name: 'lastPushNotification', type: 'number' },
            { name: 'lastEmailSeq', type: 'number' },
            { name: 'lastPushSeq', type: 'number' },
        ],
        indexes: [
        ],
    };

    static async create(layer: EntityLayer) {
        let directory = await layer.resolveEntityDirectory('userNotificationsState');
        let config = { enableVersioning: true, enableTimestamps: true, validator: UserNotificationsStateFactory.validate, keyValidator: UserNotificationsStateFactory.validateKey, hasLiveStreams: false };
        return new UserNotificationsStateFactory(layer, directory, config);
    }

    private static validate(src: any) {
        validators.notNull('uid', src.uid);
        validators.isNumber('uid', src.uid);
        validators.isNumber('readSeq', src.readSeq);
        validators.isNumber('lastEmailNotification', src.lastEmailNotification);
        validators.isNumber('lastPushNotification', src.lastPushNotification);
        validators.isNumber('lastEmailSeq', src.lastEmailSeq);
        validators.isNumber('lastPushSeq', src.lastPushSeq);
    }

    private static validateKey(key: Tuple[]) {
        validators.isNumber('0', key[0]);
    }

    constructor(layer: EntityLayer, directory: Subspace, config: FEntityOptions) {
        super('UserNotificationsState', 'userNotificationsState', config, [], layer, directory);
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'uid': rawId[0] };
    }
    async findById(ctx: Context, uid: number) {
        return await this._findById(ctx, [uid]);
    }
    async create(ctx: Context, uid: number, shape: UserNotificationsStateShape) {
        return await this._create(ctx, [uid], { uid, ...shape });
    }
    async create_UNSAFE(ctx: Context, uid: number, shape: UserNotificationsStateShape) {
        return await this._create_UNSAFE(ctx, [uid], { uid, ...shape });
    }
    watch(ctx: Context, uid: number) {
        return this._watch(ctx, [uid]);
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new UserNotificationsState(ctx, this.layer, this.directory, [value.uid], value, this.options, isNew, this.indexes, 'UserNotificationsState');
    }
}
export interface NotificationCenterShape {
    kind: 'user';
}

export class NotificationCenter extends FEntity {
    readonly entityName: 'NotificationCenter' = 'NotificationCenter';
    get id(): number { return this._value.id; }
    get kind(): 'user' {
        return this._value.kind;
    }
    set kind(value: 'user') {
        this._checkIsWritable();
        if (value === this._value.kind) { return; }
        this._value.kind = value;
        this.markDirty();
    }
}

export class NotificationCenterFactory extends FEntityFactory<NotificationCenter> {
    static schema: FEntitySchema = {
        name: 'NotificationCenter',
        editable: false,
        primaryKeys: [
            { name: 'id', type: 'number' },
        ],
        fields: [
            { name: 'kind', type: 'enum', enumValues: ['user'] },
        ],
        indexes: [
        ],
    };

    static async create(layer: EntityLayer) {
        let directory = await layer.resolveEntityDirectory('notificationCenter');
        let config = { enableVersioning: true, enableTimestamps: true, validator: NotificationCenterFactory.validate, keyValidator: NotificationCenterFactory.validateKey, hasLiveStreams: false };
        return new NotificationCenterFactory(layer, directory, config);
    }

    private static validate(src: any) {
        validators.notNull('id', src.id);
        validators.isNumber('id', src.id);
        validators.notNull('kind', src.kind);
        validators.isEnum('kind', src.kind, ['user']);
    }

    private static validateKey(key: Tuple[]) {
        validators.isNumber('0', key[0]);
    }

    constructor(layer: EntityLayer, directory: Subspace, config: FEntityOptions) {
        super('NotificationCenter', 'notificationCenter', config, [], layer, directory);
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'id': rawId[0] };
    }
    async findById(ctx: Context, id: number) {
        return await this._findById(ctx, [id]);
    }
    async create(ctx: Context, id: number, shape: NotificationCenterShape) {
        return await this._create(ctx, [id], { id, ...shape });
    }
    async create_UNSAFE(ctx: Context, id: number, shape: NotificationCenterShape) {
        return await this._create_UNSAFE(ctx, [id], { id, ...shape });
    }
    watch(ctx: Context, id: number) {
        return this._watch(ctx, [id]);
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new NotificationCenter(ctx, this.layer, this.directory, [value.id], value, this.options, isNew, this.indexes, 'NotificationCenter');
    }
}
export interface UserNotificationCenterShape {
    uid: number;
}

export class UserNotificationCenter extends FEntity {
    readonly entityName: 'UserNotificationCenter' = 'UserNotificationCenter';
    get id(): number { return this._value.id; }
    get uid(): number {
        return this._value.uid;
    }
    set uid(value: number) {
        this._checkIsWritable();
        if (value === this._value.uid) { return; }
        this._value.uid = value;
        this.markDirty();
    }
}

export class UserNotificationCenterFactory extends FEntityFactory<UserNotificationCenter> {
    static schema: FEntitySchema = {
        name: 'UserNotificationCenter',
        editable: false,
        primaryKeys: [
            { name: 'id', type: 'number' },
        ],
        fields: [
            { name: 'uid', type: 'number' },
        ],
        indexes: [
            { name: 'user', type: 'unique', fields: ['uid'] },
        ],
    };

    static async create(layer: EntityLayer) {
        let directory = await layer.resolveEntityDirectory('userNotificationCenter');
        let config = { enableVersioning: true, enableTimestamps: true, validator: UserNotificationCenterFactory.validate, keyValidator: UserNotificationCenterFactory.validateKey, hasLiveStreams: false };
        let indexUser = new FEntityIndex(await layer.resolveEntityIndexDirectory('userNotificationCenter', 'user'), 'user', ['uid'], true);
        let indexes = {
            user: indexUser,
        };
        return new UserNotificationCenterFactory(layer, directory, config, indexes);
    }

    readonly indexUser: FEntityIndex;

    private static validate(src: any) {
        validators.notNull('id', src.id);
        validators.isNumber('id', src.id);
        validators.notNull('uid', src.uid);
        validators.isNumber('uid', src.uid);
    }

    private static validateKey(key: Tuple[]) {
        validators.isNumber('0', key[0]);
    }

    constructor(layer: EntityLayer, directory: Subspace, config: FEntityOptions, indexes: { user: FEntityIndex }) {
        super('UserNotificationCenter', 'userNotificationCenter', config, [indexes.user], layer, directory);
        this.indexUser = indexes.user;
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'id': rawId[0] };
    }
    async findById(ctx: Context, id: number) {
        return await this._findById(ctx, [id]);
    }
    async create(ctx: Context, id: number, shape: UserNotificationCenterShape) {
        return await this._create(ctx, [id], { id, ...shape });
    }
    async create_UNSAFE(ctx: Context, id: number, shape: UserNotificationCenterShape) {
        return await this._create_UNSAFE(ctx, [id], { id, ...shape });
    }
    watch(ctx: Context, id: number) {
        return this._watch(ctx, [id]);
    }
    async findFromUser(ctx: Context, uid: number) {
        return await this._findFromIndex(ctx, this.indexUser.directory, [uid]);
    }
    async rangeFromUser(ctx: Context, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, this.indexUser.directory, [], limit, reversed);
    }
    async rangeFromUserWithCursor(ctx: Context, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, this.indexUser.directory, [], limit, after, reversed);
    }
    async allFromUser(ctx: Context, ) {
        return await this._findAll(ctx, this.indexUser.directory, []);
    }
    createUserStream(limit: number, after?: string) {
        return this._createStream(this.indexUser.directory, [], limit, after); 
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new UserNotificationCenter(ctx, this.layer, this.directory, [value.id], value, this.options, isNew, this.indexes, 'UserNotificationCenter');
    }
}
export interface NotificationShape {
    ncid: number;
    text?: string| null;
    deleted?: boolean| null;
    content?: ({ type: 'new_comment', commentId: number, })[]| null;
}

export class Notification extends FEntity {
    readonly entityName: 'Notification' = 'Notification';
    get id(): number { return this._value.id; }
    get ncid(): number {
        return this._value.ncid;
    }
    set ncid(value: number) {
        this._checkIsWritable();
        if (value === this._value.ncid) { return; }
        this._value.ncid = value;
        this.markDirty();
    }
    get text(): string | null {
        let res = this._value.text;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set text(value: string | null) {
        this._checkIsWritable();
        if (value === this._value.text) { return; }
        this._value.text = value;
        this.markDirty();
    }
    get deleted(): boolean | null {
        let res = this._value.deleted;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set deleted(value: boolean | null) {
        this._checkIsWritable();
        if (value === this._value.deleted) { return; }
        this._value.deleted = value;
        this.markDirty();
    }
    get content(): ({ type: 'new_comment', commentId: number, })[] | null {
        let res = this._value.content;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set content(value: ({ type: 'new_comment', commentId: number, })[] | null) {
        this._checkIsWritable();
        if (value === this._value.content) { return; }
        this._value.content = value;
        this.markDirty();
    }
}

export class NotificationFactory extends FEntityFactory<Notification> {
    static schema: FEntitySchema = {
        name: 'Notification',
        editable: false,
        primaryKeys: [
            { name: 'id', type: 'number' },
        ],
        fields: [
            { name: 'ncid', type: 'number' },
            { name: 'text', type: 'string', secure: true },
            { name: 'deleted', type: 'boolean' },
            { name: 'content', type: 'json' },
        ],
        indexes: [
            { name: 'notificationCenter', type: 'range', fields: ['ncid', 'id'] },
        ],
    };

    static async create(layer: EntityLayer) {
        let directory = await layer.resolveEntityDirectory('notification');
        let config = { enableVersioning: true, enableTimestamps: true, validator: NotificationFactory.validate, keyValidator: NotificationFactory.validateKey, hasLiveStreams: false };
        let indexNotificationCenter = new FEntityIndex(await layer.resolveEntityIndexDirectory('notification', 'notificationCenter'), 'notificationCenter', ['ncid', 'id'], false, (src) => !src.deleted);
        let indexes = {
            notificationCenter: indexNotificationCenter,
        };
        return new NotificationFactory(layer, directory, config, indexes);
    }

    readonly indexNotificationCenter: FEntityIndex;

    private static validate(src: any) {
        validators.notNull('id', src.id);
        validators.isNumber('id', src.id);
        validators.notNull('ncid', src.ncid);
        validators.isNumber('ncid', src.ncid);
        validators.isString('text', src.text);
        validators.isBoolean('deleted', src.deleted);
        validators.isJson('content', src.content, jVec(jEnum(
            json(() => {
                jField('type', jString('new_comment'));
                jField('commentId', jNumber());
            })
        )));
    }

    private static validateKey(key: Tuple[]) {
        validators.isNumber('0', key[0]);
    }

    constructor(layer: EntityLayer, directory: Subspace, config: FEntityOptions, indexes: { notificationCenter: FEntityIndex }) {
        super('Notification', 'notification', config, [indexes.notificationCenter], layer, directory);
        this.indexNotificationCenter = indexes.notificationCenter;
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'id': rawId[0] };
    }
    async findById(ctx: Context, id: number) {
        return await this._findById(ctx, [id]);
    }
    async create(ctx: Context, id: number, shape: NotificationShape) {
        return await this._create(ctx, [id], { id, ...shape });
    }
    async create_UNSAFE(ctx: Context, id: number, shape: NotificationShape) {
        return await this._create_UNSAFE(ctx, [id], { id, ...shape });
    }
    watch(ctx: Context, id: number) {
        return this._watch(ctx, [id]);
    }
    async allFromNotificationCenterAfter(ctx: Context, ncid: number, after: number) {
        return await this._findRangeAllAfter(ctx, this.indexNotificationCenter.directory, [ncid], after);
    }
    async rangeFromNotificationCenterAfter(ctx: Context, ncid: number, after: number, limit: number, reversed?: boolean) {
        return await this._findRangeAfter(ctx, this.indexNotificationCenter.directory, [ncid], after, limit, reversed);
    }
    async rangeFromNotificationCenter(ctx: Context, ncid: number, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, this.indexNotificationCenter.directory, [ncid], limit, reversed);
    }
    async rangeFromNotificationCenterWithCursor(ctx: Context, ncid: number, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, this.indexNotificationCenter.directory, [ncid], limit, after, reversed);
    }
    async allFromNotificationCenter(ctx: Context, ncid: number) {
        return await this._findAll(ctx, this.indexNotificationCenter.directory, [ncid]);
    }
    createNotificationCenterStream(ncid: number, limit: number, after?: string) {
        return this._createStream(this.indexNotificationCenter.directory, [ncid], limit, after); 
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new Notification(ctx, this.layer, this.directory, [value.id], value, this.options, isNew, this.indexes, 'Notification');
    }
}
export interface NotificationCenterStateShape {
    seq: number;
    readNotificationId?: number| null;
    readSeq?: number| null;
    lastEmailNotification?: number| null;
    lastPushNotification?: number| null;
    lastEmailSeq?: number| null;
    lastPushSeq?: number| null;
}

export class NotificationCenterState extends FEntity {
    readonly entityName: 'NotificationCenterState' = 'NotificationCenterState';
    get ncid(): number { return this._value.ncid; }
    get seq(): number {
        return this._value.seq;
    }
    set seq(value: number) {
        this._checkIsWritable();
        if (value === this._value.seq) { return; }
        this._value.seq = value;
        this.markDirty();
    }
    get readNotificationId(): number | null {
        let res = this._value.readNotificationId;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set readNotificationId(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.readNotificationId) { return; }
        this._value.readNotificationId = value;
        this.markDirty();
    }
    get readSeq(): number | null {
        let res = this._value.readSeq;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set readSeq(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.readSeq) { return; }
        this._value.readSeq = value;
        this.markDirty();
    }
    get lastEmailNotification(): number | null {
        let res = this._value.lastEmailNotification;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set lastEmailNotification(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.lastEmailNotification) { return; }
        this._value.lastEmailNotification = value;
        this.markDirty();
    }
    get lastPushNotification(): number | null {
        let res = this._value.lastPushNotification;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set lastPushNotification(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.lastPushNotification) { return; }
        this._value.lastPushNotification = value;
        this.markDirty();
    }
    get lastEmailSeq(): number | null {
        let res = this._value.lastEmailSeq;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set lastEmailSeq(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.lastEmailSeq) { return; }
        this._value.lastEmailSeq = value;
        this.markDirty();
    }
    get lastPushSeq(): number | null {
        let res = this._value.lastPushSeq;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set lastPushSeq(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.lastPushSeq) { return; }
        this._value.lastPushSeq = value;
        this.markDirty();
    }
}

export class NotificationCenterStateFactory extends FEntityFactory<NotificationCenterState> {
    static schema: FEntitySchema = {
        name: 'NotificationCenterState',
        editable: false,
        primaryKeys: [
            { name: 'ncid', type: 'number' },
        ],
        fields: [
            { name: 'seq', type: 'number' },
            { name: 'readNotificationId', type: 'number' },
            { name: 'readSeq', type: 'number' },
            { name: 'lastEmailNotification', type: 'number' },
            { name: 'lastPushNotification', type: 'number' },
            { name: 'lastEmailSeq', type: 'number' },
            { name: 'lastPushSeq', type: 'number' },
        ],
        indexes: [
        ],
    };

    static async create(layer: EntityLayer) {
        let directory = await layer.resolveEntityDirectory('notificationCenterState');
        let config = { enableVersioning: true, enableTimestamps: true, validator: NotificationCenterStateFactory.validate, keyValidator: NotificationCenterStateFactory.validateKey, hasLiveStreams: false };
        return new NotificationCenterStateFactory(layer, directory, config);
    }

    private static validate(src: any) {
        validators.notNull('ncid', src.ncid);
        validators.isNumber('ncid', src.ncid);
        validators.notNull('seq', src.seq);
        validators.isNumber('seq', src.seq);
        validators.isNumber('readNotificationId', src.readNotificationId);
        validators.isNumber('readSeq', src.readSeq);
        validators.isNumber('lastEmailNotification', src.lastEmailNotification);
        validators.isNumber('lastPushNotification', src.lastPushNotification);
        validators.isNumber('lastEmailSeq', src.lastEmailSeq);
        validators.isNumber('lastPushSeq', src.lastPushSeq);
    }

    private static validateKey(key: Tuple[]) {
        validators.isNumber('0', key[0]);
    }

    constructor(layer: EntityLayer, directory: Subspace, config: FEntityOptions) {
        super('NotificationCenterState', 'notificationCenterState', config, [], layer, directory);
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'ncid': rawId[0] };
    }
    async findById(ctx: Context, ncid: number) {
        return await this._findById(ctx, [ncid]);
    }
    async create(ctx: Context, ncid: number, shape: NotificationCenterStateShape) {
        return await this._create(ctx, [ncid], { ncid, ...shape });
    }
    async create_UNSAFE(ctx: Context, ncid: number, shape: NotificationCenterStateShape) {
        return await this._create_UNSAFE(ctx, [ncid], { ncid, ...shape });
    }
    watch(ctx: Context, ncid: number) {
        return this._watch(ctx, [ncid]);
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new NotificationCenterState(ctx, this.layer, this.directory, [value.ncid], value, this.options, isNew, this.indexes, 'NotificationCenterState');
    }
}
export interface NotificationCenterEventShape {
    notificationId?: number| null;
    updatedContent?: { type: 'comment', peerId: number, peerType: string, commentId: number | null, }| null;
    kind: 'notification_received' | 'notification_read' | 'notification_deleted' | 'notification_updated' | 'notification_content_updated';
}

export class NotificationCenterEvent extends FEntity {
    readonly entityName: 'NotificationCenterEvent' = 'NotificationCenterEvent';
    get ncid(): number { return this._value.ncid; }
    get seq(): number { return this._value.seq; }
    get notificationId(): number | null {
        let res = this._value.notificationId;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set notificationId(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.notificationId) { return; }
        this._value.notificationId = value;
        this.markDirty();
    }
    get updatedContent(): { type: 'comment', peerId: number, peerType: string, commentId: number | null, } | null {
        let res = this._value.updatedContent;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set updatedContent(value: { type: 'comment', peerId: number, peerType: string, commentId: number | null, } | null) {
        this._checkIsWritable();
        if (value === this._value.updatedContent) { return; }
        this._value.updatedContent = value;
        this.markDirty();
    }
    get kind(): 'notification_received' | 'notification_read' | 'notification_deleted' | 'notification_updated' | 'notification_content_updated' {
        return this._value.kind;
    }
    set kind(value: 'notification_received' | 'notification_read' | 'notification_deleted' | 'notification_updated' | 'notification_content_updated') {
        this._checkIsWritable();
        if (value === this._value.kind) { return; }
        this._value.kind = value;
        this.markDirty();
    }
}

export class NotificationCenterEventFactory extends FEntityFactory<NotificationCenterEvent> {
    static schema: FEntitySchema = {
        name: 'NotificationCenterEvent',
        editable: false,
        primaryKeys: [
            { name: 'ncid', type: 'number' },
            { name: 'seq', type: 'number' },
        ],
        fields: [
            { name: 'notificationId', type: 'number' },
            { name: 'updatedContent', type: 'json' },
            { name: 'kind', type: 'enum', enumValues: ['notification_received', 'notification_read', 'notification_deleted', 'notification_updated', 'notification_content_updated'] },
        ],
        indexes: [
            { name: 'notificationCenter', type: 'range', fields: ['ncid', 'seq'] },
        ],
    };

    static async create(layer: EntityLayer) {
        let directory = await layer.resolveEntityDirectory('notificationCenterEvent');
        let config = { enableVersioning: true, enableTimestamps: true, validator: NotificationCenterEventFactory.validate, keyValidator: NotificationCenterEventFactory.validateKey, hasLiveStreams: true };
        let indexNotificationCenter = new FEntityIndex(await layer.resolveEntityIndexDirectory('notificationCenterEvent', 'notificationCenter'), 'notificationCenter', ['ncid', 'seq'], false);
        let indexes = {
            notificationCenter: indexNotificationCenter,
        };
        return new NotificationCenterEventFactory(layer, directory, config, indexes);
    }

    readonly indexNotificationCenter: FEntityIndex;

    private static validate(src: any) {
        validators.notNull('ncid', src.ncid);
        validators.isNumber('ncid', src.ncid);
        validators.notNull('seq', src.seq);
        validators.isNumber('seq', src.seq);
        validators.isNumber('notificationId', src.notificationId);
        validators.isJson('updatedContent', src.updatedContent, jEnum(
            json(() => {
                jField('type', jString('comment'));
                jField('peerId', jNumber());
                jField('peerType', jString());
                jField('commentId', jNumber()).nullable();
            })
        ));
        validators.notNull('kind', src.kind);
        validators.isEnum('kind', src.kind, ['notification_received', 'notification_read', 'notification_deleted', 'notification_updated', 'notification_content_updated']);
    }

    private static validateKey(key: Tuple[]) {
        validators.isNumber('0', key[0]);
        validators.isNumber('1', key[1]);
    }

    constructor(layer: EntityLayer, directory: Subspace, config: FEntityOptions, indexes: { notificationCenter: FEntityIndex }) {
        super('NotificationCenterEvent', 'notificationCenterEvent', config, [indexes.notificationCenter], layer, directory);
        this.indexNotificationCenter = indexes.notificationCenter;
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 2) { throw Error('Invalid key length!'); }
        return { 'ncid': rawId[0], 'seq': rawId[1] };
    }
    async findById(ctx: Context, ncid: number, seq: number) {
        return await this._findById(ctx, [ncid, seq]);
    }
    async create(ctx: Context, ncid: number, seq: number, shape: NotificationCenterEventShape) {
        return await this._create(ctx, [ncid, seq], { ncid, seq, ...shape });
    }
    async create_UNSAFE(ctx: Context, ncid: number, seq: number, shape: NotificationCenterEventShape) {
        return await this._create_UNSAFE(ctx, [ncid, seq], { ncid, seq, ...shape });
    }
    watch(ctx: Context, ncid: number, seq: number) {
        return this._watch(ctx, [ncid, seq]);
    }
    async allFromNotificationCenterAfter(ctx: Context, ncid: number, after: number) {
        return await this._findRangeAllAfter(ctx, this.indexNotificationCenter.directory, [ncid], after);
    }
    async rangeFromNotificationCenterAfter(ctx: Context, ncid: number, after: number, limit: number, reversed?: boolean) {
        return await this._findRangeAfter(ctx, this.indexNotificationCenter.directory, [ncid], after, limit, reversed);
    }
    async rangeFromNotificationCenter(ctx: Context, ncid: number, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, this.indexNotificationCenter.directory, [ncid], limit, reversed);
    }
    async rangeFromNotificationCenterWithCursor(ctx: Context, ncid: number, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, this.indexNotificationCenter.directory, [ncid], limit, after, reversed);
    }
    async allFromNotificationCenter(ctx: Context, ncid: number) {
        return await this._findAll(ctx, this.indexNotificationCenter.directory, [ncid]);
    }
    createNotificationCenterStream(ncid: number, limit: number, after?: string) {
        return this._createStream(this.indexNotificationCenter.directory, [ncid], limit, after); 
    }
    createNotificationCenterLiveStream(ctx: Context, ncid: number, limit: number, after?: string) {
        return this._createLiveStream(ctx, this.indexNotificationCenter.directory, [ncid], limit, after); 
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new NotificationCenterEvent(ctx, this.layer, this.directory, [value.ncid, value.seq], value, this.options, isNew, this.indexes, 'NotificationCenterEvent');
    }
}
export interface UserBadgeShape {
    uid: number;
    name: string;
    verifiedBy?: number| null;
    deleted?: boolean| null;
}

export class UserBadge extends FEntity {
    readonly entityName: 'UserBadge' = 'UserBadge';
    get id(): number { return this._value.id; }
    get uid(): number {
        return this._value.uid;
    }
    set uid(value: number) {
        this._checkIsWritable();
        if (value === this._value.uid) { return; }
        this._value.uid = value;
        this.markDirty();
    }
    get name(): string {
        return this._value.name;
    }
    set name(value: string) {
        this._checkIsWritable();
        if (value === this._value.name) { return; }
        this._value.name = value;
        this.markDirty();
    }
    get verifiedBy(): number | null {
        let res = this._value.verifiedBy;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set verifiedBy(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.verifiedBy) { return; }
        this._value.verifiedBy = value;
        this.markDirty();
    }
    get deleted(): boolean | null {
        let res = this._value.deleted;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set deleted(value: boolean | null) {
        this._checkIsWritable();
        if (value === this._value.deleted) { return; }
        this._value.deleted = value;
        this.markDirty();
    }
}

export class UserBadgeFactory extends FEntityFactory<UserBadge> {
    static schema: FEntitySchema = {
        name: 'UserBadge',
        editable: false,
        primaryKeys: [
            { name: 'id', type: 'number' },
        ],
        fields: [
            { name: 'uid', type: 'number' },
            { name: 'name', type: 'string' },
            { name: 'verifiedBy', type: 'number' },
            { name: 'deleted', type: 'boolean' },
        ],
        indexes: [
            { name: 'user', type: 'range', fields: ['uid', 'id'] },
            { name: 'name', type: 'range', fields: ['name', 'createdAt'] },
        ],
    };

    static async create(layer: EntityLayer) {
        let directory = await layer.resolveEntityDirectory('userBadge');
        let config = { enableVersioning: true, enableTimestamps: true, validator: UserBadgeFactory.validate, keyValidator: UserBadgeFactory.validateKey, hasLiveStreams: false };
        let indexUser = new FEntityIndex(await layer.resolveEntityIndexDirectory('userBadge', 'user'), 'user', ['uid', 'id'], false, (src) => !src.deleted);
        let indexName = new FEntityIndex(await layer.resolveEntityIndexDirectory('userBadge', 'name'), 'name', ['name', 'createdAt'], false);
        let indexes = {
            user: indexUser,
            name: indexName,
        };
        return new UserBadgeFactory(layer, directory, config, indexes);
    }

    readonly indexUser: FEntityIndex;
    readonly indexName: FEntityIndex;

    private static validate(src: any) {
        validators.notNull('id', src.id);
        validators.isNumber('id', src.id);
        validators.notNull('uid', src.uid);
        validators.isNumber('uid', src.uid);
        validators.notNull('name', src.name);
        validators.isString('name', src.name);
        validators.isNumber('verifiedBy', src.verifiedBy);
        validators.isBoolean('deleted', src.deleted);
    }

    private static validateKey(key: Tuple[]) {
        validators.isNumber('0', key[0]);
    }

    constructor(layer: EntityLayer, directory: Subspace, config: FEntityOptions, indexes: { user: FEntityIndex, name: FEntityIndex }) {
        super('UserBadge', 'userBadge', config, [indexes.user, indexes.name], layer, directory);
        this.indexUser = indexes.user;
        this.indexName = indexes.name;
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'id': rawId[0] };
    }
    async findById(ctx: Context, id: number) {
        return await this._findById(ctx, [id]);
    }
    async create(ctx: Context, id: number, shape: UserBadgeShape) {
        return await this._create(ctx, [id], { id, ...shape });
    }
    async create_UNSAFE(ctx: Context, id: number, shape: UserBadgeShape) {
        return await this._create_UNSAFE(ctx, [id], { id, ...shape });
    }
    watch(ctx: Context, id: number) {
        return this._watch(ctx, [id]);
    }
    async allFromUserAfter(ctx: Context, uid: number, after: number) {
        return await this._findRangeAllAfter(ctx, this.indexUser.directory, [uid], after);
    }
    async rangeFromUserAfter(ctx: Context, uid: number, after: number, limit: number, reversed?: boolean) {
        return await this._findRangeAfter(ctx, this.indexUser.directory, [uid], after, limit, reversed);
    }
    async rangeFromUser(ctx: Context, uid: number, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, this.indexUser.directory, [uid], limit, reversed);
    }
    async rangeFromUserWithCursor(ctx: Context, uid: number, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, this.indexUser.directory, [uid], limit, after, reversed);
    }
    async allFromUser(ctx: Context, uid: number) {
        return await this._findAll(ctx, this.indexUser.directory, [uid]);
    }
    createUserStream(uid: number, limit: number, after?: string) {
        return this._createStream(this.indexUser.directory, [uid], limit, after); 
    }
    async allFromNameAfter(ctx: Context, name: string, after: number) {
        return await this._findRangeAllAfter(ctx, this.indexName.directory, [name], after);
    }
    async rangeFromNameAfter(ctx: Context, name: string, after: number, limit: number, reversed?: boolean) {
        return await this._findRangeAfter(ctx, this.indexName.directory, [name], after, limit, reversed);
    }
    async rangeFromName(ctx: Context, name: string, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, this.indexName.directory, [name], limit, reversed);
    }
    async rangeFromNameWithCursor(ctx: Context, name: string, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, this.indexName.directory, [name], limit, after, reversed);
    }
    async allFromName(ctx: Context, name: string) {
        return await this._findAll(ctx, this.indexName.directory, [name]);
    }
    createNameStream(name: string, limit: number, after?: string) {
        return this._createStream(this.indexName.directory, [name], limit, after); 
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new UserBadge(ctx, this.layer, this.directory, [value.id], value, this.options, isNew, this.indexes, 'UserBadge');
    }
}
export interface UserRoomBadgeShape {
    bid?: number| null;
}

export class UserRoomBadge extends FEntity {
    readonly entityName: 'UserRoomBadge' = 'UserRoomBadge';
    get uid(): number { return this._value.uid; }
    get cid(): number { return this._value.cid; }
    get bid(): number | null {
        let res = this._value.bid;
        if (res !== null && res !== undefined) { return res; }
        return null;
    }
    set bid(value: number | null) {
        this._checkIsWritable();
        if (value === this._value.bid) { return; }
        this._value.bid = value;
        this.markDirty();
    }
}

export class UserRoomBadgeFactory extends FEntityFactory<UserRoomBadge> {
    static schema: FEntitySchema = {
        name: 'UserRoomBadge',
        editable: false,
        primaryKeys: [
            { name: 'uid', type: 'number' },
            { name: 'cid', type: 'number' },
        ],
        fields: [
            { name: 'bid', type: 'number' },
        ],
        indexes: [
            { name: 'chat', type: 'range', fields: ['cid', 'uid'] },
            { name: 'user', type: 'range', fields: ['uid', 'cid'] },
        ],
    };

    static async create(layer: EntityLayer) {
        let directory = await layer.resolveEntityDirectory('userRoomBadge');
        let config = { enableVersioning: true, enableTimestamps: true, validator: UserRoomBadgeFactory.validate, keyValidator: UserRoomBadgeFactory.validateKey, hasLiveStreams: false };
        let indexChat = new FEntityIndex(await layer.resolveEntityIndexDirectory('userRoomBadge', 'chat'), 'chat', ['cid', 'uid'], false, (src) => !!src.bid);
        let indexUser = new FEntityIndex(await layer.resolveEntityIndexDirectory('userRoomBadge', 'user'), 'user', ['uid', 'cid'], false, (src) => !!src.bid);
        let indexes = {
            chat: indexChat,
            user: indexUser,
        };
        return new UserRoomBadgeFactory(layer, directory, config, indexes);
    }

    readonly indexChat: FEntityIndex;
    readonly indexUser: FEntityIndex;

    private static validate(src: any) {
        validators.notNull('uid', src.uid);
        validators.isNumber('uid', src.uid);
        validators.notNull('cid', src.cid);
        validators.isNumber('cid', src.cid);
        validators.isNumber('bid', src.bid);
    }

    private static validateKey(key: Tuple[]) {
        validators.isNumber('0', key[0]);
        validators.isNumber('1', key[1]);
    }

    constructor(layer: EntityLayer, directory: Subspace, config: FEntityOptions, indexes: { chat: FEntityIndex, user: FEntityIndex }) {
        super('UserRoomBadge', 'userRoomBadge', config, [indexes.chat, indexes.user], layer, directory);
        this.indexChat = indexes.chat;
        this.indexUser = indexes.user;
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 2) { throw Error('Invalid key length!'); }
        return { 'uid': rawId[0], 'cid': rawId[1] };
    }
    async findById(ctx: Context, uid: number, cid: number) {
        return await this._findById(ctx, [uid, cid]);
    }
    async create(ctx: Context, uid: number, cid: number, shape: UserRoomBadgeShape) {
        return await this._create(ctx, [uid, cid], { uid, cid, ...shape });
    }
    async create_UNSAFE(ctx: Context, uid: number, cid: number, shape: UserRoomBadgeShape) {
        return await this._create_UNSAFE(ctx, [uid, cid], { uid, cid, ...shape });
    }
    watch(ctx: Context, uid: number, cid: number) {
        return this._watch(ctx, [uid, cid]);
    }
    async allFromChatAfter(ctx: Context, cid: number, after: number) {
        return await this._findRangeAllAfter(ctx, this.indexChat.directory, [cid], after);
    }
    async rangeFromChatAfter(ctx: Context, cid: number, after: number, limit: number, reversed?: boolean) {
        return await this._findRangeAfter(ctx, this.indexChat.directory, [cid], after, limit, reversed);
    }
    async rangeFromChat(ctx: Context, cid: number, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, this.indexChat.directory, [cid], limit, reversed);
    }
    async rangeFromChatWithCursor(ctx: Context, cid: number, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, this.indexChat.directory, [cid], limit, after, reversed);
    }
    async allFromChat(ctx: Context, cid: number) {
        return await this._findAll(ctx, this.indexChat.directory, [cid]);
    }
    createChatStream(cid: number, limit: number, after?: string) {
        return this._createStream(this.indexChat.directory, [cid], limit, after); 
    }
    async allFromUserAfter(ctx: Context, uid: number, after: number) {
        return await this._findRangeAllAfter(ctx, this.indexUser.directory, [uid], after);
    }
    async rangeFromUserAfter(ctx: Context, uid: number, after: number, limit: number, reversed?: boolean) {
        return await this._findRangeAfter(ctx, this.indexUser.directory, [uid], after, limit, reversed);
    }
    async rangeFromUser(ctx: Context, uid: number, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, this.indexUser.directory, [uid], limit, reversed);
    }
    async rangeFromUserWithCursor(ctx: Context, uid: number, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, this.indexUser.directory, [uid], limit, after, reversed);
    }
    async allFromUser(ctx: Context, uid: number) {
        return await this._findAll(ctx, this.indexUser.directory, [uid]);
    }
    createUserStream(uid: number, limit: number, after?: string) {
        return this._createStream(this.indexUser.directory, [uid], limit, after); 
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new UserRoomBadge(ctx, this.layer, this.directory, [value.uid, value.cid], value, this.options, isNew, this.indexes, 'UserRoomBadge');
    }
}
export interface ChatAudienceCalculatingQueueShape {
    active: boolean;
    delta: number;
}

export class ChatAudienceCalculatingQueue extends FEntity {
    readonly entityName: 'ChatAudienceCalculatingQueue' = 'ChatAudienceCalculatingQueue';
    get id(): number { return this._value.id; }
    get active(): boolean {
        return this._value.active;
    }
    set active(value: boolean) {
        this._checkIsWritable();
        if (value === this._value.active) { return; }
        this._value.active = value;
        this.markDirty();
    }
    get delta(): number {
        return this._value.delta;
    }
    set delta(value: number) {
        this._checkIsWritable();
        if (value === this._value.delta) { return; }
        this._value.delta = value;
        this.markDirty();
    }
}

export class ChatAudienceCalculatingQueueFactory extends FEntityFactory<ChatAudienceCalculatingQueue> {
    static schema: FEntitySchema = {
        name: 'ChatAudienceCalculatingQueue',
        editable: false,
        primaryKeys: [
            { name: 'id', type: 'number' },
        ],
        fields: [
            { name: 'active', type: 'boolean' },
            { name: 'delta', type: 'number' },
        ],
        indexes: [
            { name: 'active', type: 'range', fields: ['createdAt'] },
        ],
    };

    static async create(layer: EntityLayer) {
        let directory = await layer.resolveEntityDirectory('chatAudienceCalculatingQueue');
        let config = { enableVersioning: true, enableTimestamps: true, validator: ChatAudienceCalculatingQueueFactory.validate, keyValidator: ChatAudienceCalculatingQueueFactory.validateKey, hasLiveStreams: false };
        let indexActive = new FEntityIndex(await layer.resolveEntityIndexDirectory('chatAudienceCalculatingQueue', 'active'), 'active', ['createdAt'], false, (src) => !!src.active);
        let indexes = {
            active: indexActive,
        };
        return new ChatAudienceCalculatingQueueFactory(layer, directory, config, indexes);
    }

    readonly indexActive: FEntityIndex;

    private static validate(src: any) {
        validators.notNull('id', src.id);
        validators.isNumber('id', src.id);
        validators.notNull('active', src.active);
        validators.isBoolean('active', src.active);
        validators.notNull('delta', src.delta);
        validators.isNumber('delta', src.delta);
    }

    private static validateKey(key: Tuple[]) {
        validators.isNumber('0', key[0]);
    }

    constructor(layer: EntityLayer, directory: Subspace, config: FEntityOptions, indexes: { active: FEntityIndex }) {
        super('ChatAudienceCalculatingQueue', 'chatAudienceCalculatingQueue', config, [indexes.active], layer, directory);
        this.indexActive = indexes.active;
    }
    extractId(rawId: any[]) {
        if (rawId.length !== 1) { throw Error('Invalid key length!'); }
        return { 'id': rawId[0] };
    }
    async findById(ctx: Context, id: number) {
        return await this._findById(ctx, [id]);
    }
    async create(ctx: Context, id: number, shape: ChatAudienceCalculatingQueueShape) {
        return await this._create(ctx, [id], { id, ...shape });
    }
    async create_UNSAFE(ctx: Context, id: number, shape: ChatAudienceCalculatingQueueShape) {
        return await this._create_UNSAFE(ctx, [id], { id, ...shape });
    }
    watch(ctx: Context, id: number) {
        return this._watch(ctx, [id]);
    }
    async rangeFromActive(ctx: Context, limit: number, reversed?: boolean) {
        return await this._findRange(ctx, this.indexActive.directory, [], limit, reversed);
    }
    async rangeFromActiveWithCursor(ctx: Context, limit: number, after?: string, reversed?: boolean) {
        return await this._findRangeWithCursor(ctx, this.indexActive.directory, [], limit, after, reversed);
    }
    async allFromActive(ctx: Context, ) {
        return await this._findAll(ctx, this.indexActive.directory, []);
    }
    createActiveStream(limit: number, after?: string) {
        return this._createStream(this.indexActive.directory, [], limit, after); 
    }
    protected _createEntity(ctx: Context, value: any, isNew: boolean) {
        return new ChatAudienceCalculatingQueue(ctx, this.layer, this.directory, [value.id], value, this.options, isNew, this.indexes, 'ChatAudienceCalculatingQueue');
    }
}

export interface AllEntities {
    readonly layer: EntityLayer;
    readonly allEntities: FEntityFactory<FEntity>[];
    readonly NeedNotificationFlagDirectory: Directory;
    readonly NotificationCenterNeedDeliveryFlagDirectory: Directory;
    readonly UserIndexingQueue: UserIndexingQueueFactory;
    readonly OrganizationIndexingQueue: OrganizationIndexingQueueFactory;
    readonly Conversation: ConversationFactory;
    readonly ConversationPrivate: ConversationPrivateFactory;
    readonly ConversationOrganization: ConversationOrganizationFactory;
    readonly ConversationRoom: ConversationRoomFactory;
    readonly RoomProfile: RoomProfileFactory;
    readonly RoomParticipant: RoomParticipantFactory;
    readonly ConversationReceiver: ConversationReceiverFactory;
    readonly Message: MessageFactory;
    readonly Comment: CommentFactory;
    readonly CommentState: CommentStateFactory;
    readonly CommentSeq: CommentSeqFactory;
    readonly CommentEvent: CommentEventFactory;
    readonly CommentsSubscription: CommentsSubscriptionFactory;
    readonly CommentEventGlobal: CommentEventGlobalFactory;
    readonly ConversationSeq: ConversationSeqFactory;
    readonly ConversationEvent: ConversationEventFactory;
    readonly UserDialog: UserDialogFactory;
    readonly UserDialogHandledMessage: UserDialogHandledMessageFactory;
    readonly UserDialogSettings: UserDialogSettingsFactory;
    readonly UserDialogEvent: UserDialogEventFactory;
    readonly UserMessagingState: UserMessagingStateFactory;
    readonly UserNotificationsState: UserNotificationsStateFactory;
    readonly NotificationCenter: NotificationCenterFactory;
    readonly UserNotificationCenter: UserNotificationCenterFactory;
    readonly Notification: NotificationFactory;
    readonly NotificationCenterState: NotificationCenterStateFactory;
    readonly NotificationCenterEvent: NotificationCenterEventFactory;
    readonly UserBadge: UserBadgeFactory;
    readonly UserRoomBadge: UserRoomBadgeFactory;
    readonly ChatAudienceCalculatingQueue: ChatAudienceCalculatingQueueFactory;
}
export class AllEntitiesDirect extends EntitiesBase implements AllEntities {
    static readonly schema: FEntitySchema[] = [
        UserIndexingQueueFactory.schema,
        OrganizationIndexingQueueFactory.schema,
        ConversationFactory.schema,
        ConversationPrivateFactory.schema,
        ConversationOrganizationFactory.schema,
        ConversationRoomFactory.schema,
        RoomProfileFactory.schema,
        RoomParticipantFactory.schema,
        ConversationReceiverFactory.schema,
        MessageFactory.schema,
        CommentFactory.schema,
        CommentStateFactory.schema,
        CommentSeqFactory.schema,
        CommentEventFactory.schema,
        CommentsSubscriptionFactory.schema,
        CommentEventGlobalFactory.schema,
        ConversationSeqFactory.schema,
        ConversationEventFactory.schema,
        UserDialogFactory.schema,
        UserDialogHandledMessageFactory.schema,
        UserDialogSettingsFactory.schema,
        UserDialogEventFactory.schema,
        UserMessagingStateFactory.schema,
        UserNotificationsStateFactory.schema,
        NotificationCenterFactory.schema,
        UserNotificationCenterFactory.schema,
        NotificationFactory.schema,
        NotificationCenterStateFactory.schema,
        NotificationCenterEventFactory.schema,
        UserBadgeFactory.schema,
        UserRoomBadgeFactory.schema,
        ChatAudienceCalculatingQueueFactory.schema,
    ];

    static async create(layer: EntityLayer) {
        let allEntities: FEntityFactory<FEntity>[] = [];
        let UserIndexingQueuePromise = UserIndexingQueueFactory.create(layer);
        let OrganizationIndexingQueuePromise = OrganizationIndexingQueueFactory.create(layer);
        let ConversationPromise = ConversationFactory.create(layer);
        let ConversationPrivatePromise = ConversationPrivateFactory.create(layer);
        let ConversationOrganizationPromise = ConversationOrganizationFactory.create(layer);
        let ConversationRoomPromise = ConversationRoomFactory.create(layer);
        let RoomProfilePromise = RoomProfileFactory.create(layer);
        let RoomParticipantPromise = RoomParticipantFactory.create(layer);
        let ConversationReceiverPromise = ConversationReceiverFactory.create(layer);
        let MessagePromise = MessageFactory.create(layer);
        let CommentPromise = CommentFactory.create(layer);
        let CommentStatePromise = CommentStateFactory.create(layer);
        let CommentSeqPromise = CommentSeqFactory.create(layer);
        let CommentEventPromise = CommentEventFactory.create(layer);
        let CommentsSubscriptionPromise = CommentsSubscriptionFactory.create(layer);
        let CommentEventGlobalPromise = CommentEventGlobalFactory.create(layer);
        let ConversationSeqPromise = ConversationSeqFactory.create(layer);
        let ConversationEventPromise = ConversationEventFactory.create(layer);
        let UserDialogPromise = UserDialogFactory.create(layer);
        let UserDialogHandledMessagePromise = UserDialogHandledMessageFactory.create(layer);
        let UserDialogSettingsPromise = UserDialogSettingsFactory.create(layer);
        let UserDialogEventPromise = UserDialogEventFactory.create(layer);
        let UserMessagingStatePromise = UserMessagingStateFactory.create(layer);
        let UserNotificationsStatePromise = UserNotificationsStateFactory.create(layer);
        let NotificationCenterPromise = NotificationCenterFactory.create(layer);
        let UserNotificationCenterPromise = UserNotificationCenterFactory.create(layer);
        let NotificationPromise = NotificationFactory.create(layer);
        let NotificationCenterStatePromise = NotificationCenterStateFactory.create(layer);
        let NotificationCenterEventPromise = NotificationCenterEventFactory.create(layer);
        let UserBadgePromise = UserBadgeFactory.create(layer);
        let UserRoomBadgePromise = UserRoomBadgeFactory.create(layer);
        let ChatAudienceCalculatingQueuePromise = ChatAudienceCalculatingQueueFactory.create(layer);
        let NeedNotificationFlagDirectoryPromise = layer.resolveCustomDirectory('needNotificationFlag');
        let NotificationCenterNeedDeliveryFlagDirectoryPromise = layer.resolveCustomDirectory('notificationCenterNeedDeliveryFlag');
        allEntities.push(await UserIndexingQueuePromise);
        allEntities.push(await OrganizationIndexingQueuePromise);
        allEntities.push(await ConversationPromise);
        allEntities.push(await ConversationPrivatePromise);
        allEntities.push(await ConversationOrganizationPromise);
        allEntities.push(await ConversationRoomPromise);
        allEntities.push(await RoomProfilePromise);
        allEntities.push(await RoomParticipantPromise);
        allEntities.push(await ConversationReceiverPromise);
        allEntities.push(await MessagePromise);
        allEntities.push(await CommentPromise);
        allEntities.push(await CommentStatePromise);
        allEntities.push(await CommentSeqPromise);
        allEntities.push(await CommentEventPromise);
        allEntities.push(await CommentsSubscriptionPromise);
        allEntities.push(await CommentEventGlobalPromise);
        allEntities.push(await ConversationSeqPromise);
        allEntities.push(await ConversationEventPromise);
        allEntities.push(await UserDialogPromise);
        allEntities.push(await UserDialogHandledMessagePromise);
        allEntities.push(await UserDialogSettingsPromise);
        allEntities.push(await UserDialogEventPromise);
        allEntities.push(await UserMessagingStatePromise);
        allEntities.push(await UserNotificationsStatePromise);
        allEntities.push(await NotificationCenterPromise);
        allEntities.push(await UserNotificationCenterPromise);
        allEntities.push(await NotificationPromise);
        allEntities.push(await NotificationCenterStatePromise);
        allEntities.push(await NotificationCenterEventPromise);
        allEntities.push(await UserBadgePromise);
        allEntities.push(await UserRoomBadgePromise);
        allEntities.push(await ChatAudienceCalculatingQueuePromise);
        let entities = {
            layer, allEntities,
            UserIndexingQueue: await UserIndexingQueuePromise,
            OrganizationIndexingQueue: await OrganizationIndexingQueuePromise,
            Conversation: await ConversationPromise,
            ConversationPrivate: await ConversationPrivatePromise,
            ConversationOrganization: await ConversationOrganizationPromise,
            ConversationRoom: await ConversationRoomPromise,
            RoomProfile: await RoomProfilePromise,
            RoomParticipant: await RoomParticipantPromise,
            ConversationReceiver: await ConversationReceiverPromise,
            Message: await MessagePromise,
            Comment: await CommentPromise,
            CommentState: await CommentStatePromise,
            CommentSeq: await CommentSeqPromise,
            CommentEvent: await CommentEventPromise,
            CommentsSubscription: await CommentsSubscriptionPromise,
            CommentEventGlobal: await CommentEventGlobalPromise,
            ConversationSeq: await ConversationSeqPromise,
            ConversationEvent: await ConversationEventPromise,
            UserDialog: await UserDialogPromise,
            UserDialogHandledMessage: await UserDialogHandledMessagePromise,
            UserDialogSettings: await UserDialogSettingsPromise,
            UserDialogEvent: await UserDialogEventPromise,
            UserMessagingState: await UserMessagingStatePromise,
            UserNotificationsState: await UserNotificationsStatePromise,
            NotificationCenter: await NotificationCenterPromise,
            UserNotificationCenter: await UserNotificationCenterPromise,
            Notification: await NotificationPromise,
            NotificationCenterState: await NotificationCenterStatePromise,
            NotificationCenterEvent: await NotificationCenterEventPromise,
            UserBadge: await UserBadgePromise,
            UserRoomBadge: await UserRoomBadgePromise,
            ChatAudienceCalculatingQueue: await ChatAudienceCalculatingQueuePromise,
            NeedNotificationFlagDirectory: await NeedNotificationFlagDirectoryPromise,
            NotificationCenterNeedDeliveryFlagDirectory: await NotificationCenterNeedDeliveryFlagDirectoryPromise,
        };
        return new AllEntitiesDirect(entities);
    }

    readonly allEntities: FEntityFactory<FEntity>[] = [];
    readonly NeedNotificationFlagDirectory: Directory;
    readonly NotificationCenterNeedDeliveryFlagDirectory: Directory;
    readonly UserIndexingQueue: UserIndexingQueueFactory;
    readonly OrganizationIndexingQueue: OrganizationIndexingQueueFactory;
    readonly Conversation: ConversationFactory;
    readonly ConversationPrivate: ConversationPrivateFactory;
    readonly ConversationOrganization: ConversationOrganizationFactory;
    readonly ConversationRoom: ConversationRoomFactory;
    readonly RoomProfile: RoomProfileFactory;
    readonly RoomParticipant: RoomParticipantFactory;
    readonly ConversationReceiver: ConversationReceiverFactory;
    readonly Message: MessageFactory;
    readonly Comment: CommentFactory;
    readonly CommentState: CommentStateFactory;
    readonly CommentSeq: CommentSeqFactory;
    readonly CommentEvent: CommentEventFactory;
    readonly CommentsSubscription: CommentsSubscriptionFactory;
    readonly CommentEventGlobal: CommentEventGlobalFactory;
    readonly ConversationSeq: ConversationSeqFactory;
    readonly ConversationEvent: ConversationEventFactory;
    readonly UserDialog: UserDialogFactory;
    readonly UserDialogHandledMessage: UserDialogHandledMessageFactory;
    readonly UserDialogSettings: UserDialogSettingsFactory;
    readonly UserDialogEvent: UserDialogEventFactory;
    readonly UserMessagingState: UserMessagingStateFactory;
    readonly UserNotificationsState: UserNotificationsStateFactory;
    readonly NotificationCenter: NotificationCenterFactory;
    readonly UserNotificationCenter: UserNotificationCenterFactory;
    readonly Notification: NotificationFactory;
    readonly NotificationCenterState: NotificationCenterStateFactory;
    readonly NotificationCenterEvent: NotificationCenterEventFactory;
    readonly UserBadge: UserBadgeFactory;
    readonly UserRoomBadge: UserRoomBadgeFactory;
    readonly ChatAudienceCalculatingQueue: ChatAudienceCalculatingQueueFactory;

    private constructor(entities: AllEntities) {
        super(entities.layer);
        this.UserIndexingQueue = entities.UserIndexingQueue;
        this.allEntities.push(this.UserIndexingQueue);
        this.OrganizationIndexingQueue = entities.OrganizationIndexingQueue;
        this.allEntities.push(this.OrganizationIndexingQueue);
        this.Conversation = entities.Conversation;
        this.allEntities.push(this.Conversation);
        this.ConversationPrivate = entities.ConversationPrivate;
        this.allEntities.push(this.ConversationPrivate);
        this.ConversationOrganization = entities.ConversationOrganization;
        this.allEntities.push(this.ConversationOrganization);
        this.ConversationRoom = entities.ConversationRoom;
        this.allEntities.push(this.ConversationRoom);
        this.RoomProfile = entities.RoomProfile;
        this.allEntities.push(this.RoomProfile);
        this.RoomParticipant = entities.RoomParticipant;
        this.allEntities.push(this.RoomParticipant);
        this.ConversationReceiver = entities.ConversationReceiver;
        this.allEntities.push(this.ConversationReceiver);
        this.Message = entities.Message;
        this.allEntities.push(this.Message);
        this.Comment = entities.Comment;
        this.allEntities.push(this.Comment);
        this.CommentState = entities.CommentState;
        this.allEntities.push(this.CommentState);
        this.CommentSeq = entities.CommentSeq;
        this.allEntities.push(this.CommentSeq);
        this.CommentEvent = entities.CommentEvent;
        this.allEntities.push(this.CommentEvent);
        this.CommentsSubscription = entities.CommentsSubscription;
        this.allEntities.push(this.CommentsSubscription);
        this.CommentEventGlobal = entities.CommentEventGlobal;
        this.allEntities.push(this.CommentEventGlobal);
        this.ConversationSeq = entities.ConversationSeq;
        this.allEntities.push(this.ConversationSeq);
        this.ConversationEvent = entities.ConversationEvent;
        this.allEntities.push(this.ConversationEvent);
        this.UserDialog = entities.UserDialog;
        this.allEntities.push(this.UserDialog);
        this.UserDialogHandledMessage = entities.UserDialogHandledMessage;
        this.allEntities.push(this.UserDialogHandledMessage);
        this.UserDialogSettings = entities.UserDialogSettings;
        this.allEntities.push(this.UserDialogSettings);
        this.UserDialogEvent = entities.UserDialogEvent;
        this.allEntities.push(this.UserDialogEvent);
        this.UserMessagingState = entities.UserMessagingState;
        this.allEntities.push(this.UserMessagingState);
        this.UserNotificationsState = entities.UserNotificationsState;
        this.allEntities.push(this.UserNotificationsState);
        this.NotificationCenter = entities.NotificationCenter;
        this.allEntities.push(this.NotificationCenter);
        this.UserNotificationCenter = entities.UserNotificationCenter;
        this.allEntities.push(this.UserNotificationCenter);
        this.Notification = entities.Notification;
        this.allEntities.push(this.Notification);
        this.NotificationCenterState = entities.NotificationCenterState;
        this.allEntities.push(this.NotificationCenterState);
        this.NotificationCenterEvent = entities.NotificationCenterEvent;
        this.allEntities.push(this.NotificationCenterEvent);
        this.UserBadge = entities.UserBadge;
        this.allEntities.push(this.UserBadge);
        this.UserRoomBadge = entities.UserRoomBadge;
        this.allEntities.push(this.UserRoomBadge);
        this.ChatAudienceCalculatingQueue = entities.ChatAudienceCalculatingQueue;
        this.allEntities.push(this.ChatAudienceCalculatingQueue);
        this.NeedNotificationFlagDirectory = entities.NeedNotificationFlagDirectory;
        this.NotificationCenterNeedDeliveryFlagDirectory = entities.NotificationCenterNeedDeliveryFlagDirectory;
    }
}
