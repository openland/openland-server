type AppStorageValue {
    id: ID!
    key: String!
    value: String
}

input AppStorageValueInput {
    key: String!
    value: String
}

type AppProfile {
    id: ID!

    name: String!
    photoRef: ImageRef
    about: String
    shortname: String

    token: AppToken!
}

input AppProfileInput {
    name: String
    shortname: String
    photoRef: ImageRefInput
    about: String
}

type AppToken {
    salt: String!
}

type AppChat {
    chat: Room!
    webhook: String!
}

extend type Query {
    myApps: [AppProfile!]!
    
    userStorage(namespace: String!, keys: [String!]!): [AppStorageValue!]!
}

extend type Mutation {
    createApp(name: String!, photoRef: ImageRefInput, about: String, shortname: String): AppProfile!
    createSuperApp(name: String!, photoRef: ImageRefInput, about: String, shortname: String): AppProfile!
    refreshAppToken(appId: ID!): AppProfile!
    updateAppProfile(appId: ID!, input: AppProfileInput!): AppProfile!
    deleteApp(appId: ID!): Boolean!
    addAppToChat(appId: ID!, chatId: ID!): AppChat!

    userStorageSet(namespace: String!, data: [AppStorageValueInput!]!): [AppStorageValue!]!
}