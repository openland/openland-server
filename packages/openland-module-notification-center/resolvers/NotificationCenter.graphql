type NotificationCenter {
    id: ID!
    unread: Int!
    state: NotificationCenterUpdatesState!
}

type Notification {
    id: ID!
    text: String
    content: [NotificationContent!]!
}

union NotificationContent = NewCommentNotification | NewMatchmakingProfilesNotification | MentionNotification

type NewCommentNotification {
    peer: CommentsPeer!
    comment: CommentEntry!
}

type NewMatchmakingProfilesNotification {
    room: MatchmakingRoom!
    profiles: [MatchmakingProfile!]!
}

union MessageWithMention = FeedPost | Message

type MentionNotification {
    peer: MentionPeer!
    message: MessageWithMention!
}

type NotificationConnection {
    items: [Notification!]!
    cursor: String
}

extend type Query {
    myNotificationCenter: NotificationCenter!
    myNotifications(first: Int!, before: ID): NotificationConnection!
}

extend type Mutation {
    readNotification(notificationId: ID!): NotificationCenter!
    deleteNotification(notificationId: ID!): Boolean!
    notificationCenterMarkSeqRead(toSeq: Int!): Boolean!
    debugCreateNotification(uid: ID!, text: String!): Boolean!
}