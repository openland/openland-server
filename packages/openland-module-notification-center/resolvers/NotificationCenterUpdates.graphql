type NotificationCenterUpdatesState {
    state: String
}

type NotificationCenterUpdateSingle {
    seq: Int!
    state: String!
    update: NotificationCenterUpdate!
}

type NotificationCenterUpdateBatch {
    seq: Int!
    state: String!
    fromSeq: Int!
    updates: [NotificationCenterUpdate!]!
}

union NotificationCenterUpdate = NotificationReceived | NotificationRead | NotificationDeleted | NotificationUpdated

type NotificationReceived {
    center: NotificationCenter!
    notification: Notification!
    unread: Int!
}

type NotificationRead {
    center: NotificationCenter!
    unread: Int!
}

type NotificationDeleted {
    center: NotificationCenter!
    notification: Notification!
    unread: Int!
}

type NotificationUpdated {
    center: NotificationCenter!
    notification: Notification!
    unread: Int!
}

union NotificationCenterUpdateContainer = NotificationCenterUpdateSingle | NotificationCenterUpdateBatch

extend type Subscription {
    notificationCenterUpdates(fromState: String): NotificationCenterUpdateContainer
}