#
# Invites
#

type Invite {
    id: ID!
    key: String!
    ttl: String
}

type InviteInfo {
    id: ID!
    key: String!
    orgId: ID!
    title: String!
    photo: String
    photoRef: ImageRef
    joined: Boolean!
    creator: User
    forEmail: String
    forName: String
    description: String
    membersCount: Int
    organization: Organization
}

type AppInvite {
    inviter: User!
}

type AppInviteInfo {
    inviter: User!
}

type InviteHistotyInfo {
    acceptedBy: User
    forEmail: String!
    isGlobal: Boolean!
}

union ResolveInviteEntry = InviteInfo | AppInvite | RoomInvite

extend type Query {
    alphaInviteInfo(key: String!): InviteInfo
    appInvite: String!
    appInviteFromUser(shortname: String!): String!
    appInviteInfo(key: String!): AppInvite
    alphaResolveInvite(key: String!): ResolveInviteEntry
}

extend type Mutation {
    alphaJoinInvite(key: String!, isNewUser: Boolean): ID!
    joinAppInvite(key: String!, isNewUser: Boolean): ID!
}
