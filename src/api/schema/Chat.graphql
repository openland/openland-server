type Conversation {
    id: ID!
    title: String!
}

type ConversationMessage {
    id: ID!
    message: String!
    sender: User!
    date: String!
}

interface ConversationEvent {
    seq: Int!
}

type ConversationEventMessage implements ConversationEvent {
    seq: Int!
    message: ConversationMessage!
}

type ConversationEventDelete implements ConversationEvent {
    seq: Int!
    messageId: ID!
}

type ConversationState {
    seq: Int!
    messages: [ConversationMessage!]!
}

extend type Mutation {
    superCreateChat(title: String!): Conversation!
    alphaSendMessage(conversationId: ID!, message: String!, repeatKey: String): ConversationEventMessage!
}

extend type Query {
    superAllChats: [Conversation!]!
    alphaChat(conversationId: ID!): Conversation!
    alphaLoadMessages(conversationId: ID!): ConversationState!
}

extend type Subscription {
    alphaChatSubscribe(conversationId: ID!, fromSeq: Int): ConversationEvent!
}