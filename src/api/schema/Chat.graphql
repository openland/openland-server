
#
# Types Of Conversations
#

interface Conversation {
    id: ID!
    flexibleId: ID!
    title: String!
    photoRefs: [ImageRef!]!
    unreadCount: Int!
    topMessage: ConversationMessage
}

type AnonymousConversation implements Conversation {
    id: ID!
    flexibleId: ID!
    title: String!
    photoRefs: [ImageRef!]!
    unreadCount: Int!
    topMessage: ConversationMessage
}

type SharedConversation implements Conversation {
    id: ID!
    flexibleId: ID!
    title: String!
    photoRefs: [ImageRef!]!
    organizations: [Organization!]!
    unreadCount: Int!
    topMessage: ConversationMessage
}

type PrivateConversation implements Conversation {
    id: ID!
    flexibleId: ID!
    title: String!
    photoRefs: [ImageRef!]!
    members: [User!]!
    unreadCount: Int!
    topMessage: ConversationMessage
}

#
# Messaging Contents
#

type ConversationMessage {
    id: ID!
    message: String
    file: String
    fileMetadata: FileMetadata
    sender: User!
    date: Date!
    repeatKey: String
}

type FileMetadata {
    name: String!
    mimeType: String
    size: Int!
    isImage: Boolean!
    imageWidth: Int
    imageHeight: Int
    imageFormat: String
}

#
# Conversation Events
#

interface ConversationEvent {
    seq: Int!
}

type ConversationEventMessage implements ConversationEvent {
    seq: Int!
    message: ConversationMessage!
}

type ConversationEventDelete implements ConversationEvent {
    seq: Int!
    messageId: ID!
}

type ConversationState {
    seq: Int!
    messages: [ConversationMessage!]!
}

#
# User Events
#

interface UserEvent {
    seq: Int!
}

type UserEventMessage implements UserEvent {
    seq: Int!
    unread: Int!
    globalUnread: Int!
    conversationId: ID!
    message: ConversationMessage!
    conversation: Conversation!
    isOut: Boolean!
    repeatKey: String
}

type UserEventOwnMessage implements UserEvent {
    seq: Int!
    conversationId: ID!
    message: ConversationMessage!
}

type UserEventRead implements UserEvent {
    seq: Int!
    unread: Int!
    globalUnread: Int!
    conversationId: ID!
}

#
# Conversation List
#

type ConversationConnection {
    conversations: [Conversation!]!
    counter: NotificationCounter!
    seq: Int!
    next: String
}

type NotificationCounter {
    id: ID!
    unreadCount: Int!
}

type ChatReadResult {
    conversation: Conversation!
    counter: NotificationCounter!
}

extend type Mutation {
    superCreateChat(title: String!): Conversation!
    alphaSendMessage(conversationId: ID!, message: String, file: String, repeatKey: String): ConversationEventMessage!
    alphaReadChat(conversationId: ID!, messageId: ID!): ChatReadResult!
}

extend type Query {
    alphaChats(first: Int!, after: String): ConversationConnection!
    alphaNotificationCounter: NotificationCounter!
    alphaChat(conversationId: ID!): Conversation!
    alphaLoadMessages(conversationId: ID!): ConversationState!
}

extend type Subscription {
    alphaChatSubscribe(conversationId: ID!, fromSeq: Int): ConversationEvent!
    alphaNotificationCounterSubscribe: NotificationCounter!
    alphaSubscribeEvents(fromSeq: Int): UserEvent!
}