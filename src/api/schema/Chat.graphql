
#
# Types Of Conversations
#

interface Conversation {
    id: ID!
    flexibleId: ID!
    title: String!
    photos: [String!]!
    unreadCount: Int!
    topMessage: ConversationMessage
}

type AnonymousConversation implements Conversation {
    id: ID!
    flexibleId: ID!
    title: String!
    photos: [String!]!
    unreadCount: Int!
    topMessage: ConversationMessage
}

type SharedConversation implements Conversation {
    id: ID!
    flexibleId: ID!
    title: String!
    photos: [String!]!
    organizations: [Organization!]!
    unreadCount: Int!
    topMessage: ConversationMessage
    organization: Organization
}

type PrivateConversation implements Conversation {
    id: ID!
    flexibleId: ID!
    title: String!
    photos: [String!]!
    user: User!
    unreadCount: Int!
    topMessage: ConversationMessage
    blocked: Boolean!
}

type GroupConversation implements Conversation {
    id: ID!
    flexibleId: ID!
    title: String!
    photos: [String!]!
    members: [User!]!
    unreadCount: Int!
    topMessage: ConversationMessage
    membersCount: Int!
}

#
# Messaging Contents
#

type InviteServiceMetadata {
    users: [User!]
    invitedBy: User!
}

type KickServiceMetadata {
    user: User!
    kickedBy: User!
}

type TitleChangeServiceMetadata {
    title: String!
}

type UrlAugmentation {
    url: String!
    title: String
    date: String
    subtitle: String
    description: String
    photo: ImageRef
}

union ServiceMetadata = InviteServiceMetadata | KickServiceMetadata | TitleChangeServiceMetadata

type ConversationMessage {
    id: ID!
    message: String
    file: String
    fileMetadata: FileMetadata
    sender: User!
    date: Date!
    repeatKey: String
    isService: Boolean!
    serviceMetadata: ServiceMetadata
    urlAugmentation: UrlAugmentation
    edited: Boolean!
}

type FileMetadata {
    name: String!
    mimeType: String
    size: Int!
    isImage: Boolean!
    imageWidth: Int
    imageHeight: Int
    imageFormat: String
}

#
# Conversation Events
#

interface ConversationEvent {
    seq: Int!
}

type ConversationEventMessage implements ConversationEvent {
    seq: Int!
    message: ConversationMessage!
}

type ConversationEventEditMessage implements ConversationEvent {
    seq: Int!
    message: ConversationMessage!
}

type ConversationEventDelete implements ConversationEvent {
    seq: Int!
    messageId: ID!
}

type ConversationEventNewMembers implements ConversationEvent {
    seq: Int!
    users: [User!]
    invitedBy: User!
}

type ConversationEventKick implements ConversationEvent {
    seq: Int!
    user: User!
    kickedBy: User!
}

type ConversationEventTitle implements ConversationEvent {
    seq: Int!
    title: String!
}

type ConversationEventUpdateRole implements ConversationEvent {
    seq: Int!
    user: User!
    newRole: String!
}

type ConversationState {
    seq: Int!
    messages: [ConversationMessage!]!
}

#
# User Events
#

interface UserEvent {
    seq: Int!
}

type UserEventMessage implements UserEvent {
    seq: Int!
    unread: Int!
    globalUnread: Int!
    conversationId: ID!
    message: ConversationMessage!
    conversation: Conversation!
    isOut: Boolean!
    repeatKey: String
}

type UserEventEditMessage implements UserEvent {
    seq: Int!
    message: ConversationMessage!
}

type UserEventOwnMessage implements UserEvent {
    seq: Int!
    conversationId: ID!
    message: ConversationMessage!
}

type UserEventRead implements UserEvent {
    seq: Int!
    unread: Int!
    globalUnread: Int!
    conversationId: ID!
}

type UserEventTitleChange implements UserEvent {
    seq: Int!
    title: String!
}

type UserEventNewMembersCount implements UserEvent {
    seq: Int!
    conversationId: ID!
    membersCount: Int!
}

#
# Conversation List
#

type ConversationConnection {
    conversations: [Conversation!]!
    counter: NotificationCounter!
    seq: Int!
    next: String
}

type NotificationCounter {
    id: ID!
    unreadCount: Int!
}

type ChatReadResult {
    conversation: Conversation!
    counter: NotificationCounter!
}

union ComposeSearchResult = User | Organization

type TypingEvent {
    conversation: Conversation!
    user: User!
    type: String!
    cancel: Boolean!
}

type GroupConversationMember {
    user: User!
    role: String! # member | creator | admin
}

input GroupConversationInvite {
    userId: ID!
    role: String! # member | creator | admin
}

type GroupChatUpdateResponse {
    chat: Conversation!

    chatEventMessage: ConversationEventMessage
    chatEvent: ConversationEvent

    userEventMessage: UserEventMessage
    userEvent: UserEvent
}

type ConversationBlockedUser{
    user: User!
    blockedBy: User!
}

extend type Query {
    alphaChats(first: Int!, after: String): ConversationConnection!
    alphaNotificationCounter: NotificationCounter!
    alphaChat(conversationId: ID!): Conversation!
    alphaLoadMessages(conversationId: ID!, first: Int, before: ID, after: ID): ConversationState!
    alphaChatsSearchForCompose(query: String, organizations: Boolean): [ComposeSearchResult!]!
    alphaChatSearch(members: [ID!]!): Conversation
    alphaGroupConversationMembers(conversationId: ID!): [GroupConversationMember!]!
    alphaBlockedList(conversationId: ID): [ConversationBlockedUser!]!
    alphaChatTextSearch(query: String!): [Conversation!]!

    alphaFilePreviewLink(uuid: String!): String
}

extend type Mutation {
    superCreateChat(title: String!): Conversation!
    alphaSendMessage(conversationId: ID!, message: String, file: String, repeatKey: String): ConversationEventMessage!
    alphaEditMessage(messageId: ID!, message: String): ConversationEventEditMessage!
    alphaReadChat(conversationId: ID!, messageId: ID!): ChatReadResult!
    alphaGlobalRead(toSeq: Int): String!

    alphaSetTyping(conversationId: ID!, type: String): String!

    #
    # Groups
    #

    alphaChatCreateGroup(title: String, members: [ID!]!, message: String): Conversation!
    alphaChatChangeGroupTitle(conversationId: ID!, title: String!): GroupChatUpdateResponse!
    alphaChatInviteToGroup(conversationId: ID!, invites: [GroupConversationInvite!]!): GroupChatUpdateResponse!
    alphaChatKickFromGroup(conversationId: ID!, userId: ID!): GroupChatUpdateResponse!
    alphaChatChangeRoleInGroup(conversationId: ID!, userId: ID!, newRole: String!): GroupChatUpdateResponse!
    alphaChatCopyGroup(conversationId: ID!, title: String, extraMembers: [ID!], message: String!): GroupChatUpdateResponse!

    #
    # BlackList
    #

    alphaBlockUser(userId: ID!): String!
    alphaUnblockUser(userId: ID!, conversationId: ID): String!
}

extend type Subscription {
    alphaChatSubscribe(conversationId: ID!, fromSeq: Int): ConversationEvent!
    alphaNotificationCounterSubscribe: NotificationCounter!
    alphaSubscribeEvents(fromSeq: Int): UserEvent!

    alphaSubscribeTypings: TypingEvent!
    alphaSubscribeChatTypings(conversationId: ID!): TypingEvent!
}