type Parcel {
    id: ID!
    title: String!
    geometry: String
    center: Geo
    block: Block
    addresses: [StreetNumber!]!
    city: City!
    permits: [Permit!]!

    likes: Likes!

    extrasArea: Int
    extrasAssessorArea: Int
    extrasAssessorFront: Int
    extrasAssessorDepth: Int

    extrasZoning: [String!]
    extrasSupervisorDistrict: String
    extrasLandValue: Int
    extrasImprovementValue: Int
    extrasPropertyValue: Int
    extrasFixturesValue: Int

    extrasYear: Int

    extrasStories: Int
    extrasUnits: Int
    extrasRooms: Int
    extrasBathrooms: Int
    extrasBedrooms: Int
    extrasNeighborhood: String
    extrasBorough: String
    extrasVacant: Boolean

    extrasMetroDistance: Int
    extrasMetroStation: String

    extrasTrainDistance: Int
    extrasTrainStation: String

    extrasTrainLocalDistance: Int
    extrasTrainLocalStation: String

    extrasNearestTransitDistance: Int
    extrasNearestTransitType: String
    extrasNearestTransitStation: String

    extrasLandUse: [String!]
    extrasSalesDate: String
    extrasSalesPriorDate: String
    extrasRecordationDate: String

    extrasAddress: String
    extrasOwnerName: String
    extrasOwnerType: OwnerType

    extrasShapeType: String
    extrasShapeSides: [Float!]
    extrasFitProjects: [String!]
    extrasAnalyzed: Boolean

    metadata: ParcelMetadata!

    compatibleBuildings: [BuildingLocation!]

    opportunity: Opportunity

    userData: ParcelUserData
}

type ParcelUserData {
    notes: String
}

type BuildingLocation {
    key: String!
    title: String!
    width: Float!
    height: Float!
    center: Geo
    angle: Float
    shape: String
} 

enum OwnerType {
    CITY
    MIXED
    PRIVATE
    OTHER
    EXCLUDED
}

enum ParcelUse {
    PARKING
    STORAGE
}

type ParcelMetadata {
    description: String
    currentUse: ParcelUse
    available: Boolean
    isOkForTower: Boolean
}

input ParcelInput {
    id: String!
    displayId: [String!]
    blockId: String
    geometry: [[[[Float]]]]
    extras: ExtrasInput
    addresses: [StreetNumberInfo!]
    related: [String!]
    retired: Boolean
}

type ParcelEdge {
    node: Parcel!
    cursor: String!
}

type ParcelConnection {
    edges: [ParcelEdge!]!
    pageInfo: PageInfo!
}

input ParcelMetadataInput {
    description: String
    currentUse: ParcelUse
    available: Boolean
    isOkForTower: Boolean
}

type Block {
    id: ID!
    title: String!
    geometry: String
    extrasArea: Int
    extrasZoning: [String!]
    extrasSupervisorDistrict: String
    parcels: [Parcel!]!
}

input BlockInput {
    id: String!
    displayId: [String!]
    geometry: [[[[Float]]]]
    extras: ExtrasInput
    retired: Boolean
}

type BlockEdge {
    node: Block!
    cursor: String!
}

type BlockConnection {
    edges: [BlockEdge!]!
    pageInfo: PageInfo!
}

type ParcelSearchResult {
    edges: [ParcelResult!]!
    total: Int!
}
type ParcelResult {
    node: Parcel!
    score: Float!
    highlight: [SearchHighlight!]!
}

extend type SearchResult {
    parcels: ParcelSearchResult!
}
