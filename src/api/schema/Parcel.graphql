type ParcelNumber {
    borough: String
    boroughId: String
    block: String
    blockPadded: String
    lot: String
    lotPadded: String
    title: String!
}
enum SourceKind {
    INTERNAL,
    EXTERNAL
}

type DataFloat {
    value: Float!
    source: SourceKind!
}

type Parcel {
    id: ID!
    number: ParcelNumber!

    # Deprecated
    title: String!
    block: Block

    # Geometry
    geometry: String
    center: Geo
    area: DataFloat
    front: DataFloat
    depth: DataFloat
    
    # Deprecated geometry
    extrasArea: Float
    extrasAssessorArea: Float
    extrasAssessorFront: Float
    extrasAssessorDepth: Float
    extrasShapeType: String
    extrasShapeSides: [Float!]

    # Metadata
    links: [Link!]!
    metadata: ParcelMetadata!

    # Addresses
    city: City!
    address: String
    addresses: [StreetNumber!]!
    extrasAddress: String

    # Analyzis
    analyzed: Boolean
    compatibleBuildings: [BuildingLocation!]
    extrasAnalyzed: Boolean
    extrasFitProjects: [String!]

    # User Data
    userData: ParcelUserData
    likes: Likes!

    # Linked Data
    opportunity: Opportunity
    permits: [Permit!]!

    # Bunch of unsorted experimental data
    extrasZoning: [String!]
    extrasSupervisorDistrict: String
    extrasLandValue: Int
    extrasImprovementValue: Int
    extrasPropertyValue: Int
    extrasFixturesValue: Int
    extrasYear: Int
    extrasStories: Int
    extrasUnits: Int
    extrasRooms: Int
    extrasBathrooms: Int
    extrasBedrooms: Int
    extrasNeighborhood: String
    extrasBorough: String
    extrasVacant: Boolean
    extrasMetroDistance: Int
    extrasMetroStation: String
    extrasTrainDistance: Int
    extrasTrainStation: String
    extrasTrainLocalDistance: Int
    extrasTrainLocalStation: String
    extrasNearestTransitDistance: Int
    extrasNearestTransitType: String
    extrasNearestTransitStation: String
    extrasLandUse: [String!]
    extrasSalesDate: String
    extrasSalesPriorDate: String
    extrasRecordationDate: String
    extrasOwnerName: String
    extrasOwnerType: OwnerType
    extrasOwnerPublic: Boolean
    extrasUnitCapacity: Int
    extrasUnitCapacityFar: Float
    extrasUnitCapacityDencity: Float
}

type Link {
    type: String!
    title: String!
    url: String!
}

type ParcelUserData {
    notes: String
}

type BuildingLocation {
    key: String!
    title: String!
    width: Float!
    height: Float!
    center: Geo
    angle: Float
    shape: String
} 

enum OwnerType {
    CITY
    MIXED
    PRIVATE
    OTHER
    EXCLUDED
}

enum ParcelUse {
    PARKING
    STORAGE
}

type ParcelMetadata {
    description: String
    currentUse: ParcelUse
    available: Boolean
    isOkForTower: Boolean
}

input ParcelInput {
    id: String!
    displayId: [String!]
    blockId: String
    geometry: [[[[Float]]]]
    extras: ExtrasInput
    addresses: [StreetNumberInfo!]
    related: [String!]
    retired: Boolean
}

type ParcelEdge {
    node: Parcel!
    cursor: String!
}

type ParcelConnection {
    edges: [ParcelEdge!]!
    pageInfo: PageInfo!
}

input ParcelMetadataInput {
    description: String
    currentUse: ParcelUse
    available: Boolean
    isOkForTower: Boolean
}

type Block {
    id: ID!
    title: String!
    geometry: String
    extrasArea: Int
    extrasZoning: [String!]
    extrasSupervisorDistrict: String
    parcels: [Parcel!]!
}

input BlockInput {
    id: String!
    displayId: [String!]
    geometry: [[[[Float]]]]
    extras: ExtrasInput
    retired: Boolean
}

type BlockEdge {
    node: Block!
    cursor: String!
}

type BlockConnection {
    edges: [BlockEdge!]!
    pageInfo: PageInfo!
}

type ParcelSearchResult {
    edges: [ParcelResult!]!
    total: Int!
}
type ParcelResult {
    node: Parcel!
    score: Float!
    highlight: [SearchHighlight!]!
}

extend type SearchResult {
    parcels: ParcelSearchResult!
}
