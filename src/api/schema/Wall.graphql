interface WallEntity {
    id: ID!
    creationTime: Int!
    creator: User!
    lastEditor: User
    isPinned: Boolean!
}

type PostLinkInfo {
    url: String
    title: String
    description: String
    imageURL: String
}

type PostLink {
    text: String!
    url: String!
    extraInfo: PostLinkInfo
}

input PostLinkInput {
    text: String!
    url: String!
}

type WallPost implements WallEntity {
    id: ID!
    creationTime: Int!
    creator: User!
    lastEditor: User
    isPinned: Boolean!

    text: String!
    type: String! ## NEWS | UPDATE
    tags: [String!]
    links: [PostLink!]
}

input WallPostInput {
    isPinned: Boolean!

    text: String!
    type: String! ## NEWS | UPDATE
    tags: [String!]
    links: [PostLinkInput!]
}

type WallEntityEdge {
    node: WallEntity!
    cursor: String!
}

type WallEntityConnection {
    edges: [WallEntityEdge!]!
    pageInfo: PageInfo!
    isPinned: Boolean!
}

extend type Query {
    wall(
        orgId: ID!
        first: Int!,
        after: String,
        page: Int
    ): WallEntityConnection

    wallMyOrg(
        first: Int!,
        after: String,
        page: Int
    ): WallEntityConnection

    wallEntity(id: ID!): WallEntity
}

extend type Mutation {

    wallAddPost(input: WallPostInput): WallPost!

    wallEditPost(id: ID!, input: WallPostInput): WallPost

    wallDeleteEntity(id: ID!): String!

    wallPin(id: ID!): String!

    wallUnpin(id: ID!): String!
}